<pre class="metadata">
Title: CSS Multi-column Layout Module Level 1
Group: CSSWG
Shortname: css-multicol
Level: 1
Status: ED
Prepare for TR: no
Implementation Report: https://test.csswg.org/harness/results/css-multicol-1_dev/grouped/
Work Status: Testing
WPT Path Prefix: /css/css-multicol/
WPT Display: closed
ED: https://drafts.csswg.org/css-multicol/
TR: https://www.w3.org/TR/css-multicol-1/
Previous Version: https://www.w3.org/TR/2021/CR-css-multicol-1-20211012/
Previous Version: https://www.w3.org/TR/2021/WD-css-multicol-1-20210212/
Previous Version: https://www.w3.org/TR/2019/WD-css-multicol-1-20191015/
Previous Version: https://www.w3.org/TR/2018/WD-css-multicol-1-20180528/
Previous Version: https://www.w3.org/TR/2017/WD-css-multicol-1-20171005/
Previous Version: https://www.w3.org/TR/2011/CR-css3-multicol-20110412/
Previous Version: https://www.w3.org/TR/2009/CR-css3-multicol-20091217/
Previous Version: https://www.w3.org/TR/2009/WD-css3-multicol-20090630/
Previous Version: https://www.w3.org/TR/2007/WD-css3-multicol-20070606/
Previous Version: https://www.w3.org/TR/2005/WD-css3-multicol-20051215/
Previous Version: https://www.w3.org/TR/2001/WD-css3-multicol-20010118/
Previous Version: http://www.w3.org/1999/06/WD-css3-multicol-19990623
Editor: Florian Rivoal, On behalf of Bloomberg, https://florian.rivoal.net, w3cid 43241
Editor: Rachel Andrew, Google, rachelandrew@google.com, w3cid 81117
Former Editor: HÃ¥kon Wium Lie, Opera Software, howcome@opera.com, w3cid 9796
Issue Tracking: Disposition of Comments https://drafts.csswg.org/css-multicol-1/issues
Abstract: This specification describes multi-column layouts in CSS, a style sheet language for the web. Using functionality described in the specification, content can be flowed into multiple columns with a gap and a rule between them.
Link Defaults: css-color (property) color, css21 (property) max-height, css-backgrounds-3 (value) hidden
Include Can I Use Panels: yes
</pre>

<pre class="link-defaults">
spec:css-sizing-3; type:property; text:min-height
spec:css-break-4; type:dfn; text:fragment
spec:css-align-3; type:property; text:column-gap
spec:css-align-3; type:value; for:column-gap; text:normal
spec:css-display-3; type:property; text:display
</pre>

<style type="text/css">
.cols { width: 500px; height: 200px; background: #fff; position: relative; border: solid 5px blue; margin: 0.5em 2em 1em 0; font: bold 14px/19px Arial, sans-serif }
.cols p { padding: 3px; margin: 0 }
.col { position: absolute; left: 0px; top: 0; z-index: 6; width: 170px }
.gap { position: absolute; background: green; width: 5px; bottom: 0px; top: 0px; border: 10px solid yellow; border-top-width: 0; border-bottom-width: 0;  }
.rep { position: absolute; top: 45px; background: black; height: 110px; width: 100px;  color: white; z-index: 4 }

table.breaks { border-collapse: collapse; margin: 1em 0 }
table.breaks td, table.breaks th { border: thin solid black; padding: 0.1em 0.2em }

div.example:before { width: 9em }
</style>

<h2 id="introduction">
Introduction</h2>

	(This section is not normative.)

	This module describes <dfn export>multi-column layout</dfn> in CSS.
	By using functionality described in this document,
	style sheets can declare that the content of an element
	is to be laid out in multiple columns.

	Other layout methods in CSS,
	when applied to a parent element,
	change the display properties of the direct children.
	For example if a three column grid layout is created,
	the direct children of the [=grid container=] become [=grid items=]
	and are placed into the column tracks,
	one element per cell with additional rows created as needed.

	The child elements of a [=multi-column container=] however continue in normal flow,
	that flow is arranged into a number of columns.
	These columns have a flexible inline size,
	and therefore respond to available space
	by changing the size or number of columns displayed.

	Multi-column layouts are easy to describe in CSS.
	Here is a simple example:

	<div class=example>
		<pre highlight="css">body { column-width: 12em }</pre>

		In this example, the <code class=html>body</code> element is
		set to have columns at least ''12em'' wide. The exact number of
		columns will depend on the available space.
	</div>

	The number of columns can also be set explicitly in the style sheet:

	<div class=example>
		<pre highlight="css">body { column-count: 2 }</pre>

		In this case, the number of columns is fixed
		and the column widths will vary depending on the available width.
	</div>

	The shorthand 'columns' property can be used to set either,
	or both, properties in one declaration.

	<div class=example>
		In these examples, the number of columns, the width of columns, and
		both the number and width are set, respectively:

		<pre highlight="css">
		body { columns: 2 }
		body { columns: 12em }
		body { columns: 2 12em }
		</pre>

	</div>

	Another group of properties introduced in this module describe
	gaps and rules between columns.

	<div class=example>
		<pre highlight="css">
		body {
			column-gap: 1em;
			column-rule: thin solid black;
		}
		</pre>

		The first declaration in the example above sets the gap
		between two adjacent columns to be 1em.
		Column gaps are similar to padding areas.
		In the middle of the gap there will be a rule
		which is described by the 'column-rule' property.
	</div>

	The values of the 'column-rule' property are similar to those of the CSS 'border' properties.
	Like 'border', 'column-rule' is a shorthand property.

	<div class=example>
		In this example, the shorthand 'column-rule' declaration from the
		above example has been expanded:

		<pre highlight="css">
		body {
			column-gap: 1em;
			column-rule-width: thin;
			column-rule-style: solid;
			column-rule-color: black;
		}
		</pre>
	</div>

	The 'column-fill' and 'column-span' properties
	give style sheets a wider range of visual expressions in multi-column layouts.

	<div class=example>
		In this example, columns are set to be balanced,
		i.e., to have approximately the same length.
		Also, <code>h2</code> elements are set to span across all columns.

		<pre highlight="css">
		div { column-fill: balance }
		h2 { column-span: all }
		</pre>
	</div>

	This specification introduces ten new properties,
	all of which are used in the examples above.

	If all column properties have their initial value,
	the layout of an element will be identical
	to a multi-column layout with only one column.

	<div class="example">
		<a>Column gaps</a> (diagonal hatching) and <a>column rules</a>
		are shown in this sample rendition of a multi-column container
		with padding (cross hatching).
		The hatched areas are present for illustrational purposes only.
		In actual implementations these areas will be determined by the background,
		the second image shows a rendering of a [=multi-column container=] with column-rules.

		<figure>
			<img alt="a diagram showing the various parts of multi-column layout" src="images/initial-example.svg" no-autosize>
			<img alt="key to the conventions used to display invisible parts of diagram" src="images/invisible-elements.svg" no-autosize>
			<figcaption>A multi-column layout with the non-visible column-span and padding inside the multicol container highlighted.</figcaption>
		</figure>

		<figure>
			<img alt="a diagram showing the various parts of multi-column layout" src="images/initial-example-b.svg" no-autosize>
			<figcaption>The same layout as in the first image, as it would be displayed by an implementation.</figcaption>
		</figure>
	</div>

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS21]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

<h2 id="the-multi-column-model">
The Multi-Column Model</h2>

	An element whose 'column-width' or 'column-count' property is not ''column-width/auto''
	establishes a <dfn lt="multi-column container|multicol container" oldids="multi-column-element" export>multi-column container</dfn>
	(or <i>multicol container</i> for short),
	and therefore acts as a container for [=multi-column layout=].

	<wpt title="Basic multicol tests.">
	multicol-basic-002.html
	multicol-basic-004.html
	</wpt>

	<wpt title="Tests demonstrating that auto values do not create a multicol container.">
	multicol-count-computed-004.xht
	</wpt>

	<wpt title="Multicol properties do not inherit.">
	inheritance.html
	</wpt>

	<wpt title="Multicol with scrolled columns.">
	multicol-scroll-content.html
	</wpt>

	<wpt title="Multicol with zero height.">
	multicol-zero-height-001.xht
	multicol-zero-height-002.html
	multicol-zero-height-003.html
	</wpt>

	In the traditional CSS box model,
	the content of an element is
	flowed into the content box of the corresponding element.
	Multi-column layout introduces a [=fragmentation context=]
	formed of <a lt="anonymous box">anonymous</a> [=fragmentation containers=]
	called <dfn export lt="column box" local-lt=column>column boxes</dfn>
	(or <i>columns</i> for short).
	These [=column boxes=] establish
	an independent [=block formatting context=]
	into which the multi-column container's content flows,
	and form the [=containing block=] for its non-positioned children.

	<div class=example>
		In this example, the width of the image is set with these rules:

		<pre highlight="css">
		img {
			display: block;
			width: 100%;
		}
		</pre>

		Given that the column box creates a new [=block formatting context=],
		the 'width' is calculated relative to the column box.
		Therefore the image will not overflow the column box:

		<figure>
			<img src="images/image-inside-column.svg" alt="an image contained inside a column box" no-autosize>
			<figcaption>The image is constrained by the column box that it is displayed in.</figcaption>
		</figure>
	</div>

	<div class="example">
		Given that the column box creates a new [=block formatting context=], a top margin set on the first child element of a multicol container will not collapse with the margins of the multicol container.

		<figure>
			<img src="images/margins-do-not-collapse.svg" alt="The first paragraph has a 'margin-top' of ''1em'', which appears before the text." no-autosize>
			<figcaption>The margin above the first paragraph has not collapsed, leaving a ''1em'' margin above the first line in the multicol container.</figcaption>
		</figure>
	</div>

	<wpt>
	multicol-margin-001.xht
	multicol-margin-002.xht
	multicol-margin-003.html
	multicol-margin-child-001.xht
	multicol-nested-margin-001.xht
	multicol-nested-margin-002.xht
	multicol-nested-margin-003.xht
	multicol-nested-margin-004.xht
	multicol-nested-margin-005.xht
	multicol-collapsing-001.xht
	</wpt>

	Floats that appear inside multi-column layouts are positioned with
	regard to the [=column box=] where the float appears.

	<div class="example">
		In this example, this CSS fragment describes the presentation of the image:

		<pre highlight="css">
		img {
			display: block;
			float: right;
		}
		</pre>

		In the HTML, the image appears after the sentence ending, "the leg of a chicken".

		<figure>
			<img src="images/image-floated-in-column.svg" alt="an image floated and contained inside a column box" no-autosize>
			<figcaption>The image is floated inside the column box it appears in.</figcaption>
		</figure>
	</div>

	Content overflowing a [=column box=] in the [=block axis=]
	[=fragments=] and continues in the next [=column box=].

	Note: Column boxes, which are [=anonymous boxes=],
	do not become the [=containing block=]
	for [=absolutely positioned boxes=].
	The 'position' property, which establishes a containing block for such boxes,
	applies to the [=multicol container=], it being the [=principal box=].

	<wpt>
	multicol-containing-001.xht
	multicol-containing-002.xht
	multicol-containing-003.xht
	multicol-containing-003.html
	multicol-contained-absolute.html
	abspos-autopos-contained-by-viewport-000.html
	abspos-autopos-contained-by-viewport-001.html
	abspos-multicol-in-second-outer-clipped.html
	</wpt>

	<div class="example">
		In this example, the [=multi-column container=] has ''position: relative''
		thus becoming the containing block.
		The image is a direct child of the [=multi-column container=]
		and has ''position: absolute''.
		It takes positioning from the [=multi-column container=]
		and not from the [=column box=].

		<pre highlight="css">
		.container {
			position: relative;
			column-count: 3;
		}
		img {
			position: absolute;
			top: 20px;
			left: 40px;
		}
		</pre>

		<figure>
			<img src="images/column-not-containing-block.svg" alt="The absolutely positioned image is positioned by reference to the [=multi-column container=] not the [=column box=]." no-autosize>
			<figcaption>The figure demonstrates that the absolutely positioned image is positioned by reference to the multicol container and not the column box.</figcaption>
		</figure>
	</div>

	Out-of-flow descendants of a [=multi-column container=] do affect column balancing,
	and the block-size of the [=multi-column container=].

	<wpt>
	multicol-oof-inline-cb-001.html
	multicol-oof-inline-cb-002.html
	</wpt>

	The column boxes are ordered
	in the [=inline base direction=] of the multicol container
	and arranged into <dfn lt="multi-column line | multi-col line | multicol line">multicol lines</dfn>.
	The <dfn export>column width</dfn> is the length of the column box in the inline direction.
	The <dfn export>column height</dfn> is the length of the column box in the block direction.
	All column boxes in a line have the same column width,
	and all column boxes in a line have the same column height.

	<wpt title="The following tests relate to baseline alignment of the content of columns, 
	though this is not defined in this specification.">
	baseline-000.html
	baseline-001.html
	baseline-002.html
	baseline-003.html
	baseline-004.html
	baseline-005.html
	baseline-006.html
	baseline-007.html
	baseline-008.html
	crashtests/as-baseline-aligned-grid-item.html
	</wpt>

	<wpt title="The following tests check the behavior of list items that are also muticol containers.">
	multicol-list-item-001.xht
	multicol-list-item-002.html
	multicol-list-item-003.html
	multicol-list-item-004.html
	multicol-list-item-005.html
	multicol-list-item-006.html
	multicol-list-item-007.html
	multicol-list-item-008.html
	</wpt>

	<wpt title="Testing grid items inside multicol">
    balance-grid-001.html
	</wpt>

	<wpt title="The following tests check the behavior of table elements.">
	table/multicol-table-cell-001.xht
	table/multicol-table-cell-height-001.xht
	table/multicol-table-cell-height-002.xht
	table/multicol-table-cell-vertical-align-001.xht
	table/table-cell-as-multicol.html
	table/table-cell-content-change-000.html
	table/table-cell-content-change-001.html
	table/table-cell-multicol-nested-001.html
	table/table-cell-multicol-nested-002.html
	table/table-cell-multicol-nested-003.html
	crashtests/break-before-multicol-caption.html
	crashtests/table-cell-writing-mode-root.html
	table/balance-breakafter-before-table-section-crash.html
	table/balance-table-with-border-spacing.html
	table/balance-table-with-fractional-height-row.html
	</wpt>

	<wpt title="The following tests check that paint order is correct.">
	float-and-block.html
	move-with-text-after-paint.html
	resize-with-text-after-paint.html
	</wpt>

	<wpt title="The following tests relate to animation or transformation of multicol properties.">
	animation/column-width-interpolation.html
	animation/discrete-no-interpolation.html
	multicol-overflow-positioned-transform-001.html
	multicol-overflow-transform-001.html
    resize-multicol-with-fixed-size-children.html
	resize-in-strict-containment-nested.html
	remove-child-in-strict-containment-also-spanner.html
	composited-under-clip-under-multicol.html
	change-intrinsic-width.html
	change-fragmentainer-size-000.html
	change-fragmentainer-size-001.html
	change-fragmentainer-size-002.html
	change-fragmentainer-size-003.html
	hit-test-child-under-perspective.html
	hit-test-transformed-child.html
	</wpt>

	<wpt title="Tests related to implementation bugs, not linked to specific normative text.">
	crashtests/multicol-with-monolithic-oof-with-multicol-with-oof.html
	crashtests/chrome-bug-1293905.html
	crashtests/chrome-bug-1297118.html
	crashtests/chrome-bug-1301281.html
	crashtests/chrome-bug-1303256.html
	crashtests/chrome-bug-1314866.html
	crashtests/dynamic-simplified-layout-break-propagation.html
	crashtests/float-multicol-crash.html
	change-abspos-width-in-second-column-crash.html
	change-out-of-flow-type-and-remove-inner-multicol-crash.html
	crashtests/monolithic-oof-in-clipped-container.html
	crashtests/move-linebreak-to-different-column.html
	crashtests/move-newline-pre-text.html
	crashtests/multicol-at-page-boundary-print.html
	crashtests/multicol-block-in-inline-crash.html
	crashtests/multicol-cached-consumed-bsize-crash.html
	crashtests/multicol-column-change-crash.html
	crashtests/multicol-dynamic-contain-crash.html
	crashtests/multicol-dynamic-transform-crash.html
	crashtests/multicol-floats-in-ifc.html
	crashtests/multicol-parallel-flow-after-spanner-in-inline.html
	crashtests/outline-move-oof-with-inline.html
	crashtests/relpos-inline-with-abspos-multicol-gets-block-child.html
	crashtests/size-containment-become-multicol-add-inline-child.html
	crashtests/sticky-in-abs-in-sticky.html
	crashtests/vertical-rl-column-rules-wide-columns.html
	dynamic-become-multicol-add-oof-inside-inline-crash.html
	extremely-tall-multicol-with-extremely-tall-child-crash.html
	file-control-crash.html
	img-alt-as-multicol-crash.html
	overflow-scroll-in-multicol-crash.html
	remove-block-sibling-of-inline-with-block-crash.html
	subpixel-scroll-crash.html
	text-child-crash.html
	with-custom-layout-on-same-element-crash.https.html
	crashtests/oof-in-area-001.html
	crashtests/oof-in-area-002.html
	crashtests/oof-in-area-003.html
	crashtests/oof-in-oof-multicol-in-multicol-spanner-in-multicol.html
	crashtests/oof-in-oof-multicol-in-relpos-in-oof-in-multicol-in-multicol.html
	crashtests/oof-in-oof-multicol-in-relpos-spanner-in-multicol-in-relpos-multicol-in-multicol.html
	crashtests/oof-in-oof-multicol-in-relpos-spanner-in-spanner-multicol-in-multicol-in-multicol.html
	crashtests/oof-in-oof-multicol-in-spanner-in-multicol-in-spanner-in-nested-multicol.html
	crashtests/oof-in-oof-multicol-in-spanner-in-nested-multicol.html
	crashtests/oof-in-relpos-in-oof-multicol-in-oof-in-relpos-in-oof-multicol-in-multicol.html
	crashtests/oof-in-relpos-in-oof-multicol-in-relpos-in-oof-multicol-in-relpos-multicol.html
	crashtests/floated-input-in-inline-next-column.html
	crashtests/inline-float-parallel-flow.html
	crashtests/table-caption-in-clipped-overflow.html
	crashtests/text-in-inline-interrupted-by-float.html
	increase-prev-sibling-height.html
	crashtests/interleaved-bfc-crash.html
	crashtests/relayout-fixedpos-in-abspos-in-relpos-in-nested-multicol.html
	crashtests/inline-become-oof-container-make-oof-inflow.html
	multicol-dynamic-change-inside-break-inside-avoid-001.html
	multicol-dynamic-add-001.html
	scroll-width-height.tentative.html
	filter-with-abspos.html
	crashtests/add-list-item-marker.html
	</wpt>

	<wpt title="Tests related to printing and paged media as related to multicol.">
	auto-fill-auto-size-001-print.html
	auto-fill-auto-size-002-print.html
	multicol-height-002-print.xht
	named-page.html
	page-property-ignored.html
	</wpt>


	Note: In text set using a vertical writing mode,
	the block direction runs horizontally.
	In a vertical writing mode columns are laid out horizontally,
	and the direction of the flow of blocks may be right to left, or left to right.
	The 'column-width' property therefore refers to the inline size of the column,
	and not the physical horizontal width.

	<div class="example">
		<figure>
			<img alt="The first image shows horizontal text with a LTR inline direction. The second shows vertical text with blocks flowing right to left. The third shows vertical text with blocks flowing left to right." src="images/writing-modes.svg" no-autosize>
			<figcaption>A diagram showing the different ways columns may be arranged due to writing mode.
			<br>From left to right: horizontal-tb, vertical-rl, vertical-lr.</figcaption>
		</figure>
	</div>

	<wpt title="Tests regarding vertical writing modes.">
	orthogonal-writing-mode-shrink-to-fit.html
	multicol-under-vertical-rl-scroll.html
	hit-test-in-vertical-rl.html
	</wpt>

	Within each [=multicol line=] in the multi-column container,
	adjacent column boxes are separated by a <dfn noexport>column gap</dfn>,
	which may contain a <dfn noexport>column rule</dfn>.
	All column gaps in the same multi-column container are equal.
	All column rules in the same multi-column container are also equal, if they appear;
	column rules only appear between columns that both have content.

	In the simplest case a multicol container will contain only one line
	of columns, and the height of each column will be equivalent to the
	used height of the multi-column container's content box.
	However, [=fragmentation=] or [=spanners=]
	can split the content of the [=multi-column container=]
	into multiple [=multicol lines=].

	If the multi-column container is paginated, the height of each column is
	constrained by the page and the content continues in a new line of
	column boxes on the next page; a column box never splits across pages.

	The same effect occurs when a <i>spanning element</i> divides the
	multi-column container: the columns before the spanning element are
	balanced and shortened to fit their content. Content after the
	spanning element then flows into a new, subsequent line of column boxes.

	<div class="example">
		<figure>
			<img alt="a diagram showing a spanning element causing the shortened columns above the element with text continuing in new columns below" src="images/simple-span-example.svg" no-autosize>
			<figcaption>A demonstration of how the spanning element divides the multicol container.</figcaption>
		</figure>
	</div>

	A [=multi-column container=] therefore is a regular [=block container=]
	that establishes a new [=independent formatting context=]
	whose contents consist of a series of
	[=multicol lines=] and multicol spanners.
	Each [=multi-column line=] acts as a [=block-level box=]
	that establishes a <dfn>multi-column formatting context</dfn>
	for its [=column boxes=];
	and each [=spanner=] acts as a [=block-level box=]
	that establishes an [=independent formatting context=]
	with its type depending on its 'display' value as usual.

	Nested multi-column containers are allowed,
	but there may be implementation-specific limits.

	<wpt>
	multicol-nested-002.xht
	multicol-nested-005.xht
	multicol-nested-006.html
	multicol-nested-007.html
	multicol-nested-008.html
	multicol-nested-009.html
	multicol-nested-010.html
	multicol-nested-011.html
	multicol-nested-012.html
	multicol-nested-013.html
	multicol-nested-014.html
	multicol-nested-015.html
	multicol-nested-016.html
	multicol-nested-017.html
	multicol-nested-018.html
	multicol-nested-019.html
	multicol-nested-020.html
	multicol-nested-021.html
	multicol-nested-022.html
	multicol-nested-023.html
	multicol-nested-024.html
	multicol-nested-025.html
	multicol-nested-026.html
	multicol-nested-027.html
	multicol-nested-028.html
	multicol-nested-029.html
	multicol-nested-030.html
	multicol-nested-031.html
	crashtests/nested-as-balanced-legend.html
	crashtests/nested-as-nested-balanced-legend.html
	crashtests/nested-floated-multicol-with-tall-margin.html
	crashtests/nested-multicol-and-float-with-tall-padding-before-float.html
	crashtests/nested-multicol-and-float-with-tall-padding.html
	crashtests/nested-multicol-fieldset-tall-trailing-border-freeze.html
	crashtests/nested-multicol-fieldset-tall-trailing-padding.html
	crashtests/nested-multicol-in-svg-foreignobject.html
	crashtests/nested-multicol-nested-flex.html
	crashtests/nested-multicol-with-float-between.html
	crashtests/nested-oof-multicol-with-monolithic-child.html
	crashtests/nested-oof-multicol-with-oof-needing-additional-columns.html
	crashtests/nested-oof-multicol-with-padding.html
	crashtests/nested-with-fragmented-oof-negative-top-offset.html
	crashtests/nested-with-multicol-table-caption.html
	crashtests/multicol-table-caption-parallel-flow-after-spanner-in-inline.html
	crashtests/nested-with-multicol-table-cell.html
	crashtests/nested-with-oof-inside-fixed-width.html
	crashtests/nested-with-percentage-size-and-oof.html
	crashtests/nested-with-tall-padding-and-oof.html
	crashtests/nested-with-tall-padding.html
	crashtests/oof-in-nested-line-float.html
	crashtests/oof-nested-multicol-inside-oof.html
	crashtests/relayout-nested-with-oof.html
	crashtests/repeated-section-in-nested-table-nested-multicol.html
	crashtests/repeated-table-footer-in-caption-nested-multicol.html
	nested-balanced-monolithic-multicol-crash.html
	nested-balanced-very-tall-content-crash.html
	nested-floated-shape-outside-multicol-with-monolithic-child-crash.html
	nested-with-overflowing-padding-crash.html
	triply-nested-with-fixedpos-in-abspos-crash.html
	fixed-in-nested-multicol-with-transform-container.html
	fixed-in-nested-multicol-with-viewport-container.html
	fixed-in-nested-multicol.html
	nested-after-float-clearance.html
	nested-at-outer-boundary-as-fieldset.html
	nested-at-outer-boundary-as-float.html
	nested-at-outer-boundary-as-legend.html
	nested-floated-multicol-with-monolithic-child.html
	nested-oofs-in-relative-multicol.html
	nested-past-fragmentation-line.html
	nested-with-too-tall-line.html
	oof-nested-in-single-column.html
	nested-non-auto-inline-size-offset-top.html
	fixedpos-static-pos-with-viewport-cb-001.html
	fixedpos-static-pos-with-viewport-cb-002.html
	fixedpos-static-pos-with-viewport-cb-003.html
	multicol-height-block-child-001.xht
	</wpt>

	Note: It is not possible to set properties/values on column boxes.
	For example, the background of a certain column box cannot be set
	and a column box has no concept of padding, margin or borders.
	Future specifications may add additional functionality.
	For example, columns of different widths and different backgrounds may be supported.

	Note: Multicol containers with column heights larger than the viewport may pose accessibility issues.
	See <a href="#a11y">Accessibility Considerations</a> for more details.


<h2 id="the-number-and-width-of-columns">
The Number and Width of Columns</h2>

	Finding the number and width of columns is fundamental when laying out multi-column content.
	These properties are used to set the number and width of columns:

	<ul>
		<li>'column-count'</li>
		<li>'column-width'</li>
	</ul>

	A third property, 'columns',
	is a shorthand property which sets both 'column-width' and 'column-count'.

	Other factors, such as explicit column breaks, content, and height constraints,
	may influence the actual number and width of columns.


<h3 id='cw'>The Inline Size of Columns: the 'column-width' property</h3>

	<pre class=propdef>
	Name: column-width
	Value: auto | <<length [0,&infin;]>>
	Initial: auto
	Applies to: <a>block containers</a> except <a>table wrapper boxes</a>
	Inherited: no
	Percentages: N/A
	Computed value: the keyword ''auto'' or an absolute length
	Animation type: by computed value type
	</pre>

	This property describes the width of columns in multicol containers.

	<dl dfn-type=value dfn-for=column-width>
		<dt><dfn>auto</dfn></dt>
		<dd>
			means that the column width will be determined by other properties
			(e.g., 'column-count', if it has a non-auto value).

		<dt><dfn><<length [0,&infin;]>></dfn>
		<dd>
			describes the optimal column width.
			The actual column width may be wider (to fill the available space),
			or narrower (only if the available space is smaller than the specified column width).
			Negative values are not allowed.
			Used values will be clamped to a minimum of ''1px''.

			<wpt>
			zero-column-width-computed-style.html
			zero-column-width-layout.html
			</wpt>
		</dd>
	</dl>

	<wpt>
	multicol-basic-003.html
	multicol-basic-008.xht
	multicol-reduce-000.xht
	multicol-width-001.xht
	multicol-width-002.xht
	multicol-width-003.xht
	multicol-width-005.html
	multicol-width-ch-001.xht
	multicol-width-negative-001.xht
	multicol-width-invalid-001.xht
	multicol-width-large-001.xht
	multicol-width-large-002.xht
	multicol-inherit-003.xht
	parsing/column-width-computed.html
	parsing/column-width-invalid.html
	parsing/column-width-valid.html
	multicol-width-small-001.xht
	</wpt>

	<div class="example">
		For example, consider this style sheet:

		<pre highlight="css">
		div {
			width: 100px;
			column-width: 45px;
			column-gap: 0;
			column-rule: none;
		}
		</pre>

		There is room for two ''45px'' wide columns inside the ''100px'' wide element.
		In order to fill the available space
		the actual column width will be increased to ''50px''.
	</div>

	<div class="example">
		Also, consider this style sheet:

		<pre highlight="css">
		div {
			width: 40px;
			column-width: 45px;
			column-gap: 0;
			column-rule: none;
		}
		</pre>

		The available space is smaller than the specified column width
		and the actual column width will therefore be decreased.
	</div>

	To ensure that 'column-width' can be used with vertical text,
	column width means the length of the line boxes inside the columns.

	Note: The reason for making 'column-width' somewhat flexible
	is to achieve scalable designs that can fit many screen sizes.
	To set an exact column width,
	the column gap and the width of the multicol container (assuming horizontal text)
	must also be specified.


<h3 id='cc'>The Number of Columns: the 'column-count' property</h3>

	<pre class=propdef>
	Name: column-count
	Value: auto | <<integer [1,&infin;]>>
	Initial: auto
	Applies to: <a>block containers</a> except <a>table wrapper boxes</a>
	Inherited: no
	Percentages: N/A
	Computed value: specified value
	Animation Type: by computed value
	</pre>

	This property describes the number of columns of a [=multicol container=].

	<dl dfn-type=value dfn-for=column-count>
		<dt><dfn>auto</dfn>
		<dd>
			means that the number of columns will be determined by other properties
			(e.g., 'column-width', if it has a non-auto value).

		<dt><dfn><<integer [1,&infin;]>></dfn>
		<dd>
			describes the optimal number of columns into which the content of the element will be flowed.
			Values must be greater than 0.
			If both 'column-width' and 'column-count' have non-auto values,
			the integer value describes the maximum number of columns.
		</dd>
	</dl>

	<wpt>
	multicol-count-001.xht
	multicol-count-002.xht
	multicol-basic-006.xht
	multicol-width-count-001.xht
	multicol-width-count-002.xht
	multicol-columns-toolong-001.xht
	multicol-count-negative-001.xht
	multicol-count-negative-002.xht
	multicol-count-non-integer-001.xht
	multicol-count-non-integer-002.xht
	multicol-count-non-integer-003.xht
	multicol-inherit-001.xht
	multicol-inherit-002.xht
	parsing/column-count-invalid.html
	parsing/column-count-valid.html
	parsing/column-count-computed.html
	animation/column-count-interpolation.html
	large-actual-column-count.html
	with-custom-layout-on-same-element.https.html
	</wpt>

	<div class="example">
		Example:

		<pre highlight="css">body { column-count: 3 }</pre>
	</div>


<h3 id="columns">The 'column-width' and 'column-count' Shorthand: The 'columns' Property</h3>

	<pre class="propdef shorthand">
	Name: columns
	Value: <<'column-width'>> || <<'column-count'>>
	</pre>

	This is a shorthand property for setting 'column-width' and 'column-count'.
	Omitted values are set to their initial values.

	<div class="example">
		Here are some valid declarations using the 'columns' property:

		<pre highlight="css">
		columns: 12em;      /* column-width: 12em; column-count: auto */
		columns: auto 12em; /* column-width: 12em; column-count: auto */
		columns: 2;         /* column-width: auto; column-count: 2 */
		columns: 2 auto;    /* column-width: auto; column-count: 2 */
		columns: auto;      /* column-width: auto; column-count: auto */
		columns: auto auto; /* column-width: auto; column-count: auto */
		</pre>
	</div>

	<wpt>
	multicol-columns-001.xht
	multicol-columns-002.xht
	multicol-columns-003.xht
	multicol-columns-004.xht
	multicol-columns-005.xht
	multicol-columns-006.xht
	multicol-columns-007.xht
	multicol-columns-invalid-001.xht
	multicol-columns-invalid-002.xht
	multicol-basic-001.html
	multicol-basic-003.html
	multicol-basic-005.xht
	multicol-basic-007.xht
	parsing/columns-invalid.html
	parsing/columns-valid.html
	</wpt>


<h3 id="pseudo-algorithm">The Pseudo-algorithm</h3>

	The pseudo-algorithm below determines the used values for
	'column-count' (N) and 'column-width' (W). There is one other variable
	in the pseudo-algorithm: U is the used width of the multi-column container.

	Note: The used width U of the multi-column container can depend on the element's contents,
	in which case it also depends on the computed values of the 'column-count' and 'column-width' properties.
	This specification does not define how U is calculated.
	Another module (probably the Basic Box Model [[CSS3BOX]]
	or the Box Sizing Module [[CSS3-SIZING]]) is expected to define this.

<wpt>
intrinsic-size-001.html
intrinsic-size-002.html
intrinsic-size-003.html
intrinsic-size-004.html
intrinsic-size-005.html
as-column-flex-item.html
intrinsic-width-change-column-count.html
</wpt>

<!--
Two assumptions are being made by the pseudo-algorithm:

<ul>
<li>that the block direction is unconstrained
<li>that no column breaks are added through style sheets
</ul>
-->

	The <code>floor(X)</code> function returns the largest integer Y &le; X.

	<pre>
	(01)  if ((column-width = auto) and (column-count = auto)) then
	(02)      exit; /* not a multicol container */
	(03)  if column-width = auto then
	(04)      N := column-count
	(05)  else if column-count = auto then
	(06)      N := max(1,
	(07)        floor((U + column-gap)/(column-width + column-gap)))
	(08)  else
	(09)      N := min(column-count, max(1,
	(10)        floor((U + column-gap)/(column-width + column-gap))))
	</pre>

	And:

	<pre>
	(11)  W := max(0, ((U + column-gap)/N - column-gap))
	</pre>

	For the purpose of finding the number of auto-repeated columns,
	the UA must floor the column size to a UA-specified value to avoid division by zero.
	It is suggested that this floor be 1px or less.

	In fragmented contexts such as in [=paged media=],
	user agents may perform this calculation on a per-fragment basis.

	The used value for 'column-count' is calculated without regard for explicit column breaks or constrained column heights,
	while the actual value takes these into consideration.

	<wpt>
	column-count-used-001.html
	</wpt>

	<div class="example">
		In this example, the actual column-count is higher than the used column-count
		due to explicit column breaks:

		<pre highlight="css">
		div {
			width: 40em;
			columns: 20em;
			column-gap: 0;
		}

		p {
			break-after: column;
		}
		</pre>

		<pre highlight="html">
		&lt;div>
			&lt;p>one
			&lt;p>two
			&lt;p>three
		&lt;/div>
		</pre>
		<figure>
			<img src="images/column-count-higher-than-used-count.svg" alt="Two columns drawn inside the container, one outside" no-autosize>
			<figcaption>The computed column-count is auto, the used column-count is 2 and the actual column-count is 3.</figcaption>
		</figure>
	</div>

	<div class=example>
		The actual column-count may be lower than the used column-count.
		Consider this example:

		<pre highlight="css">
		div {
			width: 80em;
			height: 10em;
			columns: 20em;
			column-gap: 0;
			column-fill: auto;
		}
		</pre>
		<pre highlight="html">
		&lt;div>foo&lt;/div>
		</pre>

		The computed column-count is auto,
		the used column-count is 4,
		and the actual column-count is 1.
	</div>

<h3 id="stacking-context">
Stacking Context</h3>

	All column boxes in a multi-column container are in the same stacking context
	and the drawing order of their contents is as specified in CSS 2.1.
	Column boxes do not establish new stacking contexts.

	<wpt>
	multicol-rule-stacking-001.xht
	</wpt>

<h2 id="column-gaps-and-rules">Column Gaps and Rules</h2>

	Column gaps and rules are placed between columns in the same [=multicol container=].
	The length of the column gaps and column rules is equal to the column height.
	Column gaps take up space.
	That is, column gaps will push apart content in adjacent columns
	(within the same [=multicol container=]).

	<wpt>
	multicol-height-001.xht
	multicol-height-002.xht
	multicol-nested-column-rule-001.xht
	multicol-nested-column-rule-002.html
	multicol-nested-column-rule-003.html
	multicol-rule-nested-balancing-001.html
	multicol-rule-nested-balancing-002.html
	multicol-rule-nested-balancing-003.html
	multicol-rule-nested-balancing-004.html
	</wpt>

	A [=column rule=] is drawn in the middle of the [=column gap=]
	with the endpoints at opposing content edges of the [=multicol container=].
	Column rules do not take up space.
	That is, the presence or thickness of a [=column rule=] will not alter the placement of anything else.
	If a [=column rule=] is wider than its gap,
	the adjacent column boxes will overlap the rule,
	and the rule may possibly extend outside the box of the [=multicol container=].
	Column rules are painted just above the border of the [=multicol container=].
	For scrollable multicol containers,
	note that while the border and background of the [=multicol container=] obviously aren't scrolled,
	the rules need to scroll along with the columns.
	Column rules are only drawn between two columns that both have content.

	<wpt title="Basic column rule tests">
	multicol-rule-003.xht
	multicol-rule-004.xht
	multicol-rule-fraction-002.xht
	</wpt>

	<wpt title="If a column rule is wider than its gap, adjacent boxes overlap.">
	multicol-rule-001.xht
	multicol-rule-large-001.xht
	multicol-rule-large-002.xht
	</wpt>

	<wpt title="Column rules are only drawn between two columns that have content.">
	multicol-count-computed-003.xht
	multicol-count-computed-005.xht
	broken-column-rule-1.html
	</wpt>

	<wpt title="Tests for behavior of backgrounds and column rules.">
	multicol-breaking-000.html
	multicol-breaking-001.html
	multicol-breaking-002.html
	multicol-breaking-003.html
	multicol-breaking-004.html
	multicol-breaking-005.html
	multicol-breaking-006.html
	multicol-breaking-nobackground-000.html
	multicol-breaking-nobackground-001.html
	multicol-breaking-nobackground-002.html
	multicol-breaking-nobackground-003.html
	multicol-breaking-nobackground-004.html
	multicol-breaking-nobackground-005.html
	</wpt>

<h3 id='cg'>Gutters Between Columns: the 'column-gap' property</h3>

	The 'column-gap' property is defined in [[!CSS3-ALIGN]].

	In a [=multi-column formatting context=]
	the used value of ''normal'' for the 'column-gap' property is ''1em''.
	This ensures columns are readable when the initial values are used.
	If there is a column rule between columns,
	it will appear in the middle of the gap.

	<wpt>
	multicol-gap-fraction-001.xht
	multicol-gap-fraction-002.html
	multicol-gap-large-001.xht
	multicol-gap-large-002.xht
	multicol-gap-negative-001.xht
	multicol-gap-000.xht
	multicol-gap-002.xht
	multicol-gap-percentage-001.html
	multicol-gap-001.xht
	multicol-gap-003.xht
	</wpt>

	<wpt title="Tests that the gap is animatable.">
	multicol-gap-animation-001.html
	multicol-gap-animation-002.html
	multicol-gap-animation-003.html
	</wpt>


<h3 id='crc'>The Color of Column Rules: the
'column-rule-color' property</h3>

	<pre class=propdef>
	Name: column-rule-color
	Value: <<color>>
	Initial: currentcolor
	Applies to: multicol containers
	Inherited: no
	Percentages: N/A
	Computed value: computed color
	Animation type: by computed value type
	</pre>

	<dl>
		<dt><dfn value for=column-rule-color><<color>></dfn></dt>
		<dd>
			Specifies the color of the [=column rule=].
		</dd>
	</dl>

	<wpt>
	multicol-rule-color-001.xht
	multicol-rule-color-inherit-001.xht
	multicol-rule-color-inherit-002.xht
	parsing/column-rule-color-computed.html
	parsing/column-rule-color-valid.html
	parsing/column-rule-color-invalid.html
	animation/column-rule-color-interpolation.html
	</wpt>


<h3 id='crs'>The Style Of Column Rules: the 'column-rule-style' property</h3>

	<pre class=propdef>
	Name: column-rule-style
	Value: <<line-style>>
	Initial: none
	Applies to: multicol containers
	Inherited: no
	Percentages: N/A
	Computed value: specified keyword
	Animation type: discrete
	</pre>

	The 'column-rule-style' property sets the style of the rule between columns of an element.
	The <<line-style>> values are interpreted as in the <a href="https://www.w3.org/TR/CSS2/tables.html#collapsing-borders">collapsing border model</a>.

	<wpt>
	parsing/column-rule-style-computed.html
	parsing/column-rule-style-valid.html
	parsing/column-rule-style-invalid.html
	</wpt>

	The ''border-style/none'' value forces the computed value of 'column-rule-width' to be ''0''.


<h3 id='crw'>The Width Of Column Rules: the 'column-rule-width' property</h3>

	<pre class=propdef>
	Name: column-rule-width
	Value: <<line-width>>
	Initial: medium
	Applies to: multicol containers
	Inherited: no
	Percentages: N/A
	Computed value: absolute length, [=snapped as a border width=]; ''0'' if the column rule style is ''border-style/none'' or ''hidden''
	Animation type: by computed value type
	</pre>

	This property sets the width of the rule between columns.
	Negative values are not allowed.

	<wpt>
	multicol-rule-fraction-001.xht
	multicol-rule-fraction-003.xht
	multicol-rule-px-001.xht
	multicol-rule-percent-001.xht
	subpixel-column-rule-width.tentative.html
	parsing/column-rule-width-computed.html
	parsing/column-rule-width-invalid.html
	parsing/column-rule-width-valid.html
	animation/column-rule-width-interpolation.html
	</wpt>

<h3 id="cr">Column Rule Shorthand: the 'column-rule' property</h3>

	<pre class="propdef shorthand">
	Name: column-rule
	Value: <<'column-rule-width'>> || <<'column-rule-style'>> || <<'column-rule-color'>>
	</pre>

	This property is a shorthand for setting
	'column-rule-width', 'column-rule-style', and 'column-rule-color'
	at the same place in the style sheet.
	Omitted values are set to their initial values.

	<wpt>
	
	multicol-shorthand-001.xht
	multicol-rule-shorthand-001.xht
	multicol-rule-shorthand-2.xht
	multicol-rule-000.xht
	multicol-rule-002.xht
	multicol-rule-dashed-000.xht
	multicol-rule-dotted-000.xht
	multicol-rule-double-000.xht
	multicol-rule-outset-000.xht
	multicol-rule-none-000.xht
	multicol-rule-hidden-000.xht
	multicol-rule-inset-000.xht
	multicol-rule-groove-000.xht
	multicol-rule-ridge-000.xht
	multicol-rule-solid-000.xht
	parsing/column-rule-computed.html
	parsing/column-rule-invalid.html
	parsing/column-rule-valid.html
	parsing/column-rule-shorthand.html
	</wpt>

	<div class=example>
		In this example, the [=column rule=] and the [=column gap=] have the same width.
		Therefore, they will occupy exactly the same space.

		<pre highlight="css">
		body {
			column-gap: 35px;
			column-rule-width: 35px;
			column-rule-style: solid;
			column-rule-color: black;
		}
		</pre>

		<figure>
			<img src="images/rule-same-width-as-gap.svg" alt="The rule completely covers any gap." no-autosize>
			<figcaption>The column rule and column gap occupy the same space.</figcaption>
		</figure>

		<wpt>
		equal-gap-and-rule.html
		multicol-rule-samelength-001.xht
		fixed-size-child-with-overflow.html
		</wpt>
	</div>




<h2 id="column-breaks">
Column Breaks</h2>

	When content is laid out in multiple columns,
	the user agent must determine where column breaks are placed.
	The problem of breaking content into columns is similar to breaking content into pages,
	which is described in CSS 2.1, section 13.3.3 [[!CSS21]].

	Three new properties are introduced to allow column breaks to be described in the same properties as page breaks:
	'break-before', 'break-after', and 'break-inside'.

<h3 id="break-before-break-after-break-inside">Controlling Fragmentation: the 'break-before', 'break-after', 'break-inside' properties</h3>

	'break-before', 'break-after', and 'break-inside'
	are defined in [[!CSS3-BREAK]].

   <wpt>
	multicol-break-000.xht
	multicol-break-001.xht
	multicol-br-inside-avoidcolumn-001.xht
	moz-multicol3-column-balancing-break-inside-avoid-1.html
	</wpt>

<h2 id="spanning-columns">
Spanning Columns</h2>

	The 'column-span' property makes it possible for an element to span across several columns.


<h3 id="column-span">Spanning An Element Across Columns: the 'column-span' property</h3>

	<pre class="propdef">
	Name: column-span
	Value: none | all
	Initial: none
	Applies to: in-flow block-level elements
	Inherited: no
	Percentages: N/A
	Computed value: specified keyword
	Animation type: discrete
	</pre>

	<wpt>
	parsing/column-span-invalid.html
	</wpt>

	This property describes how many columns an element spans across. Values are:

	<dl dfn-type=value dfn-for=column-span>
		<dt><dfn>none</dfn></dt>
		<dd>
			The element does not span multiple columns.

			<wpt>
			multicol-span-none-001.xht
			</wpt>
		</dd>
		<dt><dfn>all</dfn></dt>
		<dd>
			The element forces a column break and is taken [=out of flow=]
			to span across all columns of the nearest multicol ancestor
			in the same [=block formatting context=].
			Content in the normal flow that appears before the element
			is automatically balanced across all columns
			in the immediately preceding [=multi-column line=] before the element appears,
			and any subsequent content flows into a new [=multi-column line=] after the element.
			The element establishes an [=independent formatting context=].

			Note: Whether the element establishes a new <a>formatting context</a>
			does not depend on whether the element is a descendant of a multicol or not.
			When 'column-span' is ''column-span/all'', it always does.
			This helps with robustness of designs to later revisions that remove the multicol,
			or when media queries turn the multicol off in some situations.

			<wpt>
			multicol-span-000.xht
			multicol-span-all-001.xht
			multicol-span-all-003.xht
			multicol-span-all-block-sibling-003.xht
			multicol-span-all-margin-001.xht
			multicol-span-all-margin-002.xht
			multicol-span-all-margin-003.html
			multicol-span-all-margin-bottom-001.xht
			multicol-span-all-margin-nested-001.xht
			multicol-span-all-margin-nested-002.xht
			multicol-span-all-margin-nested-firstchild-001.xht
			multicol-span-float-001.xht
			multicol-span-float-002.html
			multicol-span-float-003.html
			inline-block-and-column-span-all.html
			multicol-span-all-dynamic-remove-001.html
			multicol-span-all-dynamic-add-001.html
			multicol-span-all-dynamic-remove-002.html
			multicol-span-all-dynamic-add-002.html
			multicol-span-all-dynamic-remove-003.html
			multicol-span-all-dynamic-add-003.html
			multicol-span-all-dynamic-remove-004.html
			multicol-span-all-dynamic-add-004.html
			multicol-span-all-dynamic-add-005.html
			multicol-span-all-dynamic-remove-005.html
			multicol-span-all-dynamic-remove-006.html
			multicol-span-all-dynamic-add-006.html
			multicol-span-all-dynamic-remove-007.html
			multicol-span-all-dynamic-add-007.html
			multicol-span-all-dynamic-add-008.html
			multicol-span-all-dynamic-add-009.html
			multicol-span-all-dynamic-add-010.html
			multicol-span-all-dynamic-add-011.html
			multicol-span-all-dynamic-add-012.html
			multicol-span-all-dynamic-add-013.html
			multicol-span-all-children-height-001.html
			multicol-span-all-children-height-002.html
			multicol-span-all-children-height-003.html
			multicol-span-all-children-height-004a.html
			multicol-span-all-children-height-004b.html
			multicol-span-all-children-height-005.html
			multicol-span-all-children-height-006.html
			multicol-span-all-children-height-007.html
			multicol-span-all-children-height-008.html
			multicol-span-all-children-height-009.html
			multicol-span-all-children-height-010.html
			multicol-span-all-children-height-011.html
			multicol-span-all-children-height-012.html
			multicol-span-all-children-height-013.html
			multicol-span-all-004.html
			multicol-span-all-005.html
			multicol-span-all-006.html
			multicol-span-all-007.html
			multicol-span-all-008.html
			multicol-span-all-009.html
			multicol-span-all-010.html
			multicol-span-all-011.html
			multicol-span-all-012.html
			multicol-span-all-013.html
			multicol-span-all-014.html
			multicol-span-all-015.html
			multicol-span-all-016.html
			multicol-span-all-017.html
			multicol-span-all-018.html
			multicol-span-all-019.html
			multicol-span-all-rule-001.html
			multicol-span-all-button-001.html
			multicol-span-all-button-002.html
			multicol-span-all-button-003.html
			multicol-span-all-fieldset-001.html
			multicol-span-all-fieldset-002.html
			multicol-span-all-fieldset-003.html
			multicol-span-all-restyle-001.html
			multicol-span-all-restyle-002.html
			multicol-span-all-restyle-003.html
			multicol-span-all-restyle-004.html
			multicol-span-all-list-item-001.html
			multicol-span-all-list-item-002.html
			float-with-line-after-spanner.html
			parallel-flow-after-spanner-001.html
			parallel-flow-after-spanner-002.html
			crashtests/margin-and-break-before-child-spanner.html
			multicol-width-004.html
			</wpt>
		</dd>
	</dl>

	An element that spans more than one column is called a <dfn export local-lt="spanning element">multi-column spanning element</dfn>
	and the box it creates is called a <dfn export local-lt="spanner">multi-column spanner</dfn>.

	The [=containing block=] of the [=spanner=] is the [=multicol container=] itself.
	Consequently, in cases where the spanner itself does not establish
	a [=containing block=] for [=absolutely positioned boxes=] inside the spanner,
	their [=containing block chain=] skips directly to the [=multicol container=]
	(skipping any ancestors between the [=spanner=] and the [=multicol container=]).

	Although the spanner is taken [=out-of-flow=],
	this does not affect the <a href="https://www.w3.org/TR/CSS2/zindex.html">painting order</a> [[!CSS21]] of the spanning element.

	<div class="example">
		In this example, an <code>h2</code> element has been added to the sample document after the sixth sentence
		(i.e., after the words "the leg of a").
		This styling applies:

		<pre highlight="css">
		h2 { column-span: all; background: silver }
		</pre>

		By setting 'column-span' to ''column-span/all'',
		all content that appears before the <code>h2</code> element
		is shown above the <code>h2</code> element.

		<figure>
			<img src="images/h2-spanner.svg" alt="An element spans all three columns" no-autosize>
			<figcaption>The h2 element is set to column-span: all</figcaption>
		</figure>

		Note that because the spanner splits the [=multi-column line=],
		it also interrupts any [=column rules=]
		(which are only drawn between [=columns=] in a [=multi-column line=]).
	</div>

	A spanning element may be lower than the first level of descendants
	as long as they are part of the same [=formatting context=],
	and there is nothing between the spanning element and [=multicol container=] that establishes a containing block for fixed position descendants.

	<div class="example">
		In this example, the element with ''column-span: all'' is inside an element with ''transform: rotate(90deg)''. 
		The transform establishes a containing block for fixed position descendents, 
		therefore a spanner will not be created.

		<pre highlight="markup">
		&lt;article&gt;
			&lt;section&gt;
				&lt;div class="spanner"&gt;Attempted spanner&lt;/div&gt;
			&lt;/section&gt;
		&lt;/article&gt;
		</pre>

			<pre highlight="css">
article {
	columns: 2;
}

section {
	transform: rotate(90deg);
}

.spanner {
	column-span: all;
	background: silver;
}
</pre>
	</div>

	<wpt>
	fixed-in-multicol-with-transform-container.html
	change-transform-in-nested.html
	change-transform-in-second-column.html
	change-transform.html
	</wpt>

	If the fragment before the spanner is empty, nothing special happens;
	the top margin/border/padding is above the spanning element, as an empty [=fragment=].

	<div class="example">
		In this example the [=multicol container=] is the <code>article</code> element.
		Inside this parent is a paragraph and then a section element.
		The section contains an <code>h2</code> heading set to ''column-span/all''
		this spans all three columns while the containing section remains inside the column boxes.

		The <code>h2</code> is the first child of the section.
		This means that the margin,
		border (shown in red in the diagram)
		and padding on this section appear before the spanning <code>h2</code> as an empty fragment.

		<pre highlight="markup">
		&lt;article&gt;
			&lt;p&gt;...&lt;/p&gt;
			&lt;section&gt;
				&lt;h2&gt;An h2 element&lt;/h2&gt;
				&lt;p&gt;...&lt;/p&gt;
			&lt;/section&gt;
		&lt;/article&gt;
		</pre>

<pre highlight="css">
section {
	border: 2px solid red;
	margin-top: 65px;
	padding-top: 20px;
}

h2 {
	column-span: all;
	background: silver
}
</pre>

	<figure>
		<img src="images/nested-spanner.svg" alt="An element spans all three columns, the red border around the section breaks before the spanner." no-autosize>
		<figcaption>The <code>h2</code> element is set to ''column-span: all'',
		the section has a red border and top padding and margin</figcaption>
	</figure>

	</div>

	<wpt>
	spanner-fragmentation-000.html
	spanner-fragmentation-001.html
	spanner-fragmentation-002.html
	spanner-fragmentation-003.html
	spanner-fragmentation-004.html
	spanner-fragmentation-005.html
	spanner-fragmentation-006.html
	spanner-fragmentation-007.html
	spanner-fragmentation-008.html
	spanner-fragmentation-009.html
	spanner-fragmentation-010.html
	spanner-fragmentation-011.html
	spanner-fragmentation-012.html
	</wpt>

	A spanning element takes up more space than the element would take up otherwise.
	When space is limited, it may be impossible to find room for the spanning element.
	In these cases, user agents may treat the element as if ''column-span/none'' had been specified on this property.

	<div class="example">
		In this example, the <code>h2</code> element appears later in the content,
		and the height of the multicol container is constrained.
		Therefore, the <code>h2</code> element appears in the overflow
		and there is not room to make the element spanning.
		As a result, the element appears as if ''column-span: none'' was specified.

		<figure>
			<img src="images/h2-in-the-overflow-no-span.svg" alt="The h2 element is in an overflow column" style="max-height: 107px;" no-autosize>
			<figcaption>The h2 element is in an overflow column and appears as if column-span none is specified</figcaption>
		</figure>
	</div>

	<div class="example">
		This example is similar to the previous example,
		except that the H2 element appears naturally in the last column.
		Still, there is not enough room to make the element spanning.

		<figure>
			<img src="images/h2-in-the-last-column-no-span.svg" alt="The h2 element is in the final column" style="max-height: 107px;" no-autosize>
			<figcaption>The h2 element is in the final column and appears as if column-span none is specified</figcaption>
		</figure>
	</div>

	<wpt>
	multicol-span-all-002.xht
	</wpt>

	<div class="example">
		In fragmented contexts spanning elements are honored in all fragments.
		In this example, we are in [=paged media=],
		and the first three paragraphs have column breaks after them.
		A spanning <code>H2</code> element appears after the fourth paragraph.


		<figure>
			<img src="images/spanner-page-break1.svg" alt="Three columns with two lines of text each" no-autosize>
			<figcaption>This would appear on the first page</figcaption>
		</figure>

		<figure>
			<img src="images/spanner-page-break2.svg" alt="A spanning element across the three columns, text above and below." no-autosize>
			<figcaption>This would appear on the second page</figcaption>
		</figure>
	</div>

	Spanners are block-level boxes
	therefore the margins of two adjacent spanners will collapse with each other.
	The margins of two spanners separated only by an absolutely positioned item will collapse with each other,
	as absolutely positioned items do not create column boxes.
	As column boxes establish a new [=block formatting context=],
	margins on elements inside a column box will not collapse with the margin of a spanner.

	<wpt>
	non-adjacent-spanners-000.html
	non-adjacent-spanners-001.html
	</wpt>

	<div class="example">
		Spanners establish new [=formatting contexts=], but their margins can be changed by their surroundings.
		In this example, two spanners naturally end up at the top of a page.
		The top margin of the first spanner is truncated due to adjoining an unforced break.
		The margins between the two spanners collapse with each other.
		However, the bottom margin of the second spanner does not collapse with the top margin of the subsequent element.

		<pre highlight="css">
		h2 {
			margin: 16px 0;
			column-span: all;
			background: silver
		}
		p { margin-top: 16px }
		</pre>

		<figure>
			<img src="images/two-spanners-margin-no-collapse.svg" alt="Two spanning elements after a page break" no-autosize>
			<figcaption>Margins collapse between two spanning elements, but not the bottom margin of a spanner and top margin of next element.</figcaption>
		</figure>
	</div>

	<wpt title="Additional tests relating to spanners.">
	abspos-in-multicol-with-spanner-crash.html
	crashtests/body-becomes-spanner-html-becomes-vertical-rl.html
	crashtests/fit-content-with-spanner-and-auto-scrollbar-sibling.html
	crashtests/float-becomes-non-float-spanner-surprises-inside.html
	crashtests/float-becomes-spanner.html
	crashtests/multicol-floats-after-column-span-crash.html
	crashtests/negative-margin-on-column-spanner.html
	crashtests/nested-spanner-with-negative-margin.html
	crashtests/oof-becomes-spanner.html
	crashtests/oof-in-additional-column-before-spanner.html
	crashtests/relpos-spanner-with-spanner-child-becomes-regular.html
	crashtests/remove-spanner-after-spanner-in-inline-before-inline.html
	crashtests/remove-spanner-in-table-caption-nested-multicol.html
	crashtests/restricted-height-bottom-border-overflow-and-spanner.html
	crashtests/scrollable-spanner-in-nested.html
	crashtests/spanner-after-parallel-flow.html
	crashtests/spanner-in-inline-after-very-tall-content-001.html
	crashtests/spanner-in-inline-after-very-tall-content-002.html
	crashtests/spanner-in-overflowed-container-before-float.html
	crashtests/nested-with-tall-padding-and-spanner-and-content.html
	crashtests/specified-height-with-just-spanner-and-oof.html
	crashtests/trailing-parent-padding-between-spanners.html
	crashtests/table-caption-change-descendant-display-type.html
	crashtests/table-caption-inline-block-remove-child.html
	remove-block-beside-spanner-in-inline-crash.html
	remove-inline-with-block-beside-spanners-crash.html
	remove-spanner-beside-spanner-in-inline-crash.html
	spanning-legend-000-crash.html
	spanning-legend-001-crash.html
	toggle-spanner-float-crash.html
	abspos-after-spanner-static-pos.html
	abspos-after-spanner.html
	abspos-containing-block-outside-spanner.html
	change-transform-in-spanner.html
	nested-with-padding-and-spanner.html
	orthogonal-writing-mode-spanner.html
	remove-inline-with-block-beside-spanners.html
	replaced-content-spanner-auto-width.html
	spanner-in-child-after-parallel-flow-001.html
	spanner-in-child-after-parallel-flow-002.html
	spanner-in-child-after-parallel-flow-003.html
	spanner-in-child-after-parallel-flow-004.html
	spanner-in-opacity.html
	going-out-of-flow-after-spanner.html
	crashtests/inline-with-spanner-in-overflowed-container-before-multicol-float.html
	crashtests/spanner-in-overflowed-clipped-container.html
	crashtests/spanner-in-overflowed-container-before-inline-content.html
	crashtests/spanner-inside-inline-in-overflowed-container.html
	parsing/column-span-valid.html
	parsing/column-span-computed.html
	getclientrects-000.html
	getclientrects-001.html
	</wpt>

<h2 id="filling-columns">
Filling Columns</h2>

	There are two strategies for filling columns:
	columns can either be balanced, or not.
	If columns are balanced, user agents should try to minimize variations in column height,
	while honoring forced breaks,
	'widows' and 'orphans',
	and other properties that may affect column heights.
	If columns are not balanced, they are filled sequentially;
	some columns may end up partially filled, or with no content at all.

<h3 id='cf'>Column Balancing: the 'column-fill' property</h3>

	<pre class="propdef">
	Name: column-fill
	Value: auto | balance | balance-all
	Initial: balance
	Applies to: multicol containers
	Inherited: no
	Percentages: N/A
	Computed value: specified keyword
	Animation type: discrete
	</pre>

	This property specifies whether content
	in a [=multi-column line=] that does <em>not</em> immediately precede a [=spanner=]
	is balanced across columns or not.

<wpt>
always-balancing-before-column-span.html
no-balancing-after-column-span.html
</wpt>

	The values are:

	<dl dfn-type=value dfn-for=column-fill>
		<dt><dfn>balance</dfn></dt>
		<dd>
			Balance content equally between columns, as far as possible.
			In fragmented contexts, only the last fragment is balanced.

			<wpt>
			multicol-fill-000.xht
			multicol-fill-001.xht
			parsing/column-fill-invalid.html
			parsing/column-fill-valid.html
			parsing/column-fill-computed.html
			column-fill-balance-orthog-block-001.html
			column-balancing-paged-001-print.html
			multicol-fill-balance-001.xht
			multicol-fill-balance-002.html
			multicol-fill-balance-003.html
			multicol-fill-balance-004.html
			multicol-fill-balance-005.html
			multicol-fill-balance-006.html
			multicol-fill-balance-007.html
			multicol-fill-balance-008.html
			multicol-fill-balance-009.html
			multicol-fill-balance-010.html
			multicol-fill-balance-011.html
			multicol-fill-balance-012.html
			multicol-fill-balance-013.html
			multicol-fill-balance-014.html
			multicol-fill-balance-015.html
			multicol-fill-balance-016.html
			multicol-fill-balance-018.html
			multicol-fill-balance-019.html
			multicol-fill-balance-020.html
			multicol-fill-balance-021.html
			multicol-fill-balance-022.html
			multicol-fill-balance-023.html
			multicol-fill-balance-024.html
			multicol-fill-balance-025.html
			multicol-fill-balance-026.html
			multicol-fill-balance-027.html
			multicol-fill-balance-028.html
			multicol-fill-balance-nested-000.html
			</wpt>
		</dd>
		<dt><dfn>balance-all</dfn></dt>
		<dd>
			Balance content equally between columns, as far as possible.
			In fragmented contexts, all fragments are balanced.
		</dd>
		<dt><dfn>auto</dfn></dt>
		<dd>
			fill columns sequentially

			<wpt>
			multicol-fill-auto-001.xht
			multicol-fill-auto-002.xht
			multicol-fill-auto-003.xht
			multicol-fill-auto-004.html
			multicol-fill-auto-block-children-001.xht
			multicol-fill-auto-block-children-002.xht
			multicol-fill-auto-block-children-003.html
			columnfill-auto-max-height-001.html
			columnfill-auto-max-height-002.html
			columnfill-auto-max-height-003.html
			</wpt>
		</dd>
	</dl>

	In continuous contexts, this property does not have any effect when there are overflow columns.

	<div class="example">
		In this example, an article only has one short paragraph which fits on three lines.
		The three lines are displayed in three different
		columns due to column balancing.

		<pre highlight="css">
		article {
			width: 60em;
			height: auto;
			columns: 4;
			column-fill: balance;
		}
		</pre>

		<figure>
			<img src="images/column-balancing-one-paragraph.svg" alt="Four columns, the first three have content." no-autosize>
			<figcaption>Three lines displayed in three columns due to column balancing.</figcaption>
		</figure>

	</div>

	<div class="example">
		In this example, column balancing is turned off, and the article has a height:

		<pre highlight="css">
		article {
			width: 60em;
			height: 4em;
			columns: 4;
			column-fill: auto;
		}
		</pre>

		As a result, the first column is filled with all content:

		<figure>
			<img src="images/no-column-balancing-one-paragraph.svg" alt="Four columns, the first one has content." no-autosize>
			<figcaption>No balancing so the whole text is shown in one paragraph.</figcaption>
		</figure>
	
	</div>


	<div class=example>
		In this example, an article has two paragraphs:
		first a long one,
		then a shorter one.
		This code is applied:

		<pre highlight="css">
		article {
			width: 60em;
			height: auto;
			columns: 4;
			column-fill: balance;
		}

		p {
			break-after: column;
		}
		</pre>

		The shortest column height possible contains five lines of text.
		After the column height has been established, columns are filled sequentially.
		As a result, the third column is as high as the first two columns,
		while the last column ends up being significantly shorter.

		<figure>
			<img src="images/column-balancing-with-column-break.svg" alt="Four columns, all have content." no-autosize>
			<figcaption>Once column height is established, columns are filled sequentially.</figcaption>
		</figure>
	</div>

	<div class="example">
		<pre highlight="css">
		article {
			width: 60em;
			height: auto;
			columns: 4;
			column-fill: balance;
		}
		</pre>

		In this example, an article starts with an unbreakable figure which sets the column height.
		Subsequent content is filled sequentially into the remaining columns:

		<figure>
			<img src="images/column-balancing-with-figure.svg" alt="Column one contains an image, two and three have content." no-autosize>
			<figcaption>Column height is established by the figure.</figcaption>
		</figure>
	</div>
<wpt title="Tests relating to column balancing in combination with out-of-flow elements.">
column-balancing-with-span-and-oof-001.html
column-balancing-with-span-and-oof-002.html
crashtests/forced-break-in-oof-in-column-balancing-nested.html
crashtests/forced-break-in-oof-in-column-balancing.html
</wpt>

<wpt title="Other tests relating to balancing">
balance-extremely-tall-monolithic-content-crash.html
column-balancing-with-overflow-auto-crash.html
balance-break-avoidance-000.html
balance-break-avoidance-001.html
balance-break-avoidance-002.html
balance-grid-container.html
balance-orphans-widows-000.html
crashtests/balance-with-forced-break.html
crashtests/balancing-flex-item-trailing-margin-freeze.html
crashtests/balancing-tall-borders-freeze.html
</wpt>

<h2 id="overflow">
Overflow</h2>

<h3 id="overflow-inside-multicol-elements">
Overflow Inside Multicol Containers</h3>

	Except for cases where this would cause a column break,
	content that extends outside column boxes
	visibly overflows and is not clipped to the <a>column box</a>.

	Note: See
	[[#column-breaks]] for column breaks
	and
	[[#pagination-and-overflow-outside-multicol]] for whether it is clipped to the multi-column containerâs content box.

	<div class=example>
		In this example, the image is wider than the column:

		<figure>
			<img src="images/image-overflow-not-clipped.svg" alt="An imagine in the first column has visible overflow" no-autosize>
			<figcaption>Content visibly overflows and is not clipped to the column box.</figcaption>
		</figure>
	</div>

	<wpt>
	multicol-block-no-clip-001.xht
	multicol-block-no-clip-002.xht
	multicol-clip-001.xht
	multicol-clip-002.xht 
	multicol-clip-scrolled-content-001.html 
	multicol-overflow-clip-auto-sized.html
	multicol-overflow-clip-positioned.html 
	multicol-overflow-clip.html 
	relative-child-overflowing-column-gap.html
	relative-child-overflowing-container.html
	</wpt>


<h3 id="pagination-and-overflow-outside-multicol">
Pagination and Overflow Outside Multicol Containers</h3>

	Content and column rules that extend outside column boxes at
	the edges of the multi-column container are clipped according to the
	'overflow' property.

	A multicol container can have more columns than it has room for due to:

	<ul>
		<li>
			a declaration that constrains the column height
			(e.g., using 'height' or 'max-height').
			In this case, additional column boxes are created in the inline direction
		</li>
		<li>
			the size of the page.
			In this case, additional column boxes are moved to the next page(s).
		</li>
		<li>
			explicit column breaks.
			In this case, additional column boxes are created in the inline direction for continuous contexts
			and additional column boxes are moved to the next fragment(s) for fragmented media.
		<li>
	</ul>

	<wpt>
	multicol-overflow-000.xht
	multicol-overflowing-001.xht
	</wpt>

	<wpt title="Tests to check that a scrollable container isn't split across multiple columns.">
	overflow-unsplittable-001.html
	overflow-unsplittable-002.html
	overflow-unsplittable-003.html
	</wpt>

	Columns that appear outside the multicol container in continuous contexts
	are called <dfn export>overflow columns</dfn>.
	Overflow columns can affect the height of the multicol container.

	<div class="example">
		In this example, the height of the multi-column container has been constrained to a maximum height.
		Also, the style sheet specifies that overflowing content should be visible:

		<pre highlight="css">
		div {
			max-height: 5em;
			overflow: visible;
		}
		</pre>

		As a result, the number of columns is increased.

		<figure>
			<img src="images/height-constraint-overflow-inline.svg" alt="Four columns, one outside the multicol container" no-autosize>
			<figcaption>An overflow column is created in the inline direction.</figcaption>
		</figure>

	</div>

	<div class="example">

		In continuous contexts overflow columns can affect the height of the multicol container.
		In this example a column appears in the overflow which has four lines of text.
		The multicol container is made tall enough to accommodate this column.

		<figure>
			<img src="images/overflow-column-effects-height.svg" alt="Four columns, overflow column is taller than the first three" no-autosize>
			<figcaption>The final column is an overflow column yet is taller than the others.
			The container is tall enough for this column.</figcaption>
		</figure>

	</div>

	<div class="example">
		In fragmented contexts, the overflow content goes into columns in subsequent fragments.
		Given the same content as in example 31
		and a page box that only has room for five lines of formatted text,
		this would appear on the first page:

		<figure>
			<img src="images/pagination-overflow-page1.svg" alt="Three columns" no-autosize>
			<figcaption>The first three paragraphs appear on page one.</figcaption>
		</figure>

		Assuming column balancing, this would appear on the second page:

		<figure>
			<img src="images/pagination-overflow-page2.svg" alt="Three columns" no-autosize>
			<figcaption>The overflow column is moved onto page two.</figcaption>
		</figure>
	</div>

	<div class="example">
		In this example, explicit column breaks are generated after paragraphs:

		<pre highlight="css">
		p {
			break-after: column;
		}
		</pre>

		As a result, the number of columns increases and the extra columns are added in the inline direction:

		<figure>
			<img src="images/height-constraint-column-break-overflow-inline.svg" alt="Four columns, one outside the multicol container" no-autosize>
			<figcaption>An overflow column is created in the inline direction.</figcaption>
		</figure>
	</div>

	<div class="example">
		In [=paged media=], extra columns are shown on the next page.
		Given the same code as the previous example,
		the last paragraph appears on the second page.
		This would appear on the first page:

		<figure>
			<img src="images/pagination-column-break-overflow-page1.svg" alt="Three columns" no-autosize>
			<figcaption>The first three paragraphs appear on page one.</figcaption>
		</figure>

		This would appear on the second page:

		<figure>
			<img src="images/pagination-column-break-overflow-page2.svg" alt="Three columns" no-autosize>
			<figcaption>The overflow column is moved onto page two.</figcaption>
		</figure>

		Due to column balancing, the last paragraph is split across three columns.
	</div>



<h2 class="no-num" id="changes">Appendix B. Changes</h2>

This appendix is <em>informative</em>.

<h3 id="changes-from-20211012">Changes from the <a href="https://www.w3.org/TR/2021/CR-css-multicol-1-20211012/">Candidate Recommendation (CR) of 12 October 2021</a></h3>

<ul>
	<li>Added the text "and there is nothing between the spanning element and [=multicol container=] that establishes a containing block for fixed position descendants." <a href="https://github.com/w3c/csswg-drafts/issues/6805#issuecomment-1063159219">Resolved 9 Mar 2022</a></li>
</ul>

<h3 id="changes-from-20210212">Changes from the <a href="https://www.w3.org/TR/2021/WD-css-multicol-1-20210212/">Working Draft (WD) of 12 February 2021</a></h3>

<ul>
	<li>Added the text "Out-of-flow descendants of a multi-column container do affect column balancing,
	and the block-size of the multi-column container." <a href="https://github.com/w3c/csswg-drafts/issues/6279#issuecomment-839912199">Resolved 12 May 2021</a></li>
	<li>Added the text, "The margins of two spanners separated only by an absolutely positioned item will collapse with each other,
	as absolutely positioned items do not create column boxes." <a href="https://github.com/w3c/csswg-drafts/issues/6265#issuecomment-839909999">Resolved 12 May 2021</a></li>
	<li>Adds an accessibility considerations section. <a href="https://github.com/w3c/csswg-drafts/issues/6283">Request from APA after review.</a></li>
	<li>Adds a note and example to make clear the manner in which columns are laid out in vertical writing modes. <a href="https://github.com/w3c/csswg-drafts/issues/6301">Request from i18n WG after review.</a></li>
</ul>

<h3 id="changes-from-20191015">Changes from the <a href="https://www.w3.org/TR/2019/WD-css-multicol-1-20191015/">Working Draft (WD) of 15 October 2019</a></h3>

<ul>
	<li>Added the text "The spanner becomes the containing block for absolutely positioned boxes inside the spanner where the spanning element establishes a containing block, otherwise the containing block chain goes to the multicol container.". <a href="https://github.com/w3c/csswg-drafts/issues/5612#issuecomment-715369246">Resolved 23 Oct 2020</a>
	</li>
	<li>Adding the text "This property specifies whether content
	in a multi-column line that does <em>not</em> immediately precede a spanner
	is balanced across columns or not." <a href="https://github.com/w3c/csswg-drafts/issues/4689#issuecomment-621281467">Resolved 29 April 2020</a></li>
</ul>

<h3 id="changes-from-20180528">Changes from the <a href="https://www.w3.org/TR/2018/WD-css-multicol-1-20180528/">Working Draft (WD) of 28 May 2018</a></h3>
<ul>
	<li>Removed the non-normative text
	"However, as described below, setting both the width and number of columns rarely makes sense." Editorial 16 Sep 2019, <a href="https://github.com/w3c/csswg-drafts/issues/4291">issue 4291</a>.</li>
	<li>Added the paragraph, "Spanners are block-level boxes
	therefore the margins of two adjacent spanners will collapse with each other.
	As column boxes establish a new [=block formatting context=],
	margins on elements inside a column box will not collapse with the margin of a spanner." <a href="https://github.com/w3c/csswg-drafts/issues/2203#issuecomment-431783027">Resolved 22 Oct 2018</a>, see also the resolution for <a href="https://github.com/w3c/csswg-drafts/issues/2582#issuecomment-402619872">issue 2582</a>.</li>
	<li>Clarified the spec to explain that a spanning element is taken out-of-flow, leaving a forced break. Added the paragraph, "A spanning element is taken out-of-flow, leaving a forced break. This does not affect the painting order of the spanning element." <a href="https://github.com/w3c/csswg-drafts/issues/1072#issuecomment-468087733">Resolved 28 Feb 2019</a>.</li>
	<li>Moved the definition of the 'column-gap' property to [[CSS3-ALIGN]] and added a paragraph detailing the specifics of 'column-gap' in multicol:
	<br />"In a multi-column formatting context the used value of normal for the column-gap property is 1em. This ensures columns are readable when the initial values are used. If there is a column rule between columns, it will appear in the middle of the gap." <a href="https://github.com/w3c/csswg-drafts/issues/3641">Resolved 4 June 2019.</a></li>
	<li>Reworded the section <a href="#the-multi-column-model">The multi-column model</a>, based on input from Morten Stenshorne in <a href="https://github.com/w3c/csswg-drafts/issues/2203#issuecomment-431695940">issue 2203</a>.</li>
	<li>Removed the at-risk marker from the length-percentage value for 'column-gap'. <a href="https://github.com/w3c/csswg-drafts/issues/3988">Resolved 4 June 2019.</a></li>
	<li>Updated the introduction to remove mention of the benefits of multicol over using tables for layout and instead refer to the unique characteristics of multicol. Editorial change referenced in <a href="https://github.com/w3c/csswg-drafts/issues/3654">issue 3654</a>.</li>
	<li>Changed the sentence added in the pseudo-algorithm section after the 7 Jan 2016 resolution, to refer to <em>columns</em> and not <em>tracks</em> as tracks are not defined in this specification. Resolved <a href="https://github.com/w3c/csswg-drafts/issues/3649#issuecomment-472505520">13 March 2019</a>.</li>
	<li>Changes and clarifications to the SVG images used in the specification.</li>
	<li>Changed syntax to use bracketed range notation to reflect the prose restrictions on negative/non-zero values.</li>
</ul>

<h3 id="changes-from-20171005">Changes from the <a href="https://www.w3.org/TR/2017/WD-css-multicol-1-20171005/">Working Draft (WD) of 5 October 2017</a></h3>
<ul>
	<li>Changed references to paged media to refer to fragmented contexts. Resolved <a href="https://github.com/w3c/csswg-drafts/issues/1746#issuecomment-380731574">12 Apr 2018</a>.</li>
	<li>Changed a line regarding the <code>column-fill</code> property:
	<br><q>In continuous media, this property does not have any effect in
	overflow columns.</q>
	<br>To:
	<br><q>In continuous media, this property does not have any effect when there are overflow columns.</q> <a href="https://github.com/w3c/csswg-drafts/issues/2549">Resolved: 12 Apr 2018</a></li>
	<li>Add a line of text plus an example to show that overflow columns can affect the multicol container height. <a href="https://github.com/w3c/csswg-drafts/issues/1745">Resolved: 12 Apr 2018</a></li>
	<li>Replaced the HTML mock-up examples with SVG versions, as the examples were unclear. <a href="https://github.com/w3c/csswg-drafts/issues/1087">Issue 1087</a>.</li>
	<li>Changed the value of normal for column-gap to be 1em, rather than a UA-specified length with a suggestion of 1em. <a href="https://github.com/w3c/csswg-drafts/issues/2145#issuecomment-378781507">Resolved: 4 Apr 2018</a></li>
	<li>Clarified that negative values are not allowed for column-width, and that while 0 may be specified, used values will be clamped to a minimum of 1px. <a href="https://github.com/w3c/csswg-drafts/issues/1741#issuecomment-373091628">Resolved: 14 Mar 2018</a></li>
	<li>Clarified that where there is a spanning element content is automatically balanced across all columns in the immediately preceding column row before the element appears. <a href="https://github.com/w3c/csswg-drafts/issues/1075">Resolved: 9 Nov 2017</a></li>
	<li>Added clarification plus an additional example that spanning elements may be lower the first level of descendants, and that in the case of margins, borders and padding on the element containing the spanning, this would be drawn above the spanner. <a href="https://github.com/w3c/csswg-drafts/issues/1072#issuecomment-342668025">Resolved: 8 Nov 2017</a></li>
	<li>Changed the sentence <q>Column rules are painted in the inline content layer, but below all inline content inside the multicol element.</q> to <q>Column rules are painted just above the border of the multicol element. For scrollable multicol elements, note that while the border and background of the multicol element obviously arenât scrolled, the rules need to scroll along with the columns.</q> <a href="https://github.com/w3c/csswg-drafts/issues/1739#issuecomment-342659978">Resolved: 7 Nov 2017</a></li>
	<li>Under section The Multi-column Model, removed two sentences <q>That is, column boxes behave like block-level, table cell, and inline-block boxes as per CSS 2.1, section 10.1, item 2 CSS21. However, column boxes do not establish block container boxes for elements with ''position: fixed or position: absolute''.</q>. These were replaced with a clarification about the principal box and a new example showing how abspos elements refer to the multicol container. <a href="https://github.com/w3c/csswg-drafts/issues/1738#issuecomment-342661881">Resolved: 7 Nov 2017</a></li>
	<li>Removed the sentence "To indicate where column breaks should (or should not) appear, new keyword values are introduced." and following example (Example 7 in the WD published <a href="https://www.w3.org/TR/2017/WD-css-multicol-1-20171005/">5 Oct 2017</a>) as the multicol specification no longer introduces these properties. <a href="https://github.com/w3c/csswg-drafts/issues/1966">Editorial</a></li>
	<li>Changed how we reference the element we have applied multicol to from multi-column or multicol <q>element</q> to multi-column or multicol <q>container</q>. <a href="https://github.com/w3c/csswg-drafts/issues/1965">Resolved: 22 November 2017</a></li>
	<li>Removed the example which stated "If a tall image is moved to a column on the next page to find room for it, its natural column may be left empty. If so, the column is still considered to have content for the purpose of deciding if the column rule should be drawn." <a href="https://github.com/w3c/csswg-drafts/issues/1740">Resolved: 7 September 2017</a></li>
</ul>

<h3 id="changes-from-20110412">Changes from the
<a href="https://www.w3.org/TR/2011/CR-css3-multicol-20110412/">Candidate Recommendation (CR) of 12 April 2011</a>.</h3>

<ul>
	<li>Added July 2016 resolution to change the track size floor to a required UA-specified value, consistent with the CSS Grid spec. <a href="https://lists.w3.org/Archives/Public/www-style/2016Jan/0031.html">Resolved: 7 Jan 2016</a>
	<li>Remove the restriction about overflow columns only being in continuous media in the statement that 'column-fill' has no effect on overflow columns. <a href="https://lists.w3.org/Archives/Public/www-style/2013Sep/0471.html">Resolved: September 2013</a>.
	<li>Added keyword balance-all and examples to demonstrate how this should work. <a href="https://lists.w3.org/Archives/Public/www-style/2013Sep/0471.html">Resolved: September 2013</a>.
	<li> The pseudo-algorithm has been revised on a number of occasions. <a href="https://lists.w3.org/Archives/Public/www-style/2013Feb/0471.html">Latest change Feb 2013</a>.
	<li>Clarified that properties 'columns', 'column-width', 'column-count' "apply to block containers". <a href="https://lists.w3.org/Archives/Public/www-style/2013Feb/0536.html">Ref: Feb 2013</a>.
	<li>Breaking properties have been moved from this specification to the <a href="https://www.w3.org/TR/css-break-3/">CSS Fragmentation Module</a>.
	<li>Change to 'column-fill' wording to clarify that 'column-fill' is honored before page breaks. <a href="https://lists.w3.org/Archives/Public/www-style/2012Jan/0393.html">Ref: Jan 2012</a>.
	<li>Amended example and text to clarify what happens with margin collapsing and spanning elements. <a href="https://lists.w3.org/Archives/Public/www-style/2013Oct/0247.html">Ref: Oct 2013</a>.
	<li>Clarification that 'column-rule-width' does not alter the size or placement of columns. <a href="https://lists.w3.org/Archives/Public/www-style/2013Sep/0550.html">Ref: Sep 2013</a>.
	<li>Added that each column spanning element establishes a separate BFC margins between them collapse. <a href="https://lists.w3.org/Archives/Public/www-style/2011Dec/0262.html">Ref: Dec 2011</a>.
	<li>Column rules are painted in the inline content layer, but below all inline content inside the multicol. <a href="https://lists.w3.org/Archives/Public/www-style/2013Feb/0363.html">Ref: Feb 2013</a>.
	<li>Clarify that 'column-span' causes the element to establish a formatting context even if it is not in a multicol.
	<li>Column spanners do not always establish a <em>block</em> formatting context.
	<li>Allow 'column-gap' to accept <<length-percentage>> instead of just <<length>>
	<li>'column-width' and 'column-count' applies to <a>block containers</a> except <a>table wrapper boxes</a>.
	<li>Content that overflows columns is not clipped.
</ul>

<h2 class="no-num" id="privacy">Privacy Considerations</h2>

Multicol introduces no new privacy leaks.

<h2 class="no-num" id="security">Security Considerations</h2>

Multicol introduces no new security considerations.

<h2 class="no-num" id="a11y">Accessibility Considerations</h2>

Setting container height and line length can pose challenges for people with visual or cognitive disabilities.
See <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html">WCAG Success Criterion 1.4.10 Reflow</a> and
<a href="https://www.w3.org/WAI/WCAG21/quickref/#visual-presentation">WCAG 1.4.8 Visual Presentation</a> to understand user needs.

<h2 class=no-num id=acknowledgments>
Acknowledgments</h2>

	This document is based on several older proposals and comments on older proposals.
	Contributors include:

	Alex Mogilevsky,
	Andy Clarke,
	Anton Prowse,
	Bert Bos,
	BjÃ¶rn HÃ¶hrmann,
	CÃ©dric Savarese,
	Chris Lilley,
	Chris Wilson,
	Daniel Glazman and
	Dave Raggett,
	David Hyatt,
	David Singer,
	David Woolley,
	Elika Etemad,
	Giovanni Campagna,
	Ian Hickson.
	Joost de Valk,
	Kevin Lawver,
	L. David Baron,
	Markus Mielke,
	Melinda Grant,
	Michael Day,
	Morten Stenshorne,
	Ãyvind Stenhaug,
	Peter Linss,
	Peter-Paul Koch,
	Robert O'Callahan,
	Robert Stevahn,
	Sergey Genkin,
	Shelby Moore,
	Steve Zilles,
	Sylvain Galineau,
	Tantek Ãelik,
	Till Halbach

<wpt-rest></wpt-rest>
