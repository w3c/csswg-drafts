<pre class='metadata'>
Title: CSS Custom Properties for Cascading Variables Module Level 1
Status: ED
Prepare for TR: no
Work Status: Testing
Shortname: css-variables
Level: 1
Group: csswg
TR: https://www.w3.org/TR/css-variables-1/
ED: https://drafts.csswg.org/css-variables/
Implementation Report: https://wpt.fyi/results/css/css-variables
Prepare for TR: no
Previous Version: https://www.w3.org/TR/2022/CR-css-variables-1-20220616/
Previous Version: https://www.w3.org/TR/2021/CRD-css-variables-1-20211111/
Previous Version: https://www.w3.org/TR/2015/CR-css-variables-1-20151203/
Previous Version: https://www.w3.org/TR/2014/WD-css-variables-1-20140506/
Previous Version: https://www.w3.org/TR/2013/WD-css-variables-1-20130620/
Previous Version: https://www.w3.org/TR/2013/WD-css-variables-20130312/
Previous Version: https://www.w3.org/TR/2012/WD-css-variables-20120410/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact, w3cid 42199
Abstract: This module introduces cascading variables as a new primitive value type that is accepted by all CSS properties, and custom properties for defining them.
Default Highlight: css
WPT Path Prefix: css/css-variables/
WPT Display: closed
</pre>

<pre class=link-defaults>
spec:css-values-4; type:dfn; text:identifier
spec:css-color-4; type:property; text:color
spec:selectors-4; type:selector; text: :lang()
</pre>

<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	Large documents or applications
	(and even small ones)
	can contain quite a bit of CSS.
	Many of the values in the CSS file will be duplicate data;
	for example,
	a site may establish a color scheme
	and reuse three or four colors throughout the site.
	Altering this data can be difficult and error-prone,
	since it's scattered throughout the CSS file
	(and possibly across multiple files),
	and may not be amenable to Find-and-Replace.

	This module introduces a family of custom author-defined properties known collectively as <a>custom properties</a>,
	which allow an author to assign arbitrary values to a property with an author-chosen name,
	and the ''var()'' function,
	which allow an author to then use those values in other properties elsewhere in the document.
	This makes it easier to read large files,
	as seemingly-arbitrary values now have informative names,
	and makes editing such files much easier and less error-prone,
	as one only has to change the value once,
	in the <a>custom property</a>,
	and the change will propagate to all uses of that variable automatically.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.


<!-- Big Text: --*


             █   █
              █ █
████▌ ████▌ ███████
              █ █
             █   █

-->

<h2 id='defining-variables'>
Defining Custom Properties: the '--*' family of properties</h2>

	This specification defines an open-ended set of properties called <a>custom properties</a>,
	which, among other things, are used to define the [=arbitrary substitution|substitution value=] of ''var()'' functions.

	<pre class='propdef'>
	Name: --*
	Value: <<declaration-value>>?
	Initial: the [=guaranteed-invalid value=]
	Applies to: all elements and all pseudo-elements (including those with restricted property lists)
	Inherited: yes
	Computed value: specified value with variables substituted, or the [=guaranteed-invalid value=]
	Animation type: discrete
	</pre>

	<p class=all-media>User agents are expected to support this property on all media, including non-visual ones.</p>

	A <dfn export>custom property</dfn> is any property
	whose name starts with two dashes (U+002D HYPHEN-MINUS),
	like '--foo'.
	The <dfn>&lt;custom-property-name></dfn> production corresponds to this:
	it's defined as any <<dashed-ident>>
	(a valid <a>identifier</a> that starts with two dashes),
	except ''--'' itself,
	which is reserved for future use by CSS.
	<a>Custom properties</a> are solely for use by authors and users;
	CSS will never give them a meaning beyond what is presented here.

	<wpt>
	variable-declaration-29.html
	variable-declaration-31.html
	variable-declaration-32.html
	variable-declaration-33.html
	variable-declaration-34.html
	variable-declaration-35.html
	variable-declaration-36.html
	variable-declaration-40.html
	variable-declaration-41.html
	variable-declaration-42.html
	variable-empty-name-reserved.html
	</wpt>

	<div class='example'>
		Custom properties define variables,
		referenced with the ''var()'' notation,
		which can be used for many purposes.
		For example, a page that consistently uses a small set of colors in its design
		can store the colors in custom properties
		and use them with variables:

		<pre>
		:root {
			--main-color: #06c;
			--accent-color: #006;
		}
		/* The rest of the CSS file */
		#foo h1 {
			color: var(--main-color);
		}
		</pre>

		The naming provides a mnemonic for the colors,
		prevents difficult-to-spot typos in the color codes,
		and if the theme colors are ever changed,
		focuses the change on one simple spot
		(the custom property value)
		rather than requiring many edits across all stylesheets in the webpage.
	</div>

	Unlike other CSS properties,
	custom property names are <em>not</em> [=ASCII case-insensitive=].
	Instead, custom property names are only equal to each other
	if they are [=identical to=] each other.

	<wpt>
	css-vars-custom-property-case-sensitive-001.html
	</wpt>

	<div class='example'>
		While both '--foo' and '--FOO' are valid,
		they are distinct properties --
		using ''var(--foo)'' will refer to the first one,
		while using ''var(--FOO)'' will refer to the second.

		Perhaps more surprisingly,
		<css>--fo&#x00f3;</css> and <css>--foo&#x0301;</css> are distinct properties.
		The first is spelled with U+00F3 (LATIN SMALL LETTER O WITH ACUTE)
		while the second is spelled with an ASCII "o" followed by U+0301 (COMBINING ACUTE ACCENT),
		and the "[=identical to=]" relation uses direct codepoint-by-codepoint comparison
		to determine if two strings are equal,
		to avoid the complexities and pitfalls of unicode normalization and locale-specific collation.
	</div>

	Operating systems, keyboards, or input methods
	sometimes encode visually-identical text
	using different codepoint sequences.
	Authors are advised to choose variable names
	that avoid potential confusion
	or to use escapes and other means
	to ensure that similar appearing sequences are identical.
	See Section 2.3 in [[CHARMOD-NORM]] for examples.

	<div class="example">
		Developers maintaining the following CSS
		might be confused why the test patch is red:

		<pre>
		--fijord: red;
		--fĳord: green;
		--ﬁjord: blue;

		.test {
			background-color: var(--fijord);
		}
		</pre>

		The reason is that the first custom property
		uses the character sequence
		LATIN SMALL LETTER F + LATIN SMALL LETTER I + LATIN SMALL LETTER J;
		the second, identical-looking one
		uses the character sequence
		LATIN SMALL LETTER F + LATIN SMALL LIGATURE IJ
		while the third
		uses the character sequence
		LATIN SMALL LIGATURE FI + LATIN SMALL LETTER J.

		So the CSS contains three distinct custom properties,
		two of which are unused.
	</div>

	Custom properties are <strong>not</strong> reset by the 'all' property.
	<span class='note'>We may define a property in the future that resets all variables.</span>

	The <a spec=css-values>CSS-wide keywords</a> can be used in custom properties,
	with the same meaning as in any another property.

	<wpt>
	variable-declaration-43.html
	variable-declaration-44.html
	variable-declaration-45.html
	variable-declaration-46.html
	variable-declaration-47.html
	variable-declaration-56.html
	variable-declaration-57.html
	variable-declaration-58.html
	variable-declaration-60.html
	variable-definition-keywords.html
	variable-css-wide-keywords.html
	</wpt>

	Note: That is, they're interpreted at cascaded-value time as normal,
	and are not preserved as the custom property's value,
	and thus are not substituted in by the corresponding variable.

	Note: While this module focuses on the use of <a>custom properties</a> with the ''var()'' function to create “variables”,
	they can also be used as actual custom properties,
	parsed by and acted on by script.
	It's expected that the CSS Extensions spec [[CSS-EXTENSIONS]]
	will expand on these use-cases and make them easier to do.

	Custom properties are ordinary properties,
	so they can be declared on any element,
	are resolved with the normal inheritance and cascade rules,
	can be made conditional with ''@media'' and other conditional rules,
	can be used in HTML's <code>style</code> attribute,
	can be read or set using the CSSOM, etc.

	<wpt>
	css-vars-custom-property-inheritance.html
	variable-created-document.html
	variable-created-element.html
	variable-cssText.html
	variable-declaration-06.html
	variable-definition-cascading.html
	variable-external-declaration-01.html
	variable-external-reference-01.html
	variable-external-supports-01.html
	variable-first-letter.html
	variable-first-line.html
	variable-pseudo-element.html
	variable-reference-13.html
	variable-reference-14.html
	variable-reference-shorthands.html
	variable-reference-visited.html
	</wpt>

	Notably, they can even be animated,
	but since the UA has no way to interpret their contents,
	they always use the "flips at 50%" behavior
	that is used for any other pair of values that can't be intelligently interpolated.
	However, any <a>custom property</a> used in a ''@keyframes'' rule
	becomes <dfn>animation-tainted</dfn>,
	which affects how it is treated when referred to via the ''var()'' function in an animation property.

	<wpt>
	variable-animation-from-to.html
	variable-animation-over-transition.html
	variable-animation-substitute-into-keyframe-shorthand.html
	variable-animation-substitute-into-keyframe-transform.html
	variable-animation-substitute-into-keyframe.html
	variable-animation-substitute-within-keyframe-fallback.html
	variable-animation-substitute-within-keyframe-multiple.html
	variable-animation-substitute-within-keyframe.html
	variable-animation-to-only.html
	</wpt>

	Note: Like any other property that animates discretely,
	custom properties can't be transitioned.
	[=Registered custom properties=] can, however,
	if given a syntax that has non-discrete animation behavior.

	[=Animation-tainted=] is "infectious":
	custom properties which reference [=animation-tainted=] properties
	also become [=animation-tainted=].

	<div class='example'>
		This style rule:

		<pre>
		:root {
			--header-color: #06c;
		}
		</pre>

		declares a <a>custom property</a> named '--header-color' on the root element,
		and assigns to it the value "#06c".
		This property is then inherited to the elements in the rest of the document.
		Its value can be referenced with the ''var()'' function:

		<pre>
		h1 { background-color: var(--header-color); }
		</pre>

		The preceding rule is equivalent to writing ''background-color: #06c;'',
		except that the variable name makes the origin of the color clearer,
		and if ''var(--header-color)'' is used on other elements in the document,
		all of the uses can be updated at once
		by changing the '--header-color' property on the root element.
	</div>

	<div class='example'>
		If a <a>custom property</a> is declared multiple times,
		the standard cascade rules help resolve it.
		Variables always draw from the computed value of the associated custom property on the same element:

		<pre>
		:root { --color: blue; }
		div { --color: green; }
		#alert { --color: red; }
		* { color: var(--color); }

		&lt;p><span style="color: blue">I inherited blue from the root element!</span>&lt;/p>
		&lt;div><span style="color: green">I got green set directly on me!</span>&lt;/div>
		&lt;div id='alert'>
			<span style="color: red">While I got red set directly on me!</span>
			&lt;p><span style="color: red">I'm red too, because of inheritance!</span>&lt;/p>
		&lt;/div>
		</pre>
	</div>

	<div class='example'>
		A real-world example of <a>custom property</a> usage
		is easily separating out strings from where they're used,
		to aid in maintenance of internationalization:

		<pre class='lang-css'>
		:root,
		:root:lang(en) {--external-link: "external link";}
		:root:lang(el) {--external-link: "εξωτερικός σύνδεσμος";}

		a[href^="http"]::after {content: " (" var(--external-link) ")"}
		</pre>

		The variable declarations can even be kept in a separate file,
		to make maintaining the translations simpler.
	</div>


<!-- Big Text: Syntax

 ███▌  █   ▐▌ █    █▌ █████▌  ███▌  █     █
█▌  █▌ ▐▌  █  █▌   █▌   █▌   ▐█ ▐█   █   █
█▌      █ ▐▌  ██▌  █▌   █▌   █▌  █▌   █ █
 ███▌   ▐▌█   █▌▐█ █▌   █▌   █▌  █▌    █
    █▌   █▌   █▌  ██▌   █▌   █████▌   █ █
█▌  █▌   █▌   █▌   █▌   █▌   █▌  █▌  █   █
 ███▌    █▌   █▌   ▐▌   █▌   █▌  █▌ █     █
-->

<h3 id='syntax'>
Custom Property Value Syntax</h3>

	The allowed syntax for <a>custom properties</a> is extremely permissive.
	The <<declaration-value>> production matches <em>any</em> sequence of one or more tokens,
	so long as the sequence does not contain
	<<bad-string-token>>,
	<<bad-url-token>>,
	unmatched <<)-token>>, <<]-token>>, or <<}-token>>,
	or top-level <<semicolon-token>> tokens or <<delim-token>> tokens with a value of "!".

	<wpt>
	long-variable-reference-crash.html
	test_variable_legal_values.html
	variable-declaration-15.html
	variable-declaration-24.html
	variable-declaration-25.html
	variable-declaration-26.html
	variable-declaration-59.html
	</wpt>

	In addition, if the value of a <a>custom property</a> contains a ''var()'' reference,
	the ''var()'' reference must be valid according to the specified ''var()'' grammar.
	If not, the <a>custom property</a> is invalid and must be ignored.

	Note: This definition,
	along with the general CSS syntax rules,
	implies that a custom property value never includes an unmatched quote or bracket,
	and so cannot have any effect on larger syntax constructs,
	like the enclosing style rule,
	when reserialized.

	Note: Custom properties can contain a trailing ''!important'',
	but this is automatically removed from the property's value by the CSS parser,
	and makes the custom property "important" in the CSS cascade.
	In other words, the prohibition on top-level "!" characters
	does not prevent ''!important'' from being used,
	as the ''!important'' is removed before syntax checking happens.

	<wpt>
	variable-declaration-20.html
	variable-declaration-23.html
	</wpt>

	<div class='example'>
		For example, the following is a valid custom property:

		<pre>
		--foo: if(x > 5) this.width = 10;
		</pre>

		While this value is obviously useless as a <em>variable</em>,
		as it would be invalid in any normal property,
		it might be read and acted on by JavaScript.
	</div>

	The values of custom properties,
	and the values of ''var()'' functions substituted into custom properties,
	are <em>case-sensitive</em>,
	and must be preserved in their original author-given casing.
	(Many CSS values are <a>ASCII case-insensitive</a>,
	which user agents can take advantage of by "canonicalizing" them into a single casing,
	but that isn't allowed for custom properties.)

	<wpt>
	variable-declaration-38.html
	variable-declaration-39.html
	</wpt>

	<div class=note>
		Because custom properties can contain <em>anything</em>,
		there is no general way to know how to interpret what's inside of them
		(until they're substituted into a known property with ''var()'').
		Rather than have them <em>partially</em> resolve in some cases but not others,
		they're left completely unresolved;
		they're a bare stream of [[css-syntax#tokenization|CSS tokens]] interspersed with ''var()'' functions.

		This has some knock-on implications.
		For example, relative URLs in CSS
		are resolved against the base URL of the stylesheet the value appears in.
		However, if a custom property like ''--my-image: url(foo.jpg);'' shows up in an <code>"/a/style.css"</code> stylesheet,
		it will not resolve into an absolute URL immediately;
		if that variable is later used in a <em>different</em> <code>"/b/style.css"</code> stylesheet
		like ''background: var(--my-image);'',
		it will resolve <em>at that point</em> to <code>"/b/foo.jpg"</code>.
	</div>

<!-- Big Text: Guaranteed

 ███▌  █▌  █▌  ███▌  ████▌   ███▌  █    █▌ █████▌ █████▌ █████▌ ████▌
█▌  █▌ █▌  █▌ ▐█ ▐█  █▌  █▌ ▐█ ▐█  █▌   █▌   █▌   █▌     █▌     █▌  █▌
█▌     █▌  █▌ █▌  █▌ █▌  █▌ █▌  █▌ ██▌  █▌   █▌   █▌     █▌     █▌  █▌
█▌ ██▌ █▌  █▌ █▌  █▌ ████▌  █▌  █▌ █▌▐█ █▌   █▌   ████   ████   █▌  █▌
█▌  █▌ █▌  █▌ █████▌ █▌▐█   █████▌ █▌  ██▌   █▌   █▌     █▌     █▌  █▌
█▌  █▌ █▌  █▌ █▌  █▌ █▌ ▐█  █▌  █▌ █▌   █▌   █▌   █▌     █▌     █▌  █▌
 ███▌   ███▌  █▌  █▌ █▌  █▌ █▌  █▌ █▌   ▐▌   █▌   █████▌ █████▌ ████▌
-->
<!-- Big Text: invalid

████ █    █▌ █▌   █▌  ███▌  █▌    ████ ████▌
 ▐▌  █▌   █▌ █▌   █▌ ▐█ ▐█  █▌     ▐▌  █▌  █▌
 ▐▌  ██▌  █▌ █▌   █▌ █▌  █▌ █▌     ▐▌  █▌  █▌
 ▐▌  █▌▐█ █▌ ▐▌   █  █▌  █▌ █▌     ▐▌  █▌  █▌
 ▐▌  █▌  ██▌  █  ▐▌  █████▌ █▌     ▐▌  █▌  █▌
 ▐▌  █▌   █▌  ▐▌ █   █▌  █▌ █▌     ▐▌  █▌  █▌
████ █▌   ▐▌   ▐█    █▌  █▌ █████ ████ ████▌
-->

<h3 id='guaranteed-invalid'>
Guaranteed-Invalid Values</h3>

	The initial value of a [=custom property=] is a <dfn export>guaranteed-invalid value</dfn>.

	The [=guaranteed-invalid value=] is, well,
	guaranteed to be invalid.
	If it ever appears in a property value,
	then at [=computed value=] time
	that property becomes [=invalid at computed-value time=].

	Non-property contexts will define their own behavior for the [=guaranteed-invalid value=],
	but it will always be "invalid" in some sense.

	The [=guaranteed-invalid value=] serializes as the empty string,
	but actually writing an empty value into a custom property,
	like <nobr>''--foo:;''</nobr>,
	is a valid (empty) value,
	not the [=guaranteed-invalid value=].
	If, for whatever reason,
	one wants to manually reset a [=custom property=] to the [=guaranteed-invalid value=],
	using the keyword ''initial'' will do this.

	Note: Other than invoking the [=initial value=]
	of a non-registered [=custom property=],
	the only way to create the [=guaranteed-invalid value=]
	is by having an invalid [=arbitrary substitution function=].



<!-- Big Text: cycles

 ███▌  █   ▐▌  ███▌  █▌    █████▌  ███▌
█▌  █▌ ▐▌  █  █▌  █▌ █▌    █▌     █▌  █▌
█▌      █ ▐▌  █▌     █▌    █▌     █▌
█▌      ▐▌█   █▌     █▌    ████    ███▌
█▌       █▌   █▌     █▌    █▌         █▌
█▌  █▌   █▌   █▌  █▌ █▌    █▌     █▌  █▌
 ███▌    █▌    ███▌  █████ █████▌  ███▌
-->

<h3 id='cycles'>
Resolving Dependency Cycles</h3>

	<a>Custom properties</a> are left almost entirely unevaluated,
	except that they allow and evaluate the ''var()'' function in their value.
	This can create cyclic dependencies
	where a custom property uses a ''var()'' referring to itself,
	or two or more <a>custom properties</a> each attempt to refer to each other.

	For each element,
	create a directed dependency graph,
	containing nodes for each <a>custom property</a>.
	If the value of a <a>custom property</a> <var>prop</var>
	contains a ''var()'' function referring to the property <var>var</var>
	(including in the fallback argument of ''var()''),
	add an edge between <var>prop</var> and the <var>var</var>.
	<span class='note'>Edges are possible from a custom property to itself.</span>

	If there is a cycle in the dependency graph,
	all the <a>custom properties</a> in the cycle
	are [=invalid at computed-value time=].

	<wpt>
	variable-cycles.html
	variable-declaration-30.html
	variable-declaration-48.html
	variable-declaration-49.html
	variable-declaration-50.html
	variable-reference-39.html
	</wpt>

	Note: Defined properties that participate in a dependency cycle
	either end up with invalid variables in their value
	(becoming [=invalid at computed-value time=]),
	or define their own cyclic handling
	(like 'font-size' using ''em'' values).
	They do not compute to the [=guaranteed-invalid value=]
	like custom properties do.

	<div class='example'>
		This example shows a custom property safely using a variable:

		<pre>
		:root {
			--main-color: #c06;
			--accent-background: linear-gradient(to top, var(--main-color), white);
		}
		</pre>

		The '--accent-background' property
		(along with any other properties that use ''var(--main-color)'')
		will automatically update when the '--main-color' property is changed.
	</div>

	<div class='example invalid-example'>
		On the other hand,
		this example shows an invalid instance of variables depending on each other:

		<pre>
		:root {
			--one: calc(var(--two) + 20px);
			--two: calc(var(--one) - 20px);
		}
		</pre>

		Both '--one' and '--two' are now [=invalid at computed-value time=],
		and compute to the [=guaranteed-invalid value=]
		rather than lengths.
	</div>

	It is important to note that
	<a>custom properties</a> resolve any ''var()'' functions in their values at computed-value time,
	which occurs <em>before</em> the value is inherited.
	In general,
	cyclic dependencies occur only when multiple custom properties on the same element refer to each other;
	custom properties defined on elements higher in the element tree can never cause a cyclic reference with properties defined on elements lower in the element tree.

	<wpt>
	variable-declaration-51.html
	variable-declaration-52.html
	</wpt>

	<div class='example'>
		For example,
		given the following structure,
		these custom properties are <strong>not</strong> cyclic,
		and all define valid variables:

		<xmp highlight=markup>
			<one><two><three /></two></one>
			<style>
			one   { --foo: 10px; }
			two   { --bar: calc(var(--foo) + 10px); }
			three { --foo: calc(var(--bar) + 10px); }
			</style>
		</xmp>

		The &lt;one> element defines a value for '--foo'.
		The &lt;two> element inherits this value,
		and additionally assigns a value to '--bar' using the ''foo'' variable.
		Finally,
		the &lt;three> element inherits the '--bar' value
		<em>after</em> variable substitution
		(in other words, it sees the value ''calc(10px + 10px)''),
		and then redefines '--foo' in terms of that value.
		Since the value it inherited for '--bar' no longer contains a reference to the '--foo' property defined on &lt;one>,
		defining '--foo' using the ''var(--bar)'' variable is not cyclic,
		and actually defines a value that will eventually
		(when referenced as a variable in a normal property)
		resolve to ''30px''.
	</div>


<!-- Big Text: var()

█▌   █▌  ███▌  ████▌    ██ ██
█▌   █▌ ▐█ ▐█  █▌  █▌  █▌   ▐█
█▌   █▌ █▌  █▌ █▌  █▌ █▌     ▐█
▐▌   █  █▌  █▌ ████▌  █▌     ▐█
 █  ▐▌  █████▌ █▌▐█   █▌     ▐█
 ▐▌ █   █▌  █▌ █▌ ▐█   █▌   ▐█
  ▐█    █▌  █▌ █▌  █▌   ██ ██
-->


<h2 id='using-variables'>
Using Cascading Variables: the ''var()'' notation</h2>

	The value of a <a>custom property</a> can be substituted into the value of another property
	with the ''var()'' function.
	The syntax of ''var()'' is:

	<pre class='prod'>
	<dfn>var()</dfn> = var( <<custom-property-name>> , <<declaration-value>>? )
	</pre>

	The ''var()'' function is an [=arbitrary substitution function=].

	<wpt>
	variable-reference-07.html
	variable-reference-08.html
	variable-reference-09.html
	variable-reference-10.html
	variable-reference-17.html
	variable-reference-20.html
	variable-reference-21.html
	variable-reference-22.html
	variable-reference-23.html
	variable-reference-24.html
	variable-reference-25.html
	variable-reference-28.html
	variable-reference-29.html
	variable-reference-31.html
	variable-reference-32.html
	variable-reference-33.html
	variable-reference-34.html
	variable-reference-35.html
	variable-reference.html
	</wpt>

	<wpt title="@supports">
	variable-supports-01.html
	variable-supports-02.html
	variable-supports-03.html
	variable-supports-04.html
	variable-supports-05.html
	variable-supports-06.html
	variable-supports-07.html
	variable-supports-08.html
	variable-supports-09.html
	variable-supports-10.html
	variable-supports-11.html
	variable-supports-12.html
	variable-supports-13.html
	variable-supports-14.html
	variable-supports-15.html
	variable-supports-16.html
	variable-supports-17.html
	variable-supports-18.html
	variable-supports-19.html
	variable-supports-20.html
	variable-supports-21.html
	variable-supports-22.html
	variable-supports-23.html
	variable-supports-24.html
	variable-supports-25.html
	variable-supports-26.html
	variable-supports-27.html
	variable-supports-28.html
	variable-supports-29.html
	variable-supports-30.html
	variable-supports-31.html
	variable-supports-32.html
	variable-supports-33.html
	variable-supports-34.html
	variable-supports-35.html
	variable-supports-36.html
	variable-supports-37.html
	variable-supports-38.html
	variable-supports-39.html
	variable-supports-40.html
	variable-supports-41.html
	variable-supports-42.html
	variable-supports-43.html
	variable-supports-44.html
	variable-supports-45.html
	variable-supports-46.html
	variable-supports-47.html
	variable-supports-48.html
	variable-supports-49.html
	variable-supports-50.html
	variable-supports-51.html
	variable-supports-52.html
	variable-supports-53.html
	variable-supports-54.html
	variable-supports-55.html
	variable-supports-56.html
	variable-supports-57.html
	variable-supports-58.html
	variable-supports-59.html
	variable-supports-60.html
	variable-supports-61.html
	variable-supports-62.html
	variable-supports-63.html
	variable-supports-64.html
	variable-supports-65.html
	variable-supports-66.html
	variable-supports-67.html
	</wpt>

	The first argument to the function is the name of the <a>custom property</a> to be substituted.
	The second argument to the function, if provided,
	is a fallback value,
	which is used as the substitution value when the value of the referenced <a>custom property</a>
	is the [=guaranteed-invalid value=].

	<wpt>
	variable-declaration-08.html
	variable-declaration-09.html
	variable-declaration-10.html
	variable-declaration-11.html
	variable-declaration-12.html
	variable-declaration-13.html
	variable-declaration-22.html
	</wpt>

	In an exception to the usual <a grammar lt=,>comma elision rules</a>,
	which require commas to be omitted when they're not separating values,
	a bare comma, with nothing following it,
	must be treated as valid in ''var()'',
	indicating an empty fallback value.

	<wpt>
	variable-declaration-07.html
	variable-declaration-37.html
	variable-reference-06.html
	variable-reference-11.html
	variable-reference-26.html
	variable-reference-27.html
	</wpt>

	Note: That is, ''var(--a,)'' is a valid function,
	specifying that if the ''--a'' custom property is invalid or missing,
	the ''var()'' should be replaced with nothing.

	Note: The syntax of the fallback, like that of <a>custom properties</a>, allows commas.
	For example, ''var(--foo, red, blue)'' defines a fallback of ''red, blue'';
	that is, anything between the first comma and the end of the function is considered a fallback value.

	<div class='example'>
		The fallback value allows for some types of defensive coding.
		For example,
		an author may create a component
		intended to be included in a larger application,
		and use variables to style it
		so that it's easy for the author of the larger application
		to theme the component to match the rest of the app.

		Without fallback,
		the app author must supply a value for every variable that your component uses.
		With fallback, the component author can supply defaults,
		so the app author only needs to supply values for the variables they wish to override.

		<pre>
		/* In the component's style: */
		.component .header {
			color: var(--header-color, blue);
		}
		.component .text {
			color: var(--text-color, black);
		}

		/* In the larger application's style: */
		.component {
			--text-color: #080;
			/* header-color isn't set,
			   and so remains blue,
			   the fallback value */
		}
		</pre>
	</div>

	<div algorithm="resolve a var()">
		To <dfn export>[=resolve an arbitrary substitution function|resolve a var() function=]</dfn>:

		1. Let |result| be the value of the [=custom property=]
			named by the function's first argument,
			on the element the function's property is being applied to.

		2. Let |fallback| be the value of the function's second argument,
			defaulting to the [=guaranteed-invalid value=]
			if it doesn't have a second argument.

		3. If the [=custom property=]
			named by the ''var()''’s first argument
			is [=animation-tainted=],
			and the ''var()'' is being used in a property that is [=not animatable=],
			set |result| to the [=guaranteed-invalid value=].

		4. Return |result| and |fallback|.
	</div>



<!-- Big Text: cssom

 ███▌   ███▌   ███▌   ███▌  █     █
█▌  █▌ █▌  █▌ █▌  █▌ █▌  █▌ ██   ██
█▌     █▌     █▌     █▌  █▌ █▌█ █▐█
█▌      ███▌   ███▌  █▌  █▌ █▌ █ ▐█
█▌         █▌     █▌ █▌  █▌ █▌   ▐█
█▌  █▌ █▌  █▌ █▌  █▌ █▌  █▌ █▌   ▐█
 ███▌   ███▌   ███▌   ███▌  █▌   ▐█
-->


<h2 id='apis'>
APIs</h2>

	All <a>custom property</a> <a>declarations</a> have the <a for="CSS declaration" spec=cssom>case-sensitive flag</a> set.

	<wpt>
	variable-definition.html
	variable-invalidation.html
	</wpt>

	Note: Custom properties do not appear on a CSSStyleDeclaration object in camel-cased form,
	because their names may have both upper and lowercase letters
	which indicate distinct custom properties.
	The sort of text transformation that automatic camel-casing performs is incompatible with this.
	They can still be accessed by their proper name via <a method>getPropertyValue()</a>/etc.

<h3 id='serializing-custom-props'>
Serializing Custom Properties</h3>

	Custom property names must be serialized
	as the exact code point sequence provided by the author,
	including not altering the case.

	Note: For non-custom properties,
	property names are restricted to the ASCII range and are <a>ASCII case-insensitive</a>,
	so implementations typically serialize the name lowercased.

	Specified values of [=custom properties=] must be serialized
	<em>exactly as specified by the author</em>.
	Simplifications that might occur in other properties,
	such as dropping comments,
	normalizing whitespace,
	reserializing numeric tokens from their value,
	etc.,
	must not occur.

	Computed values of [=custom properties=] must similarly be serialized
	<em>exactly as specified by the author</em>,
	save for the replacement of any ''var()'' functions.

	<wpt>
	variable-reference-shorthands-cssom.html
	variable-reference-variable.html
	</wpt>

	<div class=example>
		For example, given the following properties:

		<pre>
			--y: /* baz */;
			--x: /* foo */ var(--y) /* bar */;
		</pre>

		the serialization of the specified value of ''--x''
		must be <code>"/* foo */ var(--y) /* bar */"</code>,
		while the serialization of the computed value of ''--x''
		must be <code>"/* foo */ /* baz */ /* bar */"</code>.

		(Note that the leading whitespace on the value is automatically trimmed by the CSS parser;
		it's not preserved here.)
	</div>

	<div class=note>
		This requirement exists because authors sometimes store non-CSS information in custom properties,
		and "normalizing" this information can change it in ways that break author code.

		For example, storing a UUID in a custom property,
		like ''--uuid: 12345678-12e3-8d9b-a456-426614174000'',
		requires the UUID to be echoed back out as written
		when it's accessed by script.

		This value is technically parsed by CSS as a series of adjacent numbers and dimensions.
		In particular, the segment "-12e3" parses as a number, equal to -12000.
		Reserializing it in that form,
		as required by CSSOM in other contexts,
		would fatally break the author's use of the value.
	</div>


<!-- Big Text: etc

█████▌ █████▌  ███▌
█▌       █▌   █▌  █▌
█▌       █▌   █▌
████     █▌   █▌
█▌       █▌   █▌
█▌       █▌   █▌  █▌
█████▌   █▌    ███▌
-->
<h2 id='changes'>
Changes</h2>

<h3 id='changes-20220616'>
Changes Since the 16 June 2022 CR Snapshot</h3>

	* Clarified that the comment-insertion can happen with 0+ comments between the original tokens, not just exactly 1.
	* Clarified the transition behavior of custom properties, in a note

<h3 id='changes-20211111'>
Changes Since the 11 November 2021 CR Draft</h3>

	* Clarified that custom properties apply all pseudo-elements (including those with restricted property lists)
	* Added example to illustrate issues with combining characters, ligatures, etc
	* Strengthened wording around similar-appearing variable names that use distinct codepoint sequences
	* Clarified an example by using more visually distinct languages as examples (English and Greek)
	* Split Security and Privacy into separate sections

<h3 id='changes-20151203'>
Changes Since the 03 December 2015 CR</h3>

	* Now that [[css-syntax-3]] auto-trims whitespace from declaration values,
		made <<declaration-value>> optional in the custom property grammar,
		so that empty variables are still allowed.
		(<a href="https://github.com/w3c/csswg-drafts/issues/774#issuecomment-434571254">Issue 774</a>)
	* Similarly, made empty fallbacks valid in ''var()''.
	* The <css>--</css> property is reserved for future use by CSS.
	* Added concept of "animation-tainted",
		to prevent non-animatable properties
		from using a variable to smuggle in some animatability.
	* Defined the [=guaranteed-invalid value=]
		to make the initial value of custom properties
		and the result of cycles or substitution failure
		more straightforward,
		and allow failure to propagate thru substitutions
		until finally intercepted by a fallback.
	* Defined that cycles trigger [=invalid at computed-value time=] behavior.
	* Allowed variables to resolve to a CSS-wide keyword
		(only possible by providing it as a fallback).
	* Clarified that [=registered custom properties=] act like non-custom properties
		when they're [=invalid at computed-value time=].
	* Made longhands with ''var()''s also trigger their shorthands to be unserializable,
		like longhands with pending-substitution values already did.
	* Required UAs to defend against exponential substitution attacks.
	* Defined how to serialize the <em>values</em> of custom properties
		(previously, only the property name's serialization was specified).

<h3 id='changes-20140506'>
Changes since the May 6 2014 Last Call Working Draft</h3>

	* Serialization of longhands when shorthand uses a variable was defined.
	* Link to DOM's definition of "case-sensitive".
	* Added example of using variables with '':lang()'' to do simple i18n.
	* Clarified that usage of ''var()'' in a custom property must be valid per the ''var()'' grammar.


<h2 id="acks">
Acknowledgments</h2>

	Many thanks to several people in the CSS Working Group for keeping the dream of variables alive over the years,
	particularly Daniel Glazman and David Hyatt.
	Thanks to multiple people on the mailing list for helping contribute to the development of this incarnation of variables,
	particularly
	Brian Kardell,
	David Baron,
	François Remy,
	Roland Steiner,
	and Shane Stephens.

Privacy Considerations {#privacy}
===============================================

This specification defines a purely author-level mechanism for passing styling information around within a page they control.
As such, there are no new privacy considerations.

Security Considerations {#security}
===============================================

[[css-values-5#long-substitution]] calls out a long-standing Denial-of-Service attack
that can be mounted against "macro-expansion"-like mechanisms,
such as the ''var()'' function,
and mandates a defense against that attack.

<wpt ignore>
<!-- variables-2 tests -->
revert-in-fallback.html
revert-layer-in-fallback.html

<!-- css values -->
variables-animation-math-functions.html

<!-- unrelated to this specification; random bugs etc -->
variable-recalc-with-initial.html
</wpt>

<wpt-rest></wpt-rest>
