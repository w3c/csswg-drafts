<pre class='metadata'>
Title: CSS Color Module Level 5
Shortname: css-color
Level: 5
Status: ED
Prepare for TR: no
Group: csswg
TR: https://www.w3.org/TR/css-color-5/
ED: https://drafts.csswg.org/css-color-5/
<!-- Previous Version: https://www.w3.org/TR/2021/WD-css-color-5-20211215/ -->
Work Status: exploring
!Delta Spec: yes
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Una Kravets, Google, https://una.im, w3cid 115525
Editor: Lea Verou, Invited Expert, http://lea.verou.me/about, w3cid 52258
Editor: Adam Argyle, Google, https://nerdy.dev, w3cid 112669
Abstract: This module extends CSS Color [[css-color-4]] to add color modification functions.
Repository: w3c/csswg-drafts
WPT Path Prefix: css/css-color/
WPT Display: open
</pre>

<pre class='ignored-specs'>
spec:css-color-3
</pre>

<pre class="link-defaults">
spec:css-color-4; type:dfn; text:color
spec:css-color-4; type:dfn; text:color space
spec:css-color-4; type:dfn; text:gamut
spec:css-color-4; type:dfn; text:rectangular orthogonal color
spec:css-color-4; type:dfn; text:cylindrical polar color
</pre>
<link rel="stylesheet" href="style.css" />
<style>
	table.deltaE td {border: 4px solid white; padding: 6px; font-size: 1.4em;}
	table.deltaE td.dE0 { background: rgb(68, 243, 91)}
	table.deltaE td.dE1 { background: rgb(153, 243, 68)}
	table.deltaE td.dE2 { background: rgb(217, 243, 68)}
	table.deltaE td.dE3 { background: rgb(243, 240, 68)}
	table.deltaE td.dE4 { background: rgb(243, 202, 68)}
	table.deltaE td.dE5 { background: rgb(243, 103, 68); color: white}
</style>

Introduction {#intro}
=====================

	<em>This section is not normative.</em>

	Web developers, design tools and design system developers
	often use color functions to assist in scaling the design
	of their component color relations.
	With the increasing usage of design systems that support multiple platforms
	and multiple user preferences, like the increased capability of Dark Mode in UI,
	this becomes even more useful to not need to manually set color,
	and to instead have a single source from which schemes are calculated.

	<figure>
		<p><img src="images/LC-picker-scale.png" alt="LC color picker" style="width: 40vmin"><br/>
			<img src="images/LC-picker-map2.png" alt="chloropleth map of the US" style="width: 48vmin"></p>
		<figcaption>Above, a color picker operating in CIE LCH space.
			Here, a pair of colors are being used
			to define a color scale
			on the Chroma-Lightness plane (constant Hue).
			Below, the color scale in use on a choropleth map.
		</figcaption>
	</figure>

	<!-- from http://tristen.ca/hcl-picker/#/clh/8/267/0023A5/F8E0D6 -->

	Currently Sass, calc() on HSL values, or PostCSS is used to do this.
	However, preprocessors are unable to work on dynamically adjusted colors;
	all current solutions are restricted to the sRGB gamut
	and to the perceptual limitations of HSL
	(colors are bunched up in the color wheel,
	and two colors with visually different lightness,
	like yellow and blue, can have the same HSL lightness).

	This module adds two new functions:
	''color-mix()'',
	''color-contrast()'',
	and extends existing ones with [[#relative-colors|relative color syntax]].

	It also extends the ''color()'' function
	so that not only predefined colorspaces,
	but also custom colorspaces defined by ICC profiles
	(including calibrated CMYK)
	can be used in CSS.

	It also adds ''device-cmyk'',
	a representation of
	uncalibrated cmyk color.


<!--
██     ██ ████ ██     ██
███   ███  ██   ██   ██
████ ████  ██    ██ ██
██ ███ ██  ██     ███
██     ██  ██    ██ ██
██     ██  ██   ██   ██
██     ██ ████ ██     ██
-->
<!--
	https://caniuse.com/mdn-css_types_color_color-mix
-->

Mixing colors: the ''color-mix()'' function {#color-mix}
=====================================================

	This function takes two <<color>> specifications
	and returns the result of mixing them,
	in a given <<color-space>>,
	by a specified amount.


<pre class='prod'>
	<dfn>color-mix()</dfn> = color-mix( <<color-interpolation-method>> , [ <<color>> && <<percentage [0,100]>>? ]#{2})
</pre>

<!-- bikeshed complains that color-mix-computed.html does not exist, but it does  -->
<wpt pathprefix="css/css-color/parsing">
	color-mix-computed.html
	color-mix-invalid.html
	color-mix-valid.html
</wpt>

<h3 id="color-mix-percent-norm">
	Percentage normalization
</h3>

	Percentages are required to be in the range 0% to 100%. Negative percentages are specifically disallowed. The percentages are normalized as follows:

	1. Let <var>p1</var> be the first percentage and <var>p2</var> the second one.
	2. If both percentages are omitted, they each default to 50%
		(an equal mix of the two colors).
	3. Otherwise, if <var>p2</var> is omitted, it becomes 100% - <var>p1</var>
	4. Otherwise, if <var>p1</var> is omitted, it becomes 100% - <var>p2</var>
	5. If the percentages sum to zero, the function is invalid.
	6. Otherwise, if both are provided and add up to greater than 100%,
		they are scaled accordingly so that they add up to 100%.
	7. Otherwise, if both are provided and add up to less than 100%,
		the sum is saved as an alpha multiplier.
		They are then scaled accordingly so that they add up to 100%.

	This means that
	<var>p1</var> becomes <var>p1</var> / (<var>p1</var> + <var>p2</var>)
	and
	<var>p2</var> becomes <var>p2</var> / (<var>p1</var> + <var>p2</var>).

<wpt>
	color-mix-percents-01.html
	color-mix-percents-02.html
</wpt>

<div class="example" id="ex-mix-syntactic">
	<!-- https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2Fe37b01c449283352482d05fae52b9452 -->
	These syntactic forms are thus all equivalent:

	<pre class="lang-css">
		color-mix(in lch, purple 50%, plum 50%)
		color-mix(in lch, purple 50%, plum)
		color-mix(in lch, purple, plum 50%)
		color-mix(in lch, purple, plum)
		color-mix(in lch, plum, purple)
		color-mix(in lch, purple 80%, plum 80%)
	</pre>

	All produce a 50-50 mix of <span class="swatch" style="--color: purple"></span> purple and <span class="swatch" style="--color: plum"></span> plum,
	in lch: <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%)"></span> lch(51.51% 52.21 325.8) which is <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%)"></span> rgb(68.51% 36.01% 68.29%).

	However, this form is <em>not</em> the same, as the alpha is less than one:

	<pre class="lang-css">
		color-mix(in lch, purple 30%, plum 30%)
	</pre>

	This produces <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%, 0.6)"></span> lch(51.51% 52.21 325.8 / 0.6) which is <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%, 0.6)"></span> rgb(68.51% 36.01% 68.29% / 0.6).
</div>

<h3 id="color-mix-result">
	Calculating the result of color-mix
</h3>

After normalizing both percentages, the result is produced via the following algorithm:

1. Both colors are converted to the specified <<color-space>>.
	If the specified color space
	cannot express the color
	(for example, the ''hsl'' and ''hwb'' spaces
	cannot express colors outside the ''sRGB'' gamut),
	gamut mapping will occur.
2. Colors are then interpolated in the 	specified color space,
	as described in [[css-color-4#interpolation]].
	If the specified color space is a ''cylindrical-polar-color'' space,
	then the <<hue-interpolation-method>> controls the
	interpolation of hue, as described in
	[[css-color-4#hue-interpolation]].
	If no <<hue-interpolation-method>> is specified, it is as if
	''shorter'' had been specified.
	If the specified colorspace is a
	''rectangular-orthogonal-color'' space,
	then specifying a <<hue-interpolation-method>> is an error.
3. If an alpha multiplier was produced during percentage normalization,
	the alpha component of the interpolated result is multiplied
	by the alpha multiplier.

<wpt>
	color-mix-basic-001.html
	color-mix-non-srgb-001.html
</wpt>

The result of mixing is the color at the specified percentage along the progression
of the second color to the first color.

Note: As a corrollary, a percentage of 0% just returns the other color converted to the specified color space,
and a percentage of 100% returns the same color converted to the specified color space.

<div class="example" id="ex-mix-lch-peru40">
	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F2ddd7cf7cf822f2fb2bdc32faeb2b7f6
	-->
	This example produces a mixture of 40% <span class="swatch" style="--color: peru"></span> peru
	and 60% <span class="swatch" style="--color: palegoldenrod"></span> palegoldenrod.

	<pre class="lang-css">color-mix(in lch, peru 40%, palegoldenrod)</pre>

	The mixing is done in ''lch()'' color space.
	Here is a top-down view, looking along the neutral L axis:

	<figure>
		<img src="images/CH-mixing.svg"  width=480 height=480>
		<figcaption>Mixtures of peru and palegoldenrod.
			Peru has a hue angle, measured from the positive a axis,
			of 63.677 degrees
			while palegoldenrod has a hue angle of 98.834 degrees.
			Peru has a chroma, or distance from the central neutral axis, of 54.011
			while palegoldenrod has a chroma of 31.406.
			Mixtures lie along the curve. A 40%/60% mixture is shown.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: peru"></span> peru is lch(62.253% 54.011 63.677)
	  * <span class="swatch" style="--color: palegoldenrod"></span> palegoldenrod is lch(91.374% 31.406 98.834)
	  * the mixed lightness is 62.253 * 40/100 + 91.374 * (100-40)/100 = 79.7256
	  * the mixed chroma is 54.011 * 40/100 + 31.406 * (100-40)/100 = 40.448
	  * the mixed hue is 63.677 * 40/100 + 98.834 * (100-40)/100 = 84.771
	  * the mixed result is <span class="swatch" style="--color: rgb(87.416% 76.036% 47.637%)"></span> lch(79.7256% 40.448 84.771)
</div>

<div class="example" id="ex-mix-lch-teal65">
	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F2fb07e0a4eef97b0d0a1950f94ab3951
	-->
	This example produces the mixture of teal and olive,
	in ''lch'' color space,
	with each lch channel being 65% of the value for teal
	and 35% of the value for olive.

	Note: interpolating on hue and chroma
	keeps the intermediate colors
	as saturated as the endpoint colors.

	<pre class="lang-css">color-mix(in lch, teal 65%, olive);</pre>

	<figure>
		<img src="images/CH-mixing3.svg"  width=500 height=500>
		<figcaption>Mixtures of teal and olive.
			Teal has a hue angle, measured from the positive a axis,
			of 196.4524 degrees
			while olive has a hue angle of 99.5746 degrees.
			Teal has a chroma, or distance from the central neutral axis, of 31.6903
			while olive has a chroma of 56.8124.
			Mixtures lie along the dashed curve. A 65%/35% mixture is shown.
		</figcaption>
	</figure>

	The calculation is as follows:
		* sRGB  <span class="swatch" style="--color: teal"></span> teal (#008080) is lch(47.9855% 31.6903 196.4524)
		* sRGB <span class="swatch" style="--color: olive"></span>  olive (#808000) is lch(52.1496% 56.8124 99.5746)
		* mixed lightness is 47.9855 * 0.65 + 52.1496 * 0.35 = 49.4429
		* mixed chroma is 31.6903 * 0.65 + 56.8124 * 0.35 = 40.4830
		* mixed hue is 196.4524 * 0.65 + 99.5746 * 0.35 = 162.5452
		* mixed result is lch(49.4429% 40.4830 162.5452)
		* which is a slightly-blueish green: <span class="swatch" style="--color: rgb(7.7377% 52.5730% 37.3213%)"></span>  rgb(7.7377% 52.5730% 37.3213%)
</div>

<h3 id="color-mix-color-space-effect">
	Effect of mixing colorspace on color-mix
</h3>

The choice of mixing colorspace can have a large effect on the end result.

<div class="example" id="ex-mix-colorspaces-black-white">
	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F6e9bc5c573fc5afcb11e9ab47c6e1e2f
	-->
	This example is a 50% mix of white and black,
	in three different color spaces.

	<pre class="lang-css">
		color-mix(in lch, white, black);
		color-mix(in xyz, white, black);
		color-mix(in srgb, white, black);
	</pre>

	The calculation is as follows:
		* sRGB  <span class="swatch" style="--color: white"></span> white (#FFF) is lch(100% 0 0)
		* sRGB <span class="swatch" style="--color: black"></span>  black (#000) is lch(0% 0 0)
		* The mix in LCH is <span class="swatch" style="--color: rgb(47% 47% 47%)"></span>  lch(50% 0 0)
		* The mix in XYZ is <span class="swatch" style="--color: rgb(74% 74% 74%)"></span>  lch(76% 0 0)
		* The mix in sRGB is <span class="swatch" style="--color: rgb(50% 50% 50%)"></span>  lch(53.4% 0 0)

	The mix in LCH gives an L value of 50%,
	a perfect mid gray, exactly as expected
	(mixing in Lab would do the same,
	as the Lightness axis is the same in LCH and Lab).

	The mix in XYZ gives a result that is too light;
	XYZ is linear-light but is not perceptually uniform.
	The mix in sRGB gives a result that is a bit too light;
	sRGB is neither perceptually uniform nor linear-light.
</div>

<div class="example" id="ex-mix-xyz">
	This example produces the mixture of
	the a red and a sky blue,
	in ''xyz'' color space,
	with the mixture being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).

	<pre class="lang-css">color-mix(in xyz, rgb(82.02% 30.21% 35.02%) 75.23%, rgb(5.64% 55.94% 85.31%));</pre>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> rgb(82.02% 30.21% 35.02%) is lch(52% 58.1 22.7) which is X=0.3214, Y=0.2014, Z=0.0879.
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> rgb(5.64% 55.94% 85.31%) is lch(56% 49.1 257.1) which is X=0.2070, Y=0.2391, Z=0.5249.
	  * mixed result X=(0.3214 * 0.7523) + (0.2070 * (1 - 0.7523)) = 0.29306.
	  * mixed result Y=(0.2014 * 0.7523) + (0.2391 * (1 - 0.7523)) = 0.21074.
	  * mixed result Z=(0.0879 * 0.7523) + (0.5249 * (1 - 0.7523)) = 0.19614.
	  * mix result is <span class="swatch" style="--color: rgb(72.300% 38.639% 53.557%)"></span> lch(53.0304% 38.9346, 352.8138) which is rgb(72.300% 38.639% 53.557%)
</div>

<div class="example" id="ex-mix-blue-white">

	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F7298c61254db05ec190c21f76ded6c7b
	-->

	This example is a 50% mix of white and blue,
	in three different color spaces.

	<pre class="lang-css">
		color-mix(in lch, white, blue);
		color-mix(in oklch, white, blue);
		color-mix(in srgb, white, blue);
	</pre>

	The calcuation is as follows:
	* <span class="swatch" style="--color: white"></span> white
		is rgb(100% 100% 100%)
		which is lch(100% 0 none)
		which is oklch(100% 0 none)
	* <span class="swatch" style="--color: blue"></span> blue
		is rgb(0% 0% 100%)
		which is lch(29.5683% 131.201 301.364)
		which is oklch(45.201% 0.31321 264.052)
	* <span class="swatch" style="--color: rgb(68.594% 53.794% 100%)"></span> mix
		in lch is lch(64.7841% 65.6008 301.364) which is quite purple
	* <span class="swatch" style="--color: rgb(45.304% 63.808% 100%)"></span> mix
		in oklch is oklch(72.601 0.15661 264.052)
	* <span class="swatch" style="--color: rgb(50% 50% 100%)"></span> mix
		in srgb is rgb(50% 50% 100%) which is also a bit purple
</div>

<div class="example" id="ex-hsl-gamut-map">
	This example is a mix of two colors,
	in ''hsl'' color space,
	where one of the colors to be mixed
	is outside the ''sRGB'' gamut.

	<pre class="lang-css">
		color-mix(in hsl, color(display-p3 0 1 0) 80%, yellow);
	</pre>

	The calcuation is as follows:
	* <span class="swatch oog" style="--color: white"></span> color(display-p3 0 1 0)
		is color(srgb -0.5116 1.01827 -0.3107) which is outside the sRGB gamut
	* after CSS gamut mapping,the new color is
	    <span class="swatch" style="--color: rgb(0% 99.797% 0%)"></span> color(srgb 0 0.99797 0)
	    which can now be converted to ''hsl''
		<span class="swatch" style="--color: rgb(0% 99.797% 0%)"></span> hsl(120 100% 49.898%)
	* <span class="swatch" style="--color: yellow"></span> yellow is
	    <span class="swatch" style="--color: yellow"></span> hsl(60 100% 50%)
	* the hue is 120 × 0.8 + 60 × 0.2 = 108
	* the saturation is 100%
	* the lightness is 49.898 × 0.8 + 50 × 0.2 = 49.9184
	* the mixed result is
	    <span class="swatch" style="--color: rgb(19.969% 99.837% 0%)"></span> hsl(108 100% 49.9184%) which is
	    <span class="swatch" style="--color: rgb(19.969% 99.837% 0%)"></span> color(display-p3 0.48903 0.98415 0.29889)
</div>

<h3 id="color-mix-with-alpha">
	Effect of non-unity alpha on color-mix
</h3>

So far, all the ''color-mix()'' examples
have used fully opaque colors.
To simplify the examples,
the premultilication and unpremultiplication steps
were omitted
because these would simply multiply by 1, and divide by 1,
so the result would be unchanged.

In the general case,
colors may have non-unity alpha components
and thus the premultiply, interpolate, unpremultiply steps
must not be omitted.

<div class="example" id="ex-premultiply-srgb">
	This example is 25% semi-opaque red
	and 75% semi-opaque green.
	mixed in sRGB.
	Both the correct (premultiplied)
	and incorrect (non-premultiplied)
	workings are shown.

	<pre class="lang-css">
		color-mix(in srgb, rgb(100% 0% 0% / 0.7) 25%, rgb(0% 100% 0% / 0.2));
	</pre>

	The calcuation is as follows:
	* <span class="swatch" style="--color: rgb(100% 0% 0% / 0.7)"></span> rgb(100% 0% 0% / 0.7)
		when premultiplied, is [0.7, 0, 0]
	* <span class="swatch" style="--color: rgb(0% 100% 0% / 0.2)"></span> rgb(0% 100% 0% / 0.2)
		when premultiplied, is [0, 0.2, 0]
	* the premultiplied, interpolated result is
		[0.7 * 0.25 + 0 * (1 - 0.25), 0 * 0.25 + 0.2 * (1 - 0.25), 0 * 0.25 + 0 * (1 - 0.25)]
		which is [0.175, 0.150, 0]
	* the interpolated alpha is 0.7 * 0.25 + 0.2 * (1 - 0.25) = 0.325
	* the un-premultiplied result is
		[0.175 / 0.325, 0.150 / 0.325, 0 / 0.325]
		which is [0.53846, 0.46154, 0]
	* so the mixed color is
		<span class="swatch" style="--color: rgba(53.846%, 46.154%, 0%, 0.325)"></span>
		color(srgb 0.53846 0.46154 0 / 0.325)

	The <em>incorrect</em> calculation would be:
	* the interpolated result is
		[1 * 0.25 + 0 * (1 - 0.25), 0 * 0.25 + 1 * (1 - 0.25), 0 * 0.25 + 0 * (1 - 0.25)]
		which is [0.25, 0.75, 0]
	* so the <em>incorrect</em> mixed color is
		<span class="swatch" style="--color: rgba(25%, 75%, 0%, 0.325)"></span>
		color(srgb 0.25 0.75 0 / 0.325)

	This is a <em>huge</em> difference; the ΔE2000 between the correct and incorrect results is 30.7!
</div>

When the percentage normalization generates an alpha multiplier,
the calculation is the same except for an additional last step.

<div class="example" id="ex-premultiply-srgb-2">
	This example is similar to the previous one,
	25% semi-opaque red
	and 75% semi-opaque green.
	mixed in sRGB.

	However in this case the percentages are specified as
	20% of the first color and 60% of the second.
	This adds to 80% so the alpha multiplier is 0.8.

	The mix percentages are then scaled
	by a factor of 100/80:<br>
	20% * 100/80 = 25%<br>
	60% * 100/80 = 75%<br>
	giving the same final mix percentages as the previous example.

	<pre class="lang-css">
		color-mix(in srgb, rgb(100% 0% 0% / 0.7) 20%, rgb(0% 100% 0% / 0.2) 60%);
	</pre>

	The calcuation is as follows:
	* <span class="swatch" style="--color: rgb(100% 0% 0% / 0.7)"></span> rgb(100% 0% 0% / 0.7)
		when premultiplied, is [0.7, 0, 0]
	* <span class="swatch" style="--color: rgb(0% 100% 0% / 0.2)"></span> rgb(0% 100% 0% / 0.2)
		when premultiplied, is [0, 0.2, 0]
	* the premultiplied, interpolated result is
		[0.7 * 0.25 + 0 * (1 - 0.25), 0 * 0.25 + 0.2 * (1 - 0.25), 0 * 0.25 + 0 * (1 - 0.25)]
		which is [0.175, 0.150, 0]
	* the interpolated alpha is 0.7 * 0.25 + 0.2 * (1 - 0.25) = 0.325
	* the un-premultiplied result is
		[0.175 / 0.325, 0.150 / 0.325, 0 / 0.325]
		which is [0.53846, 0.46154, 0]
	* so the mixed color would be
		<span class="swatch" style="--color: rgba(53.846%, 46.154%, 0%, 0.325)"></span>
		color(srgb 0.53846 0.46154 0 / 0.325)
	* there is a 0.8 alpha multiplier,
		so the alpha of the mixed result is actually 0.325 * 0.8 = 0.260
		so the mixed color is actually <span class="swatch" style="--color: rgba(53.846%, 46.154%, 0%, 0.260)"></span>
		color(srgb 0.53846 0.46154 0 / 0.260)
</div>

Note: do not multiply the interpolated alpha by the alpha multiplier
and then use that to undo premultiplication.
That would be correct if the mix percentages were not scaled to sum to 100%,
but they are, so doing it this way would adjust the mixed color <em>twice</em>.

<!--
Let's move this example to the appropriate section when we have the new syntax for making these low-level adjustments
<div class="example">
	This example produces the mixture of a deep green and a sky blue,
	in ''lch()'' color space (the default),
	with the lightness being 40% of the lightness of the green
	(and thus, 60% of the lightness of the blue).
	The chroma and hue of the green are used unchanged in the mixed result.

	<pre class="lang-css">color-mix(rgb(0% 42.35% 33.33%) lightness 40%, rgb(41.2% 69.88% 96.64%));</pre>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(0% 42.35% 33.33%)"></span> rgb(0% 42.35% 33.33%) is lch(40.083% 32.808 171.175)
	  * <span class="swatch" style="--color: rgb(41.2% 69.88% 96.64%)"></span> rgb(41.2% 69.88% 96.64%) is lch(70% 42.5 258.2)
	  * mixed lightness is 40.083 * 0.4 + 70% * (1 - 0.4) = 58.0332
	  * mixed result is <span class="swatch" style="--color: rgb(26.25% 60.68% 50.72%)"></span> lch(58.0332 32.808 171.175)
	  * which is a <span class="swatch" style="--color:  rgb(26.25% 60.68% 50.72%)"></span>  rgb(26.25% 60.68% 50.72%), a lighter green

</div>

<div class="example">
	This example produces the mixture of a red and a sky blue,
	in ''lch()'' color space (the default),
	with the hue being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).
	The shorter hue arc will be used.
	The chroma and lightness of the red are left unchanged.

	<pre class="lang-css">color-mix(lch(52% 58.1 22.7) hue 75.23%, lch(56% 49.1 257.1));</pre>

	<figure>
		<img src="images/CH-mixing2.svg" style="width: 50vmin">
		<figcaption>Mixtures of a red and a sky blue.
			The red has a hue angle, measured from the positive a axis,
			of 22.7 degrees
			while the blue  has a hue angle of 257.1 degrees.
			The red has a chroma, or distance from the central neutral axis, of 58.1
			and the chroma is not interpolated here, just the hue.
			Thus, mixtures lie along the dashed circle.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> lch(52% 58.1 22.7)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> lch(56% 49.1 257.1)
	  * hue difference is |257.1 - 22.7| = 234.4, which is greater than 180; the shorter arc is 54.4 degrees.
	  * mixed hue is (22.7 + 360) * 0.7523 +(257.1 * 0.2477 = 351.59 degrees
	  * mixed result is <span class="swatch" style="--color: rgb(80.672% 28.822% 55.255%)"></span>  lch(52% 58.1 351.59)

</div>

<div class="example">
	This example produces the mixture of a red and a sky blue,
	in ''lch()'' color space (the default),
	with the hue being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).
	The longer hue arc has been specified.
	The chroma and lightness of the red are left unchanged.

	<pre class="lang-css">color-mix(lch(52% 58.1 22.7) hue longer 75.23%, lch(56% 49.1 257.1) );</pre>

	<figure>
		<img src="images/CH-mixing2b.svg" style="width: 50vmin">
		<figcaption>Mixtures of a red and a sky blue.
			The red has a hue angle, measured from the positive a axis,
			of 22.7 degrees
			while the blue  has a hue angle of 257.1 degrees.
			The red has a chroma, or distance from the central neutral axis, of 58.1
			and the chroma is not interpolated here, just the hue.
			Thus, mixtures lie along the dashed circle.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> lch(52% 58.1 22.7)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> lch(56% 49.1 257.1)
	  * hue difference is |257.1 - 22.7| = 234.4, which is greater than 180, but the long arc was requested.
	  * mixed hue is 22.7 * 0.7523 + 257.1 * 0.2477 = 80.76
	  * mixed result is <span class="swatch" style="--color: rgb(61.11% 45.85% 0.41%)"></span>  lch(52% 58.1 80.76)

</div>

<div class="example">
	This example produces the mixture of
	the same two colors as the previous example
	(a red and a sky blue),
	in ''lch()'' color space (the default),
	with the hue being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).
	This time, the lightness is set to 68.4% and
	the chroma is left unchanged.

	<pre class="lang-css">color-mix(rgb(82.02% 30.21% 35.02%) hue 75.23% lightness 68.4%, rgb(5.64% 55.94% 85.31%) );</pre>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> rgb(82.02% 30.21% 35.02%) is lch(52% 58.1 22.7)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> rgb(5.64% 55.94% 85.31%) is lch(56% 49.1 257.1)
	  * mixed hue is 22.7 * 0.7523 + 257.1 * 0.2477 = 80.76
	  * new lightness is specified as 68.4%
	  * mixed result is <span class="swatch" style="--color: rgb(79.67% 62.48% 22.09%)"></span>  lch(68.4% 58.1 80.76) which is rgb(79.67% 62.48% 22.09%)

</div>




<div class="example">
	This example produces the mixture of red and yellow,
	in ''lch()'' color space (the default),
	with the lightness being 30% of the lightness of red
	(and thus, 70% of the lightness of yellow).
	The chroma and hue of red are left unchanged.

	<pre class="lang-css">color-mix(red lightness 30%, yellow );</pre>

	The calculation is as follows:
	  * sRGB <span class="swatch" style="--color: red"></span> red (#F00) is lch(54.2917% 106.8390 40.8526)
	  * sRGB <span class="swatch" style="--color: yellow"></span> yellow (#FF0) is lch(97.6071% 94.7077 99.5746)
	  * mixed lightness is 54.2917 * 0.3 + 97.6071 * 0.7 = 84.6125
	  * mixed result is <span class="swatch oog"></span> lch(84.6125% 106.8390 40.8526)
	  * which is a very light, saturated red
		* (and well outside the gamut of sRGB: rgb(140.4967% 51.2654% 32.6891%))
		* even outside the gamut of P3: color(display-p3 1.3033 0.5756 0.4003)

	This example demonstrates that not all colors which can be mixed, can be displayed on current devices.
</div>
-->

<!--
<img src="images/mix_red_yellow_lightness30.png" alt="Result of color-mix(red, yellow, lightness(30%)" />
 this image incorrectly shows red and yellow to be outside gamut as well, which is confusing.
     it also shows the result color after per-component clipping, which is not desirable -->


<!--
<img src="images/mix_red_yellow_65.png" alt="Result of color-mix(red, yellow, 65%" /> -->

<!-- todo: example that specifies a different color space -->

<!-- worked example in Lab space
	with 38% of a and 38% of b
	showing desaturated result compared to LCH interpolation

	red=[52, 58.1, 22.7]
Array(3) [ 52, 58.1, 22.7 ]

blue=[56, 49.1, 257.1]
Array(3) [ 56, 49.1, 257.1 ]

red_lab=LCH_to_Lab(red)
Array(3) [ 52, 53.59946299740792, 22.42114105904291 ]

blue_lab=LCH_to_Lab(blue)
Array(3) [ 56, -10.961580696137688, -47.860774634788996 ]

result_lab=[red_lab[0], 0.38*red_lab[1]+0.62*blue_lab[1], 0.38*red_lab[2]+0.62*blue_lab[2]]
Array(3) [ 52, 13.571615907409644, -21.153646671132876 ]

result_lch=Lab_to_LCH(result_lab)
Array(3) [ 52, 25.132956965414664, 302.683148992448 ]

result_rgb=LCH_to_sRGB(result_lch)
Array(3) [ 0.524461282381659, 0.4582102541032295, 0.6295269395052022 ]

which is rgb(52.446% 45.821% 62.953%)




<div class="example">
	This example produces the mixture of
	the same two colors as the previous example
	(a red and a sky blue),
	in Lab color space,
	with 38% of a and 38% of b.
	The lightness of the red is left unchanged.

	This shows a desaturated result, compared to LCH interpolation,
	because interpolation is in a straight line on the <em>a,b</em> plane
	and can thus pass close to the central, neutral axis.

	<pre class="lang-css">color-mix(lab rgb(82.02% 30.21% 35.02%) a 38% b 38%, rgb(5.64% 55.94% 85.31%));</pre>

	<figure>
		<img src="images/CH-mixing2c.svg" style="width: 50vmin">
		<figcaption>Mixtures of a red and a sky blue.
			The red has a hue angle, measured from the positive a axis,
			of 22.7 degrees
			while the blue  has a hue angle of 257.1 degrees.
			Interpolation is on the a,b plane.
			Thus, mixtures lie along the dashed line
			and pass closer to the neutral axis.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> rgb(82.02% 30.21% 35.02%) is lab(52% 53.599 22.421)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> rgb(5.64% 55.94% 85.31%) is lab(56% -10.962 -47.861)
	  * a is (53.599 * 0.38) + (-10.962 * 0.62) = 13.572
	  * b is (22.421 * 0.38) + (-47.861 * 0.62) = -21.154
	  * result is <span class="swatch" style="--color: rgb(52.446% 45.821% 62.953%)"></span> lab(52% 13.572 -21.154) which is rgb(52.446% 45.821% 62.953%)

</div>
-->

<!-- color-mix() IMPLEMENTATIONS

	Chrome, sRGB only for now
	Implement basic color-mix() functionality, and expose it to chrome code and to content behind a pref.
	https://bugzilla.mozilla.org/show_bug.cgi?id=1695376

	Gecko,
	Implement CSS color-mix function
	https://bugzilla.mozilla.org/show_bug.cgi?id=1682436

	DevTools should understand the color-mix() function
	https://bugzilla.mozilla.org/show_bug.cgi?id=1695382

	[Closed] Implement basic color-mix() functionality, and expose it to chrome code and to content behind a pref.
	https://bugzilla.mozilla.org/show_bug.cgi?id=1695376

	WebKit
	Implemented, shipped in Safari 15.0 as experimental

-->

<!--
 ██████   ███████  ██    ██ ████████ ████████     ███     ██████  ████████
██    ██ ██     ██ ███   ██    ██    ██     ██   ██ ██   ██    ██    ██
██       ██     ██ ████  ██    ██    ██     ██  ██   ██  ██          ██
██       ██     ██ ██ ██ ██    ██    ████████  ██     ██  ██████     ██
██       ██     ██ ██  ████    ██    ██   ██   █████████       ██    ██
██    ██ ██     ██ ██   ███    ██    ██    ██  ██     ██ ██    ██    ██
 ██████   ███████  ██    ██    ██    ██     ██ ██     ██  ██████     ██
-->
<!--
	https://caniuse.com/mdn-css_types_color_color-contrast
-->

Selecting the most contrasting color: the ''color-contrast()'' function {#colorcontrast}
========================================================================================

	This function takes, firstly, a single color
	(typically a background, but not necessarily),
	secondly, a list of two or more colors,
	and thirdly, an optional target <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">luminance contrast</a> [[!WCAG21]].

	The single color is separated from the list
	with the keyword <css>vs</css>
	and the target contrast, if present, is separated from the list
	with the keyword <css>to</css>.

	<pre class='prod'>
		<dfn>color-contrast()</dfn> = color-contrast( <<color>> vs <<color>>#{2,}  [ to [<<number>> | AA | AA-large | AAA | AAA-large]]? )
	</pre>

	The keyword <dfn value for="color-contrast()">AA</dfn> is equivalent to ''4.5'',
	 <dfn value for="color-contrast()">AA-large</dfn> is equivalent to ''3'',
	 <dfn value for="color-contrast()">AAA</dfn> is equivalent to ''7'', and
	 <dfn value for="color-contrast()">AAA-large</dfn> is equivalent to ''4.5'' .

<h3 id="luminance-contrast">
	Calculating luminance and WCAG 2.1 contrast
</h3>

	For each color in the list,
	the CIE Luminance (Y) is calculated,
	relative to a [=D65 whitepoint=].

	For each pair of colors,
	the WCAG 2.1 contrast is calculated:
	contrast = (Y<sub>l</sub> + 0.05) / (Y<sub>d</sub> + 0.05)
	where Y<sub>d</sub> is the luminance of the darker color in the pair
	and Y<sub>l</sub> is the luminance of the lighter color.
	The factor 0.05 represents the luminance contribution of the viewing flare.

	<div class="example">
		Suppose that the single color was

		<pre class="lang-css">color(display-p3 0.38 0.11 0.05)</pre>

		while the first color in the list was

		<pre class="lang-css">yellow</pre>

		The calculation is as follows:
		* <span class="swatch" style="--color: rgb(41.482% 7.941% 1.375%)"></span> color(display-p3 0.38 0.11 0.05) is <span class="swatch" style="--color: rgb(41.482% 7.941% 1.375%)"></span> color(xyz 0.06191 0.03568 0.00463) so the relative luminance is <b>0.03568</b>
		* <span class="swatch" style="--color: yellow"></span> yellow is <span class="swatch" style="--color: yellow"></span> rgb(100% 100% 0%) which is <span class="swatch" style="--color: yellow"></span> color(xyz 0.76998 0.92781 0.13853) so the relative luminance is <b>0.92781</b>
		* the contrast is (0.92781 + 0.05) / (0.03568 + 0.05) = <b>11.4123</b>
	</div>

<h3 id="winner">
	Finding the winning color
</h3>

	It then selects from that list
	the first color to meet or exceed the target contrast.
	If no target is specified,
	it selects the first color with the highest contrast
	to the single color.

	<wpt>
		color-contrast-001.html
		parsing/color-contrast-computed.html
		parsing/color-contrast-invalid.html
		parsing/color-contrast-valid.html
	</wpt>

	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs tan, sienna, var(--myAccent), #d2691e)</pre>

		The calculation is as follows:
			* <span class="swatch" style="--color: wheat"></span> wheat (#f5deb3), the background, has relative luminance 0.749
			* <span class="swatch" style="--color: tan"></span> tan (#d2b48c) has relative luminance 0.482 and contrast ratio <strong>1.501</strong>
			* <span class="swatch" style="--color: sienna"></span> sienna (#a0522d) has relative luminance 0.137 and contrast ratio <strong>4.273</strong>

		Suppose myAccent has the value <span class="swatch" style="--color: #b22222"></span>  #b22222:
			* #b22222 has relative luminance 0.107 and contrast ratio <strong>5.081</strong>
			* <span class="swatch" style="--color: #d2691e"></span> #d2691e has relative luminance 0.305 and contrast ratio <strong>2.249</strong>
		The highest contrast ratio is <strong>5.081</strong> so var(--myAccent) wins

	</div>

	<!-- live example
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2Fec249f376fcecbaa8794f75dbfc1dacf
	-->
	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs bisque, darkgoldenrod, olive, sienna, darkgreen, maroon to AA)</pre>

		The calculation is as follows:
			* <span class="swatch" style="--color: wheat"></span> wheat (#f5deb3), the background, has relative luminance 0.749
			* <span class="swatch" style="--color: bisque"></span> bisque (#ffe4c4) has relative luminance 0.807 and contrast ratio <strong>1.073</strong>
			* <span class="swatch" style="--color: darkgoldenrod"></span> darkgoldenrod (#b8860b) has relative luminance 0.273 and contrast ratio <strong>2.477</strong>
			* <span class="swatch" style="--color: olive"></span> olive (#808000 ) has relative luminance 0.200 and contrast ratio <strong>3.193</strong>
			* <span class="swatch" style="--color: sienna"></span> sienna (#a0522d) has relative luminance 0.137 and contrast ratio <strong>4.274</strong>
			* <span class="swatch" style="--color: darkgreen"></span> darkgreen (#006400 ) has relative luminance 0.091 and contrast ratio <strong>5.662</strong>
			* <span class="swatch" style="--color: maroon"></span> maroon (#800000 ) has relative luminance 0.046 and contrast ratio <strong>8.333</strong>


		The first color in the list which meets the desired contrast ratio of 4.5 is <span class="swatch" style="--color: darkgreen"></span> darkgreen.

	</div>

	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs bisque, darkgoldenrod, olive, sienna, darkgreen, maroon to 5.8)</pre>

		The calculation is as follows:
			* the relative luminances and contrast ratios are the same as the previous example.

		The first color in the list which meets the desired contrast ratio of 5.8 is <span class="swatch" style="--color: maroon"></span> maroon.

	</div>

	The colors in the list (after the keyword vs) are tested sequentially,
	from left to right;
	a color is the temporary winner
	if it has  the highest contrast of all those tested so far.

	List traversal is terminated once the target contrast has been met or exceeded.

	Once the end of the list is reached, if there is no target contrast,
	the current temporary winner is the overall winner.
	Thus, if two colors in the list happen to have the same contrast,
	the earlier in the list wins
	because the later one has the same contrast, not higher.

	If there is a target contrast,
	and the end of the list is reached without meeting that target,
	either ''white'' or ''black'' is returned,
	whichever has the higher contrast.

	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs bisque, darkgoldenrod, olive to AA)</pre>

		The calculation is as follows:
			* the relative luminances and contrast ratios are the same as the previous example.

		No color in the list meets the desired contrast ratio of 4.5,
		so <span class="swatch" style="--color: black"></span> black
		is returned as the contrast (15.982)
		is higher than that of white (1.314).

	</div>

	<div class="example">
		<pre class="lang-css">
			foo {
				--bg: hsl(200 50% 80%);
				--purple-in-hsl: hsl(300 100% 25%);
				color: color-contrast(var(--bg) vs hsl(200 83% 23%), purple, var(--purple-in-hsl));
			  }
		</pre>

		The calculation is as follows:

			* <span class="swatch" style="--color: hsl(200 50% 80%)"></span> --bg is rgb(179 213 230) which has relative luminance 0.628835
			* <span class="swatch" style="--color: hsl(200 83% 23%)"></span> hsl(200 83% 23%) is rgb(10 75 107) which has relative luminance 0.061575 and contrast ratio <strong>6.08409</strong>
			* <span class="swatch" style="--color: purple"></span> purple is rgb(128 0 128) which has relative luminance 0.061487 and contrast ratio <strong>6.08889</strong>
			* <span class="swatch" style="--color: hsl(300 100% 25%)"></span> --purple-in-hsl is also rgb(128 0 128) which has relative luminance 0.061487 and contrast ratio <strong>6.08889</strong>. This is not greater than the contrast for purple, so purple wins.

		The calculated values here are shown to six significant figures, to demonstrate that early rounding to a lower precision would have given the wrong result (0.061575 is very close to 0.061487;
		6.08409 is very close to 6.08889).
		<!-- great example to use in WPT -->
	</div>

<!-- old color-adjust wording might be useful, on choice of color space for adjustment -->

	<!-- Note: not all <<color-adjuster>>s are equally useful.
	Adjustments in LCH are the most useful, which is why it is the default.
	Adjustments on the a and b axes are rarely needed.
	Adjustments in the srgb-related spaces (''srgb'' itself, ''hsl'', ''hwb'')
	are provided mainly for backward compatibility
	with the sorts of adjustments currently done in CSS preprocessors.
	Adjusting the individual x, y and z channels will produce significant hue shifts;
	however, adjusting all three channels together is useful
	and will lighten or darken the color. -->


<!--
████████  ████████ ██          ███    ████████ ████ ██     ██ ████████
██     ██ ██       ██         ██ ██      ██     ██  ██     ██ ██
██     ██ ██       ██        ██   ██     ██     ██  ██     ██ ██
████████  ██████   ██       ██     ██    ██     ██  ██     ██ ██████
██   ██   ██       ██       █████████    ██     ██   ██   ██  ██
██    ██  ██       ██       ██     ██    ██     ██    ██ ██   ██
██     ██ ████████ ████████ ██     ██    ██    ████    ███    ████████
-->

Relative color syntax {#relative-colors}
========================================

In previous levels of this specification,
the color functions could only specify colors in an absolute manner,
by directly specifying all of the color channels.

The new <dfn export>relative color</dfn> syntax
allows existing colors to be modified
using the color functions:
if an <dfn>origin color</dfn> is specified,
then each color channel can <em>either</em> be directly specified,
or taken from the origin color
(and possibly modified with [=math functions=]).

The precise details of each function's changes to accomodate [=relative colors=] are listed below,
but they all follow a common structure:

* An [=origin color=] can be specified with a ''from <<color>>'' value at the start of the function.
* If an [=origin color=] is specified,
	the remaining arguments can either be specified directly, as normal,
	be specified as a <dfn>channel keyword</dfn> referring to one of the channels of the [=origin color=].
	[=Math functions=] can also use these keywords
	to do dynamic modifications of the [=origin color's=] channels.
* [=Relative color=] syntax doesn't change whether an argument is required or optional.
	If the alpha value is omitted, however,
	it defaults to taking from the [=origin color=]
	(rather than defaulting to ''100%'', as it does in the absolute syntax).

If the [=origin color=] was originally specified with a different color function,
it's first converted into the chosen color function,
so it has meaningful values for the channels.

<wpt>
	parsing/relative-color-invalid.html
	parsing/relative-color-valid.html
</wpt>

<div class=example>
	For example, if a theme color is specified as opaque,
	but in a particular instance you need it to be partially transparent:

	<pre highlight=css>
	html { --bg-color: blue; }
	.overlay {
		background: rgb(from var(--bg-color) r g b / 80%);
	}
	</pre>

	In this example, the r, g, and b channels of the [=origin color=] are unchanged,
	indicated by specifying them with the keywords
	drawing their values from the [=origin color=],
	but the opacity is set to ''80%'' to make it slightly transparent,
	regardless of what the [=origin color's=] opacity was.
</div>

<div class=example>
	By using the [=channel keywords=] in a [=math function=],
	an [=origin color=] can be manipulated in more advanced ways.

	<pre highlight=css>
	html { --color: green; }
	.foo {
		--darker-accent: lch(from var(--color) calc(l / 2) c h);
	}
	</pre>

	In this example, the [=origin color=] is darkened
	by cutting its lightness in half,
	without changing any other aspect of the color.

	Note as well that the [=origin color=] is a color keyword
	(effectively RGB),
	but it's automatically interpreted as an LCH color
	due to being used in the ''lch()'' function.
</div>

<div class=example>
	While most uses of [=relative color=] syntax
	will use the [=channel keywords=] in their corresponding argument,
	you can use them in any position.

	For example, to do a rough approximation of grayscaling a color:

	<pre highlight=css>
	--blue-into-gray: rgb(from var(--color)
		                  calc(r * .3 + g * .59 + b * .11)
		                  calc(r * .3 + g * .59 + b * .11)
		                  calc(r * .3 + g * .59 + b * .11));
	</pre>

	Using this,
	''red'' would become ''rgb(30% 30% 30%)'',
	''lime'' would become ''rgb(59% 59% 59%)'',
	and ''blue'' would become ''rgb(11% 11% 11%)''.
	A more moderate color, like ''darkolivegreen'',
	which has RGB values ''rgb(85 107 47)'',
	would become approximately ''rgb(37% 37% 37%)''.

	(Rough because firstly,
	although this looks like a luminance calculation,
	the red green and blue values
	are manipulated in gamma-encoded space
	rather than linear-light;
	secondly,
	the weighting factors are those
	for the obsolete NTSC color space,
	not sRGB.)

	(Note, though, that an easier and more accurate way to grayscale a color
	is to use the ''lch()'' function,
	as that color space is more accurate to human perception:
	''lch(from var(--color) l 0 h)'' preserves the lightness,
	but zeroes out the chroma,
	which determines how "colorful" the color is.)
</div>

<h3 id="relative-RGB">Relative RGB colors</h3>

The grammar of the ''rgb()'' function is extended as follows:

<pre class='prod'>
	<dfn>rgb()</dfn> = rgb( [<<percentage>> | none]{3} [ / [<<alpha-value>> | none] ]? ) |
				  rgb( [<<number>> | none]{3} [ / [<<alpha-value>> | none] ]?
				  rgb( [ from <<color>> ]? [ <<number>> | <<percentage>> | none]{3} [ / <<alpha-value>> ]?  )
	<dfn>&lt;alpha-value></dfn> = <<number>> | <<percentage>>
	</pre>


Within a [=relative color=] syntax ''rgb()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="rgb()">r</dfn>, <dfn value for="rgb()">g</dfn>, and <dfn value for="rgb()">b</dfn>
	are all <<percentage>>s
	that correspond to the [=origin color's=] red, green, and blue channels
	after its conversion to sRGB
* <dfn value for="rgb()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example">
	To manipulate color channels in the sRGB color space:

	<pre>
		rgb(from <span class="swatch" style="--color: indianred"></span> indianred 255 g b)
	</pre>

	This takes the sRGB value of indianred (205 92 92) and replaces the red channel with 255 to give <span class="swatch" style="--color: rgb(255 92 92)"></span>  rgb(255 92 92).
</div>

<h3 id="relative-HSL">Relative HSL colors</h3>

The grammar of the ''hsl()'' function is extended as follows:

<pre class='prod'>
<dfn>hsl()</dfn> = hsl(([from <<color>>]?
			  [<<hue>> | none] [<<percentage>> | none] [<<percentage>> | none]
			  [ / [<<alpha-value>> | none] ]? )
</pre>


Within a [=relative color=] syntax ''hsl()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="hsl()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] HSL hue
	after its conversion to sRGB,
	normalized to a [0deg, 360deg) range
* <dfn value for="hsl()">s</dfn> and <dfn value for="hsl()">l</dfn>
	are <<percentage>>s that correspond to the [=origin color's=] HSL saturation and lightness
	after its conversion to sRGB
* <dfn value for="hsl()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example">
	This adds 180 degrees to the hue angle, giving a complementary color.
	<pre>
		--accent: <span class="swatch" style="--color: lightseagreen"></span> lightseagreen;
		--complement:  <span class="swatch" style="--color: hsl(357deg 70% 41%)"></span> hsl(from var(--accent) calc(h + 180deg) s l);
	</pre>
	lightseagreen is hsl(177deg 70% 41%), so --complement is <span class="swatch" style="--color: hsl(357deg 70% 41%)"></span> hsl(357deg 70% 41%)
</div>

<h3 id="relative-HWB">Relative HWB colors</h3>

The grammar of the ''hwb()'' function is extended as follows:

<pre class='prod'>
	<dfn>hwb()</dfn> = hwb([from <<color>>]?
				  [<<hue>> | none] [<<percentage>> | none] [<<percentage>> | none]
				  [ / [<<alpha-value>> | none] ]? )
</pre>


Within a [=relative color=] syntax ''hwb()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="hwb()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] HWB hue
	after its conversion to sRGB,
	normalized to a [0deg, 360deg) range
* <dfn value for="hwb()">w</dfn> and <dfn value for="hwb()">b</dfn>
	are <<percentage>>s that correspond to the [=origin color's=] HWB whiteness and blackness
	after its conversion to sRGB
* <dfn value for="hwb()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<h3 id="relative-Lab">Relative Lab colors</h3>

The grammar of the ''lab()'' function is extended as follows:

<pre class='prod'>
<dfn>lab()</dfn> = lab([from <<color>>]?
			  [<<percentage>> | none] [<<number>> | none] [<<number>> | none]
			  [ / [<<alpha-value>> | none] ]? )
</pre>


Within a [=relative color=] syntax ''lab()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="lab()">l</dfn> is a <<percentage>>
	that corresponds to the [=origin color's=] CIE Lightness
* <dfn value for="lab()">a</dfn> and <dfn value for="lab()">b</dfn> are <<number>>s
	that correspond to the [=origin color's=] CIELab a and b axises
* <dfn value for="lab()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example">
	Multiple ways to adjust the transparency of a base color:

	* ''lab(from var(--mycolor) l a b / 100%)'' sets the alpha of ''var(--mycolor)'' to 100% regardless of what it originally was.
	* ''lab(from var(--mycolor) l a b / calc(alpha * 0.8))'' reduces the alpha of ''var(--mycolor)'' by 20% of its original value.
	* ''lab(from var(--mycolor) l a b / calc(alpha - 20%))'' reduces the alpha of ''var(--mycolor)'' by 20% of 100%.

	Note that all the adjustments are lossless in the sense that no gamut clipping occurs, since lab() encompasses all visible color.
	This is not true for the alpha adjustments in the sRGB based functions (such as 'rgb()', 'hsl()', or 'hwb()'), which would also convert to sRGB in addition to adjusting the alpha transparency.
</div>

<div class="example">
	Fully desaturating a color to gray, keeping the exact same lightness:

	<pre>
	--mycolor: <span class="swatch" style="--color: orchid"></span> orchid;
	// orchid is lab(62.753% 52.460 -34.103)
	--mygray: <span class="swatch" style="--color: rgb(59.515% 59.515% 59.515%)"></span> lab(from var(--mycolor) l 0 0)
	// mygray is lab(62.753% 0 0) which is rgb(59.515% 59.515% 59.515%)
	</pre>
</div>

<h3 id="relative-OKLab">Relative OKLab colors</h3>

The grammar of the ''oklab()'' function is extended as follows:

<pre class='prod'>
<dfn>oklab()</dfn> = oklab([from <<color>>]?
				  [<<percentage>> | none] [<<number>> | none] [<<number>> | none]
				  [ / [<<alpha-value>> | none] ]? )
</pre>


Within a [=relative color=] syntax ''oklab()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="oklab()">l</dfn> is a <<percentage>>
	that corresponds to the [=origin color's=] OKLab Lightness
* <dfn value for="oklab()">a</dfn> and <dfn value for="oklab()">b</dfn> are <<number>>s
	that correspond to the [=origin color's=] OKLab a and b axes
* <dfn value for="oklab()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<h3 id="relative-LCH">Relative LCH colors</h3>

The grammar of the ''lch()'' function is extended as follows:

<pre class='prod'>
<dfn>lch()</dfn> = lch([from <<color>>]?
				[<<percentage>> | none] [<<number>> | none] [<<hue>> | none]
				[ / [<<alpha-value>> | none] ]? )
</pre>


Within a [=relative color=] syntax ''lch()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="lch()">l</dfn> is a <<percentage>>
	that corresponds to the [=origin color's=] CIE Lightness
* <dfn value for="lch()">c</dfn> is a <<number>>
	that corresponds to the [=origin color's=] LCH chroma
* <dfn value for="lch()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] LCH hue,
	normalized to a [0deg, 360deg) range.
* <dfn value for="lch()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

	Because LCH is both perceptually uniform and chroma-preserving,
	and because the axes correspond to easily understood attributes of a color,
	LCH is a good choice for color manipulation.

<div class="example">
	''lch(from peru calc(l * 0.8) c h)'' produces a color that is 20% darker than <span class="swatch" style="--color: peru"></span> peru or lch(62.2532% 54.0114 63.6769), with its chroma and hue left unchanged.
	The result is <span class="swatch" style="--color: rgb(57.58% 32.47% 3.82%)"> </span> lch(49.80256% 54.0114 63.6769)
</div>

<div class="example">
	This adds 180 degrees to the hue angle, giving the complementary color.
	<pre>
		--accent: <span class="swatch" style="--color: lightseagreen"></span> lightseagreen;
		--complement:  <span class="swatch" style="--color: rgb(88.2814% 51.1047% 58.3039%)"></span> LCH(from var(--accent) l c calc(h + 180deg));
	</pre>
	lightseagreen is LCH(65.4937% 39.4484 190.1013), so --complement is <span class="swatch" style="--color: rgb(88.2814% 51.1047% 58.3039%)"></span> LCH(65.4937% 39.4484 370.1013)
</div>

<div class="example">
	Fully desaturating a color to gray, keeping the exact same lightness:

	<pre>
	--mycolor: <span class="swatch" style="--color: orchid"></span> orchid;
	// orchid is lch(62.753% 62.571 326.973)
	--mygray: <span class="swatch" style="--color: rgb(59.515% 59.515% 59.515%)"></span> lch(from var(--mycolor) l 0 h)
	// mygray is lch(62.753% 0 326.973) which is rgb(59.515% 59.515% 59.515%)
	</pre>

	But now (since the hue was preserved) <em>re-saturating</em> again

	<pre>
	--mymuted: <span class="swatch" style="--color: rgb(72.710% 53.293% 71.224%)"></span> lch(from var(--mygray) l 30 h);
	// mymuted is lch(62.753% 30 326.973) which is rgb(72.710% 53.293% 71.224%)
	</pre>
</div>

However, unlike HSL, manipulations are not guaranteed to be in-gamut.

<div class="example" id="ex-wildly-oog">
	In this example, the aim is to produce a new color
	with the same Lightness and Chroma,
	but the triad (hue differs by 120 degrees).
	The origin color is inside the RGB gamut,
	but rotating the hue in LCH
	produces an out of gamut color.

	<!-- lch(60% 90 320) = lab(60% 68.94 -57.9)

	-->

	<pre>
		--mycolor: <span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span> lch(60% 90 320);
		lch(from var(--mycolor) l c calc(h - 120));
	</pre>

	This gives a very high-chroma blue-green,
	<span class="swatch oog" style="--color: rgb(0% 64.2% 66.3%)"></span> lch(60% 90 200)
	which is color(srgb -0.6 0.698 0.772)
	and thus out of gamut (negative red value) for sRGB.
	Indeed, it is out of gamut for display-p3:
	<span class="swatch oog" style="--color: rgb(0% 64.2% 66.3%)"></span> color(display-p3 -0.46 0.68 0.758)
	and even rec2020:
	<span class="swatch oog" style="--color: rgb(0% 64.2% 66.3%)"></span> color(rec2020 -0.14 0.623 0.729).

	The closest color inside the sRGB gamut would be <span class="swatch" style="--color: rgb(0% 64.2% 66.3%)"></span> lch(60.71% 37.56 201.1)
	which is <span class="swatch" style="--color: rgb(0% 64.2% 66.3%)"></span> rgb(0% 64.2% 66.3%). The difference in chroma (37.5, instead of 90) is huge.

	<figure>
		<img src="images/LCH-rotation-oog.svg"
			width="540" height="520"
			alt="Diagram of CH plane showing relative color manipulation">
		<figcaption>
			This diagram shows the sRGB gamut, in the CIE ab plane.
			Small circles indicate the primary and secondary color.
			The <span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span>
			origin color, shown as a large circle, is in gamut for sRGB;
			becomes <span class="swatch oog" style="--color: #AAA"></span> out of gamut (shown as a grey fill and red border)
			when the LCH hue is rotated -120°.
			The gamut-mapped <span class="swatch" style="--color: rgb(0% 64.2% 66.3%)"></span> result has much lower chroma.
		</figcaption>
	</figure>

	Performing the same operation in HSL will return an in-gamut result.
	But it is unsatisfactory in other ways:

	<pre>
		--mycolor: <span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span> lch(60% 90 320);
		hsl(from var(--mycolor) calc(h - 120) s l);
	</pre>

	In HSL, --mycolor is
	<span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span> hsl(289.18 93.136% 65.531%)
	so subtracting 120 degrees gives
	<span class="swatch" style="--color: rgb(33.428% 97.634% 86.056%)"></span> hsl(169.18 93.136% 65.531%).
	Converting that result back to LCH
	<span class="swatch" style="--color: rgb(33.428% 97.634% 86.056%)"></span> lch(89.0345% 49.3503 178.714)
	we see that, due to the hue rotate in HSL,
	Lightness shot up from 60% to 89%,
	the Chroma has dropped from 90 to 49,
	and the Hue actually changed by 141 degrees not 120.
</div>

<h3 id="relative-OKLCH">Relative OKLCH colors</h3>

The grammar of the ''oklch()'' function is extended as follows:

<pre class='prod'>
<dfn>oklch()</dfn> = oklch([from <<color>>]?
					[<<percentage>> | none] [<<number>> | none] [<<hue>> | none]
					[ / [<<alpha-value>> | none] ]? )
</pre>


Within a [=relative color=] syntax ''oklch()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="oklch()">l</dfn> is a <<percentage>>
	that corresponds to the [=origin color's=] OKLab Lightness
* <dfn value for="oklch()">c</dfn> is a <<number>>
	that corresponds to the [=origin color's=] OKLCH chroma
* <dfn value for="oklch()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] OKLCH hue,
	normalized to a [0deg, 360deg) range.
* <dfn value for="oklch()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example" id="ex-oklch-wildly-oog">
In this example, the aim is again to produce a new color
with the same Lightness and Chroma,
but the triad (hue differs by 120 degrees).
In this example, we will do the manipulation in OKLCH.
The origin color is inside the RGB gamut,
but rotating the hue in OKLCH
again produces an out of gamut color.

<pre>
	--mycolor: <span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span> lch(60% 90 320);
	oklch(from var(--mycolor) l c calc(h - 120));
</pre>

--mycolor is <span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span> oklch(69.012% 0.25077 319.893).
Subtracting 120 from the Hue gives a very high-chroma blue-green,
<span class="swatch oog" style="--color: grey"></span> oklch(69.012% 0.25077 199.893)
which is out of sRGB gamut,
color(srgb -0.6018 0.7621 0.8448)
as the negative red component indicates.
Bring this into gamut
by reducing OKLCH Chroma, yeilds
<span class="swatch" style="--color: rgb(0.079% 69.282% 72.067%)"></span> oklch(69.012% 0.1173 199.893).
The OKLCH chroma has dropped from 0.251 to 0.117.
</div>



<h2 id="color-function">Specifying custom color spaces: the ''color()'' function</h2>

	The ''color()'' function allows a color to be specified
	in a particular, specified [=color space=]
	(rather than the implicit sRGB color space that most of the other color functions operate in).

	In this level the ''color()'' function is extended
	to allow custom color spaces,
	in addition to the predefined spaces from [[css-color-4#predefined]].

	It is also extended to allow relative, rather than just absolute, colors.

	Its syntax is extended as follows:

	<pre class='prod'>
		<dfn>color()</dfn> = color( [from <<color>>]? <<colorspace-params>> [ / <<alpha-value>> ]? )
		<dfn>colorspace-params</dfn> = [<<custom-params>> | <<predefined-rgb-params>> | <<xyz-params>>]
		<dfn>custom-params</dfn> = <<dashed-ident>> [ <<number>> | <<percentage>> | none ]#
		<dfn>predefined-rgb-params</dfn> = <<predefined-rgb>> [ <<number>> | <<percentage>> | none ]{3}
		<dfn>predefined-rgb</dfn> = srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020
		<dfn>xyz-params</dfn> = <<xyz>> [ <<number>> | none ]{3}
		<dfn>xyz</dfn> = xyz | xyz-d50 | xyz-d65
	</pre>

	<!-- check this test, remove any fallback testing -->
	<!-- <wpt>
		color-function-parsing.html
	</wpt> -->

	The color function takes parameters specifying a color, in an explicitly listed color space.

	It represents either an <dfn export>invalid color</dfn>, as described below,
	or a [=valid color=].

	Any color which is not an [=invalid color=] is a <dfn export>valid color</dfn>.

	A color may be a [=valid color=]
	but still be outside the range of colors
	that can be produced by an output device
	(a screen, projector, or printer).
	It is said to be <dfn export>out of gamut</dfn>
	for that color space.

	An out of gamut color has component values
	less than 0 or 0%, or greater than 1 or 100%.
	These are not invalid; instead, for display, they are
	<a>gamut-mapped</a> using a relative colorimetric intent
	which brings the values within the range 0/0% to 1/100%
	at computed-value time.

	Each [=valid color=] is either in-gamut for the output device (screen, or printer),
	or it is [=out of gamut=].


<h3 id="relative-color-function">Relative color-function colors</h3>


Within a [=relative color=] syntax ''color()'' function using <<custom-params>>,
the number and name of the allowed [=channel keywords=] are:

* defined by the '@color-profile/components' descriptor on the corresponding ''@color-profile'',
	if present;
	otherwise, no relative color manipulation is valid. They are <<percentage>>s that correspond to the [=origin color's=] channels
	after its conversion to the color space of the color profile.

Within a [=relative color=] syntax ''color()'' function using <<predefined-rgb-params>>,
the allowed [=channel keywords=] are:

* <dfn value for="color()">r</dfn>, <dfn value for="color()">g</dfn>, and <dfn value for="color()">b</dfn>
	are all <<percentage>>s
	that correspond to the [=origin color's=] red, green, and blue channels
	after its conversion to the predefined RGB color space.

Within a [=relative color=] syntax ''color()'' function using <<xyz-params>>,
the allowed [=channel keywords=] are:

* <dfn value for="color()">x</dfn>, <dfn value for="color()">y</dfn>, <dfn value for="color()">z</dfn> are all <<number>>s
	that correspond to the [=origin color's=] X, Y and Z channels
	after its conversion to relative CIE XYZ color space
	adapted to the relevant white point.

	The parameters have the following form:

	* An <<ident>>  or <<dashed-ident>> denoting the color space.
		If this is an <<ident>> it denotes one of the
			predefined color spaces
			[[css-color-4#predefined]]
		(such as ''display-p3'');
		if it is a <<dashed-ident>> it denotes a custom
		color space, defined by a ''@color-profile'' rule.
		Individual predefined color spaces
		may further restrict whether <<number>>s or <<percentage>>s
		or both, may be used.

		If the <<ident>> names a non-existent color space
		(a name that does not match one of the
		predefined color spaces),
		or a predefined but unsupported color space,
		this argument represents an <a>invalid color</a>.

		If the <<dashed-ident>> names a non-existent color space
		( a name that does not match an <a>color profile's</a> name,
		  or which matches but the corresponding profile has not loaded,
		  or does not represent a valid profile),
		this argument represents an <a>invalid color</a>.


	* One or more <<number>>s or <<percentage>>s providing the parameter values that the color space takes.

		For custom color spaces,
		specified component values
		less than 0 or 0%, or greater than 1 or 100%
		are not invalid;
		they are clamped to the valid range at computed value time.
		This is because ICC profiles typically do not accept
		out of range input values.

		For predefined color spaces,
		specified component values
		less than 0 or 0%, or greater than 1 or 100%
		are not invalid;
		these out of gamut colors
		are gamut mapped to the valid range at computed value time,
		with a relative colorimetric intent.

		If more <<number>>s or <<percentage>>s are provided than parameters that the color space takes,
		the excess <<number>>s at the end are ignored.
		The color is still a [=valid color=].

		If fewer <<number>>s or <<percentage>>s are provided than parameters that the color space takes,
		the missing parameters default to ''0''.
		(This is particularly convenient for multichannel printers
		where the additional inks are spot colors or varnishes
		that most colors on the page won't use.)
		The color is still a [=valid color=].

	* An optional slash-separated <<alpha-value>>.
		This is interpreted the same way as the <<alpha-value>> in ''rgb()'',
		and if omitted it defaults to ''100%''.


	A color which is either an [=invalid color=] or
	an [=out of  gamut=] color
	<dfn export>can't be displayed</dfn>.

	If the specified color <dfn export>can be displayed</dfn>,
	(that is, it isn't an [=invalid color=]
	and isn't [=out of gamut=])
	then this is the used value of the ''color()'' function.

	If the specified color
	is a [=valid color=]
	but [=can't be displayed=]],
	the used value is derived from the specified color,
	<a>gamut-mapped</a> for display.

	If the color is an [=invalid color=],
	the used value is <a>opaque black</a>.


	<div class="example" id="ex-2020-oog-p3">
		This very intense lime color is in-gamut for rec.2020:
		<pre class="lang-css">color(rec2020 0.42053 0.979780 0.00579);</pre>
		in LCH, that color is
		<pre class="lang-css">lch(86.6146% 160.0000 136.0088);</pre>
		in display-p3, that color is
		<pre class="lang-css">color(display-p3 -0.6112 1.0079 -0.2192);</pre>
		and is out of gamut for display-p3
		(red and blue are negative, green is greater than 1).
		If you have a display-p3 screen, that color is:
		<ul>
			<li><em>valid</em></li>
			<li><em>in gamut</em> (for rec.2020)</li>
			<li><em>out of gamut</em> (for your display)</li>
			<li>and so <em>can't be displayed</em></li>
		</ul>
		The color used for display will be a less intense color
		produced automatically by gamut mapping.
	</div>

	<div class="invalid example" id="ex-profoto-bad">
		This example has a typo!
		An intense green is provided in profoto-rgb space (which doesn't exist).
		This makes it invalid, so the used value is <a>opaque black</a>
		<pre class="lang-css">color(profoto-rgb 0.4835 0.9167 0.2188)</pre>
	</div>


<h3 id="custom-color">
	Custom color spaces
</h3>

CSS allows [=colors=] to be specified by reference to a color profile.
This could be for example a calibrated CMYK printer,
or an RGB color space,
or any other color or monochrome output device which has been characterized.



<div class='example' id="ex-profiles-colors">
	This example specifies four calibrated colors:
	two are custom spaces
	(for a SWOP-coated CMYK press,
	and for a wide-gamut seven-ink printer),
	the other two are predefined spaces
	(the ProPhoto RGB,
	and display-p3 RGB spaces).
	In each case, the numerical parameters
	are in the range 0.0 to 1.0
	(rather than, for example, 0 to 255).
	<pre class="lang-css">
		color: color(--swopc 0.0134 0.8078 0.7451 0.3019);
		color: color(--indigo 0.0941 0.6274 0.3372 0.1647 0 0.0706 0.1216);
		color: color(prophoto-rgb 0.9137 0.5882 0.4784);
		color: color(display-p3 0.3804 0.9921 0.1412);
	</pre>
</div>

	The colors not using a predefined color space
	[[css-color-4#predefined]]
	are distinguished by their use of <<dashed-ident>> and
	also need a matching ''@color-profile'' at-rule
	somewhere in the stylesheet,
	to connect the name with the profile data.

	<wpt>
		at-color-profile-001.html
	</wpt>

	<div class='example' id="ex-profiles-colors-at">
	<pre class="lang-css">
		@color-profile --swopc {
			src: url('http://example.org/swop-coated.icc');}
		@color-profile --indigo {
			src: url('http://example.org/indigo-seven.icc');}
	</pre>
</div>

<!--
 ███████   ██████   ███████  ██        ███████  ████████
██     ██ ██    ██ ██     ██ ██       ██     ██ ██     ██
██ ███ ██ ██       ██     ██ ██       ██     ██ ██     ██
██ ███ ██ ██       ██     ██ ██       ██     ██ ████████
██ █████  ██       ██     ██ ██       ██     ██ ██   ██
██        ██    ██ ██     ██ ██       ██     ██ ██    ██
 ███████   ██████   ███████  ████████  ███████  ██     ██
-->

<h3 id="at-profile">
	Specifying a color profile: the ''@color-profile'' at-rule</h3>

		The <dfn at-rule id="at-ruledef-profile">@color-profile</dfn> rule
		defines and names a <dfn lt="CSS color profile" local-lt="color profile">color profile</dfn>
		which can later be used in the ''color()'' function to specify a color.

		It's defined as:

		<pre class='prod'>
		@color-profile = @color-profile [<<dashed-ident>> | ''device-cmyk''] { <<declaration-list>> }
		</pre>

	<wpt>
		at-color-profile-001.html
	</wpt>

		The <<dashed-ident>> gives the <a>color profile's</a> name,
		by which it will be used in a CSS stylesheet.
		Alternatively, the ''device-cmyk'' keyword
		means that this color profile will,
		if valid,
		be used to resolve colors specified in ''device-cmyk''.
		<!-- All of the predefined color space keywords
		(''srgb'', ''display-p3'', ''a98-rgb'', ''prophoto-rgb'', ''rec2020'')
		are excluded from this <<custom-ident>>,
		as they're predefined by this specification and always available. -->

		The ''@color-profile'' rule accepts the descriptors defined in this specification.

		<pre class=descdef for="@color-profile">
		Name: src
		Value: <<url>>
		For: @color-profile
		Initial: n/a
		</pre>

		The '@color-profile/src' descriptor specifies the URL to retrieve the color-profile information from.

		The retrieved ICC profile is valid if

		- it can be parsed as an ICC Profile

		- it is an Input, Display, Output, or color space ICC profile. (Abstract, DeviceLink, and NamedColor ICC Profiles must not be used).

		If the profile is not valid, all CSS colors
		which reference this profile
		are <a>invalid color</a>s.

		To <dfn>fetch an external color profile</dfn>, given a
		''@color-profile'' rule |rule|,
			[=fetch a style resource=] given |rule|'s URL,
			with stylesheet being |rule|'s <a spec=cssom for=CSSRule>parent CSS style sheet</a>,
			destination "color-profile",
			CORS mode "cors",
			and processResponse being the following steps given [=/response=] |res| and null, failure or
			a byte stream |byteStream|:
				If |byteStream| is a byte stream,
				apply the color profile as parsed from |byteStream.

		Note: The Internet Media Type ("MIME type")
		for ICC profiles is
		<a href="https://www.iana.org/assignments/media-types/application/vnd.iccprofile">application/vnd.iccprofile</a>.



		<!-- should we add a format field to this descriptor, like with font-face src? it is always ICC format
		in practice, but that could change in the future. or we could add format later, once there is
		a need, and make the default ICC if not specified -->

		<!-- we decided in San Francisco to not allow rendering intent to be specified in the CSS;
		just use the rendering intent provided by the profile. However, leave in for FPWD. -->

		<pre class=descdef>
		Name: rendering-intent
		Value: relative-colorimetric | absolute-colorimetric | perceptual | saturation
		Initial: relative-colorimetric
		For: @color-profile
		</pre>

		<a>Color profiles</a> contain “rendering intents”,
		which define how to <dfn>gamut-map</dfn> their color to smaller gamuts than they're defined over.
		Often a profile will contain only a single intent,
		but when there are multiple,
		the 'rendering-intent' descriptor chooses one of them to use.

		The four possible rendering intents are [[!ICC]]:

		<dl dfn-type=value dfn-for="@color-profile/rendering-intent">
			<dt><dfn>relative-colorimetric</dfn>
			<dd>
				Media-relative colorimetric is required to leave source colors that fall
				inside the destination medium gamut unchanged relative to the respective
				media white points. Source colors that are out of the destination medium
				gamut are mapped to colors on the gamut boundary using a variety of
				different methods.

				The media-relative colorimetric rendering intent is
				often used with black point compensation, where the source medium black point
				is mapped to the destination medium black point as well.
				This method must map the source white point to the destination white point. If
				black point compensation is in use, the source black point must also be
				mapped to the destination black point. Adaptation algorithms should be used
				to adjust for the change in white point. Relative relationships of colors
				inside both source and destination gamuts should be preserved. Relative
				relationships of colors outside the destination gamut may be changed.

			<dt><dfn>absolute-colorimetric</dfn>
			<dd>
				ICC-absolute colorimetric is required to leave source colors that fall
				inside the destination medium gamut unchanged relative to the adopted
				white (a perfect reflecting diffuser). Source colors that are out of the
				destination medium gamut are mapped to colors on the gamut boundary using a
				variety of different methods. This method produces the most accurate
				color matching of in-gamut colors, but will result in highlight clipping
				if the destination medium white point is lower than the source medium
				white point. For this reason it is recommended for use only in applications
				that need exact color matching and where highlight clipping is not a concern.

				This method MUST disable white point matching and black point matching when
				converting colors. In general, this option is not recommended except
				for testing purposes.

			<dt><dfn>perceptual</dfn>
			<dd>
				This method is often the preferred choice for images, especially when there are
				substantial differences between the source and destination (such as a screen display
				image reproduced on a reflection print). It takes the colors of the source image
				and re-optimizes the appearance for the destination medium using proprietary
				methods. This re-optimization may result in colors within both the source
				and destination gamuts being changed, although perceptual transforms are
				supposed to maintain the basic artistic intent of the original in the
				reproduction. They will not attempt to correct errors in the source image.

				Note: With v2 ICC profiles there is no specified perceptual reference medium,
				which can cause interoperability problems. When v2 ICC profiles are used it can
				be safer to use the media-relative colorimetric rendering intent with black
				point compensation, instead of the perceptual rendering intent, unless the
				specific source and destination profiles to be used have been checked to ensure
				the combination produces the desired result.

				This method should maintain relative color values among the pixels as they
				are mapped to the target device gamut. This method may change pixel values
				that were originally within the target device gamut, in order to avoid
				hue shifts and discontinuities and to preserve as much as possible the
				overall appearance of the scene.
			<dt><dfn>saturation</dfn>
			<dd>
				This option was created to preserve the relative saturation (chroma) of the original,
				and to keep solid colors pure. However, it experienced interoperability problems like
				the perceptual intent, and as solid color preservation is not amenable to a reference
				medium solution using v4 profiles does not solve the problem. Use of this rendering intent
				is not recommended unless the specific source and destination profiles to be used have
				been checked to ensure the combination produces the desired result.
				This option should preserve the relative saturation (chroma) values of the original
				pixels. Out of gamut colors should be converted to colors that have the same saturation
				but fall just inside the gamut.
		</dl>

		<pre class=descdef for="@color-profile">
			Name: components
			Value: <<ident>>#
			For: @color-profile
			Initial: n/a
		</pre>

		Color profiles can define color spaces which contain a varying number of components.
		For example, a Cyan, Magenta, Yellow and Black (CMYK) profile
		has four components
		named c, m, y and k
		While a four-component additive screen profile
		might use four components
		named r, g, y and b.

		The value of this descriptor is a comma-separated list of <<ident>> tokens.
		Each <<ident>>> names a component,
		in the order in which they are used in the color profile,
		while the total number of tokens defines the number of components.

		A component must not be named none,
		because that would clash with the token for missing values.
		If this descriptor contains a component called none,
		the descriptor is invalid.


		<div class="example" id="ex-components-cmyk">
			This descriptor declares that there are four components named cyan, magenta, yellow and black:
			<pre>components: cyan, magenta, yellow, black</pre>
			while this descriptor opts for terser names:
			<pre>components: c,m,y,k</pre>
		</div>

		<div class="example" id="ex-components-cmykogv">
			This descriptor declares that there are seven components
			named cyan, magenta, yellow, black, orange, green and violet:
			<pre>components: cyan, magenta, yellow, black, orange, green, violet</pre>
		</div>

	<!--
	 ██████  ██     ██ ██    ██ ██    ██
	██    ██ ███   ███  ██  ██  ██   ██
	██       ████ ████   ████   ██  ██
	██       ██ ███ ██    ██    █████
	██       ██     ██    ██    ██  ██
	██    ██ ██     ██    ██    ██   ██
	 ██████  ██     ██    ██    ██    ██
	-->

	<h3 id="cal-cmyk">
		CSS and print: using calibrated CMYK and other printed color spaces</h3>

	The ''@color-profile'' at-rule is not restricted to RGB color spaces.
	While screens typically display colors directly in RGB,
	printers often represent colors with CMYK.

	Calibrated four color print with Cyan, Magenta, Yellow and Black (CMYK),
	or high-fidelity wide gamut printing with additional inks
	such as Cyan Magenta Yellow Black Orange Green Violet (CMYKOGV)
	can also be done in CSS,
	provided you have an ICC profile
	corresponding to the combination of
	inks, paper, total ink coverage  and equipment
	you will use.

	<div class="example" id="ex-fogra">
		For example, using offset printing to ISO 12647-2:2004 / Amd 1:2007
		using the FOGRA39 characterization data
		on 115gsm coated paper
		with an ink limit of 300% Total Area Coverage.

		<!--
			$ xicclu -ir Coated_Fogra39L_VIGC_300.icc
	0.0 0.7 0.2 0.0

	0.000000 0.700000 0.200000 0.000000 [CMYK] -> Lut -> 63.673303 51.576902 5.811058 [Lab]

		-->

		<pre class="lang-css">
			@color-profile --fogra39 {
				src: url('https://example.org/Coated_Fogra39L_VIGC_300.icc');
			}
			.header {
				background-color: <span class="swatch" style="--color: rgb(93.124% 44.098% 57.491%)"></span>  color(--fogra39 0% 70% 20% 0%);
				}
		</pre>

		Here the color() function first states the name we have given the profile,
		then gives the percentage
		of cyan, magenta, yellow, and black.

		In this profile, this resolves to the color
		<span class="swatch" style="--color: rgb(93.124% 44.098% 57.491%)"></span>&nbsp;lab(63.673303% 51.576902 5.811058)
		which is
		<span class="swatch" style="--color: rgb(93.124% 44.098% 57.491%)"></span>&nbsp;rgb(93.124, 44.098% 57.491%).
	</div>

	Because the actual color resulting from a given CMYK combination is known,
	an on-screen visualization of the printed output (soft-proof) can be made.

	Also, procedures that rely on knowing the color
	(anti-aliasing, compositing, using the color in a gradient, etc)
	can proceed as normal.

	<figure id="fogra51-roundtrip">
		<!-- See file Macbeth.txt in the workings directory for details. -->
		<img src="images/macbeth-roundtrip.svg" width=670 height=450>
		<figcaption>
			<p>A color checker, used for ensuring color fidelity
			in the print and photographic industries.
			Averaged measured Lab values are available for each patch.
			The rectangles show the Lab values, converted to sRGB.
			The circles, which are barely visible, show the Lab values,
			passed through a FOGRA51 ICC profile to convert them to CMYK.
			The CMYK values are then passed through the same ICC profile in reverse,
			to yield new Lab values. These are then converted to sRGB for display.</p>
			<p>The one patch with a more visible circle (third row, first patch)
			is because the color is slightly outside the gamut of the
			FOGRA51 CMYK space used.</p>
			<p>The table below shows, for each patch, the DeltaE 2000 between the original Lab and the Lab value after round-tripping through CMYK. A DeltaE 2000 of 1 or more is just visible.</p>
			<table class="deltaE">
				<tr>
					<td class="dE0">0.06</td>
					<td class="dE0">0.07</td>
					<td class="dE0">0.03</td>
					<td class="dE0">0.04</td>
					<td class="dE0">0.06</td>
					<td class="dE0">0.17</td>
				</tr>
				<tr>
					<td class="dE0">0.03</td>
					<td class="dE0">0.75</td>
					<td class="dE0">0.05</td>
					<td class="dE0">0.06</td>
					<td class="dE0">0.03</td>
					<td class="dE0">0.02</td>
				</tr>
				<tr>
					<td class="dE2">1.9</td>
					<td class="dE0">0.04</td>
					<td class="dE0">0.06</td>
					<td class="dE0">0.05</td>
					<td class="dE0">0.02</td>
					<td class="dE0">0.05</td>
				</tr>
				<tr>
					<td class="dE0">0.03</td>
					<td class="dE0">0.08</td>
					<td class="dE0">0.03</td>
					<td class="dE0">0.03</td>
					<td class="dE0">0.04</td>
					<td class="dE0">0.80</td>
				</tr>
			</table>
		</figcaption>
	</figure>


	<div class="example" id="ex-swop5v2">
		This example is using offset printing to ISO 12647-2:2004
		using the CGATS/SWOP TR005 2007 characterization data
		on grade 5 paper
		with an ink limit of 300% Total Area Coverage,
		and medium gray component replacement (GCR).

		<!--
			$ xicclu -ir SWOP2006_Coated5v2.icc
	0.0 0.7 0.2 0.0

	0.000000 0.700000 0.200000 0.000000 [CMYK] -> Lut -> 64.965217 52.119710 5.406966 [Lab]

		-->

		<pre class="lang-css">
			@color-profile --swop5c {
				src: url('https://example.org/SWOP2006_Coated5v2.icc');
			}
			.header {
				background-color: <span class="swatch" style="--color: rgb(94.903% 45.248%  59.104%)"></span>  color(--swop5c 0% 70% 20% 0%);
			}
		</pre>

		In this profile, this  amount of CMYK
		(the same percentages as the previous example)
		resolves to the color
		<span class="swatch" style="--color: rgb(94.903% 45.248%  59.104%)"></span>&nbsp;lab(64.965217% 52.119710 5.406966)
		which is
		<span class="swatch" style="--color: rgb(94.903% 45.248%  59.104%)"></span>&nbsp;rgb(94.903% 45.248% 59.104%).
	</div>

	Fallback colors can be specified,
	for example using media queries,
	to be used
	if the specified CMYK color is known
	to be outside the sRGB gamut.

	<div class="example" id="ex-fogra39-fallback-mq">
		This example uses the same FOGRA39 setup as before,
		but specifies a bright green which is outside the sRGB gamut.
		It is, however, inside the display-p3 gamut.
		Therefore it is displayed as-is on wide gamut screens
		and in print,
		and a less intense fallback color is used on sRGB screens.

		<!--
			$ xicclu -ir Coated_Fogra39L_VIGC_300.icc
	0.9 0.0 0.9 0.0

	0.900000 0.000000 0.900000 0.000000 [CMYK] -> Lut -> 56.596645 -58.995875 28.072154 [Lab]

		-->

		<pre class="lang-css">
			@media (color-gamut: srgb) {
				.header {
					background-color:  rgb(8.154% 60.9704% 37.184%);
					}
			}
			@media print, (color-gamut: p3){
				.header {
					background-color:  color(--fogra39 90% 0% 90% 0%);
					}
			}
		</pre>

		This example does not use illustrative swatches, because most of the colors are outside of sRGB.

		This CMYK color corresponds to lab(56.596645% -58.995875 28.072154)
		or lch(56.596645% 65.33421077211648 154.5533771086801).
		In sRGB this would be rgb(-60.568% 62.558% 32.390%) which,
		as the large negative red component shows,
		is out of gamut.

		Reducing the chroma until the result is in gamut
		gives lch(56.596645% 51 154.5533771086801)
		which is rgb(8.154% 60.9704% 37.184%)
		and this has been manually specified as a fallback color.

		For wide gamut screens, the color is inside the display-p3 gamut
		(it is display-p3(0.1658 0.6147 0.3533) ).

		<!--
	grn=[56.596645, -58.995875, 28.072154 ]
	Array(3) [ 56.596645, -58.995875, 28.072154 ]

	grn_lch=Lab_to_LCH(grn)
	Array(3) [ 56.596645, 65.33421077211648, 154.5533771086801 ]

	grn_srgb=LCH_to_sRGB(grn_lch)
	Array(3) [ -0.6056873504861735, 0.6255878698501047, 0.3239030534610021 ]

	desat_lch=[56.596645, 55, 154.5533771086801 ]
	Array(3) [ 56.596645, 55, 154.5533771086801 ]

	desat_srgb=LCH_to_sRGB(desat_lch)
	Array(3) [ -0.10689290334865434, 0.6143491294294153, 0.3586745333140551 ]

	desat_lch=[56.596645, 50, 154.5533771086801 ]
	Array(3) [ 56.596645, 50, 154.5533771086801 ]

	desat_srgb=LCH_to_sRGB(desat_lch)
	Array(3) [ 0.1083935322035526, 0.6085162381979395, 0.3751152317330066 ]

	desat_lch=[56.596645, 51, 154.5533771086801 ]
	Array(3) [ 56.596645, 51, 154.5533771086801 ]

	desat_srgb=LCH_to_sRGB(desat_lch)
	Array(3) [ 0.08154856398116136, 0.6097043838635557, 0.37184402014676937 ]

	grn_p3=LCH_to_P3(grn_lch)
	Array(3) [ 0.16582655785857967, 0.6147848214649991, 0.3532666045888559 ]
		-->
	</div>

	Colors are not restricted to four inks (CMYK). For example, wide-gamut 7 Color ink sets can be used.

	<div class="example" id="ex-fogra55beta-7color">This example uses the beta FOGRA55 dataset for KCMYOGV seven-color printing.
		Four of the inks - black, cyan, magenta, and yellow - are the same as,
		and give the same results as, the FOGRA51 set.
		The other three inks are:
		<ul><li>Pantone Orange 021C</li>
			<li>Pantone Green C</li>
			<li>Pantone Violet C</li>
		</ul>

		The measurement condition is M1,
		which means that optical brighteners in the paper are accounted for
		and the spectrophotometer has no UV-cut filter.

		<!-- see file Macbeth-7color.txt --->

		<pre class="lang-css">
			@color-profile --fogra55beta {
				src: url('https://example.org/2020_13.003_FOGRA55beta_CL_Profile.icc');
			}
			.dark_skin {
				background-color: <span class="swatch" style="--color: rgb(45.8702% 32.0071% 26.3813%)"></span>
				color(--fogra55beta 0.183596 0.464444 0.461729 0.612490 0.156903 0.000000 0.000000);
			}
			.light_skin {
				background-color: <span class="swatch" style="--color: rgb(78.0170% 58.1957% 50.7737%)"></span>
				color(--fogra55beta 0.070804 0.334971 0.321802 0.215606 0.103107 0.000000 0.000000);
			}
			.blue_sky {
				background-color: <span class="swatch" style="--color: rgb(35.8614% 48.0665% 61.6556%)"></span>
				color(--fogra55beta 0.572088 0.229346 0.081708 0.282044 0.000000 0.000000 0.168260);
			}
			.foliage {
				background-color: <span class="swatch" style="--color: rgb(34.9582% 42.3446% 25.4209%)"></span>
				color(--fogra55beta 0.314566 0.145687 0.661941 0.582879 0.000000 0.234362 0.000000);
			}
			.blue_flower {
				background-color: <span class="swatch" style="--color: rgb(51.2952% 50.4131% 68.9186%)"></span>
				color(--fogra55beta 0.375515 0.259934 0.034849 0.107161 0.000000 0.000000 0.308200);
			}
			.bluish_green {
				background-color: <span class="swatch" style="--color: rgb(36.8792% 74.3685% 67.4749%)"></span>
				color(--fogra55beta 0.397575 0.010047 0.223682 0.031140 0.000000 0.317066 0.000000);
			}
			</pre>
	</div>

	<h3 id="cmyk-to-lab">
		Converting CMYK colors to Lab
		</h3>

			Conversion from a calibrated CMYK color space to Lab
			is typically done by looking up the Lab values in an ICC profile.

		<h3 id="lab-to-cmyk">
			Converting Lab colors to CMYK
			</h3>

			For print,
			Lab colors will need to be converted
			to the color space of the printer.

			This is typically done by looking up the CMYK values in an ICC profile.

	<!--
	████████  ████████ ██     ██          ██████  ██     ██ ██    ██ ██    ██
	██     ██ ██       ██     ██         ██    ██ ███   ███  ██  ██  ██   ██
	██     ██ ██       ██     ██         ██       ████ ████   ████   ██  ██
	██     ██ ██████   ██     ██ ███████ ██       ██ ███ ██    ██    █████
	██     ██ ██        ██   ██          ██       ██     ██    ██    ██  ██
	██     ██ ██         ██ ██           ██    ██ ██     ██    ██    ██   ██
	████████  ████████    ███             ██████  ██     ██    ██    ██    ██
	-->

	<h2 id='device-cmyk'>
	Uncalibrated CMYK Colors: the ''device-cmyk()'' function</h2>

		Sometimes, when a given printer has not been calibrated,
		but the output for particular ink combinations is known through experimentation,
		or via a printed sample swatchbook,
		it is useful to express CMYK colors
		in a device-dependent way.

		Note: Because the actual resulting color can be unknown,
		CSS processors might attempt to approximate it.
		This approximation is likely to be visually very far from the actual printed result.

		The ''device-cmyk()'' function allows authors to specify a color in this way:

		<pre class='prod'>
			<dfn>device-cmyk()</dfn> = device-cmyk( <<cmyk-component>>{4} [ / <<alpha-value>> ]? )
			<dfn>&lt;cmyk-component></dfn> = <<number>> | <<percentage>>
		</pre>

		The arguments of the ''device-cmyk()'' function specify the cyan, magenta, yellow, and black components, in order,
		as a number between 0 and 1 or a percentage between 0% and 100%.
		These two usages are equivalent, and map to each other linearly.
		Values less than 0 or 0%, or greater than 1 or 100%,
		are not invalid;
		instead, they are clamped to 0/0% or 1/100% at computed-value time.

		The fifth argument specifies the alpha channel of the color.
		It's interpreted identically to the fourth argument of the ''rgb()'' function.
		If omitted, it defaults to ''100%''.

		Typically, print-based applications will actually store the used colors as CMYK,
		and send them to the printer in that form.
		However, such colors do not have a colorimetric interpretation,
		and thus cannot be used in gradients, compositing, blending and so on.

		As such, Device CMYK colors must be converted to an equivalent color.
		This is not trivial, like the conversion from HSL or HWB to RGB;
		the precise conversion depends on the precise characteristics of the output device.

		<ol>
			<li>If the user, author, or user-agent stylesheet
				has an ''@color-profile'' definition for device-cmyk,
				and the resource specified by the src descriptor can be retrieved,
				and the resource is a valid CMYK ICC profile,
				and the user agent can process ICC profiles,
				the computed value of the ''device-cmyk()'' function
				must be the Lab value of the CMYK color.</li>
			<li>Otherwise,
				the computed value of the ''device-cmyk()'' function must be
				the sRGB value of the CMYK color,
				as converted with the following naive conversion algorithm.
			</li>
		</ol>

		<div class='example' id="ex-device-cmyk-naive">
			For example, with no ''@color-profile'',
			the following colors are equivalent, using the naive conversion.

			<pre class="lang-css">
				color: <span class="swatch" style="--color: rgb(178 34 34)"></span> device-cmyk(0 81% 81% 30%);
				color: <span class="swatch" style="--color: rgb(178 34 34)"></span> rgb(178 34 34);
				color: <span class="swatch" style="--color: rgb(178 34 34)"></span> firebrick;
			</pre>
		</div>

		<div class='example' id="ex-device-cmyk-colprof">
			With the ''@color-profile'' specified as in the example stylesheet,
			the following colors are equivalent, using colorimetric conversion.

			<pre class="lang-css">
				color: <span class="swatch" style="--color: rgb(70.690% 26.851% 19.724%)"></span> device-cmyk(0 81% 81% 30%);
				color: <span class="swatch" style="--color: rgb(70.690% 26.851% 19.724%)"></span> lab(45.060% 45.477 35.459)
				color: <span class="swatch" style="--color: rgb(70.690% 26.851% 19.724%)"></span> rgb(70.690% 26.851% 19.724%);
			</pre>
		</div>

		The naive conversion is necessarily approximate,
		since it has no knowledge of the colorimetry of the inks,
		the dot gain,
		the colorimetry of the RGB space, and so on.

		<figure>
			<img src="images/macbeth-naive.svg" width=670 height=450>
			<figcaption>
				<p>A color checker, used for ensuring color fidelity
				in the print and photographic industries.
				Averaged measured Lab values are available for each patch.
				The rectangles show the Lab values, converted to sRGB.
				The circles show the Lab values, passed through an ICC profile to convert them to CMYK.
				The CMYK value are then naively converted to sRGB.</p>
				<p>The table below shows, for each patch, the DeltaE 2000 between the original Lab and the Lab value after round-tripping through CMYK. A DeltaE 2000 of 1 or more is just visible, while 5 or more is just a different color altogether.</p>
				<table class="deltaE">
					<tr>
						<td class="dE5">11.33</td>
						<td class="dE5">9.36</td>
						<td class="dE5">5.66</td>
						<td class="dE5">7.52</td>
						<td class="dE5">12.39</td>
						<td class="dE5">21.58</td>
					</tr>
					<tr>
						<td class="dE5">6.40</td>
						<td class="dE5">8.79</td>
						<td class="dE5">11.77</td>
						<td class="dE5">17.16</td>
						<td class="dE5">11.91</td>
						<td class="dE3">3.97</td>
					</tr>
					<tr>
						<td class="dE5">12.1</td>
						<td class="dE5">17.00</td>
						<td class="dE3">3.38</td>
						<td class="dE1">1.94</td>
						<td class="dE5">18.08</td>
						<td class="dE5">14.97</td>
					</tr>
					<tr>
						<td class="dE1">1.89</td>
						<td class="dE5">6.56</td>
						<td class="dE5">7.85</td>
						<td class="dE5">8.76</td>
						<td class="dE5">9.82</td>
						<td class="dE5">10.29</td>
					</tr>
				</table>
			</figcaption>
		</figure>

	<h3 id='cmyk-rgb'>
	Naively Converting Between Uncalibrated CMYK and sRGB-Based Colors</h3>

		To <dfn export lt="naively convert from CMYK to RGBA | naively converted to RGBA">naively convert from CMYK to RGBA</dfn>:

		<ul class="lang-javascript">
			<li><code>red   = 1 - min(1, cyan * (1 - black) + black)</code>
			<li><code>green = 1 - min(1, magenta * (1 - black) + black)</code>
			<li><code>blue  = 1 - min(1, yellow  * (1 - black) + black)</code>
			<li>Alpha is same as for input color.
		</ul>

		<!-- nice, but when is RGBA to naive CMYK conversion actually triggered? -->

		To <dfn export lt="naively convert from RGBA to CMYK | naively converted to CMYK">naively convert from RGBA to CMYK</dfn>:

		<ul class="lang-javascript">
			<li><code>black   = 1 - max(red, green, blue)</code>
			<li><code>cyan = (1 - red - black)   / (1 - black), or 0 if black is 1</code>
			<li><code>magenta = (1 - green - black) / (1 - black), or 0 if black is 1</code>
			<li><code>yellow  = (1 - blue - black)  / (1 - black), or 0 if black is 1</code>
			<li>alpha is the same as the input color
		</ul>

<!--
████████  ████████  ██████   ███████  ██       ██     ██ ████████
██     ██ ██       ██    ██ ██     ██ ██       ██     ██ ██
██     ██ ██       ██       ██     ██ ██       ██     ██ ██
████████  ██████    ██████  ██     ██ ██       ██     ██ ██████
██   ██   ██             ██ ██     ██ ██        ██   ██  ██
██    ██  ██       ██    ██ ██     ██ ██         ██ ██   ██
██     ██ ████████  ██████   ███████  ████████    ███    ████████
-->

<h2 id='resolving-color-values'>
	Resolving <<color>> Values</h2>

		<h3 id="resolving-contrast">Resolving ''color-contrast()'' values</h3>

		The computed value is the specified ''color-contrast()'' function
		with each <<color>> parameter resolved according to [[css-color-4#resolving-color-values]],
		and the keywords ''AA'', ''AA-large'', ''AAA'', ''AAA-large'' replaced with their corresponding numeric value.

		The used value is the winning color
		resolved according to [[css-color-4#resolving-color-values]].

		<div class="example">

			For example, given a current color value of
			<span class="swatch" style="--color: rgb(179 213 230)"></span> rgb(179 213 230),
			the value

			<pre class="lang-css">
				color-contrast(currentColor vs hsl(200 83% 23%), purple to AA)
			</pre>

			has the computed value

			<pre class="lang-css">
				color-contrast(currentColor vs rgb(10 75 107), rgb(128 0 128) to 4.5)
			</pre>

			and the used value

			<pre class="lang-css">
				rgb(128 0 128)
			</pre>

		</div>



		<h3 id="resolving-device-cmyk-values">Resolving ''device-cmyk'' values</h3>

		The computed and used value
		is the specified device-specific CMYK color,
		(with components as <<number>>, not <<percentage>>)
		paired with the specified alpha channel
		(as a <<number>>, not a <<percentage>>;
		and defaulting to opaque if unspecified).

		The [=actual value=] can vary based on the operation;
		for rendering to a CMYK-capable device,
		it may be rendered as a CMYK color;
		for blending with non-CMYK colors
		or rendering to a non-CMYK device,
		it must be converted
		as specified in [[#device-cmyk]].

		<div class="example" id="ex-device-cmyk-used">
			For example,

			<pre class="lang-css">
				<span class="swatch" style="--color: rgb(93.124%, 44.098%, 57.491%)"></span> device-cmyk(0% 70% 20% 0%)
			</pre>

			has the specified and actual value

			<pre class="lang-css">
				<span class="swatch" style="--color: rgb(93.124%, 44.098%, 57.491%)"></span> device-cmyk(0 0.7 0.2 0)
			</pre>

			and will, if the implementation understands ICC profiles
			and has an appropriate profile installed,
			have the used value

			<pre class="lang-css">
				<span class="swatch" style="--color: rgb(93.124%, 44.098%, 57.491%)"></span> lab(63.673% 51.577 5.811)
			</pre>

			Note: As with all colors, the used value is not available to script.
		</div>


<!--
 ██████  ████████ ████████  ████    ███    ██
██    ██ ██       ██     ██  ██    ██ ██   ██
██       ██       ██     ██  ██   ██   ██  ██
 ██████  ██████   ████████   ██  ██     ██ ██
      ██ ██       ██   ██    ██  █████████ ██
██    ██ ██       ██    ██   ██  ██     ██ ██
 ██████  ████████ ██     ██ ████ ██     ██ ████████
-->

Serialization {#serial}
=======================

This section extends [[css-color-4#serializing-color-values]]
to add serialization of the
results of the
''color-mix()'',
''color-contrast()'', and
relative color functions.

In this section, the strings used in the specification and the corresponding characters are as follows.

<table class="data">
	<tr>
		<th>String</th>
		<th>Character</th>
	</tr>
	<tr>
		<td>" "</td>
		<td>U+0020 SPACE</td>
	</tr>
	<tr>
		<td>","</td>
		<td>U+002C COMMA</td>
	</tr>
	<tr>
		<td>"-"</td>
		<td>U+002D HYPHEN-MINUS</td>
	</tr>
	<tr>
		<td>"."</td>
		<td>U+002E FULL STOP</td>
	</tr>
	<tr>
		<td>"/"</td>
		<td>U+002F SOLIDUS</td>
	</tr>
</table>

The string "." shall be used as a decimal separator,
regardless of locale,
and there shall be no thousands separator.

As usual,
if the alpha of the result is exactly 1,
it is omitted from the serialization;
an implicit value of 1 (fully opaque) is the default.


Serializing color-mix() {#serial-color-mix}
-------------------------------------------

The serialization of the result of a ''color-mix()'' function
is a <<color>>,
as defined in [[css-color-4#serializing-color-values]].
The form used
depends on the color space specified with "in".

<wpt>
	parsing/color-mix-computed.html
</wpt>

The <em>minimum</em> precision for round-tripping
is the same as that specified in
[[css-color-4#serializing-color-values]].

<table class="data">
	<tr>
		<th>mixing color space</th>
		<th>form</th>
	</tr>
	<tr>
		<td>srgb</td>
		<td>color(srgb r g b)</td>
	</tr>
	<tr>
		<td>srgb-linear</td>
		<td>color(srgb-linear r g b) </td>
	</tr>
	<tr>
		<td>hsl</td>
		<td>color(srgb r g b) </td>
	</tr>
	<tr>
		<td>hwb</td>
		<td>color(srgb r g b)</td>
	</tr>
	<tr>
		<td>xyz-d65</td>
		<td>color(xyz-d65 x y z)</td>
	</tr>
	<tr>
		<td>xyz-d50</td>
		<td>color(xyz-d50 x y z)</td>
	</tr>
	<tr>
		<td>xyz</td>
		<td>color(xyz-d65 x y z) <a href="#fn1">¹</a></td>
	</tr>
	<tr>
		<td>lab</td>
		<td>lab(l a b)</td>
	</tr>
	<tr>
		<td>lch</td>
		<td>lch(l c h)</td>
	</tr>
	<tr>
		<td>oklab</td>
		<td>oklab(l a b)</td>
	</tr>
	<tr>
		<td>oklch</td>
		<td>oklch(l c h)</td>
	</tr>
</table>

<dl>
	<dt id="fn1">¹</dt>
	<dd>Because ''xyz'' is just an alias for ''xyz-d65''</dd>

</dl>

<div class="example">
	The result of this color mixture
	<pre>color-mix(in lch, peru 40%, palegoldenrod)</pre>
	is serialized as the string <span class="swatch" style="--color: rgb(87.416% 76.036% 47.637%)"></span>
	"lch(79.7256% 40.448 84.771)"
	while the result of
	<pre>color-mix(in srgb, peru 40%, palegoldenrod)</pre>
	is serialized as the string <span class="swatch" style="--color: rgb(88.16% 75.45% 49.88%)"></span>
	"color(srgb 0.8816 0.7545 0.4988)".
</div>


Serializing color-contrast() {#serial-color-contrast}
-----------------------------------------------------

The serialization of the result of a ''color-contrast()'' function
is a <<color>>,
as defined in [[css-color-4#serializing-color-values]].
The form used
is the same as that used to specify
the winning color.

<wpt>
	parsing/color-contrast-computed.html
</wpt>

The <em>minimum</em> precision for round-tripping
is the same as that specified in
[[css-color-4#serializing-color-values]].

<div class="example">
	The winner of this contrast choice
	<pre>color-contrast(wheat vs olive, sienna, maroon)</pre>
	is maroon,
	so the result is serialized as
	<span class="swatch" style="--color: maroon"></span>
	"rgb(128 0 0)".

	While the winner of
	<pre>color-contrast(wheat vs color(prophoto-rgb 0.4 0.4 0.2), color(display-p3 0.45 0.08 0.05))</pre>
	is color(display-p3 0.45 0.08 0.05),
	so the result is serialized as
	<span class="swatch" style="--color: rgb(49.277% 0.414% 0.524%)"></span>
	"color(display-p3 0.45 0.08 0.05)".
</div>

Serializing relative color functions {#serial-relative-color}
----------------------------------------------------

The serialization of the result of a relative color function
is a <<color>>,
as defined in [[css-color-4#serializing-color-values]].
The form used
is the same as that used to specify
the relative color,
but using the absolute form.

<wpt>
	parsing/relative-color-computed.html
</wpt>

The <em>minimum</em> precision for round-tripping
is the same as that specified in
[[css-color-4#serializing-color-function-values]].

<div class="example">
	The result of serializing
	<pre>lch(from peru calc(l * 0.8) calc(c * 0.7) calc(h + 180)) </pre>
	is the string
	<span class="swatch" style="--color: rgb(3.12% 50.352% 68.894%)"></span>
	"lch(49.80224% 37.80819 243.6803)"

</div>

Serializing custom color-spaces {#serial-custom-color}
-----------------------------------------------------

The precision with which ''color()'' component values are retained,
and thus the number of significant figures in the serialized value,
is not defined in this specification,
but for CMYK color spaces must at least be sufficient
to round-trip values
with eight bit precision;
this will result in at least two decimal places
unless trailing zeroes have been omitted.

<div class="example" id="ex-color-swop-serial">
	<p>The serialized value of the color in</p>
	<pre class="lang-css">@color-profile --swop5c {
		src: url('https://example.org/SWOP2006_Coated5v2.icc');
	  }
	  .header {
		background-color:  <span class="swatch" style="--color: rgb(94.903% 45.248% 59.104%)"></span>  color(--swop5c  0% 70.0% 20.00% .0%);
	  }</pre>
	<p>is the string "color(--swop5c 0 0.7 0.2 0)"</p>
</div>


<h3 id="serializing-device-cmyk-values">Serializing ''device-cmyk'' values</h3>

	The serialized form of ''device-cmyk()'' values
	is derived from the [=computed value=]
	and uses the ''device-cmyk()'' form,
	with lowercase letters for the function name.

	The component values are serialized in base 10,
	as <<number>>.
	A single ASCII space character " "
	must be used as the separator
	between the component values.

	Trailing fractional zeroes in any component values must be omitted;
	if the fractional part consists of all zeroes,
	the decimal point must also be omitted.

	<div class="example" id="ex-device-cmyk-serial">
		<p>The serialized value of the color</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgb(70.7% 26.9% 19.7%);"></span>  device-cmyk(0 81% 81% 30%)</pre>
		<p>is the string "device-cmyk(0 0.81 0.81 0.3)"</p>
	</div>

	The precision with which ''device-cmyk()'' component values are retained,
	and thus the number of significant figures in the serialized value,
	is not defined in this specification,
	but must at least be sufficient
	to round-trip values
	with eight bit precision;
	this will result in at least two decimal places
	unless trailing zeroes have been omitted.
	Values must be <a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>, not truncated.

	Unitary alpha values are not explicitly serialized.
	Non-unitary alpha values must be explicitly serialized,
	and the string " / "
	(an ASCII space, then forward slash, then another space)
	must be used to separate
	the black ("k") color component value
	from the alpha value.

<!--
 ██████  ████████ ██    ██ ██       ████████       ████████  ██     ██ ██       ████████  ██████
██    ██    ██     ██  ██  ██       ██             ██     ██ ██     ██ ██       ██       ██    ██
██          ██      ████   ██       ██             ██     ██ ██     ██ ██       ██       ██
 ██████     ██       ██    ██       ██████         ████████  ██     ██ ██       ██████    ██████
      ██    ██       ██    ██       ██             ██   ██   ██     ██ ██       ██             ██
██    ██    ██       ██    ██       ██             ██    ██  ██     ██ ██       ██       ██    ██
 ██████     ██       ██    ████████ ████████       ██     ██  ███████  ████████ ████████  ██████
-->

<h2 id="sample">
	Default Style Rules</h2>

		The following stylesheet is informative, not normative.  This style sheet could be used by an implementation as part of its default styling of HTML4, HTML5, XHTML1, XHTML1.1, XHTML Basic, and other XHTML Family documents.

		<pre class="lang-css">
		/* traditional desktop user agent colors for hyperlinks */
		:link { color: LinkText; }
		:visited { color: VisitedText; }
		:active { color: ActiveText; }

		/* a reasonable, conservative default for device-cmyk */
		@color-profile device-cmyk {
			src: url('https://drafts.csswg.org/css-color-4/ICCprofiles/Coated_Fogra39L_VIGC_300.icc');
		}
		</pre>

<!--
 ██████  ████████  ██████  ██     ██ ████████  ████ ████████ ██    ██
██    ██ ██       ██    ██ ██     ██ ██     ██  ██     ██     ██  ██
██       ██       ██       ██     ██ ██     ██  ██     ██      ████
 ██████  ██████   ██       ██     ██ ████████   ██     ██       ██
      ██ ██       ██       ██     ██ ██   ██    ██     ██       ██
██    ██ ██       ██    ██ ██     ██ ██    ██   ██     ██       ██
 ██████  ████████  ██████   ███████  ██     ██ ████    ██       ██
-->

Security Considerations {#security}
===================================

This specification adds to CSS the on-demand
downloading of ICC profiles.
These do not contain executable code,
and thus do not constitute an increased security risk.

Privacy Considerations {#privacy}
===================================

No new privacy considerations have been reported on this specification.

Accessibility Considerations {#a11y}
===========================

This specification introduces a new feature
to help stylesheet authors
write stylesheets which conform
to WCAG 2.1 <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">section 1.4.3 Contrast (Minimum)</a>.

<!--
 ██████  ██     ██    ███    ██    ██  ██████   ████████  ██████
██    ██ ██     ██   ██ ██   ███   ██ ██    ██  ██       ██    ██
██       ██     ██  ██   ██  ████  ██ ██        ██       ██
██       █████████ ██     ██ ██ ██ ██ ██   ████ ██████    ██████
██       ██     ██ █████████ ██  ████ ██    ██  ██             ██
██    ██ ██     ██ ██     ██ ██   ███ ██    ██  ██       ██    ██
 ██████  ██     ██ ██     ██ ██    ██  ██████   ████████  ██████
-->

Changes {#changes}
=======

<h3 id="changes-20210601">Since the <a href="https://www.w3.org/TR/2021/WD-css-color-5-20210601/">Working Draft of 1 June 2021</a></h3>

<ul>
	<li>Using &lt;hue-interpolation-method> in rectangular spaces is an error</li>
	<li>Changed old &lt;hue-adjuster> to new &lt;hue-interpolation-method></li>
	<!-- to 10 Nov 2021 -->
	<li>Moved @color-profile and device-cmyk to level 5 per CSSWG resolution</li>
	<li>Excluded none as a component name</li>
	<li>Added OKLCH relative color syntax example</li>
	<li>Defined interpolation color space</li>
	<li>Defined loading color profiles in terms of fetch</li>
	<li>Clarified that contrast is calculated relative to D65-adapted CIE XYZ</li>
	<!-- to 15 Oct 2021 -->
	<li>Added oklab() and oklch()  to serialization of color-mix()</li>
	<li>Added oklab() and oklch() relative color syntax</li>
	<li>Added lch vs. oklch mixing example</li>
	<li>Prefer oklab and oklch for mixing</li>
	<li>Changed xyz to D65-reative, following CSS Color 4</li>
	<li>Added oklab and oklch colorspaces</li>
	<li>Defined how to resolve color-contrast())</li>
	<!-- to 20 July 2021 -->
	<li>Clarified minimum precision of serialized forms</li>
	<li>Clarified that CIE LCH is meant</li>
	<li>Added some more examples</li>
	<li>Removed color-adjust(), keeping relative color syntax</li>
	<li>Defined serialization of the results of the color-mix, color-contrast, and relative color syntaxes</li>
</ul>

<h3 id="changes-20200303">Since the <a href="https://www.w3.org/TR/2020/WD-css-color-5-20200303/">FPWD of 10 June 2020</a></h3>

<ul>
	<li>Added relative color syntax for the color() function</li>
	<li>Clarified that the color-adjuster is not optional</li>
	<li>Clarified that the percentage in color-mix is mandatory</li>
	<li>Moved hue-adjuster back to color-mix whee it belongs</li>
	<li>Added example with different mxing color spaces</li>
	<!-- to 27 Apr 2021 -->
	<li>Added examples of percentage normalization in color-mix()</li>
	<li>Explicitly excluded negative percentages in color-mix()</li>
	<li>Percentages in color-mix() summing to less than 100% produce an alpha transparency less than 100%</li>
	<li>Consistently used the term color space rather than colorspace,
		defined <<color-space>> token
	</li>
	<li>Corrected color-contrast grammar</li>
	<li>Added an optional target contrast ratio to color-contrast()</li>
	<li>Corrected adjuster grammar</li>
	<li>Noted that the corner case of percentages summing to zero needs to be handled</li>
	<li>Clarified order of operations in color-mix()</li>
	<li>Updated examples to match current grammar</li>
	<li>Defined how percentages are normalized</li>
	<li>Clarify meaning of 0% and 100% in color-mix()</li>
	<li>Definition of adjusters moved from color-mix() to color-adjust()</li>
	<li>Allow arguments to color-mix() to be in any order</li>
	<li>Mandatory color space for color-mix()</li>
	<li>Allowed the percentage in color-mix() to come before the color</li>
	<li>Added explicit algorithm for color-mix()</li>
	<li>Removed adjusters from color-mix() and simplified the grammar</li>
	<li>Added the "in" keyword to specify the color space used for mixing</li>
	<li>Required color-contrast() list to have at least two items</li>
	<li>Improved explanation of the relative color syntax</li>
	<!-- removed interpolation section changes, added to changes of Color 4 -->
	<li>Link to CSS 4 definition of color serialization</li>
	<li>Added separate section for color spaces</li>
	<li>Updated color-adjust example</li>
	<li>Added explanatory diagrams</li>
	<li>Deal with unresolved percentages</li>
	<li>Normalize arguments to color-mix</li>
	<li>Allow percentages for adjusters</li>
	<li>Link fixes</li>
	<li>Updated color-mix grammar, allowing adjusters, add alpha adjuster</li>
	<li>Corrections to some examples</li>
	<li>Updated Security and Privacy section</li>
	<!-- to 11 June 2020 -->
	<li>added vs keyword to color-contrast</li>
	<li>added xyz adjuster to grammar</li>
	<li>added hue adjuster keywords</li>
	<li>add XYZ color space for mixing</li>
	<li>defined color-adjuster and color space</li>
	<li>allowed mix percent to default to 50%</li>
	<li>added worked examples and diagrams</li>
	<li>corrected minor spelling, syntax and formatting issues</li>
	<li>Added section on resolving color-contrast() values</li>
</ul>

<h3 id='changes-from-3'>
	Changes from Colors 4</h3>

		One major change, compared to CSS Color 4,
		is that CSS colors are no longer restricted to
		predefined RGB spaces such as sRGB or display-p3.

		To support this, several brand new features have been added:

		<ol>
			<li>The ''color()'' function is extended by the ''@color-profile'' at-rule, for profiled device-dependent color, including calibrated CMYK.

			<li>''device-cmyk()'' function, for specifying uncalibrated colors in an output-device-specific CMYK color space.
		</ol>

		In addition the new ''color-mix()'' function allows two colors to be mixed,
		in a specified colorspace, to yeild a new color.

		The new ''color-contrast()'' function allows one of a list of colors to be chosen,
		based on the WCAG 2.1 contrast with a specified color.


