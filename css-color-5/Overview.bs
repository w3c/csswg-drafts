<pre class='metadata'>
Title: CSS Color Module Level 5
Shortname: css-color
Level: 5
Status: ED
Prepare for TR: no
Group: csswg
TR: https://www.w3.org/TR/css-color-5/
ED: https://drafts.csswg.org/css-color-5/
Previous Version: https://www.w3.org/TR/2021/WD-css-color-5-20210722/
Work Status: exploring
!Delta Spec: yes
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Una Kravets, Google, https://una.im, w3cid 115525
Editor: Lea Verou, Invited Expert, http://lea.verou.me/about, w3cid 52258
Editor: Adam Argyle, Google, https://nerdy.dev, w3cid 112669
Abstract: This module extends CSS Color [[css-color-4]] to add color modification functions.
Repository: w3c/csswg-drafts
</pre>

<pre class='ignored-specs'>
spec:css-color-3
</pre>

<pre class="link-defaults">
spec:css-color-4; type:dfn; text:color
spec:css-color-4; type:dfn; text:color space
spec:css-color-4; type:dfn; text:gamut
spec:css-color-4; type:dfn; text:rectangular orthogonal color
spec:css-color-4; type:dfn; text:cylindrical polar color
</pre>
<link rel="stylesheet" href="style.css" />

Introduction {#intro}
=====================

	<em>This section is not normative.</em>

	Web developers, design tools and design system developers
	often use color functions to assist in scaling the design
	of their component color relations.
	With the increasing usage of design systems that support multiple platforms
	and multiple user preferences, like the increased capability of Dark Mode in UI,
	this becomes even more useful to not need to manually set color,
	and to instead have a single source from which schemes are calculated.

	<figure>
		<p><img src="images/LC-picker-scale.png" alt="LC color picker" style="width: 40vmin"><br/>
			<img src="images/LC-picker-map2.png" alt="chloropleth map of the US" style="width: 48vmin"></p>
		<figcaption>Above, a color picker operating in CIE LCH space.
			Here, a pair of colors are being used
			to define a color scale
			on the Chroma-Lightness plane (constant Hue).
			Below, the color scale in use on a chloropleth map.
		</figcaption>
	</figure>

	<!-- from http://tristen.ca/hcl-picker/#/clh/8/267/0023A5/F8E0D6 -->

	Currently Sass, calc() on HSL values, or PostCSS is used to do this.
	However, preprocessors are unable to work on dynamically adjusted colors;
	all current solutions are restricted to the sRGB gamut
	and to the perceptual limitations of HSL
	(colors are bunched up in the color wheel,
	and two colors with visually different lightness,
	like yellow and blue, can have the same HSL lightness).

	This module adds two new functions:
	''color-mix()'',
	''color-contrast()'',
	and extends existing ones with [[#relative-colors|relative color syntax]].

	The perceptually uniform ``lch()`` color space
	is used recommended for  mixing,
	as this has no gamut restrictions
	and colors are evenly distributed.
	However, other color spaces can be specified,
	including ``hsl()`` or ``srgb`` if desired.

<!--
 ██████   ███████  ██        ███████  ████████         ██████  ████████     ███     ██████  ████████  ██████
██    ██ ██     ██ ██       ██     ██ ██     ██       ██    ██ ██     ██   ██ ██   ██    ██ ██       ██    ██
██       ██     ██ ██       ██     ██ ██     ██       ██       ██     ██  ██   ██  ██       ██       ██
██       ██     ██ ██       ██     ██ ████████         ██████  ████████  ██     ██ ██       ██████    ██████
██       ██     ██ ██       ██     ██ ██   ██               ██ ██        █████████ ██       ██             ██
██    ██ ██     ██ ██       ██     ██ ██    ██        ██    ██ ██        ██     ██ ██    ██ ██       ██    ██
 ██████   ███████  ████████  ███████  ██     ██        ██████  ██        ██     ██  ██████  ████████  ██████
-->

Color Spaces {#color-spaces}
==============

Mixing or otherwise combining colors
has different results depending on the color space used.
In some cases, the result of physically mixing two colored lights is desired
(in that case, the CIE XYZ color space is appropriate, because it is linear in light intensity).
In other cases, colors which are evenly spaced perceptually are desired
(in which case, the CIE Lab color space is designed to be perceptually uniform).
Alternatively, maximizing chroma so that color mixtures follow along the hue wheel is wanted
(CIE LCH works well for this).
Lastly, compatibility with legacy Web content may be the most important consideration.
(the sRGB color space, which is neither linear-light nor perceptually uniform, is the choice here).


<pre class='prod'>
	<dfn>&lt;color-space></dfn> = srgb | hsl | hwb | xyz | lab | lch
</pre>

<p dfn-type=value dfn-for="<color-space>">
	The <dfn>srgb</dfn>, <dfn>hsl</dfn>, <dfn>hwb</dfn>, <dfn>xyz</dfn>, <dfn>lab</dfn>, and <dfn>lch</dfn> keywords
	each refer to their corresponding color space.

When no <<color-space>> is specified,
the mixing is done in the ''lch'' color space.
The ''xyz'' color space is CIE XYZ, with a D50 whitepoint, and allows computation to be done
in a linear-light-intensity space.


<!--
██     ██ ████ ██     ██
███   ███  ██   ██   ██
████ ████  ██    ██ ██
██ ███ ██  ██     ███
██     ██  ██    ██ ██
██     ██  ██   ██   ██
██     ██ ████ ██     ██
-->

Mixing colors: the ''color-mix()'' function {#color-mix}
=====================================================

	This function takes two <<color>> specifications
	and returns the result of mixing them,
	in a given <<color-space>>,
	by a specified amount.


<pre class='prod'>
	<dfn>color-mix()</dfn> = color-mix( in <<color-space>> , [ <<color>> && <<percentage [0,100]>>? ]#{2} <<hue-adjuster>>?)
	<dfn>&lt;hue-adjuster></dfn> = ''shorter'' | ''longer'' | ''increasing'' | ''decreasing'' | ''specified''

</pre>

	Percentages are required to be in the range 0% to 100%. Negative percentages are specifically disallowed. The percentages are normalized as follows:

	1. Let <var>p1</var> be the first percentage and <var>p2</var> the second one.
	2. If both percentages are omitted, they each default to 50%
		(an equal mix of the two colors).
	3. Otherwise, if <var>p2</var> is omitted, it becomes 100% - <var>p1</var>
	4. Otherwise, if <var>p1</var> is omitted, it becomes 100% - <var>p2</var>
	5. If the percentages sum to zero, the function is invalid.
	6. Otherwise, if both are provided and add up to greater than 100%,
		they are scaled accordingly so that they add up to 100%.
	7. Otherwise, if both are provided and add up to less than 100%,
		the sum is saved as an alpha multiplier.
		They are then scaled accordingly so that they add up to 100%.

	This means that
	<var>p1</var> becomes <var>p1</var> / (<var>p1</var> + <var>p2</var>)
	and
	<var>p2</var> becomes <var>p2</var> / (<var>p1</var> + <var>p2</var>).

<div class="example" id="ex-mix-syntactic">
	<!-- https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2Fe37b01c449283352482d05fae52b9452 -->
	These syntactic forms are thus all equivalent:

	<pre class="lang-css">
		color-mix(in lch, purple 50%, plum 50%)
		color-mix(in lch, purple 50%, plum)
		color-mix(in lch, purple, plum 50%)
		color-mix(in lch, purple, plum)
		color-mix(in lch, plum, purple)
		color-mix(in lch, purple 80%, plum 80%)
	</pre>

	All produce a 50-50 mix of <span class="swatch" style="--color: purple"></span> purple and <span class="swatch" style="--color: plum"></span> plum,
	in lch: <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%)"></span> lch(51.51% 52.21 325.8) which is <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%)"></span> rgb(68.51% 36.01% 68.29%).

	However, this form is <em>not</em> the same, as the alpha is less than one:

	<pre class="lang-css">
		color-mix(in lch, purple 30%, plum 30%)
	</pre>

	This produces <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%, 0.6)"></span> lch(51.51% 52.21 325.8 / 0.6) which is <span class="swatch" style="--color: rgb(68.51%, 36.01%, 68.29%, 0.6)"></span> rgb(68.51% 36.01% 68.29% / 0.6).
</div>


After normalizing both percentages, the result is produced via the following algorithm:

1. Both colors are converted to the specified <<color-space>>.
	If the specified color space has a smaller gamut
	than the one in which the color to be adjusted is specified,
	gamut mapping will occur.
2. Colors are then interpolated in the 	specified color space,
	as described in [[css-color-4#interpolation]]. If the specified color space is a ''cylindrical-polar-color'' space,
	then the <<hue-adjuster>> controls the
	interpolation of hue, as described in
	[[css-color-4#hue-interpolation]].
	If no <<hue-adjuster>> is specified, it is as if
	''shorter'' had been specified.
	If the specified colorspace is a
	''rectangular-orthogonal-color'' space,
	then specifying a <<hue-adjuster>> is not an error,
	but has no effect.
3. If an alpha multiplier was produced during percentage normalization,
	the alpha component of the interpolated result is multiplied
	by the alpha multiplier.


The result of mixing is the color at the specified percentage along the progression
of the second color to the first color.

Note: As a corrollary, a percentage of 0% just returns the other color converted to the specified color space,
and a percentage of 100% returns the same color converted to the specified color space.

<div class="example" id="ex-mix-lch-peru40">
	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F2ddd7cf7cf822f2fb2bdc32faeb2b7f6
	-->
	This example produces a mixture of 40% <span class="swatch" style="--color: peru"></span> peru
	and 60% <span class="swatch" style="--color: palegoldenrod"></span> palegoldenrod.

	<pre class="lang-css">color-mix(in lch, peru 40%, palegoldenrod)</pre>

	The mixing is done in ''lch()'' color space.
	Here is a top-down view, looking along the neutral L axis:

	<figure>
		<img src="images/CH-mixing.svg"  width=480 height=480>
		<figcaption>Mixtures of peru and palegoldenrod.
			Peru has a hue angle, measured from the positive a axis,
			of 63.677 degrees
			while palegoldenrod has a hue angle of 98.834 degrees.
			Peru has a chroma, or distance from the central neutral axis, of 54.011
			while palegoldenrod has a chroma of 31.406.
			Mixtures lie along the curve. A 40%/60% mixture is shown.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: peru"></span> peru is lch(62.253% 54.011 63.677)
	  * <span class="swatch" style="--color: palegoldenrod"></span> palegoldenrod is lch(91.374% 31.406 98.834)
	  * the mixed lightness is 62.253 * 40/100 + 91.374 * (100-40)/100 = 79.7256
	  * the mixed chroma is 54.011 * 40/100 + 31.406 * (100-40)/100 = 40.448
	  * the mixed hue is 63.677 * 40/100 + 98.834 * (100-40)/100 = 84.771
	  * the mixed result is <span class="swatch" style="--color: rgb(87.416% 76.036% 47.637%)"></span> lch(79.7256% 40.448 84.771)
</div>

<div class="example" id="ex-mix-lch-teal65">
	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F2fb07e0a4eef97b0d0a1950f94ab3951
	-->
	This example produces the mixture of teal and olive,
	in ''lch'' color space,
	with each lch channel being 65% of the value for teal
	and 35% of the value for olive.

	Note: interpolating on hue and chroma
	keeps the intermediate colors
	as saturated as the endpoint colors.

	<pre class="lang-css">color-mix(in lch, teal 65%, olive);</pre>

	<figure>
		<img src="images/CH-mixing3.svg"  width=500 height=500>
		<figcaption>Mixtures of teal and olive.
			Teal has a hue angle, measured from the positive a axis,
			of 196.4524 degrees
			while olive has a hue angle of 99.5746 degrees.
			Teal has a chroma, or distance from the central neutral axis, of 31.6903
			while olive has a chroma of 56.8124.
			Mixtures lie along the dashed curve. A 65%/35% mixture is shown.
		</figcaption>
	</figure>

	The calculation is as follows:
		* sRGB  <span class="swatch" style="--color: teal"></span> teal (#008080) is lch(47.9855% 31.6903 196.4524)
		* sRGB <span class="swatch" style="--color: olive"></span>  olive (#808000) is lch(52.1496% 56.8124 99.5746)
		* mixed lightness is 47.9855 * 0.65 + 52.1496 * 0.35 = 49.4429
		* mixed chroma is 31.6903 * 0.65 + 56.8124 * 0.35 = 40.4830
		* mixed hue is 196.4524 * 0.65 + 99.5746 * 0.35 = 162.5452
		* mixed result is lch(49.4429% 40.4830 162.5452)
		* which is a slightly-blueish green: <span class="swatch" style="--color: rgb(7.7377% 52.5730% 37.3213%)"></span>  rgb(7.7377% 52.5730% 37.3213%)
</div>

The choice of mixing colorspace can have a large effect on the end result.

<div class="example" id="ex-mix-colorspaces-black-white">
	<!--
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2F6e9bc5c573fc5afcb11e9ab47c6e1e2f
	-->
	This example is a 50% mix of white and black,
	in three different color spaces.

	<pre class="lang-css">
		color-mix(in lch, white, black);
		color-mix(in xyz, white, black);
		color-mix(in srgb, white, black);
	</pre>

	The calculation is as follows:
		* sRGB  <span class="swatch" style="--color: white"></span> white (#008080) is lch(100% 0 0)
		* sRGB <span class="swatch" style="--color: black"></span>  black (#808000) is lch(0% 0 0)
		* The mix in LCH is <span class="swatch" style="--color: rgb(47% 47% 47%)"></span>  lch(50% 0 0)
		* The mix in XYZ is <span class="swatch" style="--color: rgb(74% 74% 74%)"></span>  lch(76% 0 0)
		* The mix in sRGB is <span class="swatch" style="--color: rgb(50% 50% 50%)"></span>  lch(53.4% 0 0)

	The mix in LCH gives an L value of 50%,
	a perfect mid gray, exactly as expected
	(mixing in Lab would do the same,
	as the Lightness axis is the same in LCH and Lab).

	The mix in XYZ gives a result that is too light;
	XYZ is linear-light but is not perceptually uniform.
	The mix in sRGB gives a result that is a bit too light;
	sRGB is neither perceptually uniform nor linear-light.
</div>

<div class="example" id="ex-mix-xyz">
	This example produces the mixture of
	the a red and a sky blue,
	in ''xyz'' color space,
	with the mixture being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).

	<pre class="lang-css">color-mix(in xyz, rgb(82.02% 30.21% 35.02%) 75.23%, rgb(5.64% 55.94% 85.31%));</pre>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> rgb(82.02% 30.21% 35.02%) is lch(52% 58.1 22.7) which is X=0.3214, Y=0.2014, Z=0.0879.
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> rgb(5.64% 55.94% 85.31%) is lch(56% 49.1 257.1) which is X=0.2070, Y=0.2391, Z=0.5249.
	  * mixed result X=(0.3214 * 0.7523) + (0.2070 * (1 - 0.7523)) = 0.29306.
	  * mixed result Y=(0.2014 * 0.7523) + (0.2391 * (1 - 0.7523)) = 0.21074.
	  * mixed result Z=(0.0879 * 0.7523) + (0.5249 * (1 - 0.7523)) = 0.19614.
	  * mix result is <span class="swatch" style="--color: rgb(72.300% 38.639% 53.557%)"></span> lch(53.0304% 38.9346, 352.8138) which is rgb(72.300% 38.639% 53.557%)
</div>

<!--
Let's move this example to the appropriate section when we have the new syntax for making these low-level adjustments
<div class="example">
	This example produces the mixture of a deep green and a sky blue,
	in ''lch()'' color space (the default),
	with the lightness being 40% of the lightness of the green
	(and thus, 60% of the lightness of the blue).
	The chroma and hue of the green are used unchanged in the mixed result.

	<pre class="lang-css">color-mix(rgb(0% 42.35% 33.33%) lightness 40%, rgb(41.2% 69.88% 96.64%));</pre>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(0% 42.35% 33.33%)"></span> rgb(0% 42.35% 33.33%) is lch(40.083% 32.808 171.175)
	  * <span class="swatch" style="--color: rgb(41.2% 69.88% 96.64%)"></span> rgb(41.2% 69.88% 96.64%) is lch(70% 42.5 258.2)
	  * mixed lightness is 40.083 * 0.4 + 70% * (1 - 0.4) = 58.0332
	  * mixed result is <span class="swatch" style="--color: rgb(26.25% 60.68% 50.72%)"></span> lch(58.0332 32.808 171.175)
	  * which is a <span class="swatch" style="--color:  rgb(26.25% 60.68% 50.72%)"></span>  rgb(26.25% 60.68% 50.72%), a lighter green

</div>

<div class="example">
	This example produces the mixture of a red and a sky blue,
	in ''lch()'' color space (the default),
	with the hue being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).
	The shorter hue arc will be used.
	The chroma and lightness of the red are left unchanged.

	<pre class="lang-css">color-mix(lch(52% 58.1 22.7) hue 75.23%, lch(56% 49.1 257.1));</pre>

	<figure>
		<img src="images/CH-mixing2.svg" style="width: 50vmin">
		<figcaption>Mixtures of a red and a sky blue.
			The red has a hue angle, measured from the positive a axis,
			of 22.7 degrees
			while the blue  has a hue angle of 257.1 degrees.
			The red has a chroma, or distance from the central neutral axis, of 58.1
			and the chroma is not interpolated here, just the hue.
			Thus, mixtures lie along the dashed circle.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> lch(52% 58.1 22.7)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> lch(56% 49.1 257.1)
	  * hue difference is |257.1 - 22.7| = 234.4, which is greater than 180; the shorter arc is 54.4 degrees.
	  * mixed hue is (22.7 + 360) * 0.7523 +(257.1 * 0.2477 = 351.59 degrees
	  * mixed result is <span class="swatch" style="--color: rgb(80.672% 28.822% 55.255%)"></span>  lch(52% 58.1 351.59)

</div>

<div class="example">
	This example produces the mixture of a red and a sky blue,
	in ''lch()'' color space (the default),
	with the hue being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).
	The longer hue arc has been specified.
	The chroma and lightness of the red are left unchanged.

	<pre class="lang-css">color-mix(lch(52% 58.1 22.7) hue longer 75.23%, lch(56% 49.1 257.1) );</pre>

	<figure>
		<img src="images/CH-mixing2b.svg" style="width: 50vmin">
		<figcaption>Mixtures of a red and a sky blue.
			The red has a hue angle, measured from the positive a axis,
			of 22.7 degrees
			while the blue  has a hue angle of 257.1 degrees.
			The red has a chroma, or distance from the central neutral axis, of 58.1
			and the chroma is not interpolated here, just the hue.
			Thus, mixtures lie along the dashed circle.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> lch(52% 58.1 22.7)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> lch(56% 49.1 257.1)
	  * hue difference is |257.1 - 22.7| = 234.4, which is greater than 180, but the long arc was requested.
	  * mixed hue is 22.7 * 0.7523 + 257.1 * 0.2477 = 80.76
	  * mixed result is <span class="swatch" style="--color: rgb(61.11% 45.85% 0.41%)"></span>  lch(52% 58.1 80.76)

</div>

<div class="example">
	This example produces the mixture of
	the same two colors as the previous example
	(a red and a sky blue),
	in ''lch()'' color space (the default),
	with the hue being 75.23% of that of the red
	(and thus, 24.77% of that of the blue).
	This time, the lightness is set to 68.4% and
	the chroma is left unchanged.

	<pre class="lang-css">color-mix(rgb(82.02% 30.21% 35.02%) hue 75.23% lightness 68.4%, rgb(5.64% 55.94% 85.31%) );</pre>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> rgb(82.02% 30.21% 35.02%) is lch(52% 58.1 22.7)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> rgb(5.64% 55.94% 85.31%) is lch(56% 49.1 257.1)
	  * mixed hue is 22.7 * 0.7523 + 257.1 * 0.2477 = 80.76
	  * new lightness is specified as 68.4%
	  * mixed result is <span class="swatch" style="--color: rgb(79.67% 62.48% 22.09%)"></span>  lch(68.4% 58.1 80.76) which is rgb(79.67% 62.48% 22.09%)

</div>




<div class="example">
	This example produces the mixture of red and yellow,
	in ''lch()'' color space (the default),
	with the lightness being 30% of the lightness of red
	(and thus, 70% of the lightness of yellow).
	The chroma and hue of red are left unchanged.

	<pre class="lang-css">color-mix(red lightness 30%, yellow );</pre>

	The calculation is as follows:
	  * sRGB <span class="swatch" style="--color: red"></span> red (#F00) is lch(54.2917% 106.8390 40.8526)
	  * sRGB <span class="swatch" style="--color: yellow"></span> yellow (#FF0) is lch(97.6071% 94.7077 99.5746)
	  * mixed lightness is 54.2917 * 0.3 + 97.6071 * 0.7 = 84.6125
	  * mixed result is <span class="swatch oog"></span> lch(84.6125% 106.8390 40.8526)
	  * which is a very light, saturated red
		* (and well outside the gamut of sRGB: rgb(140.4967% 51.2654% 32.6891%))
		* even outside the gamut of P3: color(display-p3 1.3033 0.5756 0.4003)

	This example demonstrates that not all colors which can be mixed, can be displayed on current devices.
</div>
-->

<!--
<img src="images/mix_red_yellow_lightness30.png" alt="Result of color-mix(red, yellow, lightness(30%)" />
 this image incorrectly shows red and yellow to be outside gamut as well, which is confusing.
     it also shows the result color after per-component clipping, which is not desirable -->


<!--
<img src="images/mix_red_yellow_65.png" alt="Result of color-mix(red, yellow, 65%" /> -->

<!-- todo: example that specifies a different color space -->

<!-- worked example in Lab space
	with 38% of a and 38% of b
	showing desaturated result compared to LCH interpolation

	red=[52, 58.1, 22.7]
Array(3) [ 52, 58.1, 22.7 ]

blue=[56, 49.1, 257.1]
Array(3) [ 56, 49.1, 257.1 ]

red_lab=LCH_to_Lab(red)
Array(3) [ 52, 53.59946299740792, 22.42114105904291 ]

blue_lab=LCH_to_Lab(blue)
Array(3) [ 56, -10.961580696137688, -47.860774634788996 ]

result_lab=[red_lab[0], 0.38*red_lab[1]+0.62*blue_lab[1], 0.38*red_lab[2]+0.62*blue_lab[2]]
Array(3) [ 52, 13.571615907409644, -21.153646671132876 ]

result_lch=Lab_to_LCH(result_lab)
Array(3) [ 52, 25.132956965414664, 302.683148992448 ]

result_rgb=LCH_to_sRGB(result_lch)
Array(3) [ 0.524461282381659, 0.4582102541032295, 0.6295269395052022 ]

which is rgb(52.446% 45.821% 62.953%)




<div class="example">
	This example produces the mixture of
	the same two colors as the previous example
	(a red and a sky blue),
	in Lab color space,
	with 38% of a and 38% of b.
	The lightness of the red is left unchanged.

	This shows a desaturated result, compared to LCH interpolation,
	because interpolation is in a straight line on the <em>a,b</em> plane
	and can thus pass close to the central, neutral axis.

	<pre class="lang-css">color-mix(lab rgb(82.02% 30.21% 35.02%) a 38% b 38%, rgb(5.64% 55.94% 85.31%));</pre>

	<figure>
		<img src="images/CH-mixing2c.svg" style="width: 50vmin">
		<figcaption>Mixtures of a red and a sky blue.
			The red has a hue angle, measured from the positive a axis,
			of 22.7 degrees
			while the blue  has a hue angle of 257.1 degrees.
			Interpolation is on the a,b plane.
			Thus, mixtures lie along the dashed line
			and pass closer to the neutral axis.
		</figcaption>
	</figure>

	The calculation is as follows:
	  * <span class="swatch" style="--color: rgb(82.02% 30.21% 35.02%)"></span> rgb(82.02% 30.21% 35.02%) is lab(52% 53.599 22.421)
	  * <span class="swatch" style="--color: rgb(5.64% 55.94% 85.31%)"></span> rgb(5.64% 55.94% 85.31%) is lab(56% -10.962 -47.861)
	  * a is (53.599 * 0.38) + (-10.962 * 0.62) = 13.572
	  * b is (22.421 * 0.38) + (-47.861 * 0.62) = -21.154
	  * result is <span class="swatch" style="--color: rgb(52.446% 45.821% 62.953%)"></span> lab(52% 13.572 -21.154) which is rgb(52.446% 45.821% 62.953%)

</div>
-->

<!-- IMPLEMENTATIONS

	Chrome, sRGB only for now
	Implement basic color-mix() functionality, and expose it to chrome code and to content behind a pref.
	https://bugzilla.mozilla.org/show_bug.cgi?id=1695376

-->

<!--
 ██████   ███████  ██    ██ ████████ ████████     ███     ██████  ████████
██    ██ ██     ██ ███   ██    ██    ██     ██   ██ ██   ██    ██    ██
██       ██     ██ ████  ██    ██    ██     ██  ██   ██  ██          ██
██       ██     ██ ██ ██ ██    ██    ████████  ██     ██  ██████     ██
██       ██     ██ ██  ████    ██    ██   ██   █████████       ██    ██
██    ██ ██     ██ ██   ███    ██    ██    ██  ██     ██ ██    ██    ██
 ██████   ███████  ██    ██    ██    ██     ██ ██     ██  ██████     ██
-->

Selecting the most contrasting color: the ''color-contrast()'' function {#colorcontrast}
========================================================================================

	This function takes, firstly, a single color
	(typically a background, but not necessarily),
	secondly, a list of two or more colors,
	and thirdly, an optional target <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">luminance contrast</a> [[!WCAG21]].
	It selects from that list
	the first color color to meet or exceed the target contrast.
	If no target is specified,
	it selects the first color with the highest contrast
	to the single color.

	The single color is separated from the list
	with the keyword <css>vs</css>
	and the target contrast, if present, is separated from the list
	with the keyword <css>to</css>.

	<pre class='prod'>
		<dfn>color-contrast()</dfn> = color-contrast( <<color>> vs <<color>>#{2,}  [ to [<<number>> | AA | AA-large | AAA | AAA-large]]? )
	</pre>

	The keyword <dfn value for="color-contrast()">AA</dfn> is equivalent to ''4.5'',
	 <dfn value for="color-contrast()">AA-large</dfn> is equivalent to ''3'',
	 <dfn value for="color-contrast()">AAA</dfn> is equivalent to ''7'', and
	 <dfn value for="color-contrast()">AAA-large</dfn> is equivalent to ''4.5'' .

	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs tan, sienna, var(--myAccent), #d2691e)</pre>

		The calculation is as follows:
			* <span class="swatch" style="--color: wheat"></span> wheat (#f5deb3), the background, has relative luminance 0.749
			* <span class="swatch" style="--color: tan"></span> tan (#d2b48c) has relative luminance 0.482 and contrast ratio <strong>1.501</strong>
			* <span class="swatch" style="--color: sienna"></span> sienna (#a0522d) has relative luminance 0.137 and contrast ratio <strong>4.273</strong>

		Suppose myAccent has the value <span class="swatch" style="--color: #b22222"></span>  #b22222:
			* #b22222 has relative luminance 0.107 and contrast ratio <strong>5.081</strong>
			* <span class="swatch" style="--color: #d2691e"></span> #d2691e has relative luminance 0.305 and contrast ratio <strong>2.249</strong>
		The highest contrast ratio is <strong>5.081</strong> so var(--myAccent) wins

	</div>

	<!-- live example
		https://colorjs.io/notebook/?storage=https%3A%2F%2Fgist.github.com%2Fsvgeesus%2Fec249f376fcecbaa8794f75dbfc1dacf
	-->
	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs bisque, darkgoldenrod, olive, sienna, darkgreen, maroon to AA)</pre>

		The calculation is as follows:
			* <span class="swatch" style="--color: wheat"></span> wheat (#f5deb3), the background, has relative luminance 0.749
			* <span class="swatch" style="--color: bisque"></span> bisque (#ffe4c4) has relative luminance 0.807 and contrast ratio <strong>1.073</strong>
			* <span class="swatch" style="--color: darkgoldenrod"></span> darkgoldenrod (#b8860b) has relative luminance 0.273 and contrast ratio <strong>2.477</strong>
			* <span class="swatch" style="--color: olive"></span> olive (#808000 ) has relative luminance 0.200 and contrast ratio <strong>3.193</strong>
			* <span class="swatch" style="--color: sienna"></span> sienna (#a0522d) has relative luminance 0.137 and contrast ratio <strong>4.274</strong>
			* <span class="swatch" style="--color: darkgreen"></span> darkgreen (#006400 ) has relative luminance 0.091 and contrast ratio <strong>5.662</strong>
			* <span class="swatch" style="--color: maroon"></span> maroon (#800000 ) has relative luminance 0.046 and contrast ratio <strong>8.333</strong>


		The first color in the list which meets the desired contrast ratio of 4.5 is <span class="swatch" style="--color: darkgreen"></span> darkgreen.

	</div>

	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs bisque, darkgoldenrod, olive, sienna, darkgreen, maroon to 5.8)</pre>

		The calculation is as follows:
			* the relative luminances and contrast ratios are the same as the previous example.

		The first color in the list which meets the desired contrast ratio of 5.8 is <span class="swatch" style="--color: maroon"></span> maroon.

	</div>

	The colors in the list (after the keyword vs) are tested sequentially,
	from left to right;
	a color is the temporary winner
	if it has  the highest contrast of all those tested so far.

	List traversal is terminated once the target contrast has been met or exceeded.

	Once the end of the list is reached, if there is no target contrast,
	the current temporary winner is the overall winner.
	Thus, if two colors in the list happen to have the same contrast,
	the earlier in the list wins
	because the later one has the same contrast, not higher.

	If there is a target contrast,
	and the end of the list is reached without meeting that target,
	either ''white'' or ''black'' is returned,
	whichever has the higher contrast.

	<div class="example">
		<pre class="lang-css">color-contrast(wheat vs bisque, darkgoldenrod, olive to AA)</pre>

		The calculation is as follows:
			* the relative luminances and contrast ratios are the same as the previous example.

		No color in the list meets the desired contrast ratio of 4.5,
		so <span class="swatch" style="--color: black"></span> black
		is returned as the contrast (15.982)
		is higher than that of white (1.314).

	</div>

	<div class="example">
		<pre class="lang-css">
			foo {
				--bg: hsl(200 50% 80%);
				--purple-in-hsl: hsl(300 100% 25%);
				color: color-contrast(var(--bg) vs hsl(200 83% 23%), purple, var(--purple-in-hsl));
			  }
		</pre>

		The calculation is as follows:

			* <span class="swatch" style="--color: hsl(200 50% 80%)"></span> --bg is rgb(179 213 230) which has relative luminance 0.628835
			* <span class="swatch" style="--color: hsl(200 83% 23%)"></span> hsl(200 83% 23%) is rgb(10 75 107) which has relative luminance 0.061575 and contrast ratio <strong>6.08409</strong>
			* <span class="swatch" style="--color: purple"></span> purple is rgb(128 0 128) which has relative luminance 0.061487 and contrast ratio <strong>6.08889</strong>
			* <span class="swatch" style="--color: hsl(300 100% 25%)"></span> --purple-in-hsl is also rgb(128 0 128) which has relative luminance 0.061487 and contrast ratio <strong>6.08889</strong>. This is not greater than the contrast for purple, so purple wins.

		The calculated values here are shown to six significant figures, to demonstrate that early rounding to a lower precision would have given the wrong result (0.061575 is very close to 0.061487;
		6.08409 is very close to 6.08889).
		<!-- great example to use in WPT -->
	</div>

	<h3 id="resolving-contrast">Resolving ''color-contrast()'' values</h3>

	The computed value is the specified ''color-contrast()'' function
	with each <<color>> parameter resolved according to [[css-color-4#resolving-color-values]],
	and the keywords ''AA'', ''AA-large'', ''AAA'', ''AAA-large'' replaced with their corresponding numeric value.

	The used value is the winning color
	resolved according to [[css-color-4#resolving-color-values]].

	<div class="example">

		For example, given a current color value of
		<span class="swatch" style="--color: rgb(179 213 230)"></span> rgb(179 213 230),
		the value

		<pre class="lang-css">
			color-contrast(currentColor vs hsl(200 83% 23%), purple to AA)
		</pre>

		has the computed value

		<pre class="lang-css">
			color-contrast(currentColor vs rgb(10 75 107), rgb(128 0 128) to 4.5)
		</pre>

		and the used value

		<pre class="lang-css">
			rgb(128 0 128)
		</pre>

	</div>


<!-- old color-adjust wording might be useful, on choice of color space for adjustment -->

	<!-- Note: not all <<color-adjuster>>s are equally useful.
	Adjustments in LCH are the most useful, which is why it is the default.
	Adjustments on the a and b axes are rarely needed.
	Adjustments in the srgb-related spaces (''srgb'' itself, ''hsl'', ''hwb'')
	are provided mainly for backward compatibility
	with the sorts of adjustments currently done in CSS preprocessors.
	Adjusting the individual x, y and z channels will produce significant hue shifts;
	however, adjusting all three channels together is useful
	and will lighten or darken the color. -->


<!--
████████  ████████ ██          ███    ████████ ████ ██     ██ ████████
██     ██ ██       ██         ██ ██      ██     ██  ██     ██ ██
██     ██ ██       ██        ██   ██     ██     ██  ██     ██ ██
████████  ██████   ██       ██     ██    ██     ██  ██     ██ ██████
██   ██   ██       ██       █████████    ██     ██   ██   ██  ██
██    ██  ██       ██       ██     ██    ██     ██    ██ ██   ██
██     ██ ████████ ████████ ██     ██    ██    ████    ███    ████████
-->

Relative color syntax {#relative-colors}
========================================

In previous levels of this specification,
the color functions could only specify colors in an absolute manner,
by directly specifying all of the color channels.

The new <dfn export>relative color</dfn> syntax
allows existing colors to be modified
using the color functions:
if an <dfn>origin color</dfn> is specified,
then each color channel can <em>either</em> be directly specified,
or taken from the origin color
(and possibly modified with [=math functions=]).

The precise details of each function's changes to accomodate [=relative colors=] are listed below,
but they all follow a common structure:

* An [=origin color=] can be specified with a ''from <<color>>'' value at the start of the function.
* If an [=origin color=] is specified,
	the remaining arguments can either be specified directly, as normal,
	be specified as a <dfn>channel keyword</dfn> referring to one of the channels of the [=origin color=].
	[=Math functions=] can also use these keywords
	to do dynamic modifications of the [=origin color's=] channels.
* [=Relative color=] syntax doesn't change whether an argument is required or optional.
	If the alpha value is omitted, however,
	it defaults to taking from the [=origin color=]
	(rather than defaulting to ''100%'', as it does in the absolute syntax).

If the [=origin color=] was originally specified with a different color function,
it's first converted into the chosen color function,
so it has meaningful values for the channels.

<div class=example>
	For example, if a theme color is specified as opaque,
	but in a particular instance you need it to be partially transparent:

	<pre highlight=css>
	html { --bg-color: blue; }
	.overlay {
		background: rgb(from var(--bg-color) r g b / 80%);
	}
	</pre>

	In this example, the r, g, and b channels of the [=origin color=] are unchanged,
	indicated by specifying them with the keywords
	drawing their values from the [=origin color=],
	but the opacity is set to ''80%'' to make it slightly transparent,
	regardless of what the [=origin color's=] opacity was.
</div>

<div class=example>
	By using the [=channel keywords=] in a [=math function=],
	an [=origin color=] can be manipulated in more advanced ways.

	<pre highlight=css>
	html { --color: green; }
	.foo {
		--darker-accent: lch(from var(--color) calc(l / 2) c h);
	}
	</pre>

	In this example, the [=origin color=] is darkened
	by cutting its lightness in half,
	without changing any other aspect of the color.

	Note as well that the [=origin color=] is a color keyword
	(effectively RGB),
	but it's automatically interpreted as an LCH color
	due to being used in the ''lch()'' function.
</div>

<div class=example>
	While most uses of [=relative color=] syntax
	will use the [=channel keywords=] in their corresponding argument,
	you can use them in any position.

	For example, to do a rough approximation of grayscaling a color:

	<pre highlight=css>
	--blue-into-gray: rgb(from var(--color)
		                  calc(r * .3 + g * .59 + b * .11)
		                  calc(r * .3 + g * .59 + b * .11)
		                  calc(r * .3 + g * .59 + b * .11));
	</pre>

	Using this,
	''red'' would become ''rgb(30% 30% 30%)'',
	''green'' would become ''rgb(59% 59% 59%)'',
	and ''blue'' would become ''rgb(11% 11% 11%)''.
	A more moderate color, like ''darkolivegreen'',
	which has RGB values ''rgb(85 107 47)'',
	would become approximately ''rgb(37% 37% 37%)''.

	(Note, tho, that an easier and more accurate way to grayscale a color
	is to use the ''lch()'' function,
	as that color space is more accurate to human perception:
	''lch(from var(--color) l 0 h)'' preserves the lightness,
	but zeroes out the chroma,
	which determines how "colorful" the color is.)
</div>

<h3 id="relative-RGB">Relative RGB colors</h3>

The grammar of the ''rgb()'' function is extended as follows:

<pre class='prod'>
	<dfn>rgb()</dfn> = rgb( <<percentage>>{3} [ / <<alpha-value>> ]? ) |
	        rgb( <<number>>{3} [ / <<alpha-value>> ]? ) |
	        rgb( [ from <<color>> ]? [ <<number>> | <<percentage>> ]{3} [ / <<alpha-value>> ]? )
</pre>

Within a [=relative color=] syntax ''rgb()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="rgb()">r</dfn>, <dfn value for="rgb()">g</dfn>, and <dfn value for="rgb()">b</dfn>
	are all <<percentage>>s
	that correspond to the [=origin color's=] red, green, and blue channels
	after its conversion to sRGB
* <dfn value for="rgb()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example">
	To manipulate color channels in the sRGB color space:

	<pre>
		rgb(from <span class="swatch" style="--color: indianred"></span> indianred 255 g b)
	</pre>

	This takes the sRGB value of indianred (205 92 92) and replaces the red channel with 255 to give <span class="swatch" style="--color: rgb(255 92 92)"></span>  rgb(255 92 92).
</div>

<h3 id="relative-HSL">Relative HSL colors</h3>

The grammar of the ''hsl()'' function is extended as follows:

<pre class='prod'>
<dfn>hsl()</dfn> = hsl([from <<color>>]? <<hue>> <<percentage>> <<percentage>> [ / <<alpha-value>> ]? )
</pre>

Within a [=relative color=] syntax ''hsl()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="hsl()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] HSL hue
	after its conversion to sRGB,
	normalized to a [0deg, 360deg) range
* <dfn value for="hsl()">s</dfn> and <dfn value for="hsl()">l</dfn>
	are <<percentage>>s that correspond to the [=origin color's=] HSL saturation and lightness
	after its conversion to sRGB
* <dfn value for="hsl()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example">
	This adds 180 degrees to the hue angle, giving a complementary color.
	<pre>
		--accent: <span class="swatch" style="--color: lightseagreen"></span> lightseagreen;
		--complement:  <span class="swatch" style="--color: hsl(357deg 70% 41%)"></span> hsl(from var(--accent) calc(h + 180deg) s l);
	</pre>
	lightseagreen is hsl(177deg 70% 41%), so --complement is <span class="swatch" style="--color: hsl(357deg 70% 41%)"></span> hsl(357deg 70% 41%)
</div>

<h3 id="relative-HWB">Relative HWB colors</h3>

The grammar of the ''hwb()'' function is extended as follows:

<pre class='prod'>
	<dfn>hwb()</dfn> = hwb([from <<color>>]? <<hue>> <<percentage>> <<percentage>> [ / <<alpha-value>> ]? )
</pre>

Within a [=relative color=] syntax ''hwb()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="hwb()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] HWB hue
	after its conversion to sRGB,
	normalized to a [0deg, 360deg) range
* <dfn value for="hwb()">w</dfn> and <dfn value for="hwb()">b</dfn>
	are <<percentage>>s that correspond to the [=origin color's=] HWB whiteness and blackness
	after its conversion to sRGB
* <dfn value for="hwb()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<h3 id="relative-Lab">Relative Lab colors</h3>

The grammar of the ''lab()'' function is extended as follows:

<pre class='prod'>
<dfn>lab()</dfn> = lab([from <<color>>]? <<percentage>> <<number>> <<number>> [ / <<alpha-value>> ]? )
</pre>

Within a [=relative color=] syntax ''lab()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="lab()">l</dfn> is a <<percentage>>
	that corresponds to the [=origin color's=] CIE Lightness
* <dfn value for="lab()">a</dfn> and <dfn value for="lab()">b</dfn> are <<number>>s
	that correspond to the [=origin color's=] CIELab a and b axises
* <dfn value for="lab()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

<div class="example">
	Multiple ways to adjust the transparency of a base color:

	* ''lab(from var(--mycolor) l a b / 100%)'' sets the alpha of ''var(--mycolor)'' to 100% regardless of what it originally was.
	* ''lab(from var(--mycolor) l a b / calc(alpha * 0.8))'' reduces the alpha of ''var(--mycolor)'' by 20% of its original value.
	* ''lab(from var(--mycolor) l a b / calc(alpha - 20%))'' reduces the alpha of ''var(--mycolor)'' by 20% of 100%.

	Note that all the adjustments are lossless in the sense that no gamut clipping occurs, since lab() encompasses all visible color.
	This is not true for the alpha adjustments in the sRGB based functions (such as 'rgb()', 'hsl()', or 'hwb()'), which would also convert to sRGB in addition to adjusting the alpha transparency.
</div>

<div class="example">
	Fully desaturating a color to gray, keeping the exact same lightness:

	<pre>
	--mycolor: <span class="swatch" style="--color: orchid"></span> orchid;
	// orchid is lab(62.753% 52.460 -34.103)
	--mygray: <span class="swatch" style="--color: rgb(59.515% 59.515% 59.515%)"></span> lab(from var(--mycolor) l 0 0)
	// mygray is lab(62.753% 0 0) which is rgb(59.515% 59.515% 59.515%)
	</pre>
</div>

<h3 id="relative-LCH">Relative LCH colors</h3>

The grammar of the ''lch()'' function is extended as follows:

<pre class='prod'>
<dfn>lch()</dfn> = lch([from <<color>>]? <<percentage>> <<number>> <<hue>> [ / <<alpha-value>> ]? )
</pre>

Within a [=relative color=] syntax ''lch()'' function,
the allowed [=channel keywords=] are:

* <dfn value for="lch()">l</dfn> is a <<percentage>>
	that corresponds to the [=origin color's=] CIE Lightness
* <dfn value for="lch()">c</dfn> is a <<number>>
	that corresponds to the [=origin color's=] LCH chroma
* <dfn value for="lch()">h</dfn> is an <<angle>>
	that corresponds to the [=origin color's=] LCH hue,
	normalized to a [0deg, 360deg) range.
* <dfn value for="lch()">alpha</dfn> is a <<percentage>> that corresponds to the [=origin color's=] alpha transparency

Because LCH is both perceptually uniform and chroma-preserving,
and because the axes correspond to easily understood attributes of a color,
LCH is a good choice for color manipulation.

<div class="example">
	''lch(from peru calc(l * 0.8) c h)'' produces a color that is 20% darker than <span class="swatch" style="--color: peru"></span> peru or lch(62.2532% 54.0114 63.6769), with its chroma and hue left unchanged.
	The result is <span class="swatch" style="--color: rgb(57.58% 32.47% 3.82%)"> </span> lch(49.80256% 54.0114 63.6769)
</div>

<div class="example">
	This adds 180 degrees to the hue angle, giving the complementary color.
	<pre>
		--accent: <span class="swatch" style="--color: lightseagreen"></span> lightseagreen;
		--complement:  <span class="swatch" style="--color: rgb(88.2814% 51.1047% 58.3039%)"></span> LCH(from var(--accent) l c calc(h + 180deg));
	</pre>
	lightseagreen is LCH(65.4937% 39.4484 190.1013), so --complement is <span class="swatch" style="--color: rgb(88.2814% 51.1047% 58.3039%)"></span> LCH(65.4937% 39.4484 370.1013)
</div>

<div class="example">
	Fully desaturating a color to gray, keeping the exact same lightness:

	<pre>
	--mycolor: <span class="swatch" style="--color: orchid"></span> orchid;
	// orchid is lch(62.753% 62.571 326.973)
	--mygray: <span class="swatch" style="--color: rgb(59.515% 59.515% 59.515%)"></span> lch(from var(--mycolor) l 0 h)
	// mygray is lch(62.753% 0 326.973) which is rgb(59.515% 59.515% 59.515%)
	</pre>

	But now (since the hue was preserved) <em>re-saturating</em> again

	<pre>
	--mymuted: <span class="swatch" style="--color: rgb(72.710% 53.293% 71.224%)"></span> lch(from var(--mygray) l 30 h);
	// mymuted is lch(62.753% 30 326.973) which is rgb(72.710% 53.293% 71.224%)
	</pre>
</div>

However, unlike HSL, manipulations are not guaranteed to be in-gamut.

<div class="example" id="ex-wildly-oog">
	The origin color is inside the RGB gamut,
	but rotating the hue
	produces an out of gamut color.

	<!-- lch(60% 90 320) = lab(60% 68.94 -57.9)

	-->

	<pre>
		--mycolor: <span class="swatch" style="--color: rgb(86.1% 33.4% 97.6%)"></span> lch(60% 90 320);
		lch(from var(--mycolor) l c calc(h - 120));
	</pre>

	This gives a very high-chroma blue-green,
	<span class="swatch oog" style="--color: rgb(0% 64.2% 66.3%)"></span> lch(60% 90 200)
	which is color(srgb -0.6 0.698 0.772)
	and thus out of gamut (negative red value) for sRGB.
	Indeed, it is out of gamut for display-p3:
	<span class="swatch oog" style="--color: rgb(0% 64.2% 66.3%)"></span> color(display-p3 -0.46 0.68 0.758)
	and even rec2020:
	<span class="swatch oog" style="--color: rgb(0% 64.2% 66.3%)"></span> color(rec2020 -0.14 0.623 0.729).

	The closest color inside the sRGB gamut would be <span class="swatch" style="--color: rgb(0% 64.2% 66.3%)"></span> lch(60.71% 37.56 201.1)
	which is <span class="swatch" style="--color: rgb(0% 64.2% 66.3%)"></span> rgb(0% 64.2% 66.3%). The difference in chroma (37.5, instead of 90) is huge.
</div>

<h3 id="relative-color-function">Relative color-function colors</h3>

The grammar of the ''color()'' function is extended as follows:

<pre class='prod'>
	<dfn>color()</dfn> = color( [from <<color>>]? <<colorspace-params>> [ / <<alpha-value>> ]? )
	<dfn>colorspace-params</dfn> = [<<custom-params>> | <<predefined-rgb-params>> | <<xyz-params>>]
	<dfn>custom-params</dfn> = <<dashed-ident>> [ <<number>> | <<percentage>> ]#
	<dfn>predefined-rgb-params</dfn> = <<predefined-rgb>> [ <<number>> | <<percentage>> ]{3}
	<dfn>predefined-rgb</dfn> = srgb | display-p3 | a98-rgb | prophoto-rgb | rec2020
	<dfn>xyz-params</dfn> = xyz <<number>>{3}
</pre>

Within a [=relative color=] syntax ''color()'' function using <<custom-params>>,
the number and name of the allowed [=channel keywords=] are:

* defined by the '@color-profile/components' descriptor on the corresponding ''@color-profile'',
	if present;
	otherwise, no relative color manipulation is valid. They are <<percentage>>s that correspond to the [=origin color's=] channels
	after its conversion to the color space of the color profile.

Within a [=relative color=] syntax ''color()'' function using <<predefined-rgb-params>>,
the allowed [=channel keywords=] are:

* <dfn value for="color()">r</dfn>, <dfn value for="color()">g</dfn>, and <dfn value for="color()">b</dfn>
	are all <<percentage>>s
	that correspond to the [=origin color's=] red, green, and blue channels
	after its conversion to the predefined RGB color space.

Within a [=relative color=] syntax ''color()'' function using <<xyz-params>>,
the allowed [=channel keywords=] are:

* <dfn value for="color()">x</dfn>, <dfn value for="color()">y</dfn>, <dfn value for="color()">z</dfn> are all <<number>>s
	that correspond to the [=origin color's=] X, Y and Z channels
	after its conversion to relative, D50-adapted CIE XYZ color space.

<!--
 ██████  ████████ ████████  ████    ███    ██
██    ██ ██       ██     ██  ██    ██ ██   ██
██       ██       ██     ██  ██   ██   ██  ██
 ██████  ██████   ████████   ██  ██     ██ ██
      ██ ██       ██   ██    ██  █████████ ██
██    ██ ██       ██    ██   ██  ██     ██ ██
 ██████  ████████ ██     ██ ████ ██     ██ ████████
-->

Serialization {#serial}
=======================

This section extends [[css-color-4#serializing-color-values]]
to add serialization of the
results of the
''color-mix()'',
''color-contrast()'', and
relative color functions.

In this section, the strings used in the specification and the corresponding characters are as follows.

<table class="data">
	<tr>
		<th>String</th>
		<th>Character</th>
	</tr>
	<tr>
		<td>" "</td>
		<td>U+0020 SPACE</td>
	</tr>
	<tr>
		<td>","</td>
		<td>U+002C COMMA</td>
	</tr>
	<tr>
		<td>"-"</td>
		<td>U+002D HYPHEN-MINUS</td>
	</tr>
	<tr>
		<td>"."</td>
		<td>U+002E FULL STOP</td>
	</tr>
	<tr>
		<td>"/"</td>
		<td>U+002F SOLIDUS</td>
	</tr>
</table>

The string "." shall be used as a decimal separator,
regardless of locale,
and there shall be no thousands separator.

As usual,
if the alpha of the result is exactly 1,
it is omitted from the serialization;
an implicit value of 1 (fully opaque) is the default.


Serializing color-mix() {#serial-color-mix}
-------------------------------------------

The serialization of the result of a ''color-mix()'' function
is a <<color>>,
as defined in [[css-color-4#serializing-color-values]].
The form used
depends on the color space specified with "in".

The <em>minimum</em> precision for round-tripping
is the same as that specified in
[[css-color-4#serializing-color-values]].

<table class="data">
	<tr>
		<th>color space</th>
		<th>form</th>
	</tr>
	<tr>
		<td>srgb</td>
		<td>color(srgb r g b)</td>
	</tr>
	<tr>
		<td>hsl</td>
		<td>hsl(h s l)</td>
	</tr>
	<tr>
		<td>hwb</td>
		<td>hwb(h w b)</td>
	</tr>
	<tr>
		<td>xyz</td>
		<td>color(xyz x y z)</td>
	</tr>
	<tr>
		<td>lab</td>
		<td>lab(l a b)</td>
	</tr>
	<tr>
		<td>lch</td>
		<td>lch(l c h)</td>
	</tr>
</table>

<div class="example">
	The result of this color mixture
	<pre>color-mix(in lch, peru 40%, palegoldenrod)</pre>
	is serialized as the string <span class="swatch" style="--color: rgb(87.416% 76.036% 47.637%)"></span>
	"lch(79.7256% 40.448 84.771)"
	while the result of
	<pre>color-mix(in srgb, peru 40%, palegoldenrod)</pre>
	is serialized as the string <span class="swatch" style="--color: rgb(88.16% 75.45% 49.88%)"></span>
	"color(srgb 0.8816 0.7545 0.4988)".
</div>


Serializing color-contrast() {#serial-color-contrast}
-----------------------------------------------------

The serialization of the result of a ''color-contrast()'' function
is a <<color>>,
as defined in [[css-color-4#serializing-color-values]].
The form used
is the same as that used to specify
the winning color.

The <em>minimum</em> precision for round-tripping
is the same as that specified in
[[css-color-4#serializing-color-values]].

<div class="example">
	The winner of this contrast choice
	<pre>color-contrast(wheat vs olive, sienna, maroon)</pre>
	is maroon,
	so the result is serialized as
	<span class="swatch" style="--color: maroon"></span>
	"rgb(128 0 0)".

	While the winner of
	<pre>color-contrast(wheat vs color(prophoto-rgb 0.4 0.4 0.2), color(display-p3 0.45 0.08 0.05))</pre>
	is color(display-p3 0.45 0.08 0.05),
	so the result is serialized as
	<span class="swatch" style="--color: rgb(49.277% 0.414% 0.524%)"></span>
	"color(display-p3 0.45 0.08 0.05)".
</div>

Serializing relative color functions {#serial-relative-color}
----------------------------------------------------

The serialization of the result of a relative color function
is a <<color>>,
as defined in [[css-color-4#serializing-color-values]].
The form used
is the same as that used to specify
the relative color,
but using the absolute form.

The <em>minimum</em> precision for round-tripping
is the same as that specified in
[[css-color-4#serializing-color-function-values]].

<div class="example">
	The result of serializing
	<pre>lch(from peru calc(l * 0.8) calc(c * 0.7) calc(h + 180)) </pre>
	is the string
	<span class="swatch" style="--color: rgb(3.12% 50.352% 68.894%)"></span>
	"lch(49.80224% 37.80819 243.6803)"

</div>



<!--
 ██████  ████████  ██████  ██     ██ ████████  ████ ████████ ██    ██
██    ██ ██       ██    ██ ██     ██ ██     ██  ██     ██     ██  ██
██       ██       ██       ██     ██ ██     ██  ██     ██      ████
 ██████  ██████   ██       ██     ██ ████████   ██     ██       ██
      ██ ██       ██       ██     ██ ██   ██    ██     ██       ██
██    ██ ██       ██    ██ ██     ██ ██    ██   ██     ██       ██
 ██████  ████████  ██████   ███████  ██     ██ ████    ██       ██
-->

Security and Privacy Considerations {#priv-sec}
===================================

No new security or privacy considerations have been reported on this specification.

Accessibility Considerations {#a11y}
===========================

This specification introduces a new feature
to help stylesheet authors
write stylesheets which conform
to WCAG 2.1 <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">section 1.4.3 Contrast (Minimum)</a>.

<!--
 ██████  ██     ██    ███    ██    ██  ██████   ████████  ██████
██    ██ ██     ██   ██ ██   ███   ██ ██    ██  ██       ██    ██
██       ██     ██  ██   ██  ████  ██ ██        ██       ██
██       █████████ ██     ██ ██ ██ ██ ██   ████ ██████    ██████
██       ██     ██ █████████ ██  ████ ██    ██  ██             ██
██    ██ ██     ██ ██     ██ ██   ███ ██    ██  ██       ██    ██
 ██████  ██     ██ ██     ██ ██    ██  ██████   ████████  ██████
-->

Changes {#changes}
=======

<h3 id="changes-20210601">Since the <a href="https://www.w3.org/TR/2021/WD-css-color-5-20210601/">Working Draft of 1 June 2021</a></h3>

<ul>
	<!-- to 20 July 2021 -->
	<li>Clarified minimum precision of serialized forms</li>
	<li>Clarified that CIE LCH is meant</li>
	<li>Added some more examples</li>
	<li>Removed color-adjust(), keeping relative color syntax</li>
	<li>Defined serialization of the results of the color-mix, color-contrast, and relative color syntaxes</li>
</ul>

<h3 id="changes-20200303">Since the <a href="https://www.w3.org/TR/2020/WD-css-color-5-20200303/">FPWD of 10 June 2020</a></h3>

<ul>
	<li>Added relative color syntax for the color() function</li>
	<li>Clarified that the color-adjuster is not optional</li>
	<li>Clarified that the percentage in color-mix is mandatory</li>
	<li>Moved hue-adjuster back to color-mix whee it belongs</li>
	<li>Added example with different mxing color spaces</li>
	<!-- to 27 Apr 2021 -->
	<li>Added examples of percentage normalization in color-mix()</li>
	<li>Explicitly excluded negative percentages in color-mix()</li>
	<li>Percentages in color-mix() summing to less than 100% produce an alpha transparency less than 100%</li>
	<li>Consistently used the term color space rather than colorspace,
		defined <<color-space>> token
	</li>
	<li>Corrected color-contrast grammar</li>
	<li>Added an optional target contrast ratio to color-contrast()</li>
	<li>Corrected adjuster grammar</li>
	<li>Noted that the corner case of percentages summing to zero needs to be handled</li>
	<li>Clarified order of operations in color-mix()</li>
	<li>Updated examples to match current grammar</li>
	<li>Defined how percentages are normalized</li>
	<li>Clarify meaning of 0% and 100% in color-mix()</li>
	<li>Definition of adjusters moved from color-mix() to color-adjust()</li>
	<li>Allow arguments to color-mix() to be in any order</li>
	<li>Mandatory color space for color-mix()</li>
	<li>Allowed the percentage in color-mix() to come before the color</li>
	<li>Added explicit algorithm for color-mix()</li>
	<li>Removed adjusters from color-mix() and simplified the grammar</li>
	<li>Added the "in" keyword to specify the color space used for mixing</li>
	<li>Required color-contrast() list to have at least two items</li>
	<li>Improved explanation of the relative color syntax</li>
	<!-- removed interpolation section changes, added to changes of Color 4 -->
	<li>Link to CSS 4 definition of color serialization</li>
	<li>Added separate section for color spaces</li>
	<li>Updated color-adjust example</li>
	<li>Added explanatory diagrams</li>
	<li>Deal with unresolved percentages</li>
	<li>Normalize arguments to color-mix</li>
	<li>Allow percentages for adjusters</li>
	<li>Link fixes</li>
	<li>Updated color-mix grammar, allowing adjusters, add alpha adjuster</li>
	<li>Corrections to some examples</li>
	<li>Updated Security and Privacy section</li>
	<!-- to 11 June 2020 -->
	<li>added vs keyword to color-contrast</li>
	<li>added xyz adjuster to grammar</li>
	<li>added hue adjuster keywords</li>
	<li>add XYZ color space for mixing</li>
	<li>defined color-adjuster and color space</li>
	<li>allowed mix percent to default to 50%</li>
	<li>added worked examples and diagrams</li>
	<li>corrected minor spelling, syntax and formatting issues</li>
	<li>Added section on resolving color-contrast() values</li>
</ul>
