<pre class=metadata>
Title: CSS Color Module Level 4
Status: ED
Prepare for TR: no
Work Status: Refining
ED: https://drafts.csswg.org/css-color/
TR: https://www.w3.org/TR/css-color-4/
Previous Version: https://www.w3.org/TR/2021/WD-css-color-4-20210601/
Shortname: css-color
Group: csswg
Level: 4
Implementation Report: https://test.csswg.org/harness/results/css-color-4_dev/grouped/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact, w3cid 42199
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Lea Verou, Invited Expert, http://lea.verou.me/, w3cid 52258
Former Editor: L. David Baron, Mozilla https://www.mozilla.org/, https://dbaron.org/, w3cid 15393
Abstract: This specification describes CSS <<color>> values and properties for foreground color and group opacity.
Repository: w3c/csswg-drafts
Ignored Terms: stacking context, double, octet
Complain About: missing-example-ids true
Complain About: broken-links false
Complain About: accidental-2119 true
Inline Github Issues: title
Default Highlight: css
WPT Path Prefix: css/css-color/
WPT Display: closed
</pre>

<pre class='ignored-specs'>
spec:css-color-3
</pre>

<pre class="link-defaults">
spec:css-color-4; type:descriptor; for:@color-profile; text:src
spec:css-color-4; type:dfn; text:color space
spec:css-color-4; type:dfn; text:gamut
</pre>

<pre class=biblio>
	{
		"TIFF": {
			"href": "https://www.loc.gov/preservation/digital/formats/fdd/fdd000022.shtml",
			"title": "TIFF Revision 6.0",
			"date": "3 June 1992"
		},
		"Sharma": {
			"href": "http://www2.ece.rochester.edu/~gsharma/ciede2000/",
			"title": "The CIEDE2000 Color-Difference Formula: Implementation Notes, Supplementary Test Data, and Mathematical Observations",
			"authors": "G. Sharma, W. Wu, E. N. Dalal",
			"journal": "Color Research and Application, vol. 30. No. 1, pp. 21-30",
			"date": "February 2005"
		}
	}
</pre>

<link rel="stylesheet" href="style.css" />

<style>
table.named-color-table thead th { text-align:center; background:black; color:white; }
table.named-color-table th, table.named-color-table td { padding: 0 .25em; }
table.named-color-table td { text-align:center; text-transform:uppercase; }
table.named-color-table td:nth-child(-n+2) { border:1px solid black; }
table.named-color-table td:nth-child(n+4) { background: silver; }
.color-table {
	background: #808080;
	display: table;
	display: flex;
	flex-flow: row wrap;
	justify-content: space-around;
}
.color-table table { padding:1em; margin:0; float:left; }
.color-table td, .color-table th { font-size:smaller; }
.color-table th { white-space: pre-line; }
.color-table td { background: currentcolor; }
.color-table .white { color: white; }
#hsltable {
	background: rgb(46.63% 46.63% 46.63%);
	padding: 0.5em;
}
div#hsltable {
	display: flex;
	flex-flow: row wrap;
	justify-content: space-around;
	gap: 2em;
}
#hsltable>table {
	table-layout: fixed;
}
#hsltable td {
	padding: .75em;
}
table.deltaE td {border: 4px solid white; padding: 6px; font-size: 1.4em;}
table.deltaE td.dE0 { background: rgb(68, 243, 91)}
table.deltaE td.dE1 { background: rgb(153, 243, 68)}
table.deltaE td.dE2 { background: rgb(217, 243, 68)}
table.deltaE td.dE3 { background: rgb(243, 240, 68)}
table.deltaE td.dE4 { background: rgb(243, 202, 68)}
table.deltaE td.dE5 { background: rgb(243, 103, 68); color: white}
</style>

<h2 id="introduction">
Introduction</h2>

	<em>This section is not normative.</em>

	This module describes CSS properties which
	allow authors to specify
	the foreground color and opacity of the text content of an element.
	This module also describes in detail the CSS <<color>> value type.


	It not only defines the color-related properties and values that
	already exist in <a href="https://www.w3.org/TR/CSS1">CSS1</a>, <a
	href="https://www.w3.org/TR/CSS2/">CSS2</a>,
	and <a href="https://www.w3.org/TR/css-color-3/">CSS Color 3</a>,
	but also defines new properties and values.

	In particular, it allows specifying colors
	in other [=color spaces=] than sRGB;
	previously, the more saturated colors outside the sRGB gamut
	could not be used in CSS
	even if the display device supported them.
	In addition to the family of
	<abbr title="red-green-blue">RGB</abbr> color spaces,
	[=color spaces=] with other primaries
	such as <abbr title="cyan-magenta-yellow-black">CMYK</abbr> or
	<abbr title="black-cyan-magenta-yellow-green-orange-violet">KCMYGOV</abbr>
	are supported.

	A <a href="https://test.csswg.org/harness/results/css-color-4_dev/grouped/">draft implementation report</a> is available.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

<!--
████████ ████████ ████████  ██     ██  ██████
   ██    ██       ██     ██ ███   ███ ██    ██
   ██    ██       ██     ██ ████ ████ ██
   ██    ██████   ████████  ██ ███ ██  ██████
   ██    ██       ██   ██   ██     ██       ██
   ██    ██       ██    ██  ██     ██ ██    ██
   ██    ████████ ██     ██ ██     ██  ██████
-->

<h2 id="terminology">Color terminology</h2>

	A <dfn export>color</dfn> is a definition (numeric or textual)
	of the human visual perception of a light
	or a physical object illuminated with light.
	The objective study of human color perception is termed
	<abbr title="colorimetry is the measurement of human color perception">colorimetry</abbr>.
	If two objects have different
	<abbr title="the amount of light at each wavelength">spectra</abbr>,
	but produce the same physical sensation,
	we say they have the same color.

	<div class="example" id="ex-cal-leaf">For example a green leaf, a photograph of that leaf
		displayed on a computer screen, and a print of that photograph,
		are all producing a green sensation by different means.
		If the screen and the printer are [=calibrated=],
		the green in the leaf, and the photo, and the print will look the same.
	</div>

	A <dfn export>color space</dfn> is an organization of colors
	with respect to an underlying
	<abbr title="colorimetry is the measurement of human color perception">colorimetric</abbr>
	model,
	such that there is a clear, objectively-measurable meaning
	for any color in that color space.
	This also means that the same color can be expressed in multiple color spaces,
	or transformed from one color space to another,
	while looking the same.

	<div class="example" id="ex-leaf-spectro"><p>A leaf is measured
		with a spectrophotometer
		and found to have the color
		<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> lch(51.2345% 21.2 130)
		which is
		<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> lab(51.2345% -13.6271 16.2401).</p>

		<p>This same color could be expressed in various color spaces:</p>

		<pre class="lang-css">
<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> color(sRGB 0.41587 0.503670 0.36664);
<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> color(display-p3 0.43313 0.50108 0.37950);
<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> color(a98-rgb 0.44091 0.49971 0.37408);
<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> color(prophoto-rgb 0.36589 0.41717 0.31333);
<span class="swatch" style="--color: rgb(41.587%, 50.3670%, 36.664%)"></span> color(rec2020 0.42210 0.47580 0.35605);
		</pre>

	</div>

	An <dfn export>additive color space</dfn>
	means that the coordinate system is linear in light intensity.
	The <abbr title="International Commission on Illumination, = Commission internationale de l'éclairage (in French)">CIE</abbr>
	XYZ color space is an additive color space
	(in addition, the Y component of XYZ is the
	<abbr title="the intensity per unit area, or 'how bright it is'">luminance</abbr>).

	In an additive color space, calculations can be done
	to accurately predict color mixing. Most RGB spaces
	are not additive, because the components are
	<em>gamma encoded</em>. Undoing this gamma encoding
	produces linear-light values.

	<div class="example" id="ex-additivity">
		For example, if a light fixture contains two identical colored lights,
		and only one is switched on,
		and the color is measured to be
		<span class="swatch" style="--color: rgb(47.74% 35.59% 21.53%)"></span> color(xyz 0.13 0.12 0.04),
		then the color when both are switched on will be exactly twice that,
		<span class="swatch" style="--color: rgb(65.57% 49.35% 30.58%)"></span> color(xyz 0.26 0.24 0.08).

		If we have two differently colored spotlights shining on a stage,
		and one has the measured value
		<span class="swatch" style="--color: rgb(0% 60.02% 47.86%)"></span>
		color(xyz 0.15 0.24 0.17)
		while the other is
		<span class="swatch" style="--color: rgb(50.45% 9.53% 31.04%)"></span>
		color(xyz 0.11 0.06 0.06)
		then we can accurately predict that if the colored beams are made to overlap,
		the color of the mixture will be the sum
		of the XYZ component values, or
		<span class="swatch" style="--color: rgb(75.5% 51.71% 56.61%)"></span>
		color(xyz 0.26 0.30 0.23).
	</div>

	A <dfn export>chromaticity</dfn> is a color measurement
	where the lightness component has been factored out.
	From the identical lights example above,
	the <em>u',v'</em> chromaticity with one light is
	(0.2537, 0.5268)
	and the chromaticity is the same with both lights
	(they are the same color, it is just brighter).

	Chromaticities are additive,
	so they accurately predict
	the chromaticity (but not the resulting lightness)
	of a mixture.
	Being two-dimensional, chromaticity is easily represented
	on a <em>chromaticity diagram</em>
	to predict the chromaticity of a color mixture.
	Any two colors can be mixed, and the resulting colors
	will lie on the line joining them on the diagram.
	Three colors form a plane, and the resulting colors
	will lie in the triangle they form on the diagram.


	When the measured physical characteristics
	(such as the <abbr title="measured color, irrespective of lightness">chromaticities</abbr> of the primary colors it uses,
	or the colors produced in response to a given set of inputs)
	of a [=color space=] or a color-producing device are known,
	it is said to be <dfn export>characterized</dfn>.
	This characterization information is stored in a <em>profile</em>.
	The most common type of color profile is defined by the International Color Consortium (ICC) [[!ICC]].

	If in addition adjustments have been made so that a device meets calibration targets
	such as white point, neutrality of greys, predictability and consistency of tone response,
	then it is said to be <dfn export>calibrated</dfn>.

	Real physical devices cannot yet produce every possible color that the human eye can see.
	The range of colors that a given device can produce is termed the <dfn export>gamut</dfn>
	<em>(not to be confused with gamma)</em>.
	Devices with a limited gamut cannot produce very saturated colors,
	like those found in a rainbow.

	The gamuts of different [=color space=]s may be compared
	by looking at the volume (in cubic Lab units) of colors that can be expressed.
	The following table examines the <a href="#predefined">predefined</a> color spaces available in CSS.

	<table class=gamuts>
		<tr>
			<th>color space</th>
			<th>Volume (million Lab units)</th>
		</tr>
		<tr>
			<td>sRGB</td>
			<td>0.820</td>
		</tr>
		<tr>
			<td>display-p3</td>
			<td>1.233</td>
		</tr>
		<tr>
			<td>a98-rgb</td>
			<td>1.310</td>
		</tr>
		<tr>
			<td>prophoto-rgb</td>
			<td>2.896</td>
		</tr>
		<tr>
			<td>rec2020</td>
			<td>2.042</td>
		</tr>
	</table>

<!--
 ██████   ███████  ██        ███████  ████████        ████████  ████████   ███████  ████████
██    ██ ██     ██ ██       ██     ██ ██     ██       ██     ██ ██     ██ ██     ██ ██     ██
██       ██     ██ ██       ██     ██ ██     ██       ██     ██ ██     ██ ██     ██ ██     ██
██       ██     ██ ██       ██     ██ ████████        ████████  ████████  ██     ██ ████████
██       ██     ██ ██       ██     ██ ██   ██         ██        ██   ██   ██     ██ ██
██    ██ ██     ██ ██       ██     ██ ██    ██        ██        ██    ██  ██     ██ ██
 ██████   ███████  ████████  ███████  ██     ██       ██        ██     ██  ███████  ██
-->

<h2 id="the-color-property">
Foreground Color: the 'color' property</h2>

	<pre class=propdef>
	Name: color
	Value: <<color>>
	Initial: CanvasText
	Applies to: all elements and text
	Inherited: yes
	Percentages: N/A
	Computed value: computed color, see <a href="#resolving-color-values">resolving color values</a>
	Animation type: by computed value type
	</pre>

	<wpt>
	color-001.html
	color-002.html
	color-003.html
	inheritance.html
	</wpt>

	This property describes the foreground fill color of an element's text content.
	In addition, it provides the value that ''<color>/currentcolor'' resolves to.

	There are several different ways to syntactically specify a given color.

	<div class="example" id="ex-lime">
		For example, to specify the sRGB color lime green:
		<pre class="lang-css">
		em { color: <span class="swatch" style="--color: lime"></span>&nbsp;lime; }   /* color keyword  */
		em { color: <span class="swatch" style="--color: lime"></span>&nbsp;rgb(0 255 0); } /* RGB range 0-255   */
		em { color: <span class="swatch" style="--color: lime"></span>&nbsp;rgb(0% 100% 0%); } /* RGB range 0%-100% */
		em { color: <span class="swatch" style="--color: lime"></span>&nbsp;color(sRGB 0 1 0); } /* sRGB range 0.0-1.0 */
		</pre>
	</div>

	<dl>
		<dt><<color>>
		<dd>The <<color>> type is defined in a later section.
	</dl>

 <p class="note">
 Note: In general, this property, including its alpha component, has
 no effect on "color glyphs", such as emoji in some fonts, which are
 colored by a built-in palette. Some colored fonts are able to refer
 to the foreground color, such as palette entry ''0xFFFF'' in COLR
 table of OpenType, and ''context-fill'' value in SVG-in-OpenType. In
 that case, the foreground color is set by this property, identical
 to how ''<color>/currentcolor'' value works.

<!--
 ██████   ███████  ██        ███████  ████████        ████████ ██    ██ ████████  ████████
██    ██ ██     ██ ██       ██     ██ ██     ██          ██     ██  ██  ██     ██ ██
██       ██     ██ ██       ██     ██ ██     ██          ██      ████   ██     ██ ██
██       ██     ██ ██       ██     ██ ████████           ██       ██    ████████  ██████
██       ██     ██ ██       ██     ██ ██   ██            ██       ██    ██        ██
██    ██ ██     ██ ██       ██     ██ ██    ██           ██       ██    ██        ██
 ██████   ███████  ████████  ███████  ██     ██          ██       ██    ██        ████████
-->

<h2 id='color-type'>
Representing Colors: the <<color>> type</h2>

	CSS has several syntaxes for specifying color values.
	Some directly specify an sRGB color by its channels,
	such as the [=hex color notation=] or ''rgb()'' function.
	Others are more human-friendly to write and understand,
	such as the ''hsl()'' and ''lch()'' functions,
	or the long list of [=named colors=].

<h3 id="color-syntax">The <<color>> syntax</h3>

	Colors are represented as a list of components,
	also sometimes called “channels”,
	representing axises in the color space.
	Each channel has a minimum and maximum value,
	and can take any value between those two.
	Additionally, every color is accompanied by
	an <dfn lt="alpha channel | alpha component" export>alpha component</dfn>,
	indicating how transparent it is,
	and thus how much of the backdrop one can see behind the color.

	Colors in CSS are represented by the <dfn export><<color>></dfn> type:

	<pre class='prod'>
	&lt;color> = <<hex-color>> | <<named-color>> | currentcolor | transparent |
	    <<rgb()>> | <<rgba()>> | <<hsl()>> | <<hsla()>> | <<hwb()>> |
	    <<lab()>> | <<lch()>> |
	    <<color()>> | <<device-cmyk()>> |
	    <<system-color>>
	</pre>

	The <dfn export>color-functions</dfn> are <<rgb()>>, <<rgba()>>,
		<<hsl()>>, <<hsla()>>, <<hwb()>>,
		<<lab()>>, <<lch()>>, and
		<<color()>>.

	Of those, <<hsl()>>, <<hsla()>>, <<hwb()>> and <<lch()>>
		are <dfn export>cylindrical polar color</dfn> representations,
		which specify color using a <<hue>> angle,
		a central axis representing lightness
		(black-to-white),
		and a radius representing saturation or chroma
		(how far the color is from a neutral grey).
	The other color spaces are
		<dfn export>rectangular orthogonal color</dfn> representations,
		which specify color using three
		(or more, in the case of CMYK or CMYKOGV)
		orthogonal component axes.

	<!--  <<device-cmyk()>> does not actually specify a color; it can't be converted to Lab -->

	For easy reference in other specifications,
	<dfn export>opaque black</dfn> is defined as the color <nobr>''rgb(0 0 0 / 100%)''</nobr>;
	<dfn export>transparent black</dfn> is the same color,
	but fully transparent--
	i.e. <nobr>''rgb(0 0 0 / 0%)''</nobr>.

<h3 id="hue-syntax">The <<hue>> syntax</h3>

Hue is represented as an angle of the color circle
(the rainbow, twisted around into a circle, and with purple added between violet and red).

<pre class='prod'>
	<dfn>&lt;hue></dfn> = <<number>> | <<angle>>
</pre>

Because this value is so often given in degrees,
the argument can also be given as a number,
which is interpreted as a number of degrees.

This number is not constrained
to the range [0,360]
but is unbounded.
Certain operations,
such as hue interpolation,
may normalize the hue angle during calculations.

The angles and spacing
corresponding to particular hues
depend on the color space.
For example, in HSL and HWB, which use the sRGB color space,
sRGB green is 120 degrees.
In LCH, sRGB green is 134.39 degrees,
display-p3 green is 136.01 degrees,
a98-rgb green is 145.97 degrees
and prophoto-rgb green is 141.04 degrees
(because these are all different shades of green).

For colors very close to the neutral axis,
the hue angle becomes indeterminate
(for example, in Lab,
minute changes in near-zero a and b values
give huge changes in LCH hue angle).
<span id="NaN-hue">Therefore, sometimes a hue angle of NaN
(not a number) may be returned.</span>
This impacts, for example,
<a href="#hue-interpolation">hue interpolation</a>.

<h3 id="notes">
Accessibility and Conveying Information By Color</h3>

	Although colors can add significant information to documents
	and make them more readable,
	color by itself should not be the sole means to convey important information.
	Authors should consider the W3C Web Content Accessibility Guidelines [[WCAG21]]
	when using color in their documents.

	> <a href="https://www.w3.org/TR/WCAG21/#use-of-color"><em>1.4.1 Use of Color:</em>
	> Color is not used as the only visual means of conveying information,
	> indicating an action, prompting a response, or distinguishing a visual element</a>

<!--
████████    ███     ██████    ██████   ████████ ████████
   ██      ██ ██   ██    ██  ██    ██  ██       ██     ██
   ██     ██   ██  ██        ██        ██       ██     ██
   ██    ██     ██ ██   ████ ██   ████ ██████   ██     ██
   ██    █████████ ██    ██  ██    ██  ██       ██     ██
   ██    ██     ██ ██    ██  ██    ██  ██       ██     ██
   ██    ██     ██  ██████    ██████   ████████ ████████
-->

<h3 id="tagged-images">Color Space of Tagged Images</h3>

	An <dfn export>tagged image</dfn> is an image
	that is explicitly assigned a color profile,
	as defined by the image format.
	This is usually done by including an
	International Color Consortium (ICC) profile [[!ICC]].

	For example JPEG [[JPEG]], PNG [[PNG]] and TIFF [[TIFF]]
	all specify a means to embed an ICC profile.

	Image formats may also use other, equivalent methods, often for brevity.

	For example, PNG specifies a means (the
	<a href="https://www.w3.org/TR/PNG/#11sRGB">sRGB chunk</a>)
	to explicitly tag an image as being in the sRGB color space,
	without including the sRGB ICC profile.

	Tagged RGB images,
	and tagged images using a transformation of RGB such as YCbCr,
	if the color profile or other identifying information is valid,
	must be treated as being in the specified color space.

	If the color profile or other identifying information is invalid, the image is treated as [=untagged images=]

	For example, when a browser running on a system with a Display P3 monitor
	displays an JPEG image
	tagged as being in the ITU Rec BT.2020 [[!Rec.2020]]
	color space, it must convert the colors
	from ITU Rec BT.2020 to Display P3
	so that they display correctly.
	It must not treat the ITU Rec BT.2020 values
	as if they were Display P3 values, which would produce incorrect colors.

<!--
██     ██ ██    ██ ████████    ███     ██████    ██████   ████████ ████████
██     ██ ███   ██    ██      ██ ██   ██    ██  ██    ██  ██       ██     ██
██     ██ ████  ██    ██     ██   ██  ██        ██        ██       ██     ██
██     ██ ██ ██ ██    ██    ██     ██ ██   ████ ██   ████ ██████   ██     ██
██     ██ ██  ████    ██    █████████ ██    ██  ██    ██  ██       ██     ██
██     ██ ██   ███    ██    ██     ██ ██    ██  ██    ██  ██       ██     ██
 ███████  ██    ██    ██    ██     ██  ██████    ██████   ████████ ████████
-->

<h3 id='untagged'>
Color Spaces of Untagged Colors</h3>

	Colors specified in HTML,
	and [=untagged images=] must be treated
	as being in the sRGB color space ([[!SRGB]])
	unless otherwise specified.

	An <dfn export>untagged image</dfn> is an image that is not explicitly assigned a color profile, as defined by the image format.

	Note that this rule does not apply to untagged videos, since
	<dfn export>untagged video</dfn> should be presumed to be in an ITU-defined color space.
	* At below 720p, it is Recommendation ITU-R BT.601 [[!ITU-R-BT.601]]
	* At 720p, it is SMPTE ST 296 (same colorimetry as 709) [[!SMPTE296]]
	* At 1080p, it is Recommendation ITU-R BT.709 [[!ITU-R-BT.709]]
	* At 4k (UHDTV) and above, it is ITU-R BT.2020 [[!Rec.2020]] for SDR video

<!--
████████  ████████  ██████   ███████  ██       ██     ██ ████████
██     ██ ██       ██    ██ ██     ██ ██       ██     ██ ██
██     ██ ██       ██       ██     ██ ██       ██     ██ ██
████████  ██████    ██████  ██     ██ ██       ██     ██ ██████
██   ██   ██             ██ ██     ██ ██        ██   ██  ██
██    ██  ██       ██    ██ ██     ██ ██         ██ ██   ██
██     ██ ████████  ██████   ███████  ████████    ███    ████████
-->

<h3 id='resolving-color-values'>
Resolving <<color>> Values</h3>

	Unless otherwise specified for a particular property,
	[=specified value|specified=] colors are resolved to
	<dfn export lt="computed color">[=computed value|computed=] colors</dfn>
	and then further to <dfn export lt="used color">[=used value|used=] colors</dfn> as described below.

	The [=resolved value=] of a <<color>> is its [=used value=].

<h4 id="resolving-sRGB-values">Resolving sRGB values</h4>

	This applies to:

	* [=hex colors=]
	* ''rgb()'' and ''rgba()'' values
	* ''hsl()'' and ''hsla()'' values
	* ''hwb()'' values
	* [=named colors=]

		While the function names and named colors
		are <a href="https://infra.spec.whatwg.org/#ascii-case-insensitive">ASCII case-insensitive</a>,
		the [=specified value=]
		does not preserve any mixed casing
		and is treated as being all lowercase.

	<wpt>
		color-resolving-hsl.html
		color-resolving-keywords.html
		color-resolving.html
	</wpt>

		<div class="example" id="ex-hsl-case">
			<p>For example, the first form below is treated as identical to the second:</p>
			<pre class="lang-css"><span class="swatch" style="--color: hsl(39 100% 50%)"></span> HsL(39 100% 50%)

			<span class="swatch" style="--color: hsl(39 100% 50%)"></span> hsl(39 100% 50%)</pre>
			<p>Similarly the first form below is treated as identical to the second:</p>
			<pre class="lang-css"><span class="swatch" style="--color: purple"></span> pUrPlE

			<span class="swatch" style="--color: purple"></span> purple</pre>
		</div>

		The computed and used value
		is the corresponding sRGB color,
		paired with the specified alpha channel
		and defaulting to opaque if unspecified).


		<div class="example" id="ex-hsl-computed">
			<p>For example, the computed value of</p>
			<pre class="lang-css"><span class="swatch" style="--color: rgb(255, 165, 0)"></span> hsl(38.824 100% 50%)</pre>
			<p>is</p>
			<pre class="lang-css"><span class="swatch" style="--color: rgb(255, 165, 0)"></span> rgb(255, 165, 0)</pre>
		</div>


	<h4 id="resolving-lab-lch-values">Resolving Lab and LCH values</h4>

	This applies to ''lab()'' and ''lch()'' values.

		The computed and used value
		is the corresponding CIE Lab or LCH color
		paired with the specified alpha channel
		(as a <<number>>, not a <<percentage>>;
		and defaulting to opaque if unspecified).

		<div class="example" id="ex-lch-computed">
			<p>For example, the computed value of</p>
			<pre class="lang-css"><span class="swatch" style="--color: rgb(77.61% 36.34% 2.45%)"></span> lch(52.2345% 72.2 56.2 / 1)</pre>
			<p>is</p>
			<pre class="lang-css"><span class="swatch" style="--color: rgb(77.61% 36.34% 2.45%)"></span> lch(52.2345% 72.2 56.2)</pre>
		</div>

	<h4 id="resolving-color-function-values">Resolving values of the ''color()'' function</h4>

		The computed and used value
		is the color in the specified [=color space=],
		paired with the specified alpha channel
		(as a <<number>>, not a <<percentage>>;
		and defaulting to opaque if unspecified).

		<div class="example" id="ex-p3-computed">
			<p>For example,  the computed value of</p>
			<pre class="lang-css"><span class="swatch" style="--color: goldenrod"></span> color(display-p3 0.823 0.6554 0.2537 /1)</pre>
			<p>is</p>
			<pre class="lang-css"><span class="swatch" style="--color: goldenrod"></span> color(display-p3 0.823 0.6554 0.2537)</pre>
		</div>

<h4 id="resolving-device-cmyk-values">Resolving ''device-cmyk'' values</h4>

		The computed and used value
		is the specified device-specific CMYK color,
		(with components as <<number>>, not <<percentage>>)
		paired with the specified alpha channel
		(as a <<number>>, not a <<percentage>>;
		and defaulting to opaque if unspecified).

		The [=actual value=] can vary based on the operation;
		for rendering to a CMYK-capable device,
		it may be rendered as a CMYK color;
		for blending with non-CMYK colors
		or rendering to a non-CMYK device,
		it must be converted
		as specified in [[#device-cmyk]].

		<div class="example" id="ex-device-cmyk-used">
			For example,

			<pre class="lang-css">
				<span class="swatch" style="--color: rgb(93.124%, 44.098%, 57.491%)"></span> device-cmyk(0% 70% 20% 0%)
			</pre>

			has the specified and actual value

			<pre class="lang-css">
				<span class="swatch" style="--color: rgb(93.124%, 44.098%, 57.491%)"></span> device-cmyk(0 0.7 0.2 0)
			</pre>

			and will, if the implementation understands ICC profiles
			and has an appropriate profile installed,
			have the used value

			<pre class="lang-css">
				<span class="swatch" style="--color: rgb(93.124%, 44.098%, 57.491%)"></span> lab(63.673% 51.577 5.811)
			</pre>

			Note: As with all colors, the used value is not available to script.
		</div>

	<h4 id="resolving-other-colors">Resolving other colors</h4>

	This applies to [=system colors=],
	<a href="#deprecated-system-colors">deprecated-colors</a>,
	''transparent'', and
	''currentcolor''.

		Each <<system-color>> keyword computes to itself.
		Its used value is the corresponding color in its color space.

		The computed and used value of ''transparent'' is [=transparent black=].

		The ''currentcolor'' keyword computes to itself.

		In the 'color' property,
		the used value of ''currentcolor'' is the [=inherited value=].
		In any other property,
		its used value is the used value of the 'color' property on the same element.

		Note: This means that if the ''<color>/currentcolor'' value is inherited,
		it’s inherited as a keyword,
		not as the value of the 'color' property,
		so descendants will use their own 'color' property to resolve it.

<!--
 ██████  ████████ ████████  ████    ███    ██
██    ██ ██       ██     ██  ██    ██ ██   ██
██       ██       ██     ██  ██   ██   ██  ██
 ██████  ██████   ████████   ██  ██     ██ ██
      ██ ██       ██   ██    ██  █████████ ██
██    ██ ██       ██    ██   ██  ██     ██ ██
 ██████  ████████ ██     ██ ████ ██     ██ ████████
-->

<h3 id='serializing-color-values'>
	Serializing <<color>> Values</h3>

This section updates and replaces that part of CSS Object Model, section
<a href="https://drafts.csswg.org/cssom-1/#serializing-css-values"> Serializing CSS Values</a>, which relates to serializing <<color>> values.

In this section, the strings used in the specification and the corresponding characters are as follows.

<table class="data">
	<tr>
		<th>String</th>
		<th>Character</th>
	</tr>
	<tr>
		<td>" "</td>
		<td>U+0020 SPACE</td>
	</tr>
	<tr>
		<td>","</td>
		<td>U+002C COMMA</td>
	</tr>
	<tr>
		<td>"-"</td>
		<td>U+002D HYPHEN-MINUS</td>
	</tr>
	<tr>
		<td>"."</td>
		<td>U+002E FULL STOP</td>
	</tr>
	<tr>
		<td>"/"</td>
		<td>U+002F SOLIDUS</td>
	</tr>
</table>

The string "." shall be used as a decimal separator,
regardless of locale,
and there shall be no thousands separator.


<h4 id="serializing-alpha-values">Serializing alpha values</h4>

	This applies to any <<color>> value which can take an optional alpha value.

	If the alpha is exactly 1,
	it is omitted from the serialization;
	an implicit value of 1 (fully opaque) is the default.

	If the alpha is any other value than 1,
	it is explicitly included in the serialization,
	as a <<number>>, not a <<percentage>>.
	The value is expressed in base ten,
	with the "." character as decimal separator.
	The leading zero must not be omitted.
	Trailing zeroes must be omitted.

	<div class="example" id="ex-alpha-trimzero">
		<p>For example, an alpha value of 70%
			will be serialized as the string
			"0.7"
			which has a leading zero before the decimal separator,
			"." as decimal separator
			(even if the current locale would use some other character,
			such as ","),
			and all digits after the "7" would be "0" and are omitted.
		</p>
	</div>

	The precision with which alpha values are retained,
	and thus the number of decimal places in the serialized value,
	is not defined in this specification,
	but must at least be sufficient
	to round-trip integer percentage values.
	Thus, the serialized value must contain
	at least two decimal places
	(unless trailing zeroes have been removed).
	Values must be
	<a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>, not truncated.

	<div class="example" id="ex-alpha-round">
		<p>For example, an alpha value of 12.3456789%
			could be serialized as the strings
			"0.12" or "0.123" or "0.1234" or "0.12346"
			(rounding the value of 5
			towards +∞
			because the following digit is 6)
			or any longer, rounded serialization of the same form.
		</p>
	</div>


<h4 id="serializing-sRGB-values">Serializing sRGB values</h4>

	The serialized form of the following sRGB values:

	* [=hex colors=]
	* ''rgb()'' and ''rgba()'' values
	* ''hsl()'' and ''hsla()'' values
	* ''hwb()'' values
	* [=named colors=]

	is derived from the [=computed value=] and thus,
	uses either the ''rgb()'' or ''rgba()'' form
	(depending on whether the alpha is exactly 1, or not),
	with lowercase letters for the function name.

	For compatibility, the sRGB component values
	are serialized in <<number>> form, not <<percentage>>).
	Also for compatibility,
	the component values are serialized in base 10,
	with a range of [0-255], regardless of
	the bit depth with which they are stored.

	<a href="#serializing-alpha-values">As noted earlier</a>,
	unitary alpha values are not explicitly serialized.
	Also, for compatibility, if the alpha is exactly 1,
	the ''rgb()'' form is used,
	with an implicit alpha;
	otherwise, the ''rgba()'' form is used,
	with an explicit alpha value.

	For compatibility,
	the legacy form with comma separators is used;
	exactly one ASCII space follows each comma.
	This includes the comma (not slash) used
	to separate the blue component of ''rgba()''
	from the alpha value.


	<div class="example" id="ex-rgb-ser-int-rgba">
		<p>For example, the serialized value of</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgba(29, 164, 192, 0.95)"></span> rgb(29 164 192 / 95%)</pre>
		<p>is the string "rgba(29, 164, 192, 0.95)"</p>
	</div>

	Note: contrary to CSS Color 3,
	the parameters of the ''rgb()'' function
	are of type <<number>> not <<integer>>.
	Thus, any higher precision than eight bits
	is indicated with a fractional part.

	Trailing fractional zeroes in any component values must be omitted;
	if the fractional part consists of all zeroes,
	the decimal point must also be omitted.
	This means that sRGB colors specified with integer component values
	will serialize with backwards-compatible integer values.

	The precision with which sRGB component values are retained,
	and thus the number of significant figures in the serialized value,
	is not defined in this specification,
	but must at least be sufficient
	to round-trip eight bit values.
	Values must be <a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>, not truncated.

	Note: authors of scripts which expect
	color values returned from
	<span style="font-family:monospace">getComputedStyle</span>
	to have <<integer>> component values,
	are advised to update them to cope with
	<<number>>.

<div class="example" id="ex-rgb-number">
	<p>
	For example,</p>
	<pre class="lang-css"><span class="swatch" style="--color: rgb(57.28% 42.14% 51.46%)"></span> rgb(146.064 107.457 131.223)</pre>
	<p>is now valid, and equal to</p>
	<pre class="lang-css"><span class="swatch" style="--color: rgb(57.28% 42.14% 51.46%)"></span> rgb(57.28% 42.14% 51.46%)</pre>
	<p>A conformant serialized form for both,
	is the string "rgb(146.06, 107.46, 131.2)".</p>
</div>

<div class="example" id="ex-rgb-notrail">
	<p>The serialized value of </p>
	<pre class="lang-css"><span class="swatch" style="--color: goldenrod"></span> ''goldenrod''</pre>
	<p>is the string "rgb(218, 165, 32)"
	and not the string "rgb(218.000, 165.000, 32.000)"</p>
</div>

<h4 id="serializing-lab-lch">Serializing Lab and LCH values</h4>

	The serialized form of ''lch()'' and ''lab()'' values
	is derived from the [=computed value=]
	and uses the ''lab()'' or ''lch()'' forms,
	with lowercase letters for the function name.

	The component values are serialized in base 10;
	the Lightness component is serialized as
	<<percentage>>, while the a and b component values
	are serialized as <<number>>.
	A single ASCII space character " "
	must be used as the separator
	between the component values.

	Trailing fractional zeroes in any component values must be omitted;
	if the fractional part consists of all zeroes,
	the decimal point must also be omitted.

	<div class="example" id="ex-lab-zero-a">
		<p>The serialized value of</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgb(60.7% 52.23% 0%)"></span> lab(56.200% 0.000 83.600)</pre>
		<p>is the string "lab(56.2% 0 83.6)"</p>
	</div>

	<div class="example" id="ex-lch-serial">
		<p>The serialized value of</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgb(41.66% 15.34% 90.66%)"></span> lch(37% 105.0 305.00)</pre>
		<p>is the string "lch(37% 105 305)",
			not "lch(37% 105.0 305.00)".
	</div>

	The precision with which ''lab()'' component values are retained,
	and thus the number of significant figures in the serialized value,
	is not defined in this specification,
	but due to the wide gamut must be sufficient
	to round-trip L values between 0 and 100,
	and a and b values between ±127,
	with at least sixteen bit precision;
	this will result in at least three decimal places
	unless trailing zeroes have been omitted.
	(half float or float, is recommended for internal storage).
	Values must be <a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>, not truncated.

	Note: a and b values outside ±127 are possible
	with ultrawide gamut spaces. For example, <em>all</em>
	of the ''prophoto-rgb'' primaries and secondaries
	exceed this range, but are within ±200.

	<a href="#serializing-alpha-values">As noted earlier</a>,
	unitary alpha values are not explicitly serialized.
	Non-unitary alpha values must be explicitly serialized,
	and the string " / "
	(an ASCII space, then forward slash, then another space)
	must be used to separate the b component value from the alpha value.

	<div class="example" id="ex-lch-alpha">
		<p>The serialized value of</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgba(99.56%, 6.09%, 57.02%, 0.93)"></span> lch(56.2% 83.6 357.4 /93%)</pre>
		<p>is the string "lch(56.2% 83.6 357.4 / 0.93)"</p>
	</div>

	<h4 id="serializing-color-function-values">Serializing values of the ''color()'' function</h4>

	The serialized form of ''color()'' values
	is derived from the [=computed value=]
	and uses the ''color()'' form,
	with lowercase letters for the function name
	and the color space name.

	The component values are serialized in base 10,
	as <<number>>.
	A single ASCII space character " "
	must be used as the separator
	between the component values,
	and also between the color space name and the first color component.

	Trailing fractional zeroes in any component values must be omitted;
	if the fractional part consists of all zeroes,
	the decimal point must also be omitted.

	<div class="example" id="ex-color-serial">
		<p>The serialized value of</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgba(99.56%, 6.09%, 57.02%, 0.93)"></span> color(dIsPlAy-P3  0.964  0.763  0.787)</pre>
		<p>is the string "color(display-p3 0.96 0.76 0.79)",
		if two decimal places are retained.
		Notice that 0.787 has rounded up to 0.79,
		rather than being truncated to 0.78.
		</p>
	</div>

	<div class="example" id="ex-color-swop-serial">
		<p>The serialized value of the color in</p>
		<pre class="lang-css">@color-profile --swop5c {
			src: url('https://example.org/SWOP2006_Coated5v2.icc');
		  }
		  .header {
			background-color:  <span class="swatch" style="--color: rgb(94.903% 45.248% 59.104%)"></span>  color(--swop5c  0% 70.0% 20.00% .0%);
		  }</pre>
		<p>is the string "color(--swop5c 0 0.7 0.2 0)"</p>
	</div>

	<!--
		the name in the @color-profile is also lowercased, right?
		the serialization is not sufficient because the name and the link to the profile are also needed.
	-->

	If the color space is sRGB, the color space is still explicitly required in the serialized result.

	The precision with which ''color()'' component values are retained,
	and thus the number of significant figures in the serialized value,
	is not defined in this specification,
	but for CMYK color spaces must at least be sufficient
	to round-trip values
	with eight bit precision;
	this will result in at least two decimal places
	unless trailing zeroes have been omitted.

	For the predefined color spaces,
	the <em>minimum</em> precision for round-tripping is as follows:

	<table class="data">
		<tr><th>color space</th><th>Minimum bits</th></tr>
		<tr>
			<td>''srgb''</td>
			<td>10</td>
		</tr>
		<tr>
			<td>''display-p3''</td>
			<td>10</td>
		</tr>
		<tr>
			<td>''a98-rgb''</td>
			<td>10</td>
		</tr>
		<tr>
			<td>''prophoto-rgb''</td>
			<td>12</td>
		</tr>
		<tr>
			<td>''rec2020''</td>
			<td>12</td>
		</tr>
		<tr>
			<td>''xyz''</td>
			<td>16</td>
		</tr>
	</table>

	(16bit, half-float, or float <em>per component</em>
	is recommended for internal storage).
	Values must be <a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>, not truncated.

	Note: compared to the legacy forms
	such as ''rgb()'', ''hsl()'' and so on,
	''color(srgb)'' has a higher minimum precision requirement.
	Stylesheet authors who prefer higher precision
	are thus encouraged to use the ''color(srgb)'' form.

	<a href="#serializing-alpha-values">As noted earlier</a>,
	unitary alpha values are not explicitly serialized.
	Non-unitary alpha values must be explicitly serialized,
	and the string " / "
	(an ASCII space, then forward slash, then another space)
	must be used to separate
	the final color component value
	from the alpha value.

	<div class="example" id="ex-color-prophoto-alpha-serial">
		<p>The serialized value of</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgba(0.003%, 50.196%, 50.196%, 0.85)"></span> color(prophoto-rgb 0.2804 0.40283 0.42259/85%)</pre>
		<p>is the string "color(prophoto-rgb 0.28 0.403 0.423 / 0.85)",
		if three decimal places are retained.
		</p>
	</div>

<h4 id="serializing-device-cmyk-values">Serializing ''device-cmyk'' values</h4>

	The serialized form of ''device-cmyk()'' values
	is derived from the [=computed value=]
	and uses the ''device-cmyk()'' form,
	with lowercase letters for the function name.

	The component values are serialized in base 10,
	as <<number>>.
	A single ASCII space character " "
	must be used as the separator
	between the component values.

	Trailing fractional zeroes in any component values must be omitted;
	if the fractional part consists of all zeroes,
	the decimal point must also be omitted.

	<div class="example" id="ex-device-cmyk-serial">
		<p>The serialized value of the color</p>
		<pre class="lang-css"><span class="swatch" style="--color: rgb(70.7% 26.9% 19.7%);"></span>  device-cmyk(0 81% 81% 30%)</pre>
		<p>is the string "device-cmyk(0 0.81 0.81 0.3)"</p>
	</div>

	The precision with which ''device-cmyk()'' component values are retained,
	and thus the number of significant figures in the serialized value,
	is not defined in this specification,
	but must at least be sufficient
	to round-trip values
	with eight bit precision;
	this will result in at least two decimal places
	unless trailing zeroes have been omitted.
	Values must be <a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>, not truncated.

	<a href="#serializing-alpha-values">As noted earlier</a>,
	unitary alpha values are not explicitly serialized.
	Non-unitary alpha values must be explicitly serialized,
	and the string " / "
	(an ASCII space, then forward slash, then another space)
	must be used to separate
	the black ("k") color component value
	from the alpha value.

<h4 id="serializing-other-colors">Serializing other colors</h4>

	This applies to [=system colors=],
	<a href="#deprecated-system-colors">deprecated-colors</a>,
	''transparent'', and
	''currentcolor''.

	The serialized form of these values
	is derived from the [=computed value=]
	and uses lowercase letters for the color name.

	<div class="example" id="ex-system-serial">
		<p>The serialized form of the color</p>
		<pre class="lang-css"><span class="swatch" style="--color: VisitedText"></span> VisitedText</pre>
		<p>is the string "visitedtext"</p>
	</div>

	<div class="example" id="ex-deprecated-serial">
		<p>The serialized form of the color</p>
		<pre class="lang-css"><span class="swatch" style="--color: ButtonFace"></span> ThreeDFace</pre>
		<p>is the string "threedface"</p>
	</div>

	The serialized form of ''transparent'' is the string "rgba(0, 0, 0, 0)".

	The serialized form of ''currentColor'' is the string "currentcolor".

<!--
 ██████  ████████   ██████   ████████
██    ██ ██     ██ ██    ██  ██     ██
██       ██     ██ ██        ██     ██
 ██████  ████████  ██   ████ ████████
      ██ ██   ██   ██    ██  ██     ██
██    ██ ██    ██  ██    ██  ██     ██
 ██████  ██     ██  ██████   ████████
-->

<h2 id='numeric-srgb'>
sRGB Colors</h2>

	CSS colors in the <a>sRGB</a> color space
	are represented by a triplet of values--
	red, green, and blue--
	identifying a point in the sRGB color space [[!SRGB]].
	This is an internationally-recognized, device-independent color space,
	and so is useful for specifying colors that will be displayed on a computer screen,
	but is also useful for specifying colors on other types of devices, like printers.
	<!-- (See [[COLORIMETRY]].) broken link, find new one and fix in specref -->

	CSS also allows the use of non-sRGB [=color space=]s,
	as described in [[#predefined]].

	CSS provides several methods of directly specifying an sRGB color:
	[=hex colors=],
	''rgb()''/''rgba()'' [=color-functions=],
	''hsl()''/''hsla()'' [=color-functions=],
	''hwb()'' [=color-functions|color-function=],
	[=named colors=],
	and the ''transparent'' keyword.


<h3 id='rgb-functions'>
The RGB functions: ''rgb()'' and ''rgba()''</h3>

	The ''rgb()'' function defines an sRGB color by specifying the red, green, and blue channels directly.
	Its syntax is:

	<pre class='prod'>
	<dfn>rgb()</dfn> = rgb( <<percentage>>{3} [ / <<alpha-value>> ]? ) |
	  rgb( <<number>>{3} [ / <<alpha-value>> ]? )
	<dfn>&lt;alpha-value></dfn> = <<number>> | <<percentage>>
	</pre>

	<wpt>
		rgb-001.html
		rgb-002.html
		rgb-003.html
		rgb-004.html
		rgb-005.html
		rgb-006.html
		rgb-007.html
		rgb-008.html
		rgb-rounding-001.html
		<!--
		apparently it can't find these, but their rel=help points to this spec
		background-color-rgb-001.html
		background-color-rgb-002.html
		background-color-rgb-003.html -->
	</wpt>

	The first three arguments specify the red, green, and blue channels of the color, respectively.
	''0%'' represents the minimum value for that color channel in the sRGB gamut,
	and ''100%'' represents the maximum value.
	A <<number>> is equivalent to a <<percentage>>,
	but with a different range:
	''0'' again represents the minimum value for the color channel,
	but ''255'' represents the maximum.
	These values come from the fact that many graphics engines store the color channels internally as a single byte,
	which can hold integers between 0 and 255.
	Implementations should honor the precision of the channel as authored or calculated wherever possible.
	If this is not possible, the channel should be <a href="https://drafts.csswg.org/css-values-4/#combine-integers">rounded towards +∞</a>.

	The final argument, the <<alpha-value>>, specifies the alpha of the color.
	If given as a <<number>>, the useful range of the value is ''0''
	(representing a fully transparent color)
	to ''1''
	(representing a fully opaque color).
	If given as a <<percentage>>, ''0%'' represents a fully transparent color,
	while ''100%'' represents a fully opaque color.
	If omitted, it defaults to ''100%''.

	Values outside these ranges are not invalid,
	but are clamped to the ranges defined here at computed-value time.

	For legacy reasons,
	''rgb()'' also supports an alternate syntax
	that separates all of its arguments with commas:

	<pre class='prod'>
	rgb() = rgb( <<percentage>>#{3} , <<alpha-value>>? ) |
	  rgb( <<number>>#{3} , <<alpha-value>>? )
	</pre>

	Also for legacy reasons,
	an <dfn>rgba()</dfn> function also exists,
	with an identical grammar and behavior to ''rgb()''.

	<wpt>
		rgba-001.html
		rgba-002.html
		rgba-003.html
		rgba-004.html
		rgba-005.html
		rgba-006.html
		rgba-007.html
		rgba-008.html
	</wpt>

<h3 id='hex-notation'>
The RGB hexadecimal notations: ''#RRGGBB''</h3>

	The CSS <dfn lt="hex color | hex color notation" export>hex color notation</dfn>
	allows an sRGB color to be specified by giving the channels as hexadecimal numbers,
	which is similar to how colors are often written directly in computer code.
	It's also shorter than writing the same color out in ''rgb()'' notation.

	The syntax of a <dfn>&lt;hex-color></dfn> is a <<hash-token>> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.
	In other words, a hex color is written as a hash character, "#",
	followed by some number of digits 0-9 or letters a-f
	(the case of the letters doesn't matter - ''#00ff00'' is identical to ''#00FF00'').

	The number of hex digits given determines how to decode the hex notation into an RGB color:

	<dl>
		<dt>6 digits
		<dd>
			The first pair of digits, interpreted as a hexadecimal number,
			specifies the red channel of the color,
			where ''00'' represents the minimum value
			and ''ff'' (255 in decimal) represents the maximum.
			The next pair of digits, interpreted in the same way,
			specifies the green channel,
			and the last pair specifies the blue.
			The alpha channel of the color is fully opaque.

			<div class='example' id="ex-hex6">
				In other words, <span class="swatch" style="--color: #00ff00"></span>  ''#00ff00'' represents the same color as <span class="swatch" style="--color: #00ff00"></span> ''rgb(0 255 0)'' (a lime green).
			</div>

		<dt>8 digits
		<dd>
			The first 6 digits are interpreted identically to the 6-digit notation.
			The last pair of digits, interpreted as a hexadecimal number,
			specifies the alpha channel of the color,
			where ''00'' represents a fully transparent color
			and ''ff'' represent a fully opaque color.

			<div class='example' id="ex-hex8">
				In other words, <span class="swatch" style="--color: #0000ffcc"></span> ''#0000ffcc'' represents the same color as <span class="swatch" style="--color: #0000ffcc"></span> ''rgb(0 0 100% / 80%)'' (a slightly-transparent blue).
			</div>

		<dt>3 digits
		<dd>
			This is a shorter variant of the 6-digit notation.
			The first digit, interpreted as a hexadecimal number,
			specifies the red channel of the color,
			where ''0'' represents the minimum value
			and ''f'' represents the maximum.
			The next two digits represent the green and blue channels, respectively,
			in the same way.
			The alpha channel of the color is fully opaque.

			<div class='example' id="ex-hex3">
				This syntax is often explained by saying that it's identical to a 6-digit notation obtained by "duplicating" all of the digits.
				For example, the notation <span class="swatch" style="--color: #123"></span> ''#123'' specifies the same color as the notation <span class="swatch" style="--color: #123"></span> ''#112233''.
				This method of specifying a color has lower "resolution" than the 6-digit notation;
				there are only 4096 possible colors expressible in the 3-digit hex syntax,
				as opposed to approximately 17 million in 6-digit hex syntax.
			</div>

		<dt>4 digits
		<dd>
			This is a shorter variant of the 8-digit notation,
			"expanded" in the same way as the 3-digit notation is.
			The first digit, interpreted as a hexadecimal number,
			specifies the red channel of the color,
			where ''0'' represents the minimum value
			and ''f'' represents the maximum.
			The next three digits represent the green, blue, and alpha channels, respectively.
	</dl>

	<wpt>
		hex-001.html
		hex-002.html
		hex-003.html
		hex-004.html
	</wpt>

<!--
██    ██    ███    ██     ██ ████████  ██████
███   ██   ██ ██   ███   ███ ██       ██    ██
████  ██  ██   ██  ████ ████ ██       ██
██ ██ ██ ██     ██ ██ ███ ██ ██████    ██████
██  ████ █████████ ██     ██ ██             ██
██   ███ ██     ██ ██     ██ ██       ██    ██
██    ██ ██     ██ ██     ██ ████████  ██████
-->

<h2 id='color-keywords'>
Color Keywords</h2>

	In addition to the various numeric syntaxes for <<color>>s,
	CSS defines several sets of color keywords that can be used instead—
	each with their own advantages or use cases.


<h3 id="named-colors">
Named Colors</h3>

	CSS defines a large set of <dfn id="named-color" lt="named color" export>named colors</dfn>,
	so that common colors can be written and read more easily.
	A <dfn>&lt;named-color></dfn> is written as an <<ident>>,
	accepted anywhere a <<color>> is.
	As usual for CSS-defined <<ident>>s,
	all of these keywords are <a href="https://infra.spec.whatwg.org/#ascii-case-insensitive">ASCII case-insensitive</a>.

	The names resolve to colors in sRGB.

	16 of CSS's named colors come from the VGA palette originally, and were then adopted into HTML:
	aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow.
	Most of the rest
	come from one version of the X11 color system,
	used in Unix-derived systems to specify colors for the console,
	and were then adopted into SVG.

	Note: these color names are standardized here,
	<em>not because they are good</em>,
	but because their use and implementation has been widespread for decades
	and the standard needs to reflect reality.
	Indeed, it is often hard to imagine what each name will look like (hence the list below);
	the names are not evenly distributed throughout the sRGB color volume,
	the names are not even internally consistent
	(<span class="swatch" style="--color: darkgray"></span> ''darkgray'' is lighter than
	<span class="swatch" style="--color: gray"></span> ''gray'', while
	<span class="swatch" style="--color: lightpink"></span> ''lightpink'' is darker than
	<span class="swatch" style="--color: pink"></span> ''pink''),
	and some names
	(such as <span class="swatch" style="--color: indianred"></span> ''indianred'',
	which was originally named after a red pigment from India),
	have been found to be offensive.
	Thus, their use is <em>not encouraged</em>.


	(Two special color values, ''transparent'' and ''<color>/currentcolor'',
		are specially defined in their own sections.)

	The following table defines all of the opaque named colors,
	by giving equivalent numeric specifications in the other color syntaxes.

	<table class="named-color-table" dfn-type=value dfn-for="<color>">
		<thead>
			<tr>
				<th style="background:black">Named
				<th>Numeric
				<th>Color&nbsp;name
				<th>Hex&nbsp;rgb
				<th>Decimal
		<tbody>
			<tr>
				<td style="background:aliceblue">&nbsp;<td style="background:#f0f8ff">&nbsp;<th scope=row><dfn>aliceblue</dfn><td>#f0f8ff<td>240 248 255
			<tr>
				<td style="background:antiquewhite">&nbsp;<td style="background:#faebd7">&nbsp;<th scope=row><dfn>antiquewhite</dfn><td>#faebd7<td>250 235 215
			<tr>
				<td style="background:aqua">&nbsp;<td style="background:#00ffff">&nbsp;<th scope=row><dfn>aqua</dfn><td>#00ffff<td>0 255 255
			<tr>
				<td style="background:aquamarine">&nbsp;<td style="background:#7fffd4">&nbsp;<th scope=row><dfn>aquamarine</dfn><td>#7fffd4<td>127 255 212
			<tr>
				<td style="background:azure">&nbsp;<td style="background:#f0ffff">&nbsp;<th scope=row><dfn>azure</dfn><td>#f0ffff<td>240 255 255
			<tr>
				<td style="background:beige">&nbsp;<td style="background:#f5f5dc">&nbsp;<th scope=row><dfn>beige</dfn><td>#f5f5dc<td>245 245 220
			<tr>
				<td style="background:bisque">&nbsp;<td style="background:#ffe4c4">&nbsp;<th scope=row><dfn>bisque</dfn><td>#ffe4c4<td>255 228 196
			<tr>
				<td style="background:black">&nbsp;<td style="background:#000000">&nbsp;<th scope=row><dfn>black</dfn><td>#000000<td>0 0 0
			<tr>
				<td style="background:blanchedalmond">&nbsp;<td style="background:#ffebcd">&nbsp;<th scope=row><dfn>blanchedalmond</dfn><td>#ffebcd<td>255 235 205
			<tr>
				<td style="background:blue">&nbsp;<td style="background:#0000ff">&nbsp;<th scope=row><dfn>blue</dfn><td>#0000ff<td>0 0 255
			<tr>
				<td style="background:blueviolet">&nbsp;<td style="background:#8a2be2">&nbsp;<th scope=row><dfn>blueviolet</dfn><td>#8a2be2<td>138 43 226
			<tr>
				<td style="background:brown">&nbsp;<td style="background:#a52a2a">&nbsp;<th scope=row><dfn>brown</dfn><td>#a52a2a<td>165 42 42
			<tr>
				<td style="background:burlywood">&nbsp;<td style="background:#deb887">&nbsp;<th scope=row><dfn>burlywood</dfn><td>#deb887<td>222 184 135
			<tr>
				<td style="background:cadetblue">&nbsp;<td style="background:#5f9ea0">&nbsp;<th scope=row><dfn>cadetblue</dfn><td>#5f9ea0<td>95 158 160
			<tr>
				<td style="background:chartreuse">&nbsp;<td style="background:#7fff00">&nbsp;<th scope=row><dfn>chartreuse</dfn><td>#7fff00<td>127 255 0
			<tr>
				<td style="background:chocolate">&nbsp;<td style="background:#d2691e">&nbsp;<th scope=row><dfn>chocolate</dfn><td>#d2691e<td>210 105 30
			<tr>
				<td style="background:coral">&nbsp;<td style="background:#ff7f50">&nbsp;<th scope=row><dfn>coral</dfn><td>#ff7f50<td>255 127 80
			<tr>
				<td style="background:cornflowerblue">&nbsp;<td style="background:#6495ed">&nbsp;<th scope=row><dfn>cornflowerblue</dfn><td>#6495ed<td>100 149 237
			<tr>
				<td style="background:cornsilk">&nbsp;<td style="background:#fff8dc">&nbsp;<th scope=row><dfn>cornsilk</dfn><td>#fff8dc<td>255 248 220
			<tr>
				<td style="background:crimson">&nbsp;<td style="background:#dc143c">&nbsp;<th scope=row><dfn>crimson</dfn><td>#dc143c<td>220 20 60
			<tr>
				<td style="background:cyan">&nbsp;<td style="background:#00ffff">&nbsp;<th scope=row><dfn>cyan</dfn><td>#00ffff<td>0 255 255
			<tr>
				<td style="background:darkblue">&nbsp;<td style="background:#00008b">&nbsp;<th scope=row><dfn>darkblue</dfn><td>#00008b<td>0 0 139
			<tr>
				<td style="background:darkcyan">&nbsp;<td style="background:#008b8b">&nbsp;<th scope=row><dfn>darkcyan</dfn><td>#008b8b<td>0 139 139
			<tr>
				<td style="background:darkgoldenrod">&nbsp;<td style="background:#b8860b">&nbsp;<th scope=row><dfn>darkgoldenrod</dfn><td>#b8860b<td>184 134 11
			<tr>
				<td style="background:darkgray">&nbsp;<td style="background:#a9a9a9">&nbsp;<th scope=row><dfn>darkgray</dfn><td>#a9a9a9<td>169 169 169
			<tr>
				<td style="background:darkgreen">&nbsp;<td style="background:#006400">&nbsp;<th scope=row><dfn>darkgreen</dfn><td>#006400<td>0 100 0
			<tr>
				<td style="background:darkgrey">&nbsp;<td style="background:#a9a9a9">&nbsp;<th scope=row><dfn>darkgrey</dfn><td>#a9a9a9<td>169 169 169
			<tr>
				<td style="background:darkkhaki">&nbsp;<td style="background:#bdb76b">&nbsp;<th scope=row><dfn>darkkhaki</dfn><td>#bdb76b<td>189 183 107
			<tr>
				<td style="background:darkmagenta">&nbsp;<td style="background:#8b008b">&nbsp;<th scope=row><dfn>darkmagenta</dfn><td>#8b008b<td>139 0 139
			<tr>
				<td style="background:darkolivegreen">&nbsp;<td style="background:#556b2f">&nbsp;<th scope=row><dfn>darkolivegreen</dfn><td>#556b2f<td>85 107 47
			<tr>
				<td style="background:darkorange">&nbsp;<td style="background:#ff8c00">&nbsp;<th scope=row><dfn>darkorange</dfn><td>#ff8c00<td>255 140 0
			<tr>
				<td style="background:darkorchid">&nbsp;<td style="background:#9932cc">&nbsp;<th scope=row><dfn>darkorchid</dfn><td>#9932cc<td>153 50 204
			<tr>
				<td style="background:darkred">&nbsp;<td style="background:#8b0000">&nbsp;<th scope=row><dfn>darkred</dfn><td>#8b0000<td>139 0 0
			<tr>
				<td style="background:darksalmon">&nbsp;<td style="background:#e9967a">&nbsp;<th scope=row><dfn>darksalmon</dfn><td>#e9967a<td>233 150 122
			<tr>
				<td style="background:darkseagreen">&nbsp;<td style="background:#8fbc8f">&nbsp;<th scope=row><dfn>darkseagreen</dfn><td>#8fbc8f<td>143 188 143
			<tr>
				<td style="background:darkslateblue">&nbsp;<td style="background:#483d8b">&nbsp;<th scope=row><dfn>darkslateblue</dfn><td>#483d8b<td>72 61 139
			<tr>
				<td style="background:darkslategray">&nbsp;<td style="background:#2f4f4f">&nbsp;<th scope=row><dfn>darkslategray</dfn><td>#2f4f4f<td>47 79 79
			<tr>
				<td style="background:darkslategrey">&nbsp;<td style="background:#2f4f4f">&nbsp;<th scope=row><dfn>darkslategrey</dfn><td>#2f4f4f<td>47 79 79
			<tr>
				<td style="background:darkturquoise">&nbsp;<td style="background:#00ced1">&nbsp;<th scope=row><dfn>darkturquoise</dfn><td>#00ced1<td>0 206 209
			<tr>
				<td style="background:darkviolet">&nbsp;<td style="background:#9400d3">&nbsp;<th scope=row><dfn>darkviolet</dfn><td>#9400d3<td>148 0 211
			<tr>
				<td style="background:deeppink">&nbsp;<td style="background:#ff1493">&nbsp;<th scope=row><dfn>deeppink</dfn><td>#ff1493<td>255 20 147
			<tr>
				<td style="background:deepskyblue">&nbsp;<td style="background:#00bfff">&nbsp;<th scope=row><dfn>deepskyblue</dfn><td>#00bfff<td>0 191 255
			<tr>
				<td style="background:dimgray">&nbsp;<td style="background:#696969">&nbsp;<th scope=row><dfn>dimgray</dfn><td>#696969<td>105 105 105
			<tr>
				<td style="background:dimgrey">&nbsp;<td style="background:#696969">&nbsp;<th scope=row><dfn>dimgrey</dfn><td>#696969<td>105 105 105
			<tr>
				<td style="background:dodgerblue">&nbsp;<td style="background:#1e90ff">&nbsp;<th scope=row><dfn>dodgerblue</dfn><td>#1e90ff<td>30 144 255
			<tr>
				<td style="background:firebrick">&nbsp;<td style="background:#b22222">&nbsp;<th scope=row><dfn>firebrick</dfn><td>#b22222<td>178 34 34
			<tr>
				<td style="background:floralwhite">&nbsp;<td style="background:#fffaf0">&nbsp;<th scope=row><dfn>floralwhite</dfn><td>#fffaf0<td>255 250 240
			<tr>
				<td style="background:forestgreen">&nbsp;<td style="background:#228b22">&nbsp;<th scope=row><dfn>forestgreen</dfn><td>#228b22<td>34 139 34
			<tr>
				<td style="background:fuchsia">&nbsp;<td style="background:#ff00ff">&nbsp;<th scope=row><dfn>fuchsia</dfn><td>#ff00ff<td>255 0 255
			<tr>
				<td style="background:gainsboro">&nbsp;<td style="background:#dcdcdc">&nbsp;<th scope=row><dfn>gainsboro</dfn><td>#dcdcdc<td>220 220 220
			<tr>
				<td style="background:ghostwhite">&nbsp;<td style="background:#f8f8ff">&nbsp;<th scope=row><dfn>ghostwhite</dfn><td>#f8f8ff<td>248 248 255
			<tr>
				<td style="background:gold">&nbsp;<td style="background:#ffd700">&nbsp;<th scope=row><dfn>gold</dfn><td>#ffd700<td>255 215 0
			<tr>
				<td style="background:goldenrod">&nbsp;<td style="background:#daa520">&nbsp;<th scope=row><dfn>goldenrod</dfn><td>#daa520<td>218 165 32
			<tr>
				<td style="background:gray">&nbsp;<td style="background:#808080">&nbsp;<th scope=row><dfn>gray</dfn><td>#808080<td>128 128 128
			<tr>
				<td style="background:green">&nbsp;<td style="background:#008000">&nbsp;<th scope=row><dfn>green</dfn><td>#008000<td>0 128 0
			<tr>
				<td style="background:greenyellow">&nbsp;<td style="background:#adff2f">&nbsp;<th scope=row><dfn>greenyellow</dfn><td>#adff2f<td>173 255 47
			<tr>
				<td style="background:grey">&nbsp;<td style="background:#808080">&nbsp;<th scope=row><dfn>grey</dfn><td>#808080<td>128 128 128
			<tr>
				<td style="background:honeydew">&nbsp;<td style="background:#f0fff0">&nbsp;<th scope=row><dfn>honeydew</dfn><td>#f0fff0<td>240 255 240
			<tr>
				<td style="background:hotpink">&nbsp;<td style="background:#ff69b4">&nbsp;<th scope=row><dfn>hotpink</dfn><td>#ff69b4<td>255 105 180
			<tr>
				<td style="background:indianred">&nbsp;<td style="background:#cd5c5c">&nbsp;<th scope=row><dfn>indianred</dfn><td>#cd5c5c<td>205 92 92
			<tr>
				<td style="background:indigo">&nbsp;<td style="background:#4b0082">&nbsp;<th scope=row><dfn>indigo</dfn><td>#4b0082<td>75 0 130
			<tr>
				<td style="background:ivory">&nbsp;<td style="background:#fffff0">&nbsp;<th scope=row><dfn>ivory</dfn><td>#fffff0<td>255 255 240
			<tr>
				<td style="background:khaki">&nbsp;<td style="background:#f0e68c">&nbsp;<th scope=row><dfn>khaki</dfn><td>#f0e68c<td>240 230 140
			<tr>
				<td style="background:lavender">&nbsp;<td style="background:#e6e6fa">&nbsp;<th scope=row><dfn>lavender</dfn><td>#e6e6fa<td>230 230 250
			<tr>
				<td style="background:lavenderblush">&nbsp;<td style="background:#fff0f5">&nbsp;<th scope=row><dfn>lavenderblush</dfn><td>#fff0f5<td>255 240 245
			<tr>
				<td style="background:lawngreen">&nbsp;<td style="background:#7cfc00">&nbsp;<th scope=row><dfn>lawngreen</dfn><td>#7cfc00<td>124 252 0
			<tr>
				<td style="background:lemonchiffon">&nbsp;<td style="background:#fffacd">&nbsp;<th scope=row><dfn>lemonchiffon</dfn><td>#fffacd<td>255 250 205
			<tr>
				<td style="background:lightblue">&nbsp;<td style="background:#add8e6">&nbsp;<th scope=row><dfn>lightblue</dfn><td>#add8e6<td>173 216 230
			<tr>
				<td style="background:lightcoral">&nbsp;<td style="background:#f08080">&nbsp;<th scope=row><dfn>lightcoral</dfn><td>#f08080<td>240 128 128
			<tr>
				<td style="background:lightcyan">&nbsp;<td style="background:#e0ffff">&nbsp;<th scope=row><dfn>lightcyan</dfn><td>#e0ffff<td>224 255 255
			<tr>
				<td style="background:lightgoldenrodyellow">&nbsp;<td style="background:#fafad2">&nbsp;<th scope=row><dfn>lightgoldenrodyellow</dfn><td>#fafad2<td>250 250 210
			<tr>
				<td style="background:lightgray">&nbsp;<td style="background:#d3d3d3">&nbsp;<th scope=row><dfn>lightgray</dfn><td>#d3d3d3<td>211 211 211
			<tr>
				<td style="background:lightgreen">&nbsp;<td style="background:#90ee90">&nbsp;<th scope=row><dfn>lightgreen</dfn><td>#90ee90<td>144 238 144
			<tr>
				<td style="background:lightgrey">&nbsp;<td style="background:#d3d3d3">&nbsp;<th scope=row><dfn>lightgrey</dfn><td>#d3d3d3<td>211 211 211
			<tr>
				<td style="background:lightpink">&nbsp;<td style="background:#ffb6c1">&nbsp;<th scope=row><dfn>lightpink</dfn><td>#ffb6c1<td>255 182 193
			<tr>
				<td style="background:lightsalmon">&nbsp;<td style="background:#ffa07a">&nbsp;<th scope=row><dfn>lightsalmon</dfn><td>#ffa07a<td>255 160 122
			<tr>
				<td style="background:lightseagreen">&nbsp;<td style="background:#20b2aa">&nbsp;<th scope=row><dfn>lightseagreen</dfn><td>#20b2aa<td>32 178 170
			<tr>
				<td style="background:lightskyblue">&nbsp;<td style="background:#87cefa">&nbsp;<th scope=row><dfn>lightskyblue</dfn><td>#87cefa<td>135 206 250
			<tr>
				<td style="background:lightslategray">&nbsp;<td style="background:#778899">&nbsp;<th scope=row><dfn>lightslategray</dfn><td>#778899<td>119 136 153
			<tr>
				<td style="background:lightslategrey">&nbsp;<td style="background:#778899">&nbsp;<th scope=row><dfn>lightslategrey</dfn><td>#778899<td>119 136 153
			<tr>
				<td style="background:lightsteelblue">&nbsp;<td style="background:#b0c4de">&nbsp;<th scope=row><dfn>lightsteelblue</dfn><td>#b0c4de<td>176 196 222
			<tr>
				<td style="background:lightyellow">&nbsp;<td style="background:#ffffe0">&nbsp;<th scope=row><dfn>lightyellow</dfn><td>#ffffe0<td>255 255 224
			<tr>
				<td style="background:lime">&nbsp;<td style="background:#00ff00">&nbsp;<th scope=row><dfn>lime</dfn><td>#00ff00<td>0 255 0
			<tr>
				<td style="background:limegreen">&nbsp;<td style="background:#32cd32">&nbsp;<th scope=row><dfn>limegreen</dfn><td>#32cd32<td>50 205 50
			<tr>
				<td style="background:linen">&nbsp;<td style="background:#faf0e6">&nbsp;<th scope=row><dfn>linen</dfn><td>#faf0e6<td>250 240 230
			<tr>
				<td style="background:magenta">&nbsp;<td style="background:#ff00ff">&nbsp;<th scope=row><dfn>magenta</dfn><td>#ff00ff<td>255 0 255
			<tr>
				<td style="background:maroon">&nbsp;<td style="background:#800000">&nbsp;<th scope=row><dfn>maroon</dfn><td>#800000<td>128 0 0
			<tr>
				<td style="background:mediumaquamarine">&nbsp;<td style="background:#66cdaa">&nbsp;<th scope=row><dfn>mediumaquamarine</dfn><td>#66cdaa<td>102 205 170
			<tr>
				<td style="background:mediumblue">&nbsp;<td style="background:#0000cd">&nbsp;<th scope=row><dfn>mediumblue</dfn><td>#0000cd<td>0 0 205
			<tr>
				<td style="background:mediumorchid">&nbsp;<td style="background:#ba55d3">&nbsp;<th scope=row><dfn>mediumorchid</dfn><td>#ba55d3<td>186 85 211
			<tr>
				<td style="background:mediumpurple">&nbsp;<td style="background:#9370db">&nbsp;<th scope=row><dfn>mediumpurple</dfn><td>#9370db<td>147 112 219
			<tr>
				<td style="background:mediumseagreen">&nbsp;<td style="background:#3cb371">&nbsp;<th scope=row><dfn>mediumseagreen</dfn><td>#3cb371<td>60 179 113
			<tr>
				<td style="background:mediumslateblue">&nbsp;<td style="background:#7b68ee">&nbsp;<th scope=row><dfn>mediumslateblue</dfn><td>#7b68ee<td>123 104 238
			<tr>
				<td style="background:mediumspringgreen">&nbsp;<td style="background:#00fa9a">&nbsp;<th scope=row><dfn>mediumspringgreen</dfn><td>#00fa9a<td>0 250 154
			<tr>
				<td style="background:mediumturquoise">&nbsp;<td style="background:#48d1cc">&nbsp;<th scope=row><dfn>mediumturquoise</dfn><td>#48d1cc<td>72 209 204
			<tr>
				<td style="background:mediumvioletred">&nbsp;<td style="background:#c71585">&nbsp;<th scope=row><dfn>mediumvioletred</dfn><td>#c71585<td>199 21 133
			<tr>
				<td style="background:midnightblue">&nbsp;<td style="background:#191970">&nbsp;<th scope=row><dfn>midnightblue</dfn><td>#191970<td>25 25 112
			<tr>
				<td style="background:mintcream">&nbsp;<td style="background:#f5fffa">&nbsp;<th scope=row><dfn>mintcream</dfn><td>#f5fffa<td>245 255 250
			<tr>
				<td style="background:mistyrose">&nbsp;<td style="background:#ffe4e1">&nbsp;<th scope=row><dfn>mistyrose</dfn><td>#ffe4e1<td>255 228 225
			<tr>
				<td style="background:moccasin">&nbsp;<td style="background:#ffe4b5">&nbsp;<th scope=row><dfn>moccasin</dfn><td>#ffe4b5<td>255 228 181
			<tr>
				<td style="background:navajowhite">&nbsp;<td style="background:#ffdead">&nbsp;<th scope=row><dfn>navajowhite</dfn><td>#ffdead<td>255 222 173
			<tr>
				<td style="background:navy">&nbsp;<td style="background:#000080">&nbsp;<th scope=row><dfn>navy</dfn><td>#000080<td>0 0 128
			<tr>
				<td style="background:oldlace">&nbsp;<td style="background:#fdf5e6">&nbsp;<th scope=row><dfn>oldlace</dfn><td>#fdf5e6<td>253 245 230
			<tr>
				<td style="background:olive">&nbsp;<td style="background:#808000">&nbsp;<th scope=row><dfn>olive</dfn><td>#808000<td>128 128 0
			<tr>
				<td style="background:olivedrab">&nbsp;<td style="background:#6b8e23">&nbsp;<th scope=row><dfn>olivedrab</dfn><td>#6b8e23<td>107 142 35
			<tr>
				<td style="background:orange">&nbsp;<td style="background:#ffa500">&nbsp;<th scope=row><dfn>orange</dfn><td>#ffa500<td>255 165 0
			<tr>
				<td style="background:orangered">&nbsp;<td style="background:#ff4500">&nbsp;<th scope=row><dfn>orangered</dfn><td>#ff4500<td>255 69 0
			<tr>
				<td style="background:orchid">&nbsp;<td style="background:#da70d6">&nbsp;<th scope=row><dfn>orchid</dfn><td>#da70d6<td>218 112 214
			<tr>
				<td style="background:palegoldenrod">&nbsp;<td style="background:#eee8aa">&nbsp;<th scope=row><dfn>palegoldenrod</dfn><td>#eee8aa<td>238 232 170
			<tr>
				<td style="background:palegreen">&nbsp;<td style="background:#98fb98">&nbsp;<th scope=row><dfn>palegreen</dfn><td>#98fb98<td>152 251 152
			<tr>
				<td style="background:paleturquoise">&nbsp;<td style="background:#afeeee">&nbsp;<th scope=row><dfn>paleturquoise</dfn><td>#afeeee<td>175 238 238
			<tr>
				<td style="background:palevioletred">&nbsp;<td style="background:#db7093">&nbsp;<th scope=row><dfn>palevioletred</dfn><td>#db7093<td>219 112 147
			<tr>
				<td style="background:papayawhip">&nbsp;<td style="background:#ffefd5">&nbsp;<th scope=row><dfn>papayawhip</dfn><td>#ffefd5<td>255 239 213
			<tr>
				<td style="background:peachpuff">&nbsp;<td style="background:#ffdab9">&nbsp;<th scope=row><dfn>peachpuff</dfn><td>#ffdab9<td>255 218 185
			<tr>
				<td style="background:peru">&nbsp;<td style="background:#cd853f">&nbsp;<th scope=row><dfn>peru</dfn><td>#cd853f<td>205 133 63
			<tr>
				<td style="background:pink">&nbsp;<td style="background:#ffc0cb">&nbsp;<th scope=row><dfn>pink</dfn><td>#ffc0cb<td>255 192 203
			<tr>
				<td style="background:plum">&nbsp;<td style="background:#dda0dd">&nbsp;<th scope=row><dfn>plum</dfn><td>#dda0dd<td>221 160 221
			<tr>
				<td style="background:powderblue">&nbsp;<td style="background:#b0e0e6">&nbsp;<th scope=row><dfn>powderblue</dfn><td>#b0e0e6<td>176 224 230
			<tr>
				<td style="background:purple">&nbsp;<td style="background:#800080">&nbsp;<th scope=row><dfn>purple</dfn><td>#800080<td>128 0 128
			<tr>
				<td style="background:rebeccapurple">&nbsp;<td style="background:#663399">&nbsp;<th scope=row><dfn>rebeccapurple</dfn><td>#663399<td>102 51 153
			<tr>
				<td style="background:red">&nbsp;<td style="background:#ff0000">&nbsp;<th scope=row><dfn>red</dfn><td>#ff0000<td>255 0 0
			<tr>
				<td style="background:rosybrown">&nbsp;<td style="background:#bc8f8f">&nbsp;<th scope=row><dfn>rosybrown</dfn><td>#bc8f8f<td>188 143 143
			<tr>
				<td style="background:royalblue">&nbsp;<td style="background:#4169e1">&nbsp;<th scope=row><dfn>royalblue</dfn><td>#4169e1<td>65 105 225
			<tr>
				<td style="background:saddlebrown">&nbsp;<td style="background:#8b4513">&nbsp;<th scope=row><dfn>saddlebrown</dfn><td>#8b4513<td>139 69 19
			<tr>
				<td style="background:salmon">&nbsp;<td style="background:#fa8072">&nbsp;<th scope=row><dfn>salmon</dfn><td>#fa8072<td>250 128 114
			<tr>
				<td style="background:sandybrown">&nbsp;<td style="background:#f4a460">&nbsp;<th scope=row><dfn>sandybrown</dfn><td>#f4a460<td>244 164 96
			<tr>
				<td style="background:seagreen">&nbsp;<td style="background:#2e8b57">&nbsp;<th scope=row><dfn>seagreen</dfn><td>#2e8b57<td>46 139 87
			<tr>
				<td style="background:seashell">&nbsp;<td style="background:#fff5ee">&nbsp;<th scope=row><dfn>seashell</dfn><td>#fff5ee<td>255 245 238
			<tr>
				<td style="background:sienna">&nbsp;<td style="background:#a0522d">&nbsp;<th scope=row><dfn>sienna</dfn><td>#a0522d<td>160 82 45
			<tr>
				<td style="background:silver">&nbsp;<td style="background:#c0c0c0">&nbsp;<th scope=row><dfn>silver</dfn><td>#c0c0c0<td>192 192 192
			<tr>
				<td style="background:skyblue">&nbsp;<td style="background:#87ceeb">&nbsp;<th scope=row><dfn>skyblue</dfn><td>#87ceeb<td>135 206 235
			<tr>
				<td style="background:slateblue">&nbsp;<td style="background:#6a5acd">&nbsp;<th scope=row><dfn>slateblue</dfn><td>#6a5acd<td>106 90 205
			<tr>
				<td style="background:slategray">&nbsp;<td style="background:#708090">&nbsp;<th scope=row><dfn>slategray</dfn><td>#708090<td>112 128 144
			<tr>
				<td style="background:slategrey">&nbsp;<td style="background:#708090">&nbsp;<th scope=row><dfn>slategrey</dfn><td>#708090<td>112 128 144
			<tr>
				<td style="background:snow">&nbsp;<td style="background:#fffafa">&nbsp;<th scope=row><dfn>snow</dfn><td>#fffafa<td>255 250 250
			<tr>
				<td style="background:springgreen">&nbsp;<td style="background:#00ff7f">&nbsp;<th scope=row><dfn>springgreen</dfn><td>#00ff7f<td>0 255 127
			<tr>
				<td style="background:steelblue">&nbsp;<td style="background:#4682b4">&nbsp;<th scope=row><dfn>steelblue</dfn><td>#4682b4<td>70 130 180
			<tr>
				<td style="background:tan">&nbsp;<td style="background:#d2b48c">&nbsp;<th scope=row><dfn>tan</dfn><td>#d2b48c<td>210 180 140
			<tr>
				<td style="background:teal">&nbsp;<td style="background:#008080">&nbsp;<th scope=row><dfn>teal</dfn><td>#008080<td>0 128 128
			<tr>
				<td style="background:thistle">&nbsp;<td style="background:#d8bfd8">&nbsp;<th scope=row><dfn>thistle</dfn><td>#d8bfd8<td>216 191 216
			<tr>
				<td style="background:tomato">&nbsp;<td style="background:#ff6347">&nbsp;<th scope=row><dfn>tomato</dfn><td>#ff6347<td>255 99 71
			<tr>
				<td style="background:turquoise">&nbsp;<td style="background:#40e0d0">&nbsp;<th scope=row><dfn>turquoise</dfn><td>#40e0d0<td>64 224 208
			<tr>
				<td style="background:violet">&nbsp;<td style="background:#ee82ee">&nbsp;<th scope=row><dfn>violet</dfn><td>#ee82ee<td>238 130 238
			<tr>
				<td style="background:wheat">&nbsp;<td style="background:#f5deb3">&nbsp;<th scope=row><dfn>wheat</dfn><td>#f5deb3<td>245 222 179
			<tr>
				<td style="background:white">&nbsp;<td style="background:#ffffff">&nbsp;<th scope=row><dfn>white</dfn><td>#ffffff<td>255 255 255
			<tr>
				<td style="background:whitesmoke">&nbsp;<td style="background:#f5f5f5">&nbsp;<th scope=row><dfn>whitesmoke</dfn><td>#f5f5f5<td>245 245 245
			<tr>
				<td style="background:yellow">&nbsp;<td style="background:#ffff00">&nbsp;<th scope=row><dfn>yellow</dfn><td>#ffff00<td>255 255 0
			<tr>
				<td style="background:yellowgreen">&nbsp;<td style="background:#9acd32">&nbsp;<th scope=row><dfn>yellowgreen</dfn><td>#9acd32<td>154 205 50
	</table>

	Note: this list of colors and their definitions is a superset of the list of <a href="https://www.w3.org/TR/SVG11/types.html#ColorKeywords">named colors defined by SVG 1.1</a>.
For historical reasons, this is also referred to as the X11 color set.

Note: The history of the X11 color system is interesting,
	and was excellently summarized by
	<a href="https://www.youtube.com/watch?v=HmStJQzclHc">Alex Sexton in his talk “Peachpuffs and Lemonchiffons”</a>.

<wpt>
named-001.html
</wpt>

<h3 id="css-system-colors" dfn lt="system colors">
System Colors</h3>

	In general, the <<system-color>> keywords
	reflect <em>default</em> color choices made by the user, the browser, or the OS.
	They are typically used in the browser default stylesheet, for this reason.

	To maintain legibility,
	the <<system-color>> keywords also respond to light mode or dark mode changes.


	<div class="example" id="ex-LM-DM-links">
		For example, traditional <span class="swatch" style="--color: blue"></span>  blue link text is legible on a <span class="swatch" style="--color: #fff"></span> white background
	(WCAG contrast 8.59:1, AAA pass)
	but would not be legible on a <span class="swatch" style="--color: #000"></span>  black background
	(WCAG contrast 2.44:1, AA fail).
	Instead, a lighter blue such as <span class="swatch" style="--color: #81D9FE"></span>  #81D9FE would be used in dark mode
	(WCAG contrast 13.28:1, AAA pass).
		<div style="margin:1em; margin-left: 2em; text-decoration: underline; background: inherit">
		<p style="padding: 4px; background-color: white; color: blue"> Legible link text</p>
		<p style="padding: 4px; background-color: black; color: blue"> Illegible link text</p>
		<p style="padding: 4px; background-color: black; color: #81D9FE"> Legible link text</p>
		</div>
	</div>

	However, in [=forced colors mode=],
	most colors on the page are forced into a restricted, user-chosen palette.
	The <dfn>&lt;system-color></dfn> keywords
	expose these user-chosen colors
	so that the rest of the page can integrate with this restricted palette.

	When the 'forced-colors' [=media feature=] is ''forced-colors/active'',
	authors <em>should</em> use the <<system-color>> keywords as color values
	in properties other than those listed in [[css-color-adjust-1#forced-colors-properties]],
	to ensure legibility and consistency across the page
	and avoid an uncoordinated mishmash of user-forced and page-chosen colors.

	When the values of <<system-color>> keywords come from the browser,
	(as opposed to being OS defaults or user choices) the browser should
	ensure that <a href="#system-color-pairs">matching
	foreground/background pairs</a> have a minimum
	of WCAG AA contrast.
	However, user preferences (for higher or lower contrast),
	whether set as a browser preference, a user stylesheet,
	or by altering the OS defaults,
	must take precedence over this requirement.

	Authors <em>may</em> also use these keywords at any time,
	but <em>should</em> be careful to use the colors
	in <a href="#system-color-pairs">matching background-foreground pairs</a>
	to ensure appropriate contrast,
	as any particular contrast relationship across non-matching pairs
	(e.g. ''Canvas'' and ''ButtonText'')
	is not guaranteed.

	The <<system-color>> keywords are defined as follows:

	<dl id="system-color-values" data-dfn-type="value" dfn-for="<system-color>">
		<dt><dfn>Canvas</dfn>
		<dd><span class="swatch" style="--color: canvas"></span>&nbsp;Background of application content or documents.
		<dt><dfn>CanvasText</dfn>
		<dd><span class="swatch" style="--color: canvastext"></span>&nbsp;Text in application content or documents.
		<dt><dfn>LinkText</dfn>
		<dd><span class="swatch" style="--color: linktext"></span>&nbsp;Text in non-active, non-visited links. For light backgrounds, traditionally blue.
		<dt><dfn>VisitedText</dfn>
		<dd><span class="swatch" style="--color: visitedtext"></span>&nbsp;Text in visited links. For light backgrounds, traditionally purple.
		<dt><dfn>ActiveText</dfn>
		<dd><span class="swatch" style="--color: activetext"></span>&nbsp;Text in active links. For light backgrounds, traditionally red.

		<dt><dfn>ButtonFace</dfn>
		<dd><span class="swatch" style="--color: buttonface"></span>&nbsp;The face background color for push buttons.
		<dt><dfn>ButtonText</dfn>
		<dd><span class="swatch" style="--color: buttontext"></span>&nbsp;Text on push buttons.
		<dt><dfn>ButtonBorder</dfn>
		<dd><span class="swatch" style="--color: buttonborder"></span>&nbsp;The base border color for push buttons.

		<dt><dfn>Field</dfn>
		<dd><span class="swatch" style="--color: field"></span>&nbsp;Background of input fields.
		<dt><dfn>FieldText</dfn>
		<dd><span class="swatch" style="--color: fieldtext"></span>&nbsp;Text in input fields.

		<dt><dfn>Highlight</dfn>
		<dd><span class="swatch" style="--color: highlight"></span>&nbsp;Background of selected text, for example from ::selection.
		<dt><dfn>HighlightText</dfn>
		<dd><span class="swatch" style="--color: highlighttext"></span>&nbsp;Text of selected text.

		<dt><dfn>SelectedItem</dfn>
		<dd><span class="swatch" style="--color: highlight"></span>&nbsp;Background of selected items, for example a selected checkbox.
		<dt><dfn>SelectedItemText</dfn>
		<dd><span class="swatch" style="--color: highlighttext"></span>&nbsp;Text of selected items.

		<dt><dfn>Mark</dfn>
		<dd><span class="swatch" style="--color: mark"></span>&nbsp;Background of text that has been specially marked
			(such as by the HTML <{mark}> element).
		<dt><dfn>MarkText</dfn>
		<dd><span class="swatch" style="--color: marktext"></span>&nbsp;Text that has been specially marked
			(such as by the HTML <{mark}> element).

		<dt><dfn>GrayText</dfn>
		<dd><span class="swatch" style="--color: graytext"></span>&nbsp;Disabled text.
			(Often, but not necessarily, gray.)
	</dl>

	<wpt>
		parsing/system-color-valid.html
		system-color-compute.html
	</wpt>

	Note: As with all other [=CSS/keywords=],
	these names are <a href="https://infra.spec.whatwg.org/#ascii-case-insensitive">ASCII case-insensitive</a>.
	They are shown here with mixed capitalization for legibility.

	For systems that do not have a particular system UI concept,
	the specified value should be mapped to
	the most closely related system color value that exists.
	The following <dfn export>system color pairings</dfn> are expected to form legible background-foreground colors:

	<ul id=system-color-pairs>
		* ''Canvas'' background with ''CanvasText'', ''LinkText'', ''VisitedText'', ''ActiveText'' foreground.
		* ''Canvas'' background with a ''ButtonBorder'' border and adjacent color ''Canvas''
		* ''ButtonFace'' background with ''ButtonText'' foreground.
		* ''Field'' background with ''FieldText'' foreground.
		* ''Mark'' background with ''MarkText'' foreground
		* ''ButtonFace'' or ''Field'' background with a ''ButtonBorder'' border and adjacent color ''Canvas'''
		* ''Highlight'' background with ''HighlightText'' foreground.
	</ul>

	Additionally, ''GrayText'' is expected to be readable,
	though possibly at a lower contrast rating,
	over any of the backgrounds.

	<div class="example" id="ex-SystemCombo">
		For example, the system color combinations in the browser you are currently using:

		<p>Canvas with CanvasText <span style="background-color:Canvas; color:CanvasText">CanvasText</span></p>
		<p>Canvas with LinkText <span style="background-color:Canvas; color:LinkText">LinkText</span></p>
		<p>Canvas with VisitedText <span style="background-color:Canvas; color:VisitedText">VisitedText</span></p>
		<p>Canvas with ActiveText <span style="background-color:Canvas; color:ActiveText">ActiveText</span></p>
		<p>Canvas with GrayText <span style="background-color:Canvas; color:GrayText">GrayText</span></p>
		<p>Canvas with ButtonBorder and adjacent Canvas <span style="background-color:Canvas; border: ButtonBorder; color:CanvasText; padding: 3px">CanvasText</span><span style="background-color:Canvas; color:CanvasText">Adjacent</span></p>
		<p>ButtonFace with ButtonText <span style="background-color:ButtonFace; color:ButtonText">ButtonText</span></p>
		<p>ButtonFace with ButtonText and ButtonBorder <span style="background-color:ButtonFace; color:ButtonText; border:ButtonBorder; padding: 3px">ButtonText</span></p>
		<p>ButtonFace with GrayText <span style="background-color:ButtonFace; color:GrayText">GrayText</span></p>
		<p>Field with FieldText <span style="background-color:Field; color:FieldText">FieldText</span></p>
		<p>Field with GrayText <span style="background-color:Field; color:GrayText">GrayText</span></p>
		<p>Mark with MarkText <span style="background-color:Mark; color:MarkText">MarkText</span></p>
		<p>Mark with GrayText <span style="background-color:Mark; color:GrayText">GrayText</span></p>
		<p>Highlight with HighlightText <span style="background-color:Highlight; color:HighlightText">HighlightText</span></p>
		<p>Highlight with GrayText <span style="background-color:Highlight; color:GrayText">GrayText</span></p>
	</div>

	Earlier versions of CSS defined additional <<system-color>>s,
	which have since been deprecated.
	These are documented in [[#deprecated-system-colors]].

	Note: The <<system-color>>s incur some privacy and security risk, as detailed in [[#priv-sec]].

<h3 id='transparent-color'>
The ''transparent'' keyword</h3>

	The keyword <dfn value for="<color>">transparent</dfn> specifies a <a>transparent black</a>.
	It is a type of <<named-color>>.


<h3 id='currentcolor-color'>
The ''<color>/currentcolor'' keyword</h3>

	The keyword <dfn value for="<color>">currentcolor</dfn> represents value of the 'color' property on the same element.
	Unlike <<named-color>>s, it is <em>not</em> restricted to sRGB;
	the value can be any <<color>>.
	Its <a>used values</a> is determined by <a href="#resolving-other-colors">resolving color values</a>.

	<wpt>
		currentcolor-001.html
		currentcolor-002.html
	</wpt>

	<div class='example' id="ex-currentcolor">
		Here's a simple example showing how to use the ''<color>/currentcolor'' keyword:

		<pre class="lang-css">
		.foo {
			color: <span class="swatch" style="--color: red"></span>&nbsp;red;
			background-color: <span class="swatch" style="--color: red"></span>&nbsp;currentcolor;
		}
		</pre>

		This is equivalent to writing:

		<pre class="lang-css">
		.foo {
			color: <span class="swatch" style="--color: red"></span>&nbsp;red;
			background-color: <span class="swatch" style="--color: red"></span>&nbsp;red;
		}
		</pre>
	</div>

	<div class='example' id="ex-textemph-currentcolor">
		For example, the 'text-emphasis-color' property [[CSS3-TEXT-DECOR]],
		whose initial value is ''<color>/currentcolor'',
		by default matches the text color
		even as the 'color' property changes across elements.

		<pre class="language-markup">
			&lt;p>&lt;em>Some &lt;strong>really&lt;/strong> emphasized text.&lt;/em>
			&lt;style>
			p { color: black; }
			em { text-emphasis: dot; }
			strong { color: red; }
			&lt;/style>
		</pre>

		<p><img src="images/text-emphasis.png" alt="rendered emphasized text with the word 'really' in red with red emphasis dots"/></p>

		In the above example, the emphasis marks are black over the text "Some" and "emphasized text",
		but red over the text "really".
	</div>

	Note: Multi-word keywords in CSS usually separate their component words with hyphens.
	''<color>/currentcolor'' doesn't, because (deep breath)
	it was originally introduced in SVG
	as a property value, "current-color" with the usual CSS spelling.
	It (along with all other properties and their values)
	then became presentation attributes and attribute values,
	as well as properties,
	to make generation with XSLT easier.
	Then all of the presentation attributes were changed
	from hyphenated to camelCase, because the DOM
	had an issue with hyphen meaning "minus".
	But then, they didn't follow CSS conventions
	anymore so all the properties and property values
	that were <em>already</em> part of CSS were changed back to hyphenated!
	''<color>/currentcolor'' was not a part of CSS at that time,
	so remained camelCased.
	Only later did CSS pick it up,
	at which point the capitalization stopped mattering,
	as CSS keywords are <a href="https://infra.spec.whatwg.org/#ascii-case-insensitive">ASCII case-insensitive</a>.

<!--
██     ██  ██████  ██
██     ██ ██    ██ ██
██     ██ ██       ██
█████████  ██████  ██
██     ██       ██ ██
██     ██ ██    ██ ██
██     ██  ██████  ████████
-->

<h2 id='the-hsl-notation'>
HSL Colors: ''hsl()'' and ''hsla()'' functions</h2>

	The RGB system for specifying colors,
	while convenient for machines and graphic libraries,
	is often regarded as very difficult for humans to gain an intuitive grasp on.
	It's not easy to tell, for example,
	how to alter an RGB color to produce a lighter variant of the same hue.

	There are several other color schemes possible.
	One such is the HSL color scheme,
	which is much more intuitive to use,
	but still maps easily back to RGB colors.

	HSL colors are specified as a triplet of hue, saturation, and lightness.
	The syntax of the ''hsl()'' function is:

	<pre class='prod'>
	<dfn>hsl()</dfn> = hsl( <<hue>> <<percentage>> <<percentage>> [ / <<alpha-value>> ]? )
	</pre>

	<wpt>
		hsl-001.html
		hsl-002.html
		hsl-003.html
		hsl-004.html
		hsl-005.html
		hsl-006.html
		hsl-007.html
		hsl-008.html
		<!--
		the rel=help for these points to this spec, but bikeshed can't fnd them
		background-color-hsl-001.html
		background-color-hsl-002.html
		background-color-hsl-003.html
		background-color-hsl-004.html -->
	</wpt>

	The first argument specifies the hue angle.

	In HSL (and HWB) the angle ''0deg'' represents sRGB primary red
	(as does ''360deg'', ''720deg'', etc.),
	and the rest of the hues are spread around the circle,
	so ''120deg'' represents sRGB primary green,
	''240deg'' represents sRGB primary blue, etc.

	The next two arguments are the saturation and lightness, respectively.
	For saturation, ''100%'' is a fully-saturated, bright color,
	and ''0%'' is a fully-unsaturated gray.
	For lightness, ''50%'' represents the "normal" color,
	while ''100%'' is white and ''0%'' is black.
	If the saturation or lightness are less than ''0%''
	or greater than ''100%'',
	they are clamped to those values
	at computed value time,
	before being converted to an sRGB color.

	The final argument specifies the alpha channel of the color.
	It's interpreted identically to the fourth argument of the ''rgb()'' function.
	If omitted, it defaults to ''100%''.

	HSL colors resolve to sRGB.

	<div class='example' id="ex-hsl-primary-red">
		For example, an ordinary red,
		the same color you would see from the keyword <span class="swatch" style="--color: red"></span>&nbsp;''red''
		or the hex notation <span class="swatch" style="--color: red"></span>&nbsp;''#f00'',
		is represented in HSL as <span class="swatch" style="--color: red"></span>&nbsp;''hsl(0deg 100% 50%)''.
	</div>

	An advantage of HSL over RGB is that it is more intuitive:
	people can guess at the colors they want,
	and then tweak.

	<div class='example' id="ex-hsl-tweak">
		For example, the following colors can all be generated off of the basic "green" hue,
		just by varying the other two arguments:

		<pre class="lang-css">
		hsl(120deg 100% 50%) <span style="color:black; background:hsl(120,100%,50%);">lime green</span>
		hsl(120deg 100% 25%) <span style="color:white; background:hsl(120,100%,25%);">dark green</span>
		hsl(120deg 100% 75%) <span style="color:black; background:hsl(120,100%,75%);">light green</span>
		hsl(120deg 75% 85%)  <span style="color:black; background:hsl(120,75%,85%);">pastel green</span>
		</pre>
	</div>

	An advantage of HSL over LCH is that,
	regardless of manipulation,
	the result always lies inside the sRGB gamut.
	A disadvantage of HSL over LCH
	is that hue manipulation changes the visual lightness,
	and that hues are not evenly spaced apart.

	It is thus easier in HSL to create sets of matching colors
	(by keeping the hue the same and varying the saturation and lightness),
	compared to manipulating the sRGB component values;
	however, because the lightness is simply the mean of the gamma-corrected
	red, green and blue components
	it does not correspond to the visual perception of lightness
	across hues.

	<div class="example" id="ex-hsl-sucks">
		For example, <span class="swatch" style="--color: blue"></span>&nbsp;''blue''
		is represented in HSL as
		<span class="swatch" style="--color: blue"></span>&nbsp;''hsl(240deg 100% 50%)''
		while <span class="swatch" style="--color: yellow"></span>&nbsp;''yellow''
		is <span class="swatch" style="--color: yellow"></span>&nbsp;''hsl(60deg 100% 50%)''.
		Both have an HSL Lightness of 50%,
		but clearly the yellow looks much lighter than the blue.

		In LCH, sRGB blue is
		<span class="swatch" style="--color: blue"></span>&nbsp;''lch(29.6% 131.2 301.3)''
		while
		sRGB yellow is
		<span class="swatch" style="--color: yellow"></span>&nbsp;''lch(97.6% 94.7 99.6)''.
		The LCH Lightnesses of 29.6% and 97.6% clearly reflect
		the visual lightnesses of the two colors.
	</div>

	The hue angle in HSL is not perceptually uniform;
	colors appear bunched up in some areas
	and widely spaced in others.

	<div class="example" id="ex-hsl-sucks-more">
		For example, the pair of hues
		<!--
			hsl(220 100% 50%) 42.114139000774955, 97.39536874737148, 290.5815091930946
			hsl(250 100% 50%) 30.84988530751331, 129.71314978865763, 302.1290808073227
		-->
		<!--
			hsl(50 100% 50%)  86.84897521929184, 86.24043356068755, 87.26505542654621
			hsl(80 100% 50%) 91.96771031614921, 98.8076382873608, 119.14730687158351
		-->
		<span class="swatch" style="--color: hsl(220 100% 50%)"></span>&nbsp;''hsl(220deg 100% 50%)''
		and
		<span class="swatch" style="--color: hsl(250 100% 50%)"></span>&nbsp;''hsl(250deg 100% 50%)''
		have an HSL hue difference of 250-220 = <strong>30</strong>deg and look fairly similar,
		while another pair of colors
		<span class="swatch" style="--color: hsl(50 100% 50%)"></span>&nbsp;''hsl(50deg 100% 50%)''
		and
		<span class="swatch" style="--color: hsl(80 100% 50%)"></span>&nbsp;''hsl(80deg 100% 50%)'',
		which also have a hue difference of 80-50 = <strong>30</strong>deg, look very different.

		In LCH, the same pair of colors
		<span class="swatch" style="--color: hsl(220 100% 50%)"></span>&nbsp;''lch(42.1% 97.4 290.6)''
		and
		<span class="swatch" style="--color: hsl(250 100% 50%)"></span>&nbsp;''lch(30.8% 129.7 302.1)''
		have a hue difference of 302.1-290.6 = <strong>11.5</strong>deg
		while the second pair
		<span class="swatch" style="--color: hsl(50 100% 50%)"></span>&nbsp;''lch(86.8% 86.2 87.3)''
		and
		<span class="swatch" style="--color: hsl(80 100% 50%)"></span>&nbsp;''lch(92.0% 98.8 119.1)''
		have a hue difference of 119.1-87.3 = <strong>31.8</strong>deg,
		correctly reflecting the visual separation of hues.

	</div>

	For legacy reasons,
	''hsl()'' also supports an alternate syntax
	that separates all of its arguments with commas:

	<pre class='prod'>
	hsl() = hsl( <<hue>>, <<percentage>>, <<percentage>>, <<alpha-value>>? )
	</pre>

	Also for legacy reasons,
	an <dfn>hsla()</dfn> function also exists,
	with an identical grammar and behavior to ''hsl()''.

	<wpt>
		hsla-001.html
		hsla-002.html
		hsla-003.html
		hsla-004.html
		hsla-005.html
		hsla-006.html
		hsla-007.html
		hsla-008.html
	</wpt>


<h3 id='hsl-to-rgb'>
Converting HSL colors to sRGB colors</h3>

	Converting an HSL color to sRGB is straightforward mathematically.
	Here's a simple implementation of the conversion algorithm in JavaScript.
	For simplicity, this algorithm assumes that the hue has been normalized to
	a number in the half-open range [0, 6),
	and the saturation and lightness have been normalized to the range [0, 1].
	It returns an array of three numbers
	representing the red, green, and blue channels of the colors,
	normalized to the range [0, 1].

	<pre class='lang-javascript'>
	function hslToRgb(hue, sat, light) {
		if( light &lt;= .5 ) {
			var t2 = light * (sat + 1);
		} else {
			var t2 = light + sat - (light * sat);
		}
		var t1 = light * 2 - t2;
		var r = hueToRgb(t1, t2, hue + 2);
		var g = hueToRgb(t1, t2, hue);
		var b = hueToRgb(t1, t2, hue - 2);
		return [r,g,b];
	}

	function hueToRgb(t1, t2, hue) {
		if(hue &lt; 0) hue += 6;
		if(hue >= 6) hue -= 6;

		if(hue &lt; 1) return (t2 - t1) * hue + t1;
		else if(hue &lt; 3) return t2;
		else if(hue &lt; 4) return (t2 - t1) * (4 - hue) + t1;
		else return t1;
	}
	</pre>

<h3 id='hsl-examples'>
Examples of HSL colors</h3>

	The tables below illustrate a wide range of possible HSL colors.
	Each table represents one hue,
	selected at 30° intervals,
	to illustrate the common "core" hues:
	red,
	yellow,
	green,
	cyan,
	blue,
	magenta,
	and the six intermediary colors between these.

	In each table, the X axis represents the saturation
	while the Y axis represents the lightness.

	<!--
	  see workings/hsl-tables-for-color-3-errata/ to regenerate the table
	  the contents of hslstyle.css are inline in this document
	-->

	<div id="hsltable">
		<table><thead>
				<tr>
					<th colspan="10">0° Reds</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(255, 204, 204);"></td><td style="background-color: rgb(250, 209, 209);"></td><td style="background-color: rgb(245, 214, 214);"></td><td style="background-color: rgb(240, 219, 219);"></td><td style="background-color: rgb(235, 224, 224);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(255, 153, 153);"></td><td style="background-color: rgb(245, 163, 163);"></td><td style="background-color: rgb(235, 173, 173);"></td><td style="background-color: rgb(224, 184, 184);"></td><td style="background-color: rgb(214, 194, 194);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(255, 102, 102);"></td><td style="background-color: rgb(240, 117, 117);"></td><td style="background-color: rgb(224, 133, 133);"></td><td style="background-color: rgb(209, 148, 148);"></td><td style="background-color: rgb(194, 163, 163);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(255, 51, 51);"></td><td style="background-color: rgb(235, 71, 71);"></td><td style="background-color: rgb(214, 92, 92);"></td><td style="background-color: rgb(194, 112, 112);"></td><td style="background-color: rgb(173, 133, 133);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(255, 0, 0);"></td><td style="background-color: rgb(230, 26, 26);"></td><td style="background-color: rgb(204, 51, 51);"></td><td style="background-color: rgb(179, 77, 77);"></td><td style="background-color: rgb(153, 102, 102);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(204, 0, 0);"></td><td style="background-color: rgb(184, 20, 20);"></td><td style="background-color: rgb(163, 41, 41);"></td><td style="background-color: rgb(143, 61, 61);"></td><td style="background-color: rgb(122, 82, 82);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(153, 0, 0);"></td><td style="background-color: rgb(138, 15, 15);"></td><td style="background-color: rgb(122, 31, 31);"></td><td style="background-color: rgb(107, 46, 46);"></td><td style="background-color: rgb(92, 61, 61);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(102, 0, 0);"></td><td style="background-color: rgb(92, 10, 10);"></td><td style="background-color: rgb(82, 20, 20);"></td><td style="background-color: rgb(71, 31, 31);"></td><td style="background-color: rgb(61, 41, 41);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(51, 0, 0);"></td><td style="background-color: rgb(46, 5, 5);"></td><td style="background-color: rgb(41, 10, 10);"></td><td style="background-color: rgb(36, 15, 15);"></td><td style="background-color: rgb(31, 20, 20);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">30° Reds-Yellows (=Oranges)</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(255, 230, 204);"></td><td style="background-color: rgb(250, 230, 209);"></td><td style="background-color: rgb(245, 230, 214);"></td><td style="background-color: rgb(240, 230, 219);"></td><td style="background-color: rgb(235, 230, 224);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(255, 204, 153);"></td><td style="background-color: rgb(245, 204, 163);"></td><td style="background-color: rgb(235, 204, 173);"></td><td style="background-color: rgb(224, 204, 184);"></td><td style="background-color: rgb(214, 204, 194);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(255, 179, 102);"></td><td style="background-color: rgb(240, 179, 117);"></td><td style="background-color: rgb(224, 179, 133);"></td><td style="background-color: rgb(209, 179, 148);"></td><td style="background-color: rgb(194, 179, 163);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(255, 153, 51);"></td><td style="background-color: rgb(235, 153, 71);"></td><td style="background-color: rgb(214, 153, 92);"></td><td style="background-color: rgb(194, 153, 112);"></td><td style="background-color: rgb(173, 153, 133);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(255, 128, 0);"></td><td style="background-color: rgb(230, 128, 26);"></td><td style="background-color: rgb(204, 128, 51);"></td><td style="background-color: rgb(179, 128, 77);"></td><td style="background-color: rgb(153, 128, 102);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(204, 102, 0);"></td><td style="background-color: rgb(184, 102, 20);"></td><td style="background-color: rgb(163, 102, 41);"></td><td style="background-color: rgb(143, 102, 61);"></td><td style="background-color: rgb(122, 102, 82);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(153, 77, 0);"></td><td style="background-color: rgb(138, 77, 15);"></td><td style="background-color: rgb(122, 77, 31);"></td><td style="background-color: rgb(107, 77, 46);"></td><td style="background-color: rgb(92, 77, 61);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(102, 51, 0);"></td><td style="background-color: rgb(92, 51, 10);"></td><td style="background-color: rgb(82, 51, 20);"></td><td style="background-color: rgb(71, 51, 31);"></td><td style="background-color: rgb(61, 51, 41);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(51, 26, 0);"></td><td style="background-color: rgb(46, 26, 5);"></td><td style="background-color: rgb(41, 26, 10);"></td><td style="background-color: rgb(36, 26, 15);"></td><td style="background-color: rgb(31, 26, 20);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">60° Yellows</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(255, 255, 204);"></td><td style="background-color: rgb(250, 250, 209);"></td><td style="background-color: rgb(245, 245, 214);"></td><td style="background-color: rgb(240, 240, 219);"></td><td style="background-color: rgb(235, 235, 224);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(255, 255, 153);"></td><td style="background-color: rgb(245, 245, 163);"></td><td style="background-color: rgb(235, 235, 173);"></td><td style="background-color: rgb(224, 224, 184);"></td><td style="background-color: rgb(214, 214, 194);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(255, 255, 102);"></td><td style="background-color: rgb(240, 240, 117);"></td><td style="background-color: rgb(224, 224, 133);"></td><td style="background-color: rgb(209, 209, 148);"></td><td style="background-color: rgb(194, 194, 163);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(255, 255, 51);"></td><td style="background-color: rgb(235, 235, 71);"></td><td style="background-color: rgb(214, 214, 92);"></td><td style="background-color: rgb(194, 194, 112);"></td><td style="background-color: rgb(173, 173, 133);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(255, 255, 0);"></td><td style="background-color: rgb(230, 230, 26);"></td><td style="background-color: rgb(204, 204, 51);"></td><td style="background-color: rgb(179, 179, 77);"></td><td style="background-color: rgb(153, 153, 102);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(204, 204, 0);"></td><td style="background-color: rgb(184, 184, 20);"></td><td style="background-color: rgb(163, 163, 41);"></td><td style="background-color: rgb(143, 143, 61);"></td><td style="background-color: rgb(122, 122, 82);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(153, 153, 0);"></td><td style="background-color: rgb(138, 138, 15);"></td><td style="background-color: rgb(122, 122, 31);"></td><td style="background-color: rgb(107, 107, 46);"></td><td style="background-color: rgb(92, 92, 61);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(102, 102, 0);"></td><td style="background-color: rgb(92, 92, 10);"></td><td style="background-color: rgb(82, 82, 20);"></td><td style="background-color: rgb(71, 71, 31);"></td><td style="background-color: rgb(61, 61, 41);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(51, 51, 0);"></td><td style="background-color: rgb(46, 46, 5);"></td><td style="background-color: rgb(41, 41, 10);"></td><td style="background-color: rgb(36, 36, 15);"></td><td style="background-color: rgb(31, 31, 20);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">90° Yellow-Greens</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(230, 255, 204);"></td><td style="background-color: rgb(230, 250, 209);"></td><td style="background-color: rgb(230, 245, 214);"></td><td style="background-color: rgb(230, 240, 219);"></td><td style="background-color: rgb(230, 235, 224);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(204, 255, 153);"></td><td style="background-color: rgb(204, 245, 163);"></td><td style="background-color: rgb(204, 235, 173);"></td><td style="background-color: rgb(204, 224, 184);"></td><td style="background-color: rgb(204, 214, 194);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(179, 255, 102);"></td><td style="background-color: rgb(179, 240, 117);"></td><td style="background-color: rgb(179, 224, 133);"></td><td style="background-color: rgb(179, 209, 148);"></td><td style="background-color: rgb(179, 194, 163);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(153, 255, 51);"></td><td style="background-color: rgb(153, 235, 71);"></td><td style="background-color: rgb(153, 214, 92);"></td><td style="background-color: rgb(153, 194, 112);"></td><td style="background-color: rgb(153, 173, 133);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(128, 255, 0);"></td><td style="background-color: rgb(128, 230, 26);"></td><td style="background-color: rgb(128, 204, 51);"></td><td style="background-color: rgb(128, 179, 77);"></td><td style="background-color: rgb(128, 153, 102);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(102, 204, 0);"></td><td style="background-color: rgb(102, 184, 20);"></td><td style="background-color: rgb(102, 163, 41);"></td><td style="background-color: rgb(102, 143, 61);"></td><td style="background-color: rgb(102, 122, 82);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(77, 153, 0);"></td><td style="background-color: rgb(77, 138, 15);"></td><td style="background-color: rgb(77, 122, 31);"></td><td style="background-color: rgb(77, 107, 46);"></td><td style="background-color: rgb(77, 92, 61);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(51, 102, 0);"></td><td style="background-color: rgb(51, 92, 10);"></td><td style="background-color: rgb(51, 82, 20);"></td><td style="background-color: rgb(51, 71, 31);"></td><td style="background-color: rgb(51, 61, 41);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(26, 51, 0);"></td><td style="background-color: rgb(26, 46, 5);"></td><td style="background-color: rgb(26, 41, 10);"></td><td style="background-color: rgb(26, 36, 15);"></td><td style="background-color: rgb(26, 31, 20);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">120° Greens</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(204, 255, 204);"></td><td style="background-color: rgb(209, 250, 209);"></td><td style="background-color: rgb(214, 245, 214);"></td><td style="background-color: rgb(219, 240, 219);"></td><td style="background-color: rgb(224, 235, 224);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(153, 255, 153);"></td><td style="background-color: rgb(163, 245, 163);"></td><td style="background-color: rgb(173, 235, 173);"></td><td style="background-color: rgb(184, 224, 184);"></td><td style="background-color: rgb(194, 214, 194);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(102, 255, 102);"></td><td style="background-color: rgb(117, 240, 117);"></td><td style="background-color: rgb(133, 224, 133);"></td><td style="background-color: rgb(148, 209, 148);"></td><td style="background-color: rgb(163, 194, 163);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(51, 255, 51);"></td><td style="background-color: rgb(71, 235, 71);"></td><td style="background-color: rgb(92, 214, 92);"></td><td style="background-color: rgb(112, 194, 112);"></td><td style="background-color: rgb(133, 173, 133);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(0, 255, 0);"></td><td style="background-color: rgb(26, 230, 26);"></td><td style="background-color: rgb(51, 204, 51);"></td><td style="background-color: rgb(77, 179, 77);"></td><td style="background-color: rgb(102, 153, 102);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(0, 204, 0);"></td><td style="background-color: rgb(20, 184, 20);"></td><td style="background-color: rgb(41, 163, 41);"></td><td style="background-color: rgb(61, 143, 61);"></td><td style="background-color: rgb(82, 122, 82);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(0, 153, 0);"></td><td style="background-color: rgb(15, 138, 15);"></td><td style="background-color: rgb(31, 122, 31);"></td><td style="background-color: rgb(46, 107, 46);"></td><td style="background-color: rgb(61, 92, 61);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(0, 102, 0);"></td><td style="background-color: rgb(10, 92, 10);"></td><td style="background-color: rgb(20, 82, 20);"></td><td style="background-color: rgb(31, 71, 31);"></td><td style="background-color: rgb(41, 61, 41);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(0, 51, 0);"></td><td style="background-color: rgb(5, 46, 5);"></td><td style="background-color: rgb(10, 41, 10);"></td><td style="background-color: rgb(15, 36, 15);"></td><td style="background-color: rgb(20, 31, 20);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">150° Green-Cyans</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(204, 255, 230);"></td><td style="background-color: rgb(209, 250, 230);"></td><td style="background-color: rgb(214, 245, 230);"></td><td style="background-color: rgb(219, 240, 230);"></td><td style="background-color: rgb(224, 235, 230);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(153, 255, 204);"></td><td style="background-color: rgb(163, 245, 204);"></td><td style="background-color: rgb(173, 235, 204);"></td><td style="background-color: rgb(184, 224, 204);"></td><td style="background-color: rgb(194, 214, 204);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(102, 255, 179);"></td><td style="background-color: rgb(117, 240, 179);"></td><td style="background-color: rgb(133, 224, 179);"></td><td style="background-color: rgb(148, 209, 179);"></td><td style="background-color: rgb(163, 194, 179);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(51, 255, 153);"></td><td style="background-color: rgb(71, 235, 153);"></td><td style="background-color: rgb(92, 214, 153);"></td><td style="background-color: rgb(112, 194, 153);"></td><td style="background-color: rgb(133, 173, 153);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(0, 255, 128);"></td><td style="background-color: rgb(26, 230, 128);"></td><td style="background-color: rgb(51, 204, 128);"></td><td style="background-color: rgb(77, 179, 128);"></td><td style="background-color: rgb(102, 153, 128);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(0, 204, 102);"></td><td style="background-color: rgb(20, 184, 102);"></td><td style="background-color: rgb(41, 163, 102);"></td><td style="background-color: rgb(61, 143, 102);"></td><td style="background-color: rgb(82, 122, 102);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(0, 153, 77);"></td><td style="background-color: rgb(15, 138, 77);"></td><td style="background-color: rgb(31, 122, 77);"></td><td style="background-color: rgb(46, 107, 77);"></td><td style="background-color: rgb(61, 92, 77);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(0, 102, 51);"></td><td style="background-color: rgb(10, 92, 51);"></td><td style="background-color: rgb(20, 82, 51);"></td><td style="background-color: rgb(31, 71, 51);"></td><td style="background-color: rgb(41, 61, 51);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(0, 51, 26);"></td><td style="background-color: rgb(5, 46, 26);"></td><td style="background-color: rgb(10, 41, 26);"></td><td style="background-color: rgb(15, 36, 26);"></td><td style="background-color: rgb(20, 31, 26);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">180° Cyans</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(204, 255, 255);"></td><td style="background-color: rgb(209, 250, 250);"></td><td style="background-color: rgb(214, 245, 245);"></td><td style="background-color: rgb(219, 240, 240);"></td><td style="background-color: rgb(224, 235, 235);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(153, 255, 255);"></td><td style="background-color: rgb(163, 245, 245);"></td><td style="background-color: rgb(173, 235, 235);"></td><td style="background-color: rgb(184, 224, 224);"></td><td style="background-color: rgb(194, 214, 214);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(102, 255, 255);"></td><td style="background-color: rgb(117, 240, 240);"></td><td style="background-color: rgb(133, 224, 224);"></td><td style="background-color: rgb(148, 209, 209);"></td><td style="background-color: rgb(163, 194, 194);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(51, 255, 255);"></td><td style="background-color: rgb(71, 235, 235);"></td><td style="background-color: rgb(92, 214, 214);"></td><td style="background-color: rgb(112, 194, 194);"></td><td style="background-color: rgb(133, 173, 173);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(0, 255, 255);"></td><td style="background-color: rgb(26, 230, 230);"></td><td style="background-color: rgb(51, 204, 204);"></td><td style="background-color: rgb(77, 179, 179);"></td><td style="background-color: rgb(102, 153, 153);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(0, 204, 204);"></td><td style="background-color: rgb(20, 184, 184);"></td><td style="background-color: rgb(41, 163, 163);"></td><td style="background-color: rgb(61, 143, 143);"></td><td style="background-color: rgb(82, 122, 122);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(0, 153, 153);"></td><td style="background-color: rgb(15, 138, 138);"></td><td style="background-color: rgb(31, 122, 122);"></td><td style="background-color: rgb(46, 107, 107);"></td><td style="background-color: rgb(61, 92, 92);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(0, 102, 102);"></td><td style="background-color: rgb(10, 92, 92);"></td><td style="background-color: rgb(20, 82, 82);"></td><td style="background-color: rgb(31, 71, 71);"></td><td style="background-color: rgb(41, 61, 61);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(0, 51, 51);"></td><td style="background-color: rgb(5, 46, 46);"></td><td style="background-color: rgb(10, 41, 41);"></td><td style="background-color: rgb(15, 36, 36);"></td><td style="background-color: rgb(20, 31, 31);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">210° Cyan-Blues</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(204, 230, 255);"></td><td style="background-color: rgb(209, 230, 250);"></td><td style="background-color: rgb(214, 230, 245);"></td><td style="background-color: rgb(219, 230, 240);"></td><td style="background-color: rgb(224, 230, 235);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(153, 204, 255);"></td><td style="background-color: rgb(163, 204, 245);"></td><td style="background-color: rgb(173, 204, 235);"></td><td style="background-color: rgb(184, 204, 224);"></td><td style="background-color: rgb(194, 204, 214);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(102, 179, 255);"></td><td style="background-color: rgb(117, 179, 240);"></td><td style="background-color: rgb(133, 179, 224);"></td><td style="background-color: rgb(148, 179, 209);"></td><td style="background-color: rgb(163, 179, 194);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(51, 153, 255);"></td><td style="background-color: rgb(71, 153, 235);"></td><td style="background-color: rgb(92, 153, 214);"></td><td style="background-color: rgb(112, 153, 194);"></td><td style="background-color: rgb(133, 153, 173);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(0, 128, 255);"></td><td style="background-color: rgb(26, 128, 230);"></td><td style="background-color: rgb(51, 128, 204);"></td><td style="background-color: rgb(77, 128, 179);"></td><td style="background-color: rgb(102, 128, 153);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(0, 102, 204);"></td><td style="background-color: rgb(20, 102, 184);"></td><td style="background-color: rgb(41, 102, 163);"></td><td style="background-color: rgb(61, 102, 143);"></td><td style="background-color: rgb(82, 102, 122);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(0, 77, 153);"></td><td style="background-color: rgb(15, 77, 138);"></td><td style="background-color: rgb(31, 77, 122);"></td><td style="background-color: rgb(46, 77, 107);"></td><td style="background-color: rgb(61, 77, 92);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(0, 51, 102);"></td><td style="background-color: rgb(10, 51, 92);"></td><td style="background-color: rgb(20, 51, 82);"></td><td style="background-color: rgb(31, 51, 71);"></td><td style="background-color: rgb(41, 51, 61);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(0, 26, 51);"></td><td style="background-color: rgb(5, 26, 46);"></td><td style="background-color: rgb(10, 26, 41);"></td><td style="background-color: rgb(15, 26, 36);"></td><td style="background-color: rgb(20, 26, 31);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">240° blues</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(204, 204, 255);"></td><td style="background-color: rgb(209, 209, 250);"></td><td style="background-color: rgb(214, 214, 245);"></td><td style="background-color: rgb(219, 219, 240);"></td><td style="background-color: rgb(224, 224, 235);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(153, 153, 255);"></td><td style="background-color: rgb(163, 163, 245);"></td><td style="background-color: rgb(173, 173, 235);"></td><td style="background-color: rgb(184, 184, 224);"></td><td style="background-color: rgb(194, 194, 214);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(102, 102, 255);"></td><td style="background-color: rgb(117, 117, 240);"></td><td style="background-color: rgb(133, 133, 224);"></td><td style="background-color: rgb(148, 148, 209);"></td><td style="background-color: rgb(163, 163, 194);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(51, 51, 255);"></td><td style="background-color: rgb(71, 71, 235);"></td><td style="background-color: rgb(92, 92, 214);"></td><td style="background-color: rgb(112, 112, 194);"></td><td style="background-color: rgb(133, 133, 173);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(0, 0, 255);"></td><td style="background-color: rgb(26, 26, 230);"></td><td style="background-color: rgb(51, 51, 204);"></td><td style="background-color: rgb(77, 77, 179);"></td><td style="background-color: rgb(102, 102, 153);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(0, 0, 204);"></td><td style="background-color: rgb(20, 20, 184);"></td><td style="background-color: rgb(41, 41, 163);"></td><td style="background-color: rgb(61, 61, 143);"></td><td style="background-color: rgb(82, 82, 122);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(0, 0, 153);"></td><td style="background-color: rgb(15, 15, 138);"></td><td style="background-color: rgb(31, 31, 122);"></td><td style="background-color: rgb(46, 46, 107);"></td><td style="background-color: rgb(61, 61, 92);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(0, 0, 102);"></td><td style="background-color: rgb(10, 10, 92);"></td><td style="background-color: rgb(20, 20, 82);"></td><td style="background-color: rgb(31, 31, 71);"></td><td style="background-color: rgb(41, 41, 61);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(0, 0, 51);"></td><td style="background-color: rgb(5, 5, 46);"></td><td style="background-color: rgb(10, 10, 41);"></td><td style="background-color: rgb(15, 15, 36);"></td><td style="background-color: rgb(20, 20, 31);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">270° Blue-Magentas</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(230, 204, 255);"></td><td style="background-color: rgb(230, 209, 250);"></td><td style="background-color: rgb(230, 214, 245);"></td><td style="background-color: rgb(230, 219, 240);"></td><td style="background-color: rgb(230, 224, 235);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(204, 153, 255);"></td><td style="background-color: rgb(204, 163, 245);"></td><td style="background-color: rgb(204, 173, 235);"></td><td style="background-color: rgb(204, 184, 224);"></td><td style="background-color: rgb(204, 194, 214);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(179, 102, 255);"></td><td style="background-color: rgb(179, 117, 240);"></td><td style="background-color: rgb(179, 133, 224);"></td><td style="background-color: rgb(179, 148, 209);"></td><td style="background-color: rgb(179, 163, 194);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(153, 51, 255);"></td><td style="background-color: rgb(153, 71, 235);"></td><td style="background-color: rgb(153, 92, 214);"></td><td style="background-color: rgb(153, 112, 194);"></td><td style="background-color: rgb(153, 133, 173);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(128, 0, 255);"></td><td style="background-color: rgb(128, 26, 230);"></td><td style="background-color: rgb(128, 51, 204);"></td><td style="background-color: rgb(128, 77, 179);"></td><td style="background-color: rgb(128, 102, 153);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(102, 0, 204);"></td><td style="background-color: rgb(102, 20, 184);"></td><td style="background-color: rgb(102, 41, 163);"></td><td style="background-color: rgb(102, 61, 143);"></td><td style="background-color: rgb(102, 82, 122);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(77, 0, 153);"></td><td style="background-color: rgb(77, 15, 138);"></td><td style="background-color: rgb(77, 31, 122);"></td><td style="background-color: rgb(77, 46, 107);"></td><td style="background-color: rgb(77, 61, 92);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(51, 0, 102);"></td><td style="background-color: rgb(51, 10, 92);"></td><td style="background-color: rgb(51, 20, 82);"></td><td style="background-color: rgb(51, 31, 71);"></td><td style="background-color: rgb(51, 41, 61);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(26, 0, 51);"></td><td style="background-color: rgb(26, 5, 46);"></td><td style="background-color: rgb(26, 10, 41);"></td><td style="background-color: rgb(26, 15, 36);"></td><td style="background-color: rgb(26, 20, 31);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">300° Magentas</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(255, 204, 255);"></td><td style="background-color: rgb(250, 209, 250);"></td><td style="background-color: rgb(245, 214, 245);"></td><td style="background-color: rgb(240, 219, 240);"></td><td style="background-color: rgb(235, 224, 235);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(255, 153, 255);"></td><td style="background-color: rgb(245, 163, 245);"></td><td style="background-color: rgb(235, 173, 235);"></td><td style="background-color: rgb(224, 184, 224);"></td><td style="background-color: rgb(214, 194, 214);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(255, 102, 255);"></td><td style="background-color: rgb(240, 117, 240);"></td><td style="background-color: rgb(224, 133, 224);"></td><td style="background-color: rgb(209, 148, 209);"></td><td style="background-color: rgb(194, 163, 194);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(255, 51, 255);"></td><td style="background-color: rgb(235, 71, 235);"></td><td style="background-color: rgb(214, 92, 214);"></td><td style="background-color: rgb(194, 112, 194);"></td><td style="background-color: rgb(173, 133, 173);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(255, 0, 255);"></td><td style="background-color: rgb(230, 26, 230);"></td><td style="background-color: rgb(204, 51, 204);"></td><td style="background-color: rgb(179, 77, 179);"></td><td style="background-color: rgb(153, 102, 153);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(204, 0, 204);"></td><td style="background-color: rgb(184, 20, 184);"></td><td style="background-color: rgb(163, 41, 163);"></td><td style="background-color: rgb(143, 61, 143);"></td><td style="background-color: rgb(122, 82, 122);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(153, 0, 153);"></td><td style="background-color: rgb(138, 15, 138);"></td><td style="background-color: rgb(122, 31, 122);"></td><td style="background-color: rgb(107, 46, 107);"></td><td style="background-color: rgb(92, 61, 92);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(102, 0, 102);"></td><td style="background-color: rgb(92, 10, 92);"></td><td style="background-color: rgb(82, 20, 82);"></td><td style="background-color: rgb(71, 31, 71);"></td><td style="background-color: rgb(61, 41, 61);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(51, 0, 51);"></td><td style="background-color: rgb(46, 5, 46);"></td><td style="background-color: rgb(41, 10, 41);"></td><td style="background-color: rgb(36, 15, 36);"></td><td style="background-color: rgb(31, 20, 31);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table><table><thead>
				<tr>
					<th colspan="10">330° Magenta-Reds</th>
				</tr>
				<tr>
					<th></th>
				<th>100%</th><th>80%</th><th>60%</th><th>40%</th><th>20%</th><th>0%</th></tr>
			</thead><tr><th>100%</th><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td><td style="background-color: rgb(255, 255, 255);"></td></tr><tr><th>90%</th><td style="background-color: rgb(255, 204, 230);"></td><td style="background-color: rgb(250, 209, 230);"></td><td style="background-color: rgb(245, 214, 230);"></td><td style="background-color: rgb(240, 219, 230);"></td><td style="background-color: rgb(235, 224, 230);"></td><td style="background-color: rgb(230, 230, 230);"></td></tr><tr><th>80%</th><td style="background-color: rgb(255, 153, 204);"></td><td style="background-color: rgb(245, 163, 204);"></td><td style="background-color: rgb(235, 173, 204);"></td><td style="background-color: rgb(224, 184, 204);"></td><td style="background-color: rgb(214, 194, 204);"></td><td style="background-color: rgb(204, 204, 204);"></td></tr><tr><th>70%</th><td style="background-color: rgb(255, 102, 179);"></td><td style="background-color: rgb(240, 117, 179);"></td><td style="background-color: rgb(224, 133, 179);"></td><td style="background-color: rgb(209, 148, 179);"></td><td style="background-color: rgb(194, 163, 179);"></td><td style="background-color: rgb(179, 179, 179);"></td></tr><tr><th>60%</th><td style="background-color: rgb(255, 51, 153);"></td><td style="background-color: rgb(235, 71, 153);"></td><td style="background-color: rgb(214, 92, 153);"></td><td style="background-color: rgb(194, 112, 153);"></td><td style="background-color: rgb(173, 133, 153);"></td><td style="background-color: rgb(153, 153, 153);"></td></tr><tr><th>50%</th><td style="background-color: rgb(255, 0, 128);"></td><td style="background-color: rgb(230, 26, 128);"></td><td style="background-color: rgb(204, 51, 128);"></td><td style="background-color: rgb(179, 77, 128);"></td><td style="background-color: rgb(153, 102, 128);"></td><td style="background-color: rgb(128, 128, 128);"></td></tr><tr><th>40%</th><td style="background-color: rgb(204, 0, 102);"></td><td style="background-color: rgb(184, 20, 102);"></td><td style="background-color: rgb(163, 41, 102);"></td><td style="background-color: rgb(143, 61, 102);"></td><td style="background-color: rgb(122, 82, 102);"></td><td style="background-color: rgb(102, 102, 102);"></td></tr><tr><th>30%</th><td style="background-color: rgb(153, 0, 77);"></td><td style="background-color: rgb(138, 15, 77);"></td><td style="background-color: rgb(122, 31, 77);"></td><td style="background-color: rgb(107, 46, 77);"></td><td style="background-color: rgb(92, 61, 77);"></td><td style="background-color: rgb(77, 77, 77);"></td></tr><tr><th>20%</th><td style="background-color: rgb(102, 0, 51);"></td><td style="background-color: rgb(92, 10, 51);"></td><td style="background-color: rgb(82, 20, 51);"></td><td style="background-color: rgb(71, 31, 51);"></td><td style="background-color: rgb(61, 41, 51);"></td><td style="background-color: rgb(51, 51, 51);"></td></tr><tr><th>10%</th><td style="background-color: rgb(51, 0, 26);"></td><td style="background-color: rgb(46, 5, 26);"></td><td style="background-color: rgb(41, 10, 26);"></td><td style="background-color: rgb(36, 15, 26);"></td><td style="background-color: rgb(31, 20, 26);"></td><td style="background-color: rgb(26, 26, 26);"></td></tr><tr><th>0%</th><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td><td style="background-color: rgb(0, 0, 0);"></td></tr></table>
		</div>


<!--
██     ██ ██      ██ ████████
██     ██ ██  ██  ██ ██     ██
██     ██ ██  ██  ██ ██     ██
█████████ ██  ██  ██ ████████
██     ██ ██  ██  ██ ██     ██
██     ██ ██  ██  ██ ██     ██
██     ██  ███  ███  ████████
-->

<h2 id='the-hwb-notation'>
HWB Colors: ''hwb()'' function</h2>

	HWB (short for Hue-Whiteness-Blackness) is another method of specifying colors,
	similar to HSL, but often even easier for humans to work with.
	It describes colors with a starting hue,
	then a degree of whiteness and blackness to mix into that base hue.

	Many color-pickers are based on the HWB color system,
	due to its intuitiveness.

	HWB colors resolve to sRGB.

	<figure>
		<img src="images/color-picker.png">
		<figcaption>
			This is a screenshot of Chrome's color picker,
			shown when a user activates an <code class='lang-markup'>&lt;input type="color"></code>.
			The outer wheel is used to select the hue,
			then the relative amounts of white and black are selected by clicking on the inner triangle.
		</figcaption>
	</figure>

	The syntax of the ''hwb()'' function is:

	<pre class='prod'>
		<dfn>hwb()</dfn> = hwb( <<hue>> <<percentage>> <<percentage>> [ / <<alpha-value>> ]? )
	</pre>

	The first argument specifies the hue,
	and is interpreted identically to ''hsl()''.

	The second argument specifies the amount of white to mix in,
	as a percentage from ''0%'' (no whiteness) to ''100%'' (full whiteness).
	Similarly, the third argument specifies the amount of black to mix in,
	also from ''0%'' (no blackness) to ''100%'' (full blackness).
	Values outside of these ranges
	are not invalid,
	but are clamped to the ranges defined here at computed-value time.
	If the sum of these two arguments is greater than 100%,
	then at computed-value time they are further normalized to add up to 100%,
	with the same relative ratio.

	The fourth argument specifies the alpha channel of the color.
	It's interpreted identically to the fourth argument of the ''rgb()'' function.
	If omitted, it defaults to ''100%''.

	The resulting color can be thought of conceptually as a mixture of paint in the chosen hue,
	white paint, and black paint,
	with the relative amounts of each determined by the percentages.
	If white+black is equal to ''100%'' (after normalization),
	it defines an achromatic color,
	i.e. some shade of gray,
	without any hint of the chosen hue.

	<wpt>
		hwb-001.html
		hwb-002.html
		hwb-003.html
		hwb-004.html
		hwb-005.html
		color-resolving-hwb.html
	</wpt>

<h3 id='hwb-to-rgb'>
Converting HWB colors to sRGB colors</h3>

	Converting an HWB color to sRGB is straightforward,
	and related to how one converts HSL to RGB.
	The following Javascript implementation of the algorithm
	first normalizes the white and black components,
	so their sum is no larger than 100%.

	<pre class="lang-javascript">
	white /= 100;
	black /= 100;
	if (white + black >= 1) {
		var gray = white / (white + black);
		return [gray, gray, gray];
	  }
	function hwbToRgb(hue, white, black) {
		var rgb = hslToRgb(hue, 1, .5);
		for(var i = 0; i &lt; 3; i++) {
			rgb[i] *= (1 - white - black);
			rgb[i] += white;
		}
		return rgb;
	}
	</pre>

<h3 id="rgb-to-hwb">Converting sRGB colors to HWB colors</h3>

	Conversion in the reverse direction proceeds similarly.

<pre class="lang-javascript">
	function rgbToHwb(red, green, blue) {
		var hsl = rgbToHsl(rgb);
		var white = Math.min(...rgb);
		var black = 1 - Math.max(...rgb);
		return([hsl[0], white*100, black*100]);
	}
</pre>

<h3 id='hwb-examples'>
Examples of HWB Colors</h3>

	<div class='color-table'>
		<table>
			<tr>
				<th><th colspan="6">0° Reds
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#ff0000"><td style="color:#cc0000"><td style="color:#990000"><td style="color:#660000"><td style="color:#330000"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#ff3333"><td style="color:#cc3333"><td style="color:#993333"><td style="color:#663333"><td style="color:#333333"><td style="color:#2a2b2b">
			<tr>
				<th>40%<td style="color:#ff6666"><td style="color:#cc6666"><td style="color:#996666"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#ff9999"><td style="color:#cc9999"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ffcccc"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d4d5d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">30° Red-Yellows (Oranges)
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#ff8000"><td style="color:#cc6600"><td style="color:#994d00"><td style="color:#663300"><td style="color:#331900"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#ff9933"><td style="color:#cc8033"><td style="color:#996633"><td style="color:#664d33"><td style="color:#333333"><td style="color:#2a2a2b">
			<tr>
				<th>40%<td style="color:#ffb366"><td style="color:#cc9966"><td style="color:#998066"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#ffcc99"><td style="color:#ccb399"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ffe6cc"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d4d5d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">60° Yellows
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#ffff00"><td style="color:#cccc00"><td style="color:#999900"><td style="color:#666600"><td style="color:#333300"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#ffff33"><td style="color:#cccc33"><td style="color:#999933"><td style="color:#666633"><td style="color:#333333"><td style="color:#2a2a2b">
			<tr>
				<th>40%<td style="color:#ffff66"><td style="color:#cccc66"><td style="color:#999966"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#ffff99"><td style="color:#cccc99"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ffffcc"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d4d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">90° Yellow-Greens
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#80ff00"><td style="color:#66cc00"><td style="color:#4d9900"><td style="color:#336600"><td style="color:#1a3300"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#99ff33"><td style="color:#80cc33"><td style="color:#669933"><td style="color:#4d6633"><td style="color:#333333"><td style="color:#2a2a2b">
			<tr>
				<th>40%<td style="color:#b3ff66"><td style="color:#99cc66"><td style="color:#809966"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#ccff99"><td style="color:#b3cc99"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#e6ffcc"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d4d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">120° Greens
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#00ff00"><td style="color:#00cc00"><td style="color:#009900"><td style="color:#006600"><td style="color:#003300"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#33ff33"><td style="color:#33cc33"><td style="color:#339933"><td style="color:#336633"><td style="color:#333333"><td style="color:#2b2a2b">
			<tr>
				<th>40%<td style="color:#66ff66"><td style="color:#66cc66"><td style="color:#669966"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#99ff99"><td style="color:#99cc99"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ccffcc"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d4d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">150° Green-Cyans
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#00ff7f"><td style="color:#00cc66"><td style="color:#00994c"><td style="color:#006633"><td style="color:#003319"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#33ff99"><td style="color:#33cc7f"><td style="color:#339966"><td style="color:#33664c"><td style="color:#333333"><td style="color:#2b2a2a">
			<tr>
				<th>40%<td style="color:#66ffb2"><td style="color:#66cc99"><td style="color:#66997f"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#99ffcc"><td style="color:#99ccb3"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ccffe5"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d4d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">180° Cyans
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#00ffff"><td style="color:#00cccc"><td style="color:#009999"><td style="color:#006666"><td style="color:#003333"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#33ffff"><td style="color:#33cccc"><td style="color:#339999"><td style="color:#336666"><td style="color:#333333"><td style="color:#2b2a2a">
			<tr>
				<th>40%<td style="color:#66ffff"><td style="color:#66cccc"><td style="color:#669999"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#99ffff"><td style="color:#99cccc"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ccffff"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d5d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">210° Cyan-Blues
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#007fff"><td style="color:#0066cc"><td style="color:#004c99"><td style="color:#003366"><td style="color:#001933"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#3399ff"><td style="color:#337fcc"><td style="color:#336699"><td style="color:#334c66"><td style="color:#333333"><td style="color:#2b2a2a">
			<tr>
				<th>40%<td style="color:#66b2ff"><td style="color:#6699cc"><td style="color:#667f99"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#99ccff"><td style="color:#99b3cc"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#cce5ff"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d5d4"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">240° Blues
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#0000ff"><td style="color:#0000cc"><td style="color:#000099"><td style="color:#000066"><td style="color:#000033"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#3333ff"><td style="color:#3333cc"><td style="color:#333399"><td style="color:#333366"><td style="color:#333333"><td style="color:#2b2b2a">
			<tr>
				<th>40%<td style="color:#6666ff"><td style="color:#6666cc"><td style="color:#666699"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#9999ff"><td style="color:#9999cc"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ccccff"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d5d4"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">270° Blue-Magentas
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#7f00ff"><td style="color:#6600cc"><td style="color:#4c0099"><td style="color:#330066"><td style="color:#190033"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#9933ff"><td style="color:#7f33cc"><td style="color:#663399"><td style="color:#4c3366"><td style="color:#333333"><td style="color:#2a2b2a">
			<tr>
				<th>40%<td style="color:#b266ff"><td style="color:#9966cc"><td style="color:#7f6699"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#cc99ff"><td style="color:#b399cc"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#e5ccff"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d5d5d4"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">300° Magentas
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#ff00ff"><td style="color:#cc00cc"><td style="color:#990099"><td style="color:#660066"><td style="color:#330033"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#ff33ff"><td style="color:#cc33cc"><td style="color:#993399"><td style="color:#663366"><td style="color:#333333"><td style="color:#2a2b2a">
			<tr>
				<th>40%<td style="color:#ff66ff"><td style="color:#cc66cc"><td style="color:#996699"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#ff99ff"><td style="color:#cc99cc"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ffccff"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d4d5d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>

		<table>
			<tr>
				<th><th colspan="6">330° Magenta-Reds
			<tr>
				<th><span class="white">W</span>\<span class="black">B</span>
				<th>0%<th>20%<th>40%<th>60%<th>80%<th>100%
			<tr>
				<th>0%<td style="color:#ff0080"><td style="color:#cc0066"><td style="color:#99004d"><td style="color:#660033"><td style="color:#33001a"><td style="color:#000000">
			<tr>
				<th>20%<td style="color:#ff3399"><td style="color:#cc3380"><td style="color:#993366"><td style="color:#66334d"><td style="color:#333333"><td style="color:#2a2b2a">
			<tr>
				<th>40%<td style="color:#ff66b3"><td style="color:#cc6699"><td style="color:#996680"><td style="color:#666666"><td style="color:#555555"><td style="color:#494949">
			<tr>
				<th>60%<td style="color:#ff99cc"><td style="color:#cc99b3"><td style="color:#999999"><td style="color:#808080"><td style="color:#6d6d6d"><td style="color:#606060">
			<tr>
				<th>80%<td style="color:#ffcce6"><td style="color:#cccccc"><td style="color:#aaaaaa"><td style="color:#929292"><td style="color:#808080"><td style="color:#717171">
			<tr>
				<th>100%<td style="color:#ffffff"><td style="color:#d4d5d5"><td style="color:#b6b6b6"><td style="color:#9f9f9f"><td style="color:#8e8e8e"><td style="color:#808080">
		</table>
	</div>

<!--
██          ███    ████████        ██        ██████  ██     ██
██         ██ ██   ██     ██       ██       ██    ██ ██     ██
██        ██   ██  ██     ██       ██       ██       ██     ██
██       ██     ██ ████████        ██       ██       █████████
██       █████████ ██     ██       ██       ██       ██     ██
██       ██     ██ ██     ██       ██       ██    ██ ██     ██
████████ ██     ██ ████████        ████████  ██████  ██     ██
-->

<h2 id='lab-colors'>
Device-independent Colors: Lab and LCH</h2>

	Physical measurements of a color are typically expressed in the CIE L*a*b* [[!CIELAB]] color space,
	created in 1976 by the <abbr title='Commission Internationale de l'Eclairage'>CIE</abbr>
	and commonly referred to simply as Lab.
	Color conversions from one device to another also use Lab as an intermediate step.
	Derived from human vision experiments,
	Lab represents the entire range of color that humans can see.

	<!-- Simplify by saying Lab throughout rather than CIELab or
	CIE L*a*b*, because that is what people write in practice.
	No-one has used Hunter Lab for anything for decades.  -->

	Lab is a rectangular coordinate system with a central Lightness axis.
	This value is usually written as a unitless number;
	for compatibility with the rest of CSS, it is written as a percentage.
	100% means an L value of 100, not 1.0.
	L=0% is deep black (no light at all)
	while L=100% is a diffuse white

	Values of L greater than 100 would correspond to specular highlights,
	but their precise color is undefined in this specification.
	Usefully, L=50% is mid gray, by design,
	and equal increments in L are evenly spaced visually:
	the Lab color space is intended to be <em>perceptually uniform</em>.

	<figure>
		<img src="images/L-axis.svg" width=240 height=575>
		<figcaption>
			This figure shows the Lightness axis of the CIE Lab color space.
			Twenty neutral swatches are shown (L=0%, L=5%, to L=100%).
			The steps are equally spaced, visually.
		</figcaption>
	</figure>

	The a and b axes convey hue;
	positive values along the a axis are a purplish red
	while negative values are the complementary color, a green.
	Similarly, positive values along the b axis are yellow
	and negative are the complementary blue/violet.
	Desaturated colors have small values of a and b
	and are close to the L axis;
	saturated colors lie far from the L axis.


	<!-- diagram here -->

	The illuminant is D50 white, a standardized daylight spectrum with a color temperature of 5000K,
	as reflected by a perfect diffuse reflector; it approximates the color of sunlight on a sunny day.
	D50 is also the whitepoint used for the profile connection space in ICC color interconversion,
	the whitepoint used in image editors which offer Lab editing,
	and the value used by physical measurement devices such as spectrometers,
	when they report measured colors in Lab.

	Conversion from colors specified using other white points is called a <dfn export>chromatic adaptation transform</dfn>,
	which models the changes in the human visual system as we adapt to a new lighting condition.
	The Bradford algorithm [[!Bradford-CAT]]
	is the industry standard chromatic adaptation transform,
	and is easy to calculate as it is a simple matrix multiplication.

	LCH has the same L axis as Lab,
	but uses polar coordinates C (chroma) and H (hue),
	making it a polar, cylindrical coordinate system.
	C is the geometric distance from the L axis
	and H is the angle from the positive a axis,
	towards the positive b axis.

	<figure>
		<img src="images/CH-plane-wheel.svg" width="500" height="500">
		<figcaption>
			This figure shows the L=50 plane of the CIE Lab color space.
			20 degree increments in CIE LCH are displayed as circles
			at three levels of Chroma: 20, 40 and 60.
			All the 20 Chroma colors fit inside sRGB gamut,
			some of 40 and 60 Chroma are outside.
			These out of gamut colors are visualized as grey, with a red warning outer stroke.
		</figcaption>
	</figure>

	<!-- because Luv is not widely used nowadays, no need to say LCH(ab)
	to distinguish from LCH(uv) -->

	<p class="note">Note: The Lightness axis in Lab and LCH
	is not to be confused with the L axis in HSL.
	For example, in HSL, the sRGB colors blue (#00F) and yellow (#FF0)
	have the same value of L (50%) even though visually, blue is much darker.
	This is much clearer in Lab:
	sRGB blue is lab(29.567% 68.298 -112.0294)
	while
	sRGB yellow is lab(97.607% -15.753 93.388).
	In Lab and LCH, if two colors have the same measured L value,
	they have identical visual lightness.
	HSL and related polar RGB models were developed
	in an attempt
	to give similar usability benefits for RGB that LCH gave to Lab,
	but are significantly less accurate.</p>



<h3 id="specifying-lab-lch">
Specifying Lab and LCH: the ''lab()'' and ''lch()'' functional notations</h3>
	<!-- lab rather than CIELab or whatever, for brevity -->

	<!-- browser tracking bugs:
		Chromium
		https://bugs.chromium.org/p/chromium/issues/detail?id=1026287

		WebKit
		https://bugs.webkit.org/show_bug.cgi?id=205675
		and
		https://bugs.webkit.org/show_bug.cgi?id=220684

		Gecko
		https://bugzilla.mozilla.org/show_bug.cgi?id=1352757
		and
		https://bugzilla.mozilla.org/show_bug.cgi?id=1632548

	-->

	CSS allows colors to be directly expressed in Lab and LCH.

	<pre class='prod'>
	<dfn>lab()</dfn> = lab( <<percentage>> <<number>> <<number>> [ / <<alpha-value>> ]? )
	</pre>

	<wpt>
		lab-001.html
		lab-002.html
		lab-003.html
		lab-004.html
		lab-005.html
		lab-006.html
		lab-007.html
		lab-008.html
	</wpt>

	The first argument specifies the CIE Lightness.
	This is typically a number between ''0%''
	(representing black)
	and ''100%''
	(representing white),
	<!-- not really true, as noted above
		similar to the lightness argument of ''hsl()''. -->
	However, CIE Lightness <em>can</em> exceed this range on some systems,
	with extra-bright whites using a lightness up to ''400''.
	Values less than ''0%'' must be clamped to ''0%'' at computed-value time;
	values greater than
	''100%'' are permitted (for forwards compatibility with High Dynamic Range (HDR),
	and must not be clamped.

	The second and third arguments are the distances along the "a" and "b" axes
	in the Lab color space,
	as described in the previous section.
	These values are signed
	(allow both positive and negative values)
	and theoretically unbounded
	(but in practice do not exceed ±160).

	There is an optional fourth alpha value,
	separated by a slash,
	and interpreted identically to the <<alpha-value>> in ''rgb()''.


	<div class="example" id="ex-lab-samples">
		<pre class="lang-css">
			<span class="swatch" style="--color: rgb(49.06% 13.87% 15.9%)"></span> lab(29.2345% 39.3825 20.0664);
			<span class="swatch" style="--color: rgb(77.61% 36.34% 2.45%)"></span> lab(52.2345% 40.1645 59.9971);
			<span class="swatch" style="--color: rgb(61.65% 57.51% 9.28%)"></span> lab(60.2345% -5.3654 58.956);
			<span class="swatch" style="--color: rgb(40.73% 65.12% 22.35%)"></span> lab(62.2345% -34.9638 47.7721);
			<span class="swatch" style="--color: rgb(38.29% 67.27% 93.85%)"></span> lab(67.5345% -8.6911 -41.6019);
		</pre>
	</div>

	<pre class='prod'>
	<dfn>lch()</dfn> = lch( <<percentage>> <<number>> <<hue>> [ / <<alpha-value>> ]? )
	</pre>

	<wpt>
		lch-001.html
		lch-002.html
		lch-003.html
		lch-004.html
		lch-005.html
		lch-006.html
		lch-007.html
		lch-008.html
	</wpt>

	The first argument specifies the CIE Lightness,
	interpreted identically to the Lightness argument of ''lab()''.

	The second argument is the chroma
	(roughly representing the "amount of color").
	Its minimum useful value is ''0'',
	while its maximum is theoretically unbounded
	(but in practice does not exceed ''230'').
	If the provided value is negative,
	it is clamped to ''0'' at computed-value time.

	The third argument is the hue angle.
	It's interpreted similarly to the <<hue>> argument of ''hsl()'',
	but doesn't map hues to angles in the same way
	because they are evenly spaced perceptually.
	Instead, ''0deg'' points along the positive "a" axis (toward purplish red),
	(as does ''360deg'', ''720deg'', etc.);
	''90deg'' points along the positive "b" axis (toward mustard yellow),
	''180deg'' points along the negative "a" axis (toward greenish cyan),
	and ''270deg'' points along the negative "b" axis (toward sky blue).

	There is an optional fourth alpha value,
	separated by a slash,
	and interpreted identically to the <<alpha-value>> in ''rgb()''.

	<div class="example" id="ex-lch-samples">
		<pre class="lang-css">
			<span class="swatch" style="--color: rgb(49.06% 13.87% 15.9%)"></span> lch(29.2345% 44.2 27);
			<span class="swatch" style="--color: rgb(77.61% 36.34% 2.45%)"></span> lch(52.2345% 72.2 56.2);
			<span class="swatch" style="--color: rgb(61.65% 57.51% 9.28%)"></span> lch(60.2345% 59.2 95.2);
			<span class="swatch" style="--color: rgb(40.73% 65.12% 22.35%)"></span> lch(62.2345% 59.2 126.2);
			<span class="swatch" style="--color: rgb(38.29% 67.27% 93.85%)"></span> lch(67.5345% 42.5 258.2);
		</pre>
	</div>

<h3 id='rgb-to-lab'>
Converting RGB colors to Lab colors</h3>

	Conversion from an RGB color space to Lab requires several steps,
	although in practice all but the first and last step are linear calculations and can be combined. Taking sRGB as an example:

	<!-- make these steps links to the appropriate section in a calculations appendix -->
	<ol>
		<li>Convert from sRGB to <dfn id="linear-light-sRGB" export>linear-light sRGB</dfn> (undo gamma encoding).
			This has the same gamut as sRGB,
			but is now additive,
			so that arithmetic operations on the values
			give the correct results.
		<li>Convert from linear sRGB to CIE XYZ
		<li>Convert from a D65 whitepoint (used by sRGB) to the D50 whitepoint used
			in Lab, with the Bradford transform [[!Bradford-CAT]]
		<li>Convert D50-adapted XYZ to Lab
	</ol>

	There is sample JavaScript code for this conversion
	for various RGB color spaces, in [[#color-conversion-code]].

<h3 id='lab-to-rgb'>
Converting Lab colors to RGB colors</h3>

	For display on a screen,
	Lab colors will need to be converted
	to the color space of the display.

	Conversion from Lab to an RGB space also requires multiple steps,
	and again in practice all but the first and last step are linear calculations and can be combined. Taking display-p3 as an example,

	<ol>
		<li>Convert Lab to (D50-adapted) XYZ
		<li>Convert from a D50 whitepoint (used by Lab) to the D65 whitepoint used
			in display-p3, with the Bradford transform
		<li>Convert from (D65-adapted) CIE XYZ to linear-light display-p3
		<li>Convert from linear-light display-p3 to display-p3 (do gamma encoding)
	</ol>

	There is sample JavaScript code for this conversion
	for various RGB color spaces, in [[#color-conversion-code]].

<h3 id="cmyk-to-lab">
Converting CMYK colors to Lab
</h3>

	Conversion from a calibrated CMYK color space to Lab
	is typically done by looking up the Lab values in an ICC profile.

<h3 id="lab-to-cmyk">
	Converting Lab colors to CMYK
	</h3>

	For print,
	Lab colors will need to be converted
	to the color space of the printer.

	This is typically done by looking up the CMYK values in an ICC profile.

<h3 id='lab-to-lch'>
Converting Lab colors to LCH colors</h3>

	Conversion to LCH is trivial:

	<ol>
		<li>H = atan2(b, a)
		<li>C = sqrt(a^2 + b^2)
		<li>L is the same
	</ol>

For extremely small values of a and b (near zero Chroma), although the visual color does not change from being on the neutral axis, small changes to the values can result in the reported hue angle swinging about wildly and being essentially random. To account for this, some conversion routines will report a missing value, such as NaN.

<h3 id='lch-to-lab'>
Converting LCH colors to Lab  colors</h3>

	Conversion to Lab is trivial:

	<ol>
		<li>a = C cos(H)
		<li>b = C sin(H)
		<li>L is the same
	</ol>

<!-- gray() removed in #4621
https://github.com/w3c/csswg-drafts/issues/4621
-->

<!--
████████  ████████   ███████  ████████ ████ ██       ████████ ████████
██     ██ ██     ██ ██     ██ ██        ██  ██       ██       ██     ██
██     ██ ██     ██ ██     ██ ██        ██  ██       ██       ██     ██
████████  ████████  ██     ██ ██████    ██  ██       ██████   ██     ██
██        ██   ██   ██     ██ ██        ██  ██       ██       ██     ██
██        ██    ██  ██     ██ ██        ██  ██       ██       ██     ██
██        ██     ██  ███████  ██       ████ ████████ ████████ ████████
-->

<h2 id='icc-colors'>
Profiled, Device-dependent Colors</h2>

	CSS allows [=colors=] to be specified by reference to a color profile.
	This could be for example a calibrated CMYK printer,
	or an RGB color space,
	or any other color or monochrome output device which has been characterized.

	In addition, for convenience,
	CSS provides several predefined color spaces
	including ''display-p3''' [[!DCI-P3]],
	which is a wide gamut space typical of current wide-gamut monitors,
	''prophoto-rgb''', widely used by photographers
	and ''rec2020''' [[!Rec.2020]],
	which is a broadcast industry standard,
	ultra-wide gamut space capable of representing almost all visible real-world colors.

	These can be used without supplying a separate profile.

	<div class='example' id="ex-profiles-colors">
		This example specifies four profiled colors:
		two are custom spaces
		(for a SWOP-coated CMYK press,
		for a wide-gamut seven-ink printer),
		the other two are predefined spaces
		(the ProPhoto RGB,
		and display-p3 RGB spaces).
		In each case, the numerical parameters
		are in the range 0.0 to 1.0
		(rather than, for example, 0 to 255).
		<pre class="lang-css">
			color: color(--swopc 0.0134 0.8078 0.7451 0.3019);
			color: color(--indigo 0.0941 0.6274 0.3372 0.1647 0 0.0706 0.1216);
			color: color(prophoto-rgb 0.9137 0.5882 0.4784);
			color: color(display-p3 0.3804 0.9921 0.1412);
		</pre>

		The colors not using a <a href="#predefined">predefined</a> color space
		are distinguished by their use of <<dashed-ident>> and
		also need a matching ''@color-profile'' at-rule
		somewhere in the stylesheet,
		to connect the name with the profile data.

		<pre class="lang-css">
			@color-profile --swopc {
				src: url('http://example.org/swop-coated.icc');}
			@color-profile --indigo {
				src: url('http://example.org/indigo-seven.icc');}
		</pre>
	</div>

<!--
 ██████   ███████  ██        ███████  ████████    ███ ███
██    ██ ██     ██ ██       ██     ██ ██     ██  ██     ██
██       ██     ██ ██       ██     ██ ██     ██ ██       ██
██       ██     ██ ██       ██     ██ ████████  ██       ██
██       ██     ██ ██       ██     ██ ██   ██   ██       ██
██    ██ ██     ██ ██       ██     ██ ██    ██   ██     ██
 ██████   ███████  ████████  ███████  ██     ██   ███ ███
-->

<h3 id="color-function">Specifying profiled colors: the ''color()'' function</h3>

	The ''color()'' function allows a color to be specified
	in a particular, specified [=color space=]
	(rather than the implicit sRGB color space that most of the other color functions operate in).
	Its syntax is:

	<pre class='prod'>
		<dfn>color()</dfn> = color( [<<ident>> | <<dashed-ident>>] [ <<number-percentage>>+ ] [ / <<alpha-value>> ]? )
	</pre>

	<!-- check this test, remove any fallback testing -->
	<wpt>
		color-function-parsing.html
	</wpt>

	The color function takes parameters specifying a color, in an explicitly listed color space.

	It represents either an <dfn export>invalid color</dfn>, as described below,
	or a [=valid color=].

	Any color which is not an [=invalid color=] is a <dfn export>valid color</dfn>.

	A color may be a [=valid color=]
	but still be outside the range of colors
	that can be produced by an output device
	(a screen, projector, or printer).
	It is said to be <dfn export>out of gamut</dfn>
	for that color space.

	An out of gamut color has component values
	less than 0 or 0%, or greater than 1 or 100%.
	These are not invalid; instead, for display, they are
	<a>gamut-mapped</a> using a relative colorimetric intent
	which brings the values within the range 0/0% to 1/100%
	at computed-value time.

	Each [=valid color=] is either in-gamut for the output device (screen, or printer),
	or it is [=out of gamut=].

	The parameters have the following form:

	* An <<ident>>  or <<dashed-ident>> denoting the color space.
		If this is an <<ident>> it denotes one of the <a href="#predefined">predefined color spaces</a>
		(such as ''display-p3'');
		if it is a <<dashed-ident>> it denotes a custom
		color space, defined by a ''@color-profile'' rule.
		Individual <a href="#predefined">predefined color spaces</a>
		may further restrict whether <<number>>s or <<percentage>>s
		or both, may be used.

		If the <<ident>> names a non-existent color space
		(a name that does not match one of the <a href="#predefined">predefined color spaces</a>),
		or a predefined but unsupported color space,
		this argument represents an <a>invalid color</a>.

		If the <<dashed-ident>> names a non-existent color space
		( a name that does not match an <a>color profile's</a> name,
		  or which matches but the corresponding profile has not loaded,
		  or does not represent a valid profile),
		this argument represents an <a>invalid color</a>.


	* One or more <<number>>s or <<percentage>>s providing the parameter values that the color space takes.

		For custom color spaces,
		specified component values
		less than 0 or 0%, or greater than 1 or 100%
		are not invalid;
		they are clamped to the valid range at computed value time.
		This is because ICC profiles typically do not accept
		out of range input values.

		For predefined color spaces,
		specified component values
		less than 0 or 0%, or greater than 1 or 100%
		are not invalid;
		these out of gamut colors
		are gamut mapped to the valid range at computed value time,
		with a relative colorimetric intent.

		If more <<number>>s or <<percentage>>s are provided than parameters that the color space takes,
		the excess <<number>>s at the end are ignored.
		The color is still a [=valid color=].

		If fewer <<number>>s or <<percentage>>s are provided than parameters that the color space takes,
		the missing parameters default to ''0''.
		(This is particularly convenient for multichannel printers
		where the additional inks are spot colors or varnishes
		that most colors on the page won't use.)
		The color is still a [=valid color=].

	* An optional slash-separated <<alpha-value>>.
		This is interpreted the same way as the <<alpha-value>> in ''rgb()'',
		and if omitted it defaults to ''100%''.


	A color which is either an [=invalid color=] or
	an [=out of  gamut=] color
	<dfn export>can't be displayed</dfn>.

	If the specified color <dfn export>can be displayed</dfn>,
	(that is, it isn't an [=invalid color=]
	and isn't [=out of gamut=])
	then this is the used value of the ''color()'' function.

	If the specified color
	is a [=valid color=]
	but [=can't be displayed=]],
	the used value is derived from the specified color,
	<a>gamut-mapped</a> for display.

	If the color is an [=invalid color=],
	the used value is <a>opaque black</a>.


	<div class="example" id="ex-2020-oog-p3">
		This very intense lime color is in-gamut for rec.2020:
		<pre class="lang-css">color(rec2020 0.42053 0.979780 0.00579);</pre>
		in LCH, that color is
		<pre class="lang-css">lch(86.6146% 160.0000 136.0088);</pre>
		in display-p3, that color is
		<pre class="lang-css">color(display-p3 -0.6112 1.0079 -0.2192);</pre>
		and is out of gamut for display-p3
		(red and blue are negative, green is greater than 1).
		If you have a display-p3 screen, that color is:
		<ul>
			<li><em>valid</em></li>
			<li><em>in gamut</em> (for rec.2020)</li>
			<li><em>out of gamut</em> (for your display)</li>
			<li>and so <em>can't be displayed</em></li>
		</ul>
		The color used for display will be a less intense color
		produced automatically by gamut mapping.
	</div>

	<div class="invalid example" id="ex-profoto-bad">
		This example has a typo!
		An intense green is provided in profoto-rgb space (which doesn't exist).
		This makes it invalid, so the used value is <a>opaque black</a>
		<pre class="lang-css">color(profoto-rgb 0.4835 0.9167 0.2188)</pre>
	</div>

<h3 id="predefined">
Predefined color spaces: ''srgb'', ''display-p3'', ''a98-rgb'', ''prophoto-rgb'', ''rec2020'',
and ''xyz''.</h3>

<!-- Browser tracking bugs:
	Chromium https://bugs.chromium.org/p/chromium/issues/detail?id=1068610

	Quick test https://mathiasbynens.github.io/css-dbg-stories/css-color.html
-->

	The following color spaces are predefined for use in the ''color()'' function.
	They are used without any ''@color-profile'' rule.

	The <dfn id='sRGB' export>sRGB</dfn> predefined colorspace
	defined below
	is the same as is used for legacy sRGB colors,
	such as ''rgb()''.

	<dl dfn-type=value dfn-for="color()">
		<dt><dfn>srgb</dfn>
		<dd>
			The ''srgb'' [[!SRGB]] color space accepts three numeric parameters,
			representing the red, green, and blue channels of the color,
			with each having a valid range of [0, 1].
			The whitepoint is D65
			(a daylight white, with a correlated color temperature of 6504°K).

			[[!SRGB]] specifies two viewing conditions, <em>encoding</em>
			and <em>typical</em>. The [[ICC]] recommends using the <em>encoding</em>
			conditions for color conversion and for optimal viewing, which are
			the values in the table below.

			sRGB is the default color space for CSS,
			used for all the legacy color functions.

			It has the following characteristics:

			<table>
				<thead><td></td><td>x</td><td>y</td><td>notes</td></thead>
				<tr><th>Red chromaticity</th><td>0.640</td><td>0.330</td></tr>
				<tr><th>Green chromaticity</th><td>0.300</td><td>0.600</td></tr>
				<tr><th>Blue chromaticity</th><td>0.150</td><td>0.060</td></tr>
				<tr><th>White chromaticity</th><td>0.31272</td><td>0.32903</td><td>(D65)</td></tr>
				<tr><th>Transfer function</th><td colspan="2">see below</td></tr>
				<tr><th>White luminance</th><td colspan="2">80.0 cd/m<sup>2</sup></td></tr>
				<tr><th>Black luminance</th><td colspan="2">0.80 cd/m<sup>2</sup></td></tr>
				<tr><th>Image state</th><td colspan="2">display-referred</td></tr>
				<tr>
					<th>Percentages</th>
					<td  colspan="2">Allowed for R, G and B</td>
				</tr>
			</table>

			<pre class="lang-javascript">
			let sign = c < 0? -1 : 1;
			let abs = Math.abs(c);

			if (abs < 0.04045) {
				cl = c / 12.92;
			}
			else {
				cl = sign * (Math.pow((abs + 0.055) / 1.055, 2.4));
			}
			</pre>
			c is the gamma-encoded red, green or blue component.
			cl is the corresponding linear-light component.

			<figure>
				<img src="images/sRGB-prim-sec.svg" width=540 height=520
				alt="diagram of sRGB primaries and secondaries in LCH">
				<figcaption>Visualization of the sRGB color space in LCH. The primaries and secondaries are shown.</figcaption>
			</figure>

			<wpt>
				predefined-001.html
				predefined-002.html
			</wpt>

		<dt><dfn>display-p3</dfn>
		<dd>
			The ''display-p3'' color space accepts three numeric parameters,
			representing the red, green, and blue channels of the color,
			with each having a valid range of [0, 1].
			It uses the same primary chromaticities as [[!DCI-P3]],
			but with a D65 whitepoint, and the same transfer curve as sRGB.

			Modern displays, TVs, laptop screens and phone screens
			are able to display all, or nearly all,
			of the display-p3 gamut.

			It has the following characteristics:

			<table>
				<thead><td></td><td>x</td><td>y</td><td>notes</td></thead>
				<tr><th>Red chromaticity</th><td>0.680</td><td>0.320</td></tr>
				<tr><th>Green chromaticity</th><td>0.265</td><td>0.690</td></tr>
				<tr><th>Blue chromaticity</th><td>0.150</td><td>0.060</td></tr>
				<tr><th>White chromaticity</th><td>0.31272</td><td>0.32903</td><td>(D65)</td></tr>
				<tr><th>Transfer function</th><td colspan="2">same as srgb</td></tr>
				<tr><th>White luminance</th><td colspan="2">80.0 cd/m<sup>2</sup></td></tr>
				<tr><th>Black luminance</th><td colspan="2">0.80 cd/m<sup>2</sup></td></tr>
				<tr><th>Image state</th><td colspan="2">display-referred</td></tr>
				<tr>
					<th>Percentages</th>
					<td  colspan="2">Allowed for R, G and B</td>
				</tr>
			</table>

			<figure>
				<img src="images/P3-prim-sec.svg" width=580 height=560
				alt="diagram of P3 primaries and secondaries in LCH">
				<figcaption>Visualization of the P3 color space in LCH.
					The primaries and secondaries are shown
					(but in sRGB, not in the correct colors).
					For comparison, the sRGB primaries and secondaries
					are also shown, as dashed circles.
					P3 primaries have higher Chroma.
				</figcaption>
			</figure>

			<wpt>
				color-function-parsing.html
				predefined-005.html
				predefined-006.html
			</wpt>

		<dt><dfn>a98-rgb</dfn>
		<dd>
			The ''a98-rgb'' color space accepts three numeric parameters,
			representing the red, green, and blue channels of the color,
			with each having a valid range of [0, 1]. The transfer curve is
			a gamma function, close to but not exactly 1/2.2.

			It has the following characteristics:

			<table>
				<thead><td></td><td>x</td><td>y</td><td>notes</td></thead>
				<tr><th>Red chromaticity</th><td>0.6400</td><td>0.3300</td></tr>
				<tr><th>Green chromaticity</th><td>0.2100</td><td>0.7100</td></tr>
				<tr><th>Blue chromaticity</th><td>0.1500</td><td>0.0600</td></tr>
				<tr><th>White chromaticity</th><td>0.31272</td><td>0.32903</td><td>(D65)</td></tr>
				<tr><th>Transfer function</th><td colspan="2">256/563 </td></tr>
				<tr><th>White luminance</th><td colspan="2">160.0 cd/m<sup>2</sup></td></tr>
				<tr><th>Black luminance</th><td colspan="2">0.5557 cd/m<sup>2</sup></td></tr>
				<tr><th>Image state</th><td colspan="2">display-referred</td></tr>
				<tr>
					<th>Percentages</th>
					<td  colspan="2">Allowed for R, G and B</td>
				</tr>
			</table>

			<figure>
				<img src="images/a98-prim-sec.svg" width=640 height=560
				alt="diagram of a98 primaries and secondaries in LCH">
				<figcaption>Visualization of the a98 color space in LCH.
					The primaries and secondaries are shown
					(but in sRGB, not in the correct colors).
					For comparison, the sRGB primaries and secondaries
					are also shown, as dashed circles.
					a98 primaries have higher Chroma,
					especially the yellow, green and cyan.
				</figcaption>
			</figure>

			<wpt>
				predefined-007.html
				predefined-008.html
				a98rgb-001.html
				a98rgb-002.html
				a98rgb-003.html
				a98rgb-004.html
			</wpt>

		<dt><dfn>prophoto-rgb</dfn>
			<dd>
				The ''prophoto-rgb'' color space accepts three numeric parameters,
				representing the red, green, and blue channels of the color,
				with each having a valid range of [0, 1]. The transfer curve is
				a gamma function with a value of 1/1.8,
				and a small linear portion near black.
				The white point is D50, the same as is used by CIE Lab. Thus,
				conversion to Lab does not require the chromatic adaptation step.

				The ProPhoto RGB space uses hyper-saturated,
				non physically realizable primaries.
				These were chosen to allow
				a wide color gamut and in particular,
				to minimize hue shifts under tonal manipulation.
				It is often used in digital photography as a wide gamut
				color space for the master version of
				photographic images. The ''prophoto-rgb'' color space allows CSS to
				specify colors that will match colors in such images
				having the same RGB values.

				The white luminance is given as a range, and
				the viewing flare (and thus, the black luminance)
				is 0.5% to 1.0% of this.

				It has the following characteristics:

				<table>
					<thead><td></td><td>x</td><td>y</td><td>notes</td></thead>
					<tr><th>Red chromaticity</th><td>0.734699</td><td>0.265301</td></tr>
					<tr><th>Green chromaticity</th><td>0.159597</td><td>0.840403</td></tr>
					<tr><th>Blue chromaticity</th><td>0.036598</td><td>0.000105</td></tr>
					<tr><th>White chromaticity</th><td>0.345704</td><td>0.358540</td><td>(D50)</td></tr>
					<tr><th>Transfer function</th><td colspan="2">see below </td></tr>
					<tr><th>White luminance</th><td colspan="2">160.0 to 640.0 cd/m<sup>2</sup></td></tr>
					<tr><th>Black luminance</th><td colspan="2">See text</td></tr>
					<tr><th>Image state</th><td colspan="2">display-referred</td></tr>
					<tr>
						<th>Percentages</th>
						<td  colspan="2">Allowed for R, G and B</td>
					</tr>
				</table>

				<pre class="lang-javascript">
					const E = 16/512;
					let sign = c < 0? -1 : 1;
					let abs = Math.abs(c);

					if (abs <= E) {
						cl =  c / 16;
					}
					else {
						cl = sign * Math.pow(c, 1.8);
					}
				</pre>
				c is the gamma-encoded red, green or blue component.
				cl is the corresponding linear-light component.

				<figure>
					<img src="images/prophoto-prim-sec.svg" width=780 height=760
					alt="diagram of prophoto primaries and secondaries in LCH">
					<figcaption>Visualization of the prophoto-rgb color space in LCH. The primaries and secondaries are shown
					(but in sRGB, not in the correct colors).
					For comparison, the sRGB primaries and secondaries
					are also shown, as dashed circles.
					prophoto-rgb primaries and secondaries have much higher Chroma,
					but much of this ultrawide gamut
					does not correspond to physically realizable colors.
					</figcaption>
				</figure>

				<wpt>
					predefined-009.html
					predefined-010.html
					prophoto-rgb-001.html
					prophoto-rgb-002.html
					prophoto-rgb-003.html
					prophoto-rgb-004.html
					prophoto-rgb-005.html
				</wpt>

		<dt><dfn>rec2020</dfn>
		<dd>
			The ''rec2020'' [[!Rec.2020]] color space accepts three numeric parameters,
			representing the red, green, and blue channels of the color,
			with each having a valid range of [0, 1]. ITU Reference 2020 is used for High Definition, 4k and 8k television.

			The primaries are physically realizable,
			but with difficulty
			as they lie very close to the spectral locus.

			Current displays are unable to reproduce the full gamut of rec2020. Coverage is expected to increase over time as displays improve.

			It has the following characteristics:

			<table>
				<thead><td></td><td>x</td><td>y</td><td>notes</td></thead>
				<tr><th>Red chromaticity</th><td>0.708</td><td>0.292</td></tr>
				<tr><th>Green chromaticity</th><td>0.170</td><td>0.797</td></tr>
				<tr><th>Blue chromaticity</th><td>0.131</td><td>0.046</td></tr>
				<tr><th>White chromaticity</th><td>0.31272</td><td>0.32903</td><td>(D65)</td></tr>
				<tr><th>Transfer function</th><td colspan="2">see below</td></tr>
				<tr><th>Image state</th><td colspan="2">display-referred</td></tr>
				<tr>
					<th>Percentages</th>
					<td  colspan="2">Allowed for R, G and B</td>
				</tr>
			</table>

			<pre class="lang-javascript">
				const α = 1.09929682680944 ;
				const β = 0.018053968510807;

				let sign = c < 0? -1 : 1;
				let abs = Math.abs(c);

				if (abs < β * 4.5 ) {
					cl = c / 4.5;
				}
				else {
					cl = sign * (Math.pow((abs + α -1 ) / α, 1/0.45));
				}
			</pre>
			c is the gamma-encoded red, green or blue component.
			cl is the corresponding linear-light component.

			<figure>
				<img src="images/2020-prim-sec.svg" width=670 height=580
				alt="diagram of rec2020 primaries and secondaries in LCH">
				<figcaption>Visualization of the rec2020 color space in LCH. The primaries and secondaries are shown
				(but in sRGB, not in the correct colors).
				For comparison, the sRGB primaries and secondaries
				are also shown, as dashed circles.
				rec2020 primaries have much higher Chroma.
				</figcaption>
			</figure>

			<wpt>
				predefined-011.html
				predefined-012.html
				rec2020-001.html
				rec2020-002.html
				rec2020-003.html
				rec2020-004.html
				rec2020-005.html
			</wpt>

		<dt><dfn>xyz</dfn>
			<dd>The ''xyz'' color space accepts three numeric parameters,
				representing the X,Y and Z values.
				It represents the CIE XYZ color space,
				scaled such that diffuse white has a luminance (Y) of 1.0
				and, if necessary, chromatically adapted to a D50 reference white.

				Values greater than 1.0 are allowed and must not be clamped;
				they represent colors brighter than diffuse white.
				Values less than 0 are uncommon,
				but can occur as a result of chromatic adaptation,
				and likewise must not be clamped.

				It has the following characteristics:

				<table>
					<tr>
						<th>Percentages</th>
						<td>Disallowed</td>
					</tr>
				</table>

				<div class="example" id="ex-xyz">
					These are exactly equivalent:

					<pre class="lang-css">
						<span class="swatch" style="--color: #7654CD"></span> #7654CD
						<span class="swatch" style="--color: #7654CD"></span> rgb(46.27% 32.94% 80.39%)
						<span class="swatch" style="--color: #7654CD"></span> lab(44.36% 36.05 -58.99)
						<span class="swatch" style="--color: #7654CD"></span> color(xyz 0.2005 0.14089 0.4472)
					</pre>
				</div>

				<wpt>
					predefined-016.html
					xyz-001.html
					xyz-002.html
					xyz-003.html
					xyz-004.html
					xyz-005.html
				</wpt>


	</dl>

	<!-- remove this test from wpt -->
				<!-- <wpt>
					predefined-013.html
				</wpt> -->

<h4 id="predefined-to-lab">
Converting predefined color spaces to Lab</h4>

	For all predefined color spaces,
	conversion to Lab requires several steps,
	although in practice all but the first step are linear calculations and can be combined.

	<!-- make these steps links to the appropriate section in a calculations appendix -->
	<ol>
		<li>Convert from gamma-encoded RGB to linear-light RGB (undo gamma encoding)
		<li>Convert from linear RGB to CIE XYZ
		<li>Convert from a D65 whitepoint (used by sRGB, ''display-p3'', ''a98-rgb'' and ''rec2020'') to the D50 whitepoint used in Lab,
			with the Bradford transform. ''prophoto-rgb''' already has a D50 whitepoint.
		<li>Convert D50-adapted XYZ to Lab
	</ol>


<h4 id="lab-to-predefined">
Converting Lab to predefined color spaces</h4>

	Conversion from Lab to display-p3 or rec2020 also requires multiple steps,
	and again in practice all but the last step are linear calculations and can be combined.

	<ol>
		<li>Convert Lab to (D50-adapted) XYZ
		<li>Convert from a D50 whitepoint (used by Lab) to the D65 whitepoint used in sRGB and most other RGB spaces,
			with the Bradford transform. ''prophoto-rgb''' does not require this step.
		<li>Convert from (D65-adapted) CIE XYZ to linear RGB
		<li>Convert from linear-light RGB to RGB (do gamma encoding)
	</ol>

	Implementations may choose to implement these steps in some other way
	(for example, using an ICC profile with relative colorimetric rendering intent)
	provided the results are the same for colors inside both the source and destination gamuts.

<h4 id="predefined-to-predefined">
	Converting between predefined RGB color spaces
</h4>

	Conversion from one predefined RGB colorspace to another
	requires multiple steps,
	one of which is only needed when the whitepoints differ.
	To convert from <em>src</em> to <em>dest</em>:

	<ol>
		<li>Convert from gamma-encoded <em>src</em>RGB to linear-light <em>src</em>RGB (undo gamma encoding)
		<li>Convert from linear <em>src</em>RGB to CIE XYZ
		<li>If <em>src</em> and <em>dest</em> have different whitepoints,
			convert the XYZ value from <em>src</em>White to <em>dest</em>White
			with the Bradford transform.
		</li>
		<li>Convert from CIE XYZ to linear <em>dest</em>RGB
		<li>Convert from linear-light <em>dest</em>RGB to <em>dest</em>RGB (do gamma encoding)
	</ol>

	There is sample JavaScript code for this conversion
	for the predefined RGB color spaces, in [[#color-conversion-code]].

<!--
 ███████   ██████   ███████  ██        ███████  ████████
██     ██ ██    ██ ██     ██ ██       ██     ██ ██     ██
██ ███ ██ ██       ██     ██ ██       ██     ██ ██     ██
██ ███ ██ ██       ██     ██ ██       ██     ██ ████████
██ █████  ██       ██     ██ ██       ██     ██ ██   ██
██        ██    ██ ██     ██ ██       ██     ██ ██    ██
 ███████   ██████   ███████  ████████  ███████  ██     ██
-->

<h3 id="at-profile">
Specifying a color profile: the ''@color-profile'' at-rule</h3>

	The <dfn at-rule id="at-ruledef-profile">@color-profile</dfn> rule
	defines and names a <dfn lt="CSS color profile" local-lt="color profile">color profile</dfn>
	which can later be used in the ''color()'' function to specify a color.

	It's defined as:

	<pre class='prod'>
	@color-profile = @color-profile [<<dashed-ident>> | ''device-cmyk''] { <<declaration-list>> }
	</pre>

	The <<dashed-ident>> gives the <a>color profile's</a> name,
	by which it will be used in a CSS stylesheet.
	Alternatively, the ''device-cmyk'' keyword means that this color profile
	will be used to resolve colors specified in ''device-cmyk''.
	<!-- All of the predefined color space keywords
	(''srgb'', ''display-p3'', ''a98-rgb'', ''prophoto-rgb'', ''rec2020'')
	are excluded from this <<custom-ident>>,
	as they're predefined by this specification and always available. -->

	The ''@color-profile'' rule accepts the descriptors defined in this specification.

	<pre class=descdef for="@color-profile">
	Name: src
	Value: <<url>>
	For: @color-profile
	Initial: n/a
	</pre>

	The '@color-profile/src' descriptor specifies the URL to retrieve the color-profile information from.

	The retrieved ICC profile is valid if

	- it can be parsed as an ICC Profile

	- it is an Input, Display, Output, or color space ICC profile. (Abstract, DeviceLink, and NamedColor ICC Profiles must not be used).

	If the profile is not valid, all CSS colors
	which reference this profile
	are <a>invalid color</a>s.

	Note: The Internet Media Type ("MIME type")
	for ICC profiles is
	<a href="https://www.iana.org/assignments/media-types/application/vnd.iccprofile">application/vnd.iccprofile</a>.



	<!-- should we add a format field to this descriptor, like with font-face src? it is always ICC format
	in practice, but that could change in the future. or we could add format later, once there is
	a need, and make the default ICC if not specified -->

	<!-- we decided in San Francisco to not allow rendering intent to be specified in the CSS;
	just use the rendering intent provided by the profile. However, leave in for FPWD. -->

	<pre class=descdef>
	Name: rendering-intent
	Value: relative-colorimetric | absolute-colorimetric | perceptual | saturation
	Initial: relative-colorimetric
	For: @color-profile
	</pre>

	<a>Color profiles</a> contain “rendering intents”,
	which define how to <dfn>gamut-map</dfn> their color to smaller gamuts than they're defined over.
	Often a profile will contain only a single intent,
	but when there are multiple,
	the 'rendering-intent' descriptor chooses one of them to use.

	The four possible rendering intents are [[!ICC]]:

	<dl dfn-type=value dfn-for="@color-profile/rendering-intent">
		<dt><dfn>relative-colorimetric</dfn>
		<dd>
			Media-relative colorimetric is required to leave source colors that fall
			inside the destination medium gamut unchanged relative to the respective
			media white points. Source colors that are out of the destination medium
			gamut are mapped to colors on the gamut boundary using a variety of
			different methods.

			The media-relative colorimetric rendering intent is
			often used with black point compensation, where the source medium black point
			is mapped to the destination medium black point as well.
			This method must map the source white point to the destination white point. If
			black point compensation is in use, the source black point must also be
			mapped to the destination black point. Adaptation algorithms should be used
			to adjust for the change in white point. Relative relationships of colors
			inside both source and destination gamuts should be preserved. Relative
			relationships of colors outside the destination gamut may be changed.

		<dt><dfn>absolute-colorimetric</dfn>
		<dd>
			ICC-absolute colorimetric is required to leave source colors that fall
			inside the destination medium gamut unchanged relative to the adopted
			white (a perfect reflecting diffuser). Source colors that are out of the
			destination medium gamut are mapped to colors on the gamut boundary using a
			variety of different methods. This method produces the most accurate
			color matching of in-gamut colors, but will result in highlight clipping
			if the destination medium white point is lower than the source medium
			white point. For this reason it is recommended for use only in applications
			that need exact color matching and where highlight clipping is not a concern.

			This method MUST disable white point matching and black point matching when
			converting colors. In general, this option is not recommended except
			for testing purposes.

		<dt><dfn>perceptual</dfn>
		<dd>
			This method is often the preferred choice for images, especially when there are
			substantial differences between the source and destination (such as a screen display
			image reproduced on a reflection print). It takes the colors of the source image
			and re-optimizes the appearance for the destination medium using proprietary
			methods. This re-optimization may result in colors within both the source
			and destination gamuts being changed, although perceptual transforms are
			supposed to maintain the basic artistic intent of the original in the
			reproduction. They will not attempt to correct errors in the source image.

			Note: With v2 ICC profiles there is no specified perceptual reference medium,
			which can cause interoperability problems. When v2 ICC profiles are used it can
			be safer to use the media-relative colorimetric rendering intent with black
			point compensation, instead of the perceptual rendering intent, unless the
			specific source and destination profiles to be used have been checked to ensure
			the combination produces the desired result.

			This method should maintain relative color values among the pixels as they
			are mapped to the target device gamut. This method may change pixel values
			that were originally within the target device gamut, in order to avoid
			hue shifts and discontinuities and to preserve as much as possible the
			overall appearance of the scene.
		<dt><dfn>saturation</dfn>
		<dd>
			This option was created to preserve the relative saturation (chroma) of the original,
			and to keep solid colors pure. However, it experienced interoperability problems like
			the perceptual intent, and as solid color preservation is not amenable to a reference
			medium solution using v4 profiles does not solve the problem. Use of this rendering intent
			is not recommended unless the specific source and destination profiles to be used have
			been checked to ensure the combination produces the desired result.
			This option should preserve the relative saturation (chroma) values of the original
			pixels. Out of gamut colors should be converted to colors that have the same saturation
			but fall just inside the gamut.
	</dl>

	<pre class=descdef for="@color-profile">
		Name: components
		Value: <<ident>>#
		For: @color-profile
		Initial: n/a
	</pre>

	Color profiles can define color spaces which contain a varying number of components.
	For example, a Cyan, Magenta, Yellow and Black (CMYK) profile
	has four components
	named c, m, y and k
	While a four-component additive screen profile
	might use four components
	named r, g, y and b.

	The value of this descriptor is a comma-separated list of <<ident>> tokens.
	Each <<ident>>> names a component,
	in the order in which they are used in the color profile,
	while the total number of tokens defines the number of components.

	<div class="example" id="ex-components-cmyk">
		This descriptor declares that there are four components named cyan, magenta, yellow and black:
		<pre>components: cyan, magenta, yellow, black</pre>
		while this descriptor opts for terser names:
		<pre>components: c,m,y,k</pre>
	</div>

	<div class="example" id="ex-components-cmykogv">
		This descriptor declares that there are seven components
		named cyan, magenta, yellow, black, orange, green and violet:
		<pre>components: cyan, magenta, yellow, black, orange, green, violet</pre>
	</div>

<!--
 ██████  ██     ██ ██    ██ ██    ██
██    ██ ███   ███  ██  ██  ██   ██
██       ████ ████   ████   ██  ██
██       ██ ███ ██    ██    █████
██       ██     ██    ██    ██  ██
██    ██ ██     ██    ██    ██   ██
 ██████  ██     ██    ██    ██    ██
-->

<h3 id="cal-cmyk">
	CSS and print: using calibrated CMYK and other printed color spaces</h3>

The ''@color-profile'' at-rule is not restricted to RGB color spaces.
While screens typically display colors directly in RGB,
printers often represent colors with CMYK.

Calibrated four color print with Cyan, Magenta, Yellow and Black (CMYK),
or high-fidelity wide gamut printing with additional inks
such as Cyan Magenta Yellow Black Orange Green Violet (CMYKOGV)
can also be done in CSS,
provided you have an ICC profile
corresponding to the combination of
inks, paper, total ink coverage  and equipment
you will use.

<div class="example" id="ex-fogra">
	For example, using offset printing to ISO 12647-2:2004 / Amd 1:2007
	using the FOGRA39 characterization data
	on 115gsm coated paper
	with an ink limit of 300% Total Area Coverage.

	<!--
		$ xicclu -ir Coated_Fogra39L_VIGC_300.icc
0.0 0.7 0.2 0.0

0.000000 0.700000 0.200000 0.000000 [CMYK] -> Lut -> 63.673303 51.576902 5.811058 [Lab]

	-->

	<pre class="lang-css">
		@color-profile --fogra39 {
			src: url('https://example.org/Coated_Fogra39L_VIGC_300.icc');
		}
		.header {
			background-color: <span class="swatch" style="--color: rgb(93.124% 44.098% 57.491%)"></span>  color(--fogra39 0% 70% 20% 0%);
			}
	</pre>

	Here the color() function first states the name we have given the profile,
	then gives the percentage
	of cyan, magenta, yellow, and black.

	In this profile, this resolves to the color
	<span class="swatch" style="--color: rgb(93.124% 44.098% 57.491%)"></span>&nbsp;lab(63.673303% 51.576902 5.811058)
	which is
	<span class="swatch" style="--color: rgb(93.124% 44.098% 57.491%)"></span>&nbsp;rgb(93.124, 44.098% 57.491%).
</div>

Because the actual color resulting from a given CMYK combination is known,
an on-screen visualization of the printed output (soft-proof) can be made.

Also, procedures that rely on knowing the color
(anti-aliasing, compositing, using the color in a gradient, etc)
can proceed as normal.

<figure id="fogra51-roundtrip">
	<!-- See file Macbeth.txt in the workings directory for details. -->
	<img src="images/macbeth-roundtrip.svg" width=670 height=450>
	<figcaption>
		<p>A color checker, used for ensuring color fidelity
		in the print and photographic industries.
		Averaged measured Lab values are available for each patch.
		The rectangles show the Lab values, converted to sRGB.
		The circles, which are barely visible, show the Lab values,
		passed through a FOGRA51 ICC profile to convert them to CMYK.
		The CMYK values are then passed through the same ICC profile in reverse,
		to yield new Lab values. These are then converted to sRGB for display.</p>
		<p>The one patch with a more visible circle (third row, first patch)
		is because the color is slightly outside the gamut of the
		FOGRA51 CMYK space used.</p>
		<p>The table below shows, for each patch, the DeltaE 2000 between the original Lab and the Lab value after round-tripping through CMYK. A DeltaE 2000 of 1 or more is just visible.</p>
		<table class="deltaE">
			<tr>
				<td class="dE0">0.06</td>
				<td class="dE0">0.07</td>
				<td class="dE0">0.03</td>
				<td class="dE0">0.04</td>
				<td class="dE0">0.06</td>
				<td class="dE0">0.17</td>
			</tr>
			<tr>
				<td class="dE0">0.03</td>
				<td class="dE0">0.75</td>
				<td class="dE0">0.05</td>
				<td class="dE0">0.06</td>
				<td class="dE0">0.03</td>
				<td class="dE0">0.02</td>
			</tr>
			<tr>
				<td class="dE2">1.9</td>
				<td class="dE0">0.04</td>
				<td class="dE0">0.06</td>
				<td class="dE0">0.05</td>
				<td class="dE0">0.02</td>
				<td class="dE0">0.05</td>
			</tr>
			<tr>
				<td class="dE0">0.03</td>
				<td class="dE0">0.08</td>
				<td class="dE0">0.03</td>
				<td class="dE0">0.03</td>
				<td class="dE0">0.04</td>
				<td class="dE0">0.80</td>
			</tr>
		</table>
	</figcaption>
</figure>


<div class="example" id="ex-swop5v2">
	This example is using offset printing to ISO 12647-2:2004
	using the CGATS/SWOP TR005 2007 characterization data
	on grade 5 paper
	with an ink limit of 300% Total Area Coverage,
	and medium gray component replacement (GCR).

	<!--
		$ xicclu -ir SWOP2006_Coated5v2.icc
0.0 0.7 0.2 0.0

0.000000 0.700000 0.200000 0.000000 [CMYK] -> Lut -> 64.965217 52.119710 5.406966 [Lab]

	-->

	<pre class="lang-css">
		@color-profile --swop5c {
			src: url('https://example.org/SWOP2006_Coated5v2.icc');
		}
		.header {
			background-color: <span class="swatch" style="--color: rgb(94.903% 45.248%  59.104%)"></span>  color(--swop5c 0% 70% 20% 0%);
		}
	</pre>

	In this profile, this  amount of CMYK
	(the same percentages as the previous example)
	resolves to the color
	<span class="swatch" style="--color: rgb(94.903% 45.248%  59.104%)"></span>&nbsp;lab(64.965217% 52.119710 5.406966)
	which is
	<span class="swatch" style="--color: rgb(94.903% 45.248%  59.104%)"></span>&nbsp;rgb(94.903% 45.248% 59.104%).
</div>

Fallback colors can be specified,
for example using media queries,
to be used
if the specified CMYK color is known
to be outside the sRGB gamut.

<div class="example" id="ex-fogra39-fallback-mq">
	This example uses the same FOGRA39 setup as before,
	but specifies a bright green which is outside the sRGB gamut.
	It is, however, inside the display-p3 gamut.
	Therefore it is displayed as-is on wide gamut screens
	and in print,
	and a less intense fallback color is used on sRGB screens.

	<!--
		$ xicclu -ir Coated_Fogra39L_VIGC_300.icc
0.9 0.0 0.9 0.0

0.900000 0.000000 0.900000 0.000000 [CMYK] -> Lut -> 56.596645 -58.995875 28.072154 [Lab]

	-->

	<pre class="lang-css">
		@media (color-gamut: srgb) {
			.header {
				background-color:  rgb(8.154% 60.9704% 37.184%);
				}
		}
		@media print, (color-gamut: p3){
			.header {
				background-color:  color(--fogra39 90% 0% 90% 0%);
				}
		}
	</pre>

	This example does not use illustrative swatches, because most of the colors are outside of sRGB.

	This CMYK color corresponds to lab(56.596645% -58.995875 28.072154)
	or lch(56.596645% 65.33421077211648 154.5533771086801).
	In sRGB this would be rgb(-60.568% 62.558% 32.390%) which,
	as the large negative red component shows,
	is out of gamut.

	Reducing the chroma until the result is in gamut
	gives lch(56.596645% 51 154.5533771086801)
	which is rgb(8.154% 60.9704% 37.184%)
	and this has been manually specified as a fallback color.

	For wide gamut screens, the color is inside the display-p3 gamut
	(it is display-p3(0.1658 0.6147 0.3533) ).

	<!--
grn=[56.596645, -58.995875, 28.072154 ]
Array(3) [ 56.596645, -58.995875, 28.072154 ]

grn_lch=Lab_to_LCH(grn)
Array(3) [ 56.596645, 65.33421077211648, 154.5533771086801 ]

grn_srgb=LCH_to_sRGB(grn_lch)
Array(3) [ -0.6056873504861735, 0.6255878698501047, 0.3239030534610021 ]

desat_lch=[56.596645, 55, 154.5533771086801 ]
Array(3) [ 56.596645, 55, 154.5533771086801 ]

desat_srgb=LCH_to_sRGB(desat_lch)
Array(3) [ -0.10689290334865434, 0.6143491294294153, 0.3586745333140551 ]

desat_lch=[56.596645, 50, 154.5533771086801 ]
Array(3) [ 56.596645, 50, 154.5533771086801 ]

desat_srgb=LCH_to_sRGB(desat_lch)
Array(3) [ 0.1083935322035526, 0.6085162381979395, 0.3751152317330066 ]

desat_lch=[56.596645, 51, 154.5533771086801 ]
Array(3) [ 56.596645, 51, 154.5533771086801 ]

desat_srgb=LCH_to_sRGB(desat_lch)
Array(3) [ 0.08154856398116136, 0.6097043838635557, 0.37184402014676937 ]

grn_p3=LCH_to_P3(grn_lch)
Array(3) [ 0.16582655785857967, 0.6147848214649991, 0.3532666045888559 ]
	-->
</div>

Colors are not restricted to four inks (CMYK). For example, wide-gamut 7 Color ink sets can be used.

<div class="example" id="ex-fogra55beta-7color">This example uses the beta FOGRA55 dataset for KCMYOGV seven-color printing.
	Four of the inks - black, cyan, magenta, and yellow - are the same as,
	and give the same results as, the FOGRA51 set.
	The other three inks are:
	<ul><li>Pantone Orange 021C</li>
		<li>Pantone Green C</li>
		<li>Pantone Violet C</li>
	</ul>

	The measurement condition is M1,
	which means that optical brighteners in the paper are accounted for
	and the spectrophotometer has no UV-cut filter.

	<!-- see file Macbeth-7color.txt --->

	<pre class="lang-css">
		@color-profile --fogra55beta {
			src: url('https://example.org/2020_13.003_FOGRA55beta_CL_Profile.icc');
		}
		.dark_skin {
			background-color: <span class="swatch" style="--color: rgb(45.8702% 32.0071% 26.3813%)"></span>
			color(--fogra55beta 0.183596 0.464444 0.461729 0.612490 0.156903 0.000000 0.000000);
		}
		.light_skin {
			background-color: <span class="swatch" style="--color: rgb(78.0170% 58.1957% 50.7737%)"></span>
			color(--fogra55beta 0.070804 0.334971 0.321802 0.215606 0.103107 0.000000 0.000000);
		}
		.blue_sky {
			background-color: <span class="swatch" style="--color: rgb(35.8614% 48.0665% 61.6556%)"></span>
			color(--fogra55beta 0.572088 0.229346 0.081708 0.282044 0.000000 0.000000 0.168260);
		}
		.foliage {
			background-color: <span class="swatch" style="--color: rgb(34.9582% 42.3446% 25.4209%)"></span>
			color(--fogra55beta 0.314566 0.145687 0.661941 0.582879 0.000000 0.234362 0.000000);
		}
		.blue_flower {
			background-color: <span class="swatch" style="--color: rgb(51.2952% 50.4131% 68.9186%)"></span>
			color(--fogra55beta 0.375515 0.259934 0.034849 0.107161 0.000000 0.000000 0.308200);
		}
		.bluish_green {
			background-color: <span class="swatch" style="--color: rgb(36.8792% 74.3685% 67.4749%)"></span>
			color(--fogra55beta 0.397575 0.010047 0.223682 0.031140 0.000000 0.317066 0.000000);
		}
		</pre>
</div>

<!--
████████  ████████ ██     ██          ██████  ██     ██ ██    ██ ██    ██
██     ██ ██       ██     ██         ██    ██ ███   ███  ██  ██  ██   ██
██     ██ ██       ██     ██         ██       ████ ████   ████   ██  ██
██     ██ ██████   ██     ██ ███████ ██       ██ ███ ██    ██    █████
██     ██ ██        ██   ██          ██       ██     ██    ██    ██  ██
██     ██ ██         ██ ██           ██    ██ ██     ██    ██    ██   ██
████████  ████████    ███             ██████  ██     ██    ██    ██    ██
-->

<h2 id='device-cmyk'>
Uncalibrated CMYK Colors: the ''device-cmyk()'' function</h2>

	Sometimes, when a given printer has not been calibrated,
	but the output for particular ink combinations is known through experimentation,
	or via a printed sample swatchbook,
	it is useful to express CMYK colors
	in a device-dependent way.

	Note: Because the actual resulting color can be unknown,
	CSS processors might attempt to approximate it.
	This approximation is likely to be visually very far from the actual printed result.

	The ''device-cmyk()'' function allows authors to specify a color in this way:

	<pre class='prod'>
		<dfn>device-cmyk()</dfn> = device-cmyk( <<cmyk-component>>{4} [ / <<alpha-value>> ]? , <<color>>? )
		<dfn>&lt;cmyk-component></dfn> = <<number>> | <<percentage>>
	</pre>

	The arguments of the ''device-cmyk()'' function specify the cyan, magenta, yellow, and black components, in order,
	as a number between 0 and 1 or a percentage between 0% and 100%.
	These two usages are equivalent, and map to each other linearly.
	Values less than 0 or 0%, or greater than 1 or 100%,
	are not invalid;
	instead, they are clamped to 0/0% or 1/100% at computed-value time.

	The fifth argument specifies the alpha channel of the color.
	It's interpreted identically to the fourth argument of the ''rgb()'' function.
	If omitted, it defaults to ''100%''.

	The sixth argument specifies the fallback color,
	used when the user agent doesn't know how to accurately transform the CMYK color to RGB.
	If omitted, it defaults to the CMYK color <a>naively converted to RGBA</a>.

	Typically, print-based applications will actually store the used colors as CMYK,
	and send them to the printer in that form.
	However, such colors do not have a colorimetric interpretation,
	and thus cannot be used in gradients, compositing, blending and so on.

	As such, Device CMYK colors must be converted to an equivalent color.
	This is not trivial, like the conversion from HSL or HWB to RGB;
	the precise conversion depends on the precise characteristics of the output device.

	<ol>
		<li>If the user, author, or user-agent stylesheet
			has an ''@color-profile'' definition for device-cmyk,
			and the resource specified by the src descriptor can be retrieved,
			and the resource is a valid CMYK ICC profile,
			and the user agent can process ICC profiles,
			the computed value of the ''device-cmyk()'' function
			must be the Lab value of the CMYK color.</li>
		<li>Otherwise, if a valid fallback color has been specified,
			the computed value of the ''device-cmyk()'' function
			must be that fallback color.</li>
		<li>Otherwise,
			the computed value of the ''device-cmyk()'' function must be
			the sRGB value of the CMYK color,
			as converted with the following naive conversion algorithm.
		</li>
	</ol>

	<div class='example' id="ex-device-cmyk-naive">
		For example, with no ''@color-profile'' and no fallback specified,
		the following colors are equivalent, using the naive conversion.

		<pre class="lang-css">
			color: <span class="swatch" style="--color: rgb(178 34 34)"></span> device-cmyk(0 81% 81% 30%);
			color: <span class="swatch" style="--color: rgb(178 34 34)"></span> rgb(178 34 34);
			color: <span class="swatch" style="--color: rgb(178 34 34)"></span> firebrick;
		</pre>
	</div>

	<div class='example' id="ex-device-cmyk-colprof">
		With the ''@color-profile'' specified as in the example stylesheet,
		the following colors are equivalent, using colorimetric conversion.

		<pre class="lang-css">
			color: <span class="swatch" style="--color: rgb(70.690% 26.851% 19.724%)"></span> device-cmyk(0 81% 81% 30%);
			color: <span class="swatch" style="--color: rgb(70.690% 26.851% 19.724%)"></span> lab(45.060% 45.477 35.459)
			color: <span class="swatch" style="--color: rgb(70.690% 26.851% 19.724%)"></span> rgb(70.690% 26.851% 19.724%);
		</pre>
	</div>

	The naive conversion is necessarily approximate,
	since it has no knowledge of the colorimetry of the inks,
	the dot gain,
	the colorimetry of the RGB space, and so on.

	<figure>
		<img src="images/macbeth-naive.svg" width=670 height=450>
		<figcaption>
			<p>A color checker, used for ensuring color fidelity
			in the print and photographic industries.
			Averaged measured Lab values are available for each patch.
			The rectangles show the Lab values, converted to sRGB.
			The circles show the Lab values, passed through an ICC profile to convert them to CMYK.
			The CMYK value are then naively converted to sRGB.</p>
			<p>The table below shows, for each patch, the DeltaE 2000 between the original Lab and the Lab value after round-tripping through CMYK. A DeltaE 2000 of 1 or more is just visible, while 5 or more is just a different color altogether.</p>
			<table class="deltaE">
				<tr>
					<td class="dE5">11.33</td>
					<td class="dE5">9.36</td>
					<td class="dE5">5.66</td>
					<td class="dE5">7.52</td>
					<td class="dE5">12.39</td>
					<td class="dE5">21.58</td>
				</tr>
				<tr>
					<td class="dE5">6.40</td>
					<td class="dE5">8.79</td>
					<td class="dE5">11.77</td>
					<td class="dE5">17.16</td>
					<td class="dE5">11.91</td>
					<td class="dE3">3.97</td>
				</tr>
				<tr>
					<td class="dE5">12.1</td>
					<td class="dE5">17.00</td>
					<td class="dE3">3.38</td>
					<td class="dE1">1.94</td>
					<td class="dE5">18.08</td>
					<td class="dE5">14.97</td>
				</tr>
				<tr>
					<td class="dE1">1.89</td>
					<td class="dE5">6.56</td>
					<td class="dE5">7.85</td>
					<td class="dE5">8.76</td>
					<td class="dE5">9.82</td>
					<td class="dE5">10.29</td>
				</tr>
			</table>
		</figcaption>
	</figure>

<h3 id='cmyk-rgb'>
Naively Converting Between Uncalibrated CMYK and sRGB-Based Colors</h3>

	To <dfn export lt="naively convert from CMYK to RGBA | naively converted to RGBA">naively convert from CMYK to RGBA</dfn>:

	<ul class="lang-javascript">
		<li><code>red   = 1 - min(1, cyan * (1 - black) + black)</code>
		<li><code>green = 1 - min(1, magenta * (1 - black) + black)</code>
		<li><code>blue  = 1 - min(1, yellow  * (1 - black) + black)</code>
		<li>Alpha is same as for input color.
	</ul>

	<!-- nice, but when is RGBA to naive CMYK conversion actually triggered? -->

	To <dfn export lt="naively convert from RGBA to CMYK | naively converted to CMYK">naively convert from RGBA to CMYK</dfn>:

	<ul class="lang-javascript">
		<li><code>black   = 1 - max(red, green, blue)</code>
		<li><code>cyan = (1 - red - black)   / (1 - black), or 0 if black is 1</code>
		<li><code>magenta = (1 - green - black) / (1 - black), or 0 if black is 1</code>
		<li><code>yellow  = (1 - blue - black)  / (1 - black), or 0 if black is 1</code>
		<li>alpha is the same as the input color
		<li>fallback color must be set to the input color
	</ul>

<!--
 ███████  ████████     ███     ██████  ████ ████████ ██    ██
██     ██ ██     ██   ██ ██   ██    ██  ██     ██     ██  ██
██     ██ ██     ██  ██   ██  ██        ██     ██      ████
██     ██ ████████  ██     ██ ██        ██     ██       ██
██     ██ ██        █████████ ██        ██     ██       ██
██     ██ ██        ██     ██ ██    ██  ██     ██       ██
 ███████  ██        ██     ██  ██████  ████    ██       ██
-->

<h2 id="transparency">
Transparency: the 'opacity' property</h2>

	Opacity can be thought of as a postprocessing operation.
	Conceptually, after the element (including its descendants) is rendered into an RGBA offscreen image,
	the opacity setting specifies how to blend the offscreen rendering into
	the current composite rendering.
	See <a href="#alpha">simple alpha compositing</a> for details.

	<pre class=propdef>
	Name: opacity
	Value: <<alpha-value>>
	Initial: 1
	Applies to: all elements
	Inherited: no
	Percentages: map to the range [0,1]
	Computed value: specified number, clamped to the range [0,1]
	Animation type: by computed value type
	</pre>

	<wpt>
		opacity-overlapping-letters.html
		parsing/opacity-computed.html
		parsing/opacity-valid.html
		parsing/opacity-invalid.html
	</wpt>

	<dl>
		<dt><<alpha-value>>
		<dd>
			The opacity to be applied to the element.
			It is interpreted identically to its definition in ''rgb()'',
			except that the resulting opacity is applied to the entire element,
			rather than a particular color.
	</dl>

	The 'opacity' property applies the specified opacity to the element <em>as a whole</em>,
	including its contents,
	rather than applying it to each descendant individually.
	This means that, for example,
	an opaque child occluding part of the element's background will continue to do so even when 'opacity' is less than 1,
	but the element and child as a whole will show the underlying page through themselves.

	<!-- needs a code example and rendered result for those two cases -->

	It also means that the glyphs
	corresponding to all characters in the element
	are treated <em>as a whole</em>;
	any overlapping portions do not increase the opacity.

	<figure id="arabic-opacity-rendering">
		<img src="images/joining-and-transparency.svg" width=713 height=156
		alt="overlapping glyphs rendered correctly, and incorrectly">
		<figcaption>
			Correct and incorrect rendering of text
			with an 'opacity' value of less than one,
			whose glyphs overlap.
		</figcaption>
	</figure>

	If separate opacity for each glyph is desired,
	it can be achieved by using a color value
	which includes opacity,
	rather than setting the 'opacity' property.

	If a box has 'opacity' less than 1,
	it forms a <a>stacking context</a> for its children.
	(This prevents its contents from interleaving in the z-axis
	with content outside it.)

	Furthermore, if the 'z-index' property applies to the box,
	the ''z-index/auto'' value is treated as ''0'' for the element;
	it is otherwise painted on the same layer within its parent stacking context
	as positioned elements with stack level 0
	(as if it were a positioned element with ''z-index:0'').

	See <a href="https://www.w3.org/TR/CSS21/visuren.html#layers">section 9.9</a>
	and <a href="https://www.w3.org/TR/CSS21/zindex.html">Appendix E</a> of [[!CSS2]]
	for more information on stacking contexts.

	These rules about z-order do not apply to SVG elements,
	since SVG has its own <a href="https://www.w3.org/TR/SVG11/render.html">rendering model</a> ([[!SVG11]], Chapter 3).

<!--
 ██████  ████ ██     ██ ████████           ███    ██       ████████  ██     ██    ███
██    ██  ██  ███   ███ ██     ██         ██ ██   ██       ██     ██ ██     ██   ██ ██
██        ██  ████ ████ ██     ██        ██   ██  ██       ██     ██ ██     ██  ██   ██
 ██████   ██  ██ ███ ██ ████████        ██     ██ ██       ████████  █████████ ██     ██
      ██  ██  ██     ██ ██              █████████ ██       ██        ██     ██ █████████
██    ██  ██  ██     ██ ██              ██     ██ ██       ██        ██     ██ ██     ██
 ██████  ████ ██     ██ ██              ██     ██ ████████ ██        ██     ██ ██     ██
-->

<h3 id="alpha">
Simple alpha compositing</h3>

	When drawing, implementations must handle alpha
	according to the rules in <a href="https://www.w3.org/TR/compositing-1/#simplealphacompositing">Section 5.1 Simple alpha compositing</a> of [[!Compositing]].

<!--
████ ██    ██ ████████ ████████ ████████  ████████   ███████  ██          ███    ████████ ████████
 ██  ███   ██    ██    ██       ██     ██ ██     ██ ██     ██ ██         ██ ██      ██    ██
 ██  ████  ██    ██    ██       ██     ██ ██     ██ ██     ██ ██        ██   ██     ██    ██
 ██  ██ ██ ██    ██    ██████   ████████  ████████  ██     ██ ██       ██     ██    ██    ██████
 ██  ██  ████    ██    ██       ██   ██   ██        ██     ██ ██       █████████    ██    ██
 ██  ██   ███    ██    ██       ██    ██  ██        ██     ██ ██       ██     ██    ██    ██
████ ██    ██    ██    ████████ ██     ██ ██         ███████  ████████ ██     ██    ██    ████████
-->

<h2 id="interpolation">
Interpolation</h2>

	Color interpolation happens with
	gradients,
	compositing,
	filters,
	transitions,
	animations, and
	color mixing and color modification functions.

	In general, interpolation between <<color>> values
	occurs by linearly interpolating each component of the computed value of the color
	separately, in a given color space which will be referred to as the 'interpolation space' below.

<!--

	Historically the existing specifications used interpolation in gamma-encoded sRGB.
	This gave poor results, and was sRGB-only.
	This specification improves the situation by

	- using a perceptually uniform interpolation space by default
	- enabling interpolation between any color
	  (which has a colorimetric interpretation, which is all of them except for device-cmyk and even then, only in corner cases)
	- allowing individual specifications to override this
	  (for example compositing should be in linear-light XYZ)
	  (for example, clor-mix defaults to LCH but allows other spaced to be explicitly specified)
	- maintaining Web compat with special-case where all the colors to be interpolated use legacy sRGB
	- providing an opt-in for sRGB colors

	The legacy specifications will over time be updated to add support for non-sRGB colors

	This is all in a comment because we don't make promises about future specifications

	But rest assured, they are all being targeted.

-->

	Interpolating to or from ''<color>/currentcolor'' is possible.
	The numerical value used for this purpose is the used value.

	ISSUE: Computed value needs to be able to represent
	combinations of ''currentColor'' and an actual color.
	Consider the value of 'text-emphasis-color' in
	<code>div { text-emphasis: circle; transition: all 2s; }<br>
	div:hover { text-emphasis-color: lime; }<br>
	em { color: red; }</code>
	See <a href="https://github.com/w3c/csswg-drafts/issues/445">Issue 445</a>.

<h3 id="interpolation-space">
Color space for interpolation</h3>
	Different color spaces may be more appropriate for each interpolation use case.
	For example,
	the perceptually uniform Lab works well for avoiding bunching up in gradients,
	and the chroma-preserving LCH works well for avoiding greying out in color mixing,
	while the linear-light XYZ is best for compositing
	and gamma-encoded sRGB, which is neither linear light nor perceptually uniform,
	will give overly dark mixes but is compatible with older Web content.

	Various features in CSS depend on interpolating colors.

	<div class="example" id="ex-host-syntax">
	Examples include:

		* <<gradient>>
		* 'filter'
		* 'animation'
		* 'transition'
		* [[color-mix()]]
	</div>

	These features are collectively termed the<dfn>host syntax</dfn>.
	The host syntax should define
	what the default interpolation space should be for each case,
	and optionally provide syntax for authors to override this default.

	If the host syntax does not define what color space
	interpolation should take place in,
	it defaults to Lab.

	However, user agents will handle interpolation
	between legacy sRGB color formats
	(hex colors, named colors,
	''rgb()'', ''hsl()'' or ''hwb()''
	and the equivalent alpha-including forms)
	in gamma-encoded sRGB space.
	This provides Web compatibility; legacy sRGB content interpolates in the sRGB space by default.

	This also means that authors can choose to opt-in to Lab interpolation
	by using the non-legacy ''color(srgb r g b)'' form.

	If the colors to be interpolated are outside the gamut
	of the interpolation space,
	then once converted to that space,
	they will contain out of range values.

	These are not clipped, but the values are interpolated as-is.



<h3 id="interpolation-alpha">
Interpolating with alpha</h3>

	When the colors to be interpolated are not fully opaque,
	they are transformed into <dfn export>premultiplied color values</dfn>
	as follows:

	  *  For [=rectangular orthogonal color=] coordinate systems,
		 all component values are multiplied by the alpha value
	  *  For [=cylindrical polar color=] coordinate systems,
		 the hue angle is not premultiplied,
		 but the other two axes are premultiplied.

	To obtain a color value from a premultipled color value,
	each component which had been premultiplied
	is divided by the interpolated alpha value.

	<div class="example" id="ex-premultiplied-srgb">
		For example, to interpolate, in the sRGB color space, the two sRGB colors
		<span class="swatch" style="--color: rgb(24%, 12%, 98%, 0.4)"></span> rgb(24% 12% 98% / 0.4)
		and
		<span class="swatch" style="--color: rgb(62% 26% 64% / 0.6)"></span> rgb(62% 26% 64% / 0.6)
		they would first be converted to premultiplied form
		[9.6% 4.8% 39.2% ]
		and
		[37.2% 15.6% 38.4%]
		before interpolation.

		The midpoint of linearly interpolating these colors
		would be [23.4% 10.2% 38.8%]
		which, with an alpha value of 0.5,
		is <span class="swatch" style="--color: rgb(46.8%, 21.4%, 77.6%, 0.5)"></span> rgb(46.8% 20.4% 77.6% / 0.5)
		when premultiplication is undone.
	</div>

	<div class="example" id="ex-premultiplied-lab">
		To interpolate, in the Lab color space, the two colors
		<span class="swatch" style="--color: rgb(76%, 62%, 03%, 0.4)"></span> rgb(76% 62% 03% / 0.4)
		and
		<span class="swatch" style="--color: rgb(91.56%, 3.87%, 74.09%, 0.6)"></span> color(display-p3 0.84 0.19 0.72 / 0.6)
		they are first converted to lab
		<span class="swatch" style="--color: rgb(76%, 62%, 03%, 0.4)"></span> lab(66.927% 4.873 68.622 / 0.4)
		<span class="swatch" style="--color: rgb(91.56%, 3.87%, 74.09%, 0.6)"></span> lab(53.503% 82.672 -33.901 / 0.6)
		then the L, a and b coordinates are premultiplied before interpolation
		[26.771% 1.949 27.449]
		and
		[32.102% 49.603 -20.341].

		The midpoint of linearly interpolating these would be
		[29.4365% 25.776 3.554]
		which, with an alpha value of 0.5,
		is <span class="swatch" style="--color: rgb(87.604%, 38.956%, 51.753%, 0.5)"></span> lab(58.873% 51.552 7.108) / 0.5)
		when premultiplication is undone.
	</div>

	<div class="example" id="ex-premultiplied-lch">
		To interpolate, in the chroma-preserving LCH color space, the same two colors
		<span class="swatch" style="--color: rgb(76%, 62%, 03%, 0.4)"></span> rgb(76% 62% 03% / 0.4)
		and
		<span class="swatch" style="--color: rgb(91.56%, 3.87%, 74.09%, 0.6)"></span> color(display-p3 0.84 0.19 0.72 / 0.6)
		they are first converted to LCH
		<span class="swatch" style="--color: rgb(76%, 62%, 03%, 0.4)"></span> lch(66.93% 68.79 85.94 / 0.4)
		<span class="swatch" style="--color: rgb(91.56%, 3.87%, 74.09%, 0.6)"></span> lch(53.5% 89.35 337.7 / 0.6)
		then the L and C coordinates (but not H) are premultiplied before interpolation
		[26.771% 27.516 85.94]
		and
		[32.102% 53.61 337.7].

		The midpoint of linearly interpolating these,
		along the ''shorter'' hue arc (the default) would be
		[29.4365% 40.563 31.82]
		which, with an alpha value of 0.5,
		is <span class="swatch" style="--color: rgb(83.918% 44.583% 0% / 0.5)"></span>  lch(58.873% 81.126 63.64) / 0.5)
		when premultiplication is undone.

	</div>

	Issue(445):

<h3 id="hue-interpolation">
Hue interpolation</h3>

	For color functions with a hue angle (LCH, HSL, HWB etc), there are multiple ways to interpolate.
	We typically want to avoid arcs over 360 for the difference between the angles, as they are rarely desirable,
	so in most cases angles are fixed up prior to interpolation so that per-component interpolation is done over less than 360 degrees, often less than 180.

	Host syntax can specify any of the following algorithms for hue interpolation
	(angles in the following are in degrees, but the logic is the same regardless of how they are specified).

	Unless the type of hue interpolation is ''specified'', both angles need to be constrained to [0, 360) prior to interpolation.
	One way to do this is <code><i>θ</i> = ((<i>θ</i> % 360) + 360) % 360</code>.

	Unless otherwise specified, if no specific hue interpolation algorithm is selected by the host syntax, the default is ''shorter''.

	If one of the angles has the value NaN,
	then for interpolation, NaN is replaced
	by the value of the other hue angle.
	If both angles have the value NaN,
	then for interpolation, NaN is replaced
	by the value 0 for both angles.

	<h4 id="hue-shorter"><dfn export>shorter</dfn></h4>

	Angles are adjusted so that |θ₂ - θ₁| ∈ [-180, 180]. In pseudo-Javascript:
		<pre>
		if (θ₂ - θ₁ > 180) {
			θ₁ += 360;
		}
		else if (θ₂ - θ₁ < -180) {
			θ₂ += 360;
		}
		</pre>

	<h4 id="hue-longer"><dfn export>longer</dfn></h4>

	Angles are adjusted so that |θ₂ - θ₁| ∈ {0, [180, 360)}. In pseudo-Javascript:
		<pre>
		if (0 < θ₂ - θ₁ < 180) {
			θ₁ += 360;
		}
		else if (-180 < θ₂ - θ₁ < 0) {
			θ₂ += 360;
		}
		</pre>

	<h4 id="hue-increasing"><dfn export>increasing</dfn></h4>

	Angles are adjusted so that |θ₂ - θ₁| ∈ [0, 360). In pseudo-Javascript:
		<pre>
		if (θ₂ < θ₁) {
			θ₂ += 360;
		}
		</pre>

	<h4 id="hue-decreasing"><dfn export>decreasing</dfn></h4>

	Angles are adjusted so that |θ₂ - θ₁| ∈ (-360, 0]. In pseudo-Javascript:
		<pre>
		if (θ₁ < θ₂) {
			θ₁ += 360;
		}
		</pre>

	<h4 id="hue-specified"><dfn export>specified</dfn></h4>

	No fixup is performed. Angles are interpolated in the same way as every other component.


	Issue(4928):


	Issue(5277):

<!--
 ██████  ████████ ██    ██ ██       ████████       ████████  ██     ██ ██       ████████  ██████
██    ██    ██     ██  ██  ██       ██             ██     ██ ██     ██ ██       ██       ██    ██
██          ██      ████   ██       ██             ██     ██ ██     ██ ██       ██       ██
 ██████     ██       ██    ██       ██████         ████████  ██     ██ ██       ██████    ██████
      ██    ██       ██    ██       ██             ██   ██   ██     ██ ██       ██             ██
██    ██    ██       ██    ██       ██             ██    ██  ██     ██ ██       ██       ██    ██
 ██████     ██       ██    ████████ ████████       ██     ██  ███████  ████████ ████████  ██████
-->

<h2 id="sample">
Default Style Rules</h2>

	The following stylesheet is informative, not normative.  This style sheet could be used by an implementation as part of its default styling of HTML4, HTML5, XHTML1, XHTML1.1, XHTML Basic, and other XHTML Family documents.

	<pre class="lang-css">
	/* traditional desktop user agent colors for hyperlinks */
	:link { color: LinkText; }
	:visited { color: VisitedText; }
	:active { color: ActiveText; }

	/* a reasonable, conservative default for device-cmyk */
	@color-profile device-cmyk {
		src: url('https://drafts.csswg.org/css-color-4/ICCprofiles/Coated_Fogra39L_VIGC_300.icc');
	}
	</pre>

<!--
 ██████   ███████  ████████  ████████
██    ██ ██     ██ ██     ██ ██
██       ██     ██ ██     ██ ██
██       ██     ██ ██     ██ ██████
██       ██     ██ ██     ██ ██
██    ██ ██     ██ ██     ██ ██
 ██████   ███████  ████████  ████████
-->

<h2 id="color-conversion-code">Sample code for color conversions</h2>

<em>This section is not normative.</em>

For clarity, a library is used for matrix multiplication.

<pre class="include-code lang-javascript">
path: conversions.js
highlight: js
</pre>

<!--
████████  ████████ ██       ████████    ███    ████████
██     ██ ██       ██          ██      ██ ██   ██
██     ██ ██       ██          ██     ██   ██  ██
██     ██ ██████   ██          ██    ██     ██ ██████
██     ██ ██       ██          ██    █████████ ██
██     ██ ██       ██          ██    ██     ██ ██
████████  ████████ ████████    ██    ██     ██ ████████
-->

<h2 id="color-difference-code">Sample code for ΔE2000 color difference</h2>

<em>This section is not normative.</em>

<p>
	The simplest color difference metric, ΔE76,
	is simply the Euclidean distance in Lab color space.
	While this is a good first approximation,
	color-critical industries such as printing and fabric dyeing
	soon developed improved formulae.
	Currently, the most widely used formula
	is ΔE2000.
	It corrects a number of known asymmetries and non-linearities
	compared to ΔE76.
	Because the formula is complex,
	and critically dependent on the sign
	of various intermediate calculations,
	implementations are often incorrect [[Sharma]].
</p>

<p>
	The sample code below has been
	<a href="https://colorjs.io/tests/delta.html#deltae-2000">validated</a>
	to five significant figures
	against the test suite of paired Lab values and expected ΔE2000
	published by [[Sharma]] and is correct.
</p>

<pre class="include-code lang-javascript">
path: deltaE2000.js
highlight: js
</pre>

<!--
████████  ████████ ████████  ████████  ████████  ██████     ███    ████████ ████████ ████████
██     ██ ██       ██     ██ ██     ██ ██       ██    ██   ██ ██      ██    ██       ██     ██
██     ██ ██       ██     ██ ██     ██ ██       ██        ██   ██     ██    ██       ██     ██
██     ██ ██████   ████████  ████████  ██████   ██       ██     ██    ██    ██████   ██     ██
██     ██ ██       ██        ██   ██   ██       ██       █████████    ██    ██       ██     ██
██     ██ ██       ██        ██    ██  ██       ██    ██ ██     ██    ██    ██       ██     ██
████████  ████████ ██        ██     ██ ████████  ██████  ██     ██    ██    ████████ ████████
-->

<h2 id="deprecated-system-colors" class="no-num">
Appendix A: Deprecated CSS System Colors</h2>

	Earlier versions of CSS defined several additional [=system colors=].
	These color keywords have been <strong>deprecated</strong>, however,
	as they are insufficient for their original purpose
	(making website elements look like their native OS counterparts),
	represent a security risk
	by making it easier for a webpage to “spoof” a native OS dialog,
	and increase fingerprinting surface, compromising user privacy.

	User agents must support these keywords,
	and to mitigate fingerprinting
	must map them to the (undeprecated) [=system colors=]
	as listed below.
	<strong>Authors must not use these keywords.</strong>

	The deprecated system colors are represented
	as the <dfn export><<deprecated-colors>></dfn> sub-type,
	and are defined as:

	<dl noexport>
		<dt><dfn>ActiveBorder</dfn>
		<dd>Active window border. Same as ''ButtonBorder''.

		<dt><dfn>ActiveCaption</dfn>
		<dd>Active window caption. Same as ''CanvasText''.

		<dt><dfn>AppWorkspace</dfn>
		<dd>Background color of multiple document interface. Same as ''Canvas''.

		<dt><dfn>Background</dfn>
		<dd>Desktop background. Same as ''Canvas''.

		<dt><dfn>ButtonHighlight</dfn>
		<dd>The color of the border facing the light source for 3-D elements
		that appear 3-D due to one layer of surrounding border. Same as ''ButtonFace''.

		<dt><dfn>ButtonShadow</dfn>
		<dd>The color of the border away from the light source for 3-D elements
		that appear 3-D due to one layer of surrounding border. Same as ''ButtonFace''.

		<dt><dfn>CaptionText</dfn>
		<dd>Text in caption, size box, and scrollbar arrow box. Same as ''CanvasText''.

		<dt><dfn>InactiveBorder</dfn>
		<dd>Inactive window border. Same as ''ButtonBorder''.

		<dt><dfn>InactiveCaption</dfn>
		<dd>Inactive window caption. Same as ''Canvas''.

		<dt><dfn>InactiveCaptionText</dfn>
		<dd>Color of text in an inactive caption. Same as ''GrayText''.

		<dt><dfn>InfoBackground</dfn>
		<dd>Background color for tooltip controls. Same as ''Canvas''.

		<dt><dfn>InfoText</dfn>
		<dd>Text color for tooltip controls. Same as ''CanvasText''.

		<dt><dfn>Menu</dfn>
		<dd>Menu background. Same as ''Canvas''.

		<dt><dfn>MenuText</dfn>
		<dd>Text in menus. Same as ''CanvasText''.

		<dt><dfn>Scrollbar</dfn>
		<dd>Scroll bar gray area. Same as ''Canvas''.

		<dt><dfn>ThreeDDarkShadow</dfn>
		<dd>The color of the darker (generally outer) of the two borders away
		from the light source for 3-D elements that appear 3-D due to two
		concentric layers of surrounding border. Same as ''ButtonBorder''.

		<dt><dfn>ThreeDFace</dfn>
		<dd>The face background color for 3-D elements that appear 3-D due to
		two concentric layers of surrounding border. Same as ''ButtonFace''.

		<dt><dfn>ThreeDHighlight</dfn>
		<dd>The color of the lighter (generally outer) of the two borders facing
		the light source for 3-D elements that appear 3-D due to two
		concentric layers of surrounding border. Same as ''ButtonBorder''.

		<dt><dfn>ThreeDLightShadow</dfn>
		<dd>The color of the darker (generally inner) of the two borders facing
		the light source for 3-D elements that appear 3-D due to two
		concentric layers of surrounding border. Same as ''ButtonBorder''.

		<dt><dfn>ThreeDShadow</dfn>
		<dd>The color of the lighter (generally inner) of the two borders away
		from the light source for 3-D elements that appear 3-D due to two
		concentric layers of surrounding border. Same as ''ButtonBorder''.

		<dt><dfn>Window</dfn>
		<dd>Window background. Same as ''Canvas''.

		<dt><dfn>WindowFrame</dfn>
		<dd>Window frame. Same as ''ButtonBorder''.

		<dt><dfn>WindowText</dfn>
		<dd>Text in windows. Same as ''CanvasText''.
	</dl>


<h2 id="acknowledgments" class="no-num no-ref">
Acknowledgments</h2>

Thanks for the feedback from Emilio Cobos Álvarez, Marc Attinasi, Chris Bai, Amelia Bellamy-Royds, Lars Borg, Mike Bremford, Bert Bos, Andreu Botella, Dan Burzo, Joe Clark, Max Derhak, fantasai, Simon Fraser, Patrick Garies, Tony Graham, Ian Hickson, Phil Green, Dean Jackson, Andreas Kraushaar, Pierre-Anthony Lemieux, Susan Lesch, Alex LeDonne, Cameron McCormack, Krzysztof Maczy&#x0144;ski, Chris Moschini, Chris Murphy, Jonathan Neal, Chris Needham, Christoph P&auml;per, Steven Pemberton, David Perrell, Brad Pettit, Jacob Refstrup, Craig Revie, Melanie Richards, Florian Rivoal, Joseph Salowey, Simon Sapin, Dave Singer, Igor Snitkin, Jonathan Stanley, Andrew Thompson, Lea Verou, Mark Watson, Russ Weakley, Natalie Weizenbaum, Etan Wexler, David Woolley, Boris Zbarsky, Steve Zilles, the XSL FO subgroup of the XSL working group, the <a href="https://www.w3.org/community/colorweb/">Color on the Web community group</a> and all the rest of the <a href="http://lists.w3.org/Archives/Public/www-style/">www-style</a> community.

<wpt hidden title="CSS Color 3 tests, not relevant for this level">
background-color-hsl-001.html
background-color-hsl-002.html
background-color-hsl-003.html
background-color-hsl-004.html
background-color-rgb-001.html
background-color-rgb-002.html
background-color-rgb-003.html
border-bottom-color.xht
border-left-color.xht
border-right-color.xht
border-top-color.xht
composited-filters-under-opacity.html
t31-color-currentColor-b.xht
t31-color-text-a.xht
t32-opacity-basic-0.0-a.xht
t32-opacity-basic-0.6-a.xht
t32-opacity-basic-1.0-a.xht
t32-opacity-clamping-0.0-b.xht
t32-opacity-clamping-1.0-b.xht
t32-opacity-offscreen-b.xht
t32-opacity-offscreen-multiple-boxes-1-c.xht
t32-opacity-offscreen-multiple-boxes-2-c.xht
t32-opacity-offscreen-with-alpha-c.xht
t32-opacity-zorder-c.xht
t41-html4-keywords-a.xht
t421-rgb-clip-outside-gamut-b.xht
t421-rgb-func-int-a.xht
t421-rgb-func-no-mixed-f.xht
t421-rgb-func-pct-a.xht
t421-rgb-func-whitespace-b.xht
t421-rgb-hex-parsing-f.xht
t421-rgb-hex3-a.xht
t421-rgb-hex3-expand-b.xht
t421-rgb-hex6-a.xht
t421-rgb-values-meaning-b.xht
t422-rgba-a0.0-a.xht
t422-rgba-a0.6-a.xht
t422-rgba-a1.0-a.xht
t422-rgba-clamping-a0.0-b.xht
t422-rgba-clamping-a1.0-b.xht
t422-rgba-clip-outside-device-gamut-b.xht
t422-rgba-func-int-a.xht
t422-rgba-func-no-mixed-f.xht
t422-rgba-func-pct-a.xht
t422-rgba-func-whitespace-b.xht
t422-rgba-onscreen-b.xht
t422-rgba-onscreen-multiple-boxes-c.xht
t422-rgba-values-meaning-b.xht
t423-transparent-1-a.xht
t423-transparent-2-a.xht
t424-hsl-basic-a.xht
t424-hsl-clip-outside-gamut-b.xht
t424-hsl-h-rotating-b.xht
t424-hsl-parsing-f.xht
t424-hsl-values-b-1.html
t424-hsl-values-b-10.html
t424-hsl-values-b-11.html
t424-hsl-values-b-12.html
t424-hsl-values-b-13.html
t424-hsl-values-b-14.html
t424-hsl-values-b-15.html
t424-hsl-values-b-2.html
t424-hsl-values-b-3.html
t424-hsl-values-b-4.html
t424-hsl-values-b-5.html
t424-hsl-values-b-6.html
t424-hsl-values-b-7.html
t424-hsl-values-b-8.html
t424-hsl-values-b-9.html
t425-hsla-basic-a.xht
t425-hsla-clip-outside-device-gamut-b.xht
t425-hsla-h-rotating-b.xht
t425-hsla-onscreen-b.xht
t425-hsla-onscreen-multiple-boxes-c.xht
t425-hsla-parsing-f.xht
t425-hsla-values-b.xht
t43-svg-keywords-a.xht
t44-currentcolor-background-b.xht
t44-currentcolor-border-b.xht
t44-currentcolor-inherited-c.xht
animation/color-composition.html
animation/color-interpolation.html
animation/opacity-interpolation.html
color-initial-canvastext.html
color-mix-basic-001.tentative.html
parsing/color-computed.html
parsing/color-invalid.html
parsing/color-valid.html
</wpt>

<!--
 ██████  ██     ██    ███    ██    ██  ██████   ████████  ██████
██    ██ ██     ██   ██ ██   ███   ██ ██    ██  ██       ██    ██
██       ██     ██  ██   ██  ████  ██ ██        ██       ██
██       █████████ ██     ██ ██ ██ ██ ██   ████ ██████    ██████
██       ██     ██ █████████ ██  ████ ██    ██  ██             ██
██    ██ ██     ██ ██     ██ ██   ███ ██    ██  ██       ██    ██
 ██████  ██     ██ ██     ██ ██    ██  ██████   ████████  ██████
-->

<h2 id='changes' class='no-num'>
Changes</h2>

<h3 id="changes-from-20210601" class="no-num">Changes since the
	<a href="https://www.w3.org/TR/2021/WD-css-color-4-20210601/">Working Draft of 1 June 2021</a>
</h3>

<ul>
	<li>Defined the term host syntax</li>
	<li>Added a new pair of system colors</li>
	<li>Replaced table of HSL values with error-free version</li>
	<!-- to 9 July 2021 -->
	<li>Added Lea Verou as co-editor by WG resolution</li>
	<li>Clarified that hue angle is unbounded</li>
	<li>MarkText example corrected</li>
	<li>Minor typos corrected</li>
</ul>

<h3 id="changes-from-20201112" class="no-num">Changes since the
	<a href="https://www.w3.org/TR/2020/WD-css-color-4-20201112/">Working Draft of 12 November 2020</a>
</h3>

<ul>
	<li>Noted indeterminate hue ssue on near-neutral Lab values converted to LCH</li>
	<li>Clarified which steps are linear combinations in RGB Lab interconversion</li>
	<!-- to 20 May 2021 -->
	<li>Added components descriptor to @color-profile, for use in CSS Color 5</li>
	<li>All predefined RGB colorspaces are defined over the extended range</li>
	<li>Clarified that there is no gamut mapping or gamut clipping step prior to color interpolation</li>
	<li>Clarified interpolation of legacy sRGB syntaxes</li>
	<li>Removed the lab option from ''color()''</li>
	<li>List steps to interconvert between predefined color spaces</li>
	<li>Consistent use of the term color space (two words)</li>
	<li>Provided more guidance on selecting color space for mixing </li>
	<li>Recalculated an example to increase precision</li>
	<li>Added hue interpolation example</li>
	<li>Simplified ''color()'' syntax by removing the fallback options</li>
	<li>Clarified the types of ICC profile that may be linked from @color-profile</li>
	<li>Support for the rare ICC Named Colors was removed</li>
	<li>Improved precsion of standard whitepoint chromaticities</li>
	<li>Removed a trademark from description of one predefined color space</li>
	<li>Rephrased interpolation to be more generic wrt to interpolation space</li>
	<li>Corrected Accessibility Considerations section</li>
	<li>Clarified that the color space argument for ''color()'' is mandatory, even for sRGB</li>
	<li>Clarified that currentColor is not restricted to sRGB</li>
	<!-- to 3 Feb 2021 -->
	<li>Small correction to the sRGB to XYZ to sRGB matrices, improve round-tripping</li>
	<li>Clarified the rec2020 transfer function, citing the correct ITU Rec BT.2020-2 reference</li>
	<li>Correct fallback examples to use the correct syntax</li>
	<li>Don't force non-legacy colors to interpolate in a gamma-encoded space</li>

	<!-- Changes for Interpolation section, moved from Color 5 -->
	<li>Define premultiplied alpha interpolation</li>
	<li>Start to address interpolation to and from currentColor</li>
	<li>Define hue interpolation with NaN</li>
	<li>Generalize color interpolation</li>
	<li>Define interpolation to be in Lab, with override to LCG</li>
	<li>Corrections to hue interpolation</li>
	<li>Defined hue angle interpolation</li>
	<li>Added interpolation section</li>

	<!-- to 25 Jan 2021-->
	<li>Corrected syntax in some examples</li>
	<li>Clarify exactly which components are allowed percentages, in ''color()''</li>
	<li>Change to serialize ''lch()'' as itself rather than as ''lab()''</li>
	<li>Minimum 10 bits per component precision for non-legacy sRGB in ''color()''</li>
	<li>color space no longer optional in ''color()'' </li>
	<li>Consistent minimum precision between lab() and color(lab)</li>

	<!-- to 18 Jan 2021 -->
	<li>Clarified fallback procedure for the color() function – first valid in-gamut color, else first valid color which is then gamut mapped, else transparent black</li>
	<li>Clarified difference between opacity property and colors with opacity, notably for rendering overlapping text glyphs</li>
	<li>Added sample (but verified correct) code for ΔE2000</li>
	<li>Added definition of previously-undefined term chromaticity, with examples; define chromaticity diagram.</li>
	<li>Added explanation of color additivity, with examples</li>
	<li>Added source links to WPT tests</li>
	<li>Export definition of color, and valid color, for other specifications to reference</li>
	<li>Define minimum number of bits per component, for serialization</li>
	<li>Updated "applies to" definitions (CSS-wide change)</li>
	<li>Added image state (display referred or scene referred) for predefined color spaces</li>
	<li>Listed white point correlated color temperature (e.g. D65) alongside chromaticity coordinates, for clarity</li>
	<li>Clarified that rounding is towards +∞</li>
	<li>Correction of typos, markup corrections, link fixes</li>
</ul>

<h3 id="changes-from-20191105" class="no-num">Changes since
<a href="https://www.w3.org/TR/2019/WD-css-color-4-20191105/">Working Draft of
5 November 2019</a></h3>

<ul>
	<!-- changes to Nov 3	-->
	<li>Export some terms for use in other specifications</li>
	<li>Update requirement from WCAG 2.0 to 2.1</li>
	<li>Fully specify Unicode characters used for serialization</li>
	<li>Define serialization of special named colors</li>
	<li>Define serialization of ''device-cmyk()''</li>
	<li>Define serialization of ''color()''</li>
	<li>Fully define RGB serialization, in maximally web-compatible way</li>
	<li>Define serialization of Lab and LCH</li>
	<li>Fully define serialization of alpha values</li>
	<li>Consistency pass to avoid accidental RFC2119</li>
	<li>Add IDs to all the examples, to enable referencing</li>
	<li>Separate resolved color and serialized color sections</li>
	<li>(Security) ICC profiles have no executable code</li>
	<li>Define what out-of-range means for profiled colors</li>
	<li>Clarify out-of-range clamping</li>
	<li>Add examples of specified values</li>
	<li>Clarify computed values</li>
	<li>Resist fingerprinting, with mandatory mappings for deprecated system colors</li>
	<!-- changes to Oct 21 -->
	<li>Added explanatory note on history and reason for standardizing X11 colors</li>
	<li>Correct hwb sample code</li>
	<li>Add table of DeltaE2000 values for MacBeth patches</li>
	<li>Add note on ICC profile Internet Media type</li>
	<li>Add reference to PNG sRGB chunk</li>
	<li>Clarify CMYK to Lab interconversion</li>
	<li>Clarify RGB to Lab interconversion</li>
	<li>More comparison of HSL vs. LCH</li>
	<li>More description for Rec BT.2020 color space</li>
	<li>Updated description of prophoto-rgb</li>
	<li>Removed duplicate "keywords" from Value Definitions section </li>
	<li>Added an example of an invalid color</li>
	<li>Added example with multiple fallbacks</li>
	<li>Assorted typos and markup fixes</li>
	<li>Clarify handling for undeclared custom color spaces</li>
	<li>Clarify some examples and explanatory notes</li>
	<li>Handling for valid and invalid ICC profiles</li>
	<li>Define handling for images with explicit tagged color space</li>
	<li>Define color space for 4k, SDR video</li>
	<li>State that user contrast settings mst take precedence</li>
	<li>Clarify meaning of system colors outside for forced-color mode</li>
	<li>Update default style rules</li>
	<li>Add CIE XYZ color space to ''color()''</li>
	<li>Greater clarity on hue angles, NaN explicitly allowed</li>
	<li>Improve section on system color pairings, require AA accessible contrast</li>
	<li>Warn of interaction between overlapping glyphs and the opacity property</li>
	<li>Correct grammar in color definition</li>
	<li>Improve description of Highlight/HighlightText</li>
	<li>Correct prophoto-rgb transfer function</li>
	<li>More precision for prophoto-rgb primaries</li>
	<li>Started to define "can't be displayed"</li>
	<li>Removed paragraph about canvas surface</li>
	<li>Added the buttonborder, mark, and marktext system colors</li>
	<li>Added reverse conversion, sRGB to HWB</li>
	<li>Clarified polar spaces are cylindrical, not spherical</li>
	<li>Added an Accessibility Considerations section</li>
	<li>Started to describe chroma-reduction gamut mapping rather than per-component clipping</li>
	<li>Corrected white chromaticity for rec2020</li>
	<li>Made device-cmyk available by @color-profile; updated CMYK to color algorithm to only use naive conversion as a last resort</li>
	<li>Added print-oriented CMYK and KCMYOGV examples</li>
	<li>User-defined color spaces now dashed-ident, making predefined color spaces extensible without clashes</li>
	<li>Added lab option to the color() function</li>
	<li>Added normative reference for CIE Lab</li>
	<li>Clarified that prophoto-rgb uses D50 whitepoint so does not require adaptation</li>
	<li>Clarified direction of increasing angle in LCH</li>
	<li>Clarified that color names are ASCII case insensitive</li>
	<li>Initial value of the "color" property is now CanvasText</li>
	<li>Removed confusing gray() function per CSS WG resolution</li>
	<li>Collect scattered definitions into new
		<a href="#terminology">Color terminology</a> section</li>
	</li>
	<li>Add helpful figures and more examples</li>
	<li>Minor editorial clarifications, spell check, fixing typos, bikeshed markup fixes</li>
</ul>

<h3 id="changes-from-20160705" class='no-num'>Changes since <a href="http://www.w3.org/TR/2016/WD-css-color-4-20160705/">Working Draft of 05 July 2016</a></h3>

<ul>
	<li>Changed Lightness in Lab and LCH to be a percentage, for CSS compatibility</li>
	<li>Clamping of color values clarified</li>
	<li>Percentage opacity is now allowed</li>
	<li>Define terms sRGB and linear-light sRGB, for use by other specs</li>
	<li>Add new list of CSS system colors; renaming Text to CanvasText</li>
	<li>Make system color keywords compute to themselves</li>
	<li>Add computed/used entry for system colors</li>
	<li>Rewrite intro to non-deprecated system colors to center their use around forced-colors mode rather than generic use</li>
	<li>Consistent hyphenation of predefined color spaces</li>
	<li>Restore text about non-opaque elements painting at layers even when not positioned</li>

	<li>Initial value of the "color" property is now black</li>
	<li>Clarify hue in LCH is modulo 360deg (change now reverted)</li>
	<li>Clarify allowed range of L in LCH and Lab, and meaning of L=100</li>
	<li>Update references for color spaces used in video</li>
	<li>Add prophoto-rgb predefined color space</li>
	<li>Correct black and white luminance levels for display-p3</li>
	<li>Clarify display-p3 transfer function</li>
	<li>Add a98-rgb color space, correct table of primary chromaticities</li>
	<li>Clarify that currentColor's computed value is not the resolved color</li>
	<li>Update syntax is examples to conform to latest specification</li>
	<li>Remove the color-mod() function</li>
	<li>Drop the "media" from propdef tables</li>
	<li>Export, and consistently use, "transparent black" and "opaque black"</li>
	<li>Clarify calculated values such as percents</li>
	<li>Clarify required precision and rounding behavior for color channels</li>
	<li>Clarify "color" property has no effect on color font glyphs (unless specifically referenced, e.g. with currentColor)</li>
	<li>Clarify how color values are resolved</li>
	<li>Clarify that HSL, HWB and named colors resolve to sRGB</li>
	<li>Simplify conversion from device-cmyk to sRGB</li>
	<li>Describe previous, comma-using color syntaxes as "legacy"; change examples to commaless form</li>
	<li>Remove superfluous requirement that displayed colors be restricted to device gamut (like there was any other option!)</li>
	<li>Rename P3 to display-p3; avoid claiming this is DCI P3, as these are not the same</li>
	<li>Improved description of the parameters to the "color()" function</li>
	<li>Disallow predefined spaces from "@color-profile" identifier</li>
	<li>Add canonical order to "color", "color-adjust" and "opacity" property definitions</li>
	<li>Switch definition of alpha compositing from SVG11 to CSS Compositing</li>
	<li>Clarify sample conversion code is non-normative</li>
	<li>Add Security and Privacy Considerations</li>
	<li>Update several references to most current versions</li>
	<li>Convert inline issues to links to GitHub issues</li>
	<li>Minor editorial clarifications, formatting and markup improvements</li>
</ul>

<h3 id='changes-from-3'>
Changes from Colors 3</h3>

	The primary change, compared to SS Color 3,
	is that CSS colors are no longer restricted to the
	narrow gamut of sRGB.

	To support this, several brand new features have been added:

	<ol>
		<li>predefined, wide color gamut RGB color spaces</li>

		<li>''lab()'' and ''lch()'' functions, for device-independent color

		<li>''color()'' function and ''@color-profile'' at-rule, for profiled device-dependent color, including calibrated CMYK.

		<li>''device-cmyk()'' function, for specifying uncalibrated colors in an output-device-specific CMYK color space.

	</ol>

	Other technical changes:

	<ol>
		<li>Serialization of <<color>> is now specified here, rather than in the CSS Object Model

		<li>''hwb()'' function, for specifying sRGB colors in the HWB notation.

		<li>Addition of named color ''rebeccapurple''.
	</ol>

	In addition, there have been some syntactic changes:

	<ol>
		<li>''rgb()'' and ''rgba()'' functions now accept <<number>> rather than <<integer>>.

		<li>''hsl()'' and ''hsla()'' functions now accept <<angle>> as well as <<number>> for hues.

		<li>''rgb()'' and ''rgba()'', and ''hsl()'' and ''hsla()'' are now aliases of each other
			(all of them have an optional alpha).

		<li>''rgb()'', ''rgba()'', ''hsl()'', and ''hsla()'' have all gained a new syntax
			consisting of space-separated arguments
			and an optional slash-separated opacity.
			All the color functions use this syntax form now,
			in keeping with <a href="https://wiki.csswg.org/ideas/functional-notation#general-principles">CSS's functional-notation design principles</a>.

		<li>All uses of <<alpha-value>> now accept <<percentage>> as well as <<number>>.

		<li>4 and 8-digit hex colors have been added, to specify transparency.
	</ol>

Security and Privacy Considerations {#priv-sec}
===============================================

This specification defines "system" colors,
which theoretically can expose details of the user's OS settings,
which is a fingerprinting risk.

The system colors,
if they actually correspond to the user's system colors,
also pose a security risk,
as they make it easier for a malware site
to create user interfaces that appear to be from the system.
However, as several system colors are now defined to be "generic",
this risk is believed to be mitigated.

This specification adds to CSS the on-demand
downloading of ICC profiles.
These do not contain executable code,
and thus do not constitute an increased security risk.


Accessibility Considerations {#a11y-sec}
========================================

This specification <a href="#notes">encourages authors to not use
	color alone</a> as a distinguishing feature.

This specification <a href="#css-system-colors">encourages browsers to ensure
	adequate contrast for specific system color foreground/background pairs</a>.
	A harder requirement with specific AA or AAA contrast ratios was considered,
	but since browsers are often just passing along color choices made by the OS,
	or selected by users (who may have particular requirements,
	including lower contrast for people living with migraines or epileptic seizures), the CSSWG
	was unable to require a specific contrast level.
