<h1>CSS Box Alignment Module Level 3</h1>

<pre class='metadata'>
Shortname: css-align
Level: 3
Group: csswg
Status: ED
Work Status: Revising
ED: https://drafts.csswg.org/css-align/
TR: https://www.w3.org/TR/css-align-3/
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/, w3cid 42199
Previous Version: https://www.w3.org/TR/2016/WD-css-align-3-20160519/
Previous Version: https://www.w3.org/TR/2014/WD-css-align-3-20141218/
Previous Version: https://www.w3.org/TR/2013/WD-css3-align-20130514/
Previous Version: https://www.w3.org/TR/2012/WD-css3-align-20120612/
Abstract: This module contains the features of <a href="https://www.w3.org/TR/CSS/">CSS</a> relating to the alignment of boxes within their containers in the various CSS box layout models: block layout, table layout, flex layout, and grid layout. (The alignment of text and inline-level content is defined in [[CSS-TEXT-3]] and [[CSS-INLINE-3]].)
Link Defaults: selectors-3 (dfn) first formatted line, css-flexbox-1 (dfn) flex line, css-multicol-1 (dfn) multi-column element, css-fonts-3 (dfn) first available font, css21 (property) max-width/max-height/min-width/min-height, css-writing-modes-3 (dfn) dominant baseline, css-position-3 (property) left, css-cascade-3 (value) initial, css-flexbox-1 (dfn) static-position rectangle
Ignored Terms: table cell, stretch, scrollable overflow region
At Risk: ''[ first | last ]? baseline'', the <<overflow-position>> keywords, the scrollable-area safety trigger into ''safe'' mode when no <<overflow-position>> is specified
</pre>

<pre class=link-defaults>
spec:css-overflow-3; type:dfn; text:scroll container
</pre>

<style>
.issue th:first-child { text-align: left !important; }
[rowspan] > img { float: right; }
[rowspan] { vertical-align: middle; }
table small { display: block; }

table.align-details { width: 100%; }
.align-details th { font: inherit; white-space: nowrap; width: 1em; }
</style>

<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	CSS Levels 1 and 2 allowed for the alignment of text via 'text-align'
	and the alignment of blocks by balancing ''margin/auto'' margins.
	However, except in table cells,
	vertical alignment was not possible.
	As CSS3 adds further capabilities,
	the ability to align boxes in various dimensions becomes more critical.
	This module attempts to create a cohesive and common box alignment model to share among all of CSS.

	Note: The alignment of text and inline-level content is defined in [[CSS-TEXT-3]] and [[CSS-INLINE-3]].

	Inspiration for this document:

	<ul>
		<li><a href="http://wiki.csswg.org/ideas/centering#alignment-property">summary of a discussion for implementing &lt;CENTER&gt;</a>
		<li><a href="https://lists.w3.org/Archives/Member/w3c-css-wg/2008AprJun/0015.html">Minutes from March 2008 F2F</a>
		<li><a href="http://lists.w3.org/Archives/Public/www-style/2012Feb/0743.html">fantasai's attempt to merge all alignment properties</a>
	</ul>

<h3 id="placement">
Module interactions</h3>

	This module adds some new alignment capabilities
	to the block layout model described in [[!CSS2]] chapters 9 and 10
	and defines the interaction of these properties
	with the alignment of table cell content using 'vertical-align',
	as defined in [[!CSS2]] chapter 17.

	The interaction of these properties with
	Grid Layout [[!CSS-GRID-1]]
	and Flexible Box Layout [[!CSS-FLEXBOX-1]]
	is defined in their respective modules.
	The property definitions here supersede those in [[!CSS-FLEXBOX-1]]
	(which have a smaller, earlier subset of permissible values).

	No properties in this module apply to the <code>::first-line</code>
	or <code>::first-letter</code> pseudo-elements.

<h3 id="values">
Values</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS21/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]].
	Value types not defined in this specification are defined in CSS Level 2 Revision 1 [[!CSS2]].
	Other CSS modules may expand the definitions of these value types:
	for example [[CSS3VAL]], when combined with this module,
	adds the ''initial'' keyword as a possible property value.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification also accept the
	<a href="https://www.w3.org/TR/CSS21/cascade.html#value-def-inherit">inherit</a>
	keyword as their property value. For readability it has not been repeated
	explicitly.


<h2 id="overview">
Overview of Alignment Properties</h2>

	The <dfn export>box alignment properties</dfn> in CSS are a set of 6 properties
	that control alignment of boxes within other boxes.
	They can be described along two axises:

	<ul>
		<li>which dimension they apply to (main/inline vs. cross/block), and
		<li>whether they control the position of the box within its parent, or the box's content within itself.
	</ul>

	Note: This specification uses the terms “justify” and “align” to distinguish
	between alignment in the main/inline and cross/block dimensions, respectively.
	The choice is somewhat arbitrary, but having the two terms allows for
	a consistent naming scheme that works across all of CSS's layout models.

	The following table summarizes the <a>box alignment properties</a>
	and the display types they can apply to.

	<table class=data>
	<colgroup span=1></colgroup>
	<colgroup span=2></colgroup>
	<colgroup span=1></colgroup>
	<thead>
		<tr>
			<th>Common
			<th>Axis
			<th>Aligns
			<th>Applies to
	<tbody>
		<tr>
			<th>'justify-content'
			<td>main/inline
			<td rowspan=2>
				<img src="images/content-example.svg" width=106 height=106 alt="">
				content within element
				<small>(effectively adjusts padding)</small>
			<td>block containers, <a>flex containers</a>, and <a>grid containers</a>
		<tr>
			<th>'align-content'
			<td>cross/block
			<td>block containers, <a>flex containers</a>, and <a>grid containers</a>
	<tbody>
		<tr>
			<th>'justify-self'
			<td>inline
			<td rowspan=2>
				<img src="images/self-example.svg" width=106 height=106 alt="">
				element within parent
				<small>(effectively adjusts margins)</small>
			<td>block-level elements and <a>grid items</a>
		<tr>
			<th>'align-self'
			<td>cross/block
			<td><a>flex items</a> and <a>grid items</a>
	<tbody>
		<tr>
			<th>'justify-items'
			<td>inline
			<td rowspan=2>
				<img src="images/items-example.svg" width=106 height=106 alt="">
				items inside element
				<small>(controls child items&rsquo; ''align/justify-self: auto'')</small>
			<td><a>grid containers</a>
		<tr>
			<th>'align-items'
			<td>cross/block
			<td><a>flex containers</a> and <a>grid containers</a>
	</table>

	Note: The '*-items' values don't affect the element itself.
	When set on a flex container or grid container,
	they specify the interpretation of any ''*-self: auto'' used on the items in the container element.

<h2 id='terms'>
Alignment Terminology</h2>

	Since this module defines alignment properties for all layout modes in CSS,
	some abstract terminology is introduced:

	<dl>
		<dt><dfn export>alignment subject</dfn>
		<dd>
			The <a>alignment subject</a> is the thing or things being aligned by the property.
			For 'justify-self' and 'align-self',
			the <a>alignment subject</a> is the margin box of the box the property is set on.
			For 'justify-content' and 'align-content',
			the <a>alignment subject</a> is defined by the layout mode.

		<dt><dfn export>alignment container</dfn>
		<dd>
			The <a>alignment container</a> is the rectangle that the <a>alignment subject</a> is aligned within.
			This is defined by the layout mode,
			but is usually the <a>alignment subject</a>’s containing block.

		<dt><dfn export>fallback alignment</dfn>
		<dd>
			Some alignments can only be fulfilled in certain situations
			or are limited in how much space they can consume;
			for example, ''space-between'' can only operate when there is more than one <a>alignment subject</a>,
			and baseline alignment, once fulfilled, might not be enough to absorb all the excess space.
			In these cases a <a>fallback alignment</a> takes effect
			(as defined below)
			to fully consume the excess space.
	</dl>

<h2 id='alignment-values'>
Alignment Keywords</h2>

	All of the alignment properties use a common set of keyword values,
	which are defined in this section.
	Keywords fall into three categories:

	<dl>
		<dt><a href="#positional-values">positional alignment</a>
		<dd>These keywords define alignment as an absolute position within the <a>alignment container</a>.

		<dt><a href="#baseline-values">baseline alignment</a>
		<dd>These keywords define alignment as a relationship among baselines within an <a>alignment context</a>.

		<dt><a href="#distribution-values">distributed alignment</a>
		<dd>These keywords define alignment as a distribution of space among <a>alignment subjects</a>.
	</dl>

<h3 id='positional-values'>
Positional Alignment: the ''center'', ''start'', ''end'', ''self-start'', ''self-end'', ''flex-start'', ''flex-end'', ''left'', and ''right'' keywords</h3>

	The <dfn>positional alignment</dfn> keywords specify a position for an <a>alignment subject</a>
	with respect to its <a>alignment container</a>.

	Values have the following meanings:

	<dl dfn-type="value">
		<dt><dfn for="<self-position>, <content-position>">center</dfn> <small>(self, content)</small>
		<dd>Centers the <a>alignment subject</a> within its <a>alignment container</a>.

		<dt><dfn for="<self-position>, <content-position>">start</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s start edge in the appropriate axis.

		<dt><dfn for="<self-position>, <content-position>">end</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s end edge in the appropriate axis.

		<dt><dfn for="<self-position>">self-start</dfn> <small>(self)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>alignment subject</a>’s start side in the appropriate axis.

		<dt><dfn for="<self-position>">self-end</dfn> <small>(self)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>alignment subject</a>’s end side in the appropriate axis.

		<dt><dfn for="<self-position>, <content-position>">flex-start</dfn> <small>(self, content)</small>
		<dd><strong>Only used in flex layout.</strong> [[!CSS-FLEXBOX-1]]
			Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>flex container</a>’s main-start or cross-start side, as appropriate.
			When used on boxes that are not children of a <a>flex container</a>,
			this value behaves as ''start''.

		<dt><dfn for="<self-position>, <content-position>">flex-end</dfn> <small>(self, content)</small>
		<dd><strong>Only used in flex layout.</strong>
			Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>flex container</a>’s main-end or cross-end side, as appropriate.
			When used on boxes that are not children of a <a>flex container</a>,
			this value behaves as ''end''.

		<dt><dfn for="<self-position>, <content-position>">left</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s <a href="https://www.w3.org/TR/css3-writing-modes/#line-left">line-left</a> edge.
			If the property's axis is not parallel with the inline axis,
			this value behaves as ''start''.

		<dt><dfn for="<self-position>, <content-position>">right</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s <a href="https://www.w3.org/TR/css3-writing-modes/#line-right">line-right</a> edge.
			If the property's axis is not parallel with the inline axis,
			this value behaves as ''start''.
	</dl>

	Two grammar terms are used to denote this collection of values:

	<dl>
		<dt><<self-position>>
		<dd>
			This set is used by 'justify-self' and 'align-self'
			to align the box within its <a>alignment container</a>,
			and also by 'justify-items' and 'align-items'
			(to specify default values for 'justify-self' and 'align-self').
			<pre class='prod'>
				<dfn>&lt;self-position></dfn> = center | start | end | self-start | self-end |
								flex-start | flex-end | left | right;
			</pre>
		<dt><<content-position>>
		<dd>
			This set is used by 'justify-content' and 'align-content'
			to align the box's contents within itself.

			<pre class='prod'>
				<dfn>&lt;content-position></dfn> = center | start | end | flex-start | flex-end | left | right;
			</pre>
	</dl>

	<p class='issue'>
		Add example images.

	<p class='issue'>
		Make it easier to understand the dual-axis nature of "start" and "end" wrt orthogonal flows.

<h3 id='baseline-values'>
Baseline Alignment: the ''baseline'' keyword and ''first''/''last'' modifiers</h3>

	See [[css-writing-modes-3#intro-baselines]].

	Issue: Deal with <a href="https://lists.w3.org/Archives/Public/www-style/2015Apr/0144.html">overflow as resolved</a>.

	<dfn export>Baseline alignment</dfn> is a form of positional alignment
	that aligns multiple <a>alignment subjects</a>
	within a <a>shared alignment context</a>
	(such as cells within a row or column)
	by matching up their <a>alignment baselines</a>.
	If an <a>alignment subject</a>’s position is not fully determined by <a>baseline alignment</a>
	it and the other participants in its <a>baseline-sharing group</a>
	are fallback-aligned insofar as possible while preserving their <a>baseline alignment</a>.

	The baseline alignment keywords are represented with the <<baseline-position>> grammar term:

	<pre class='prod'>
		<dfn>&lt;baseline-position></dfn> = [ first | last ]? baseline
	</pre>

	The ''first'' and ''last'' values give a box a <dfn export>baseline alignment preference</dfn>:
	either “first” or “last”, respectively,
	defaulting to “first”.

	Values have the following meanings:

	<dl dfn-type=value dfn-for="justify-content, justify-self, justify-items, align-content, align-self, align-items, <baseline-position>">
		<dt><dfn>baseline</dfn>
		<dd>
			Computes to ''first baseline'', defined below.

		<dt><dfn lt="first baseline | first">first baseline</dfn>
		<dd>
			Specifies participation in <dfn dfn for export>first-baseline alignment</dfn>:
			aligns the <a>alignment baseline</a> of the box's <a>first baseline set</a>
			with the corresponding baseline
			in the shared <a>first baseline set</a>
			of all the boxes in its <a>baseline-sharing group</a>.

			The <a>fallback alignment</a> for ''first baseline'' is ''start''.

		<dt><dfn lt="last baseline | last">last baseline</dfn>
		<dd>
			Specifies participation in <dfn dfn for export>last-baseline alignment</dfn>:
			aligns the <a>alignment baseline</a> of the box's <a>last baseline set</a>
			with the corresponding baseline
			in the shared <a>last baseline set</a>
			of all the boxes in its <a>baseline-sharing group</a>.

			The <a>fallback alignment</a> for ''last baseline'' is ''end''.

			Issue: Should this ''end'' fallback be ''safe'' or ''unsafe''?
	</dl>

	When specified for 'align-content'/'justify-content',
	these values trigger <a>baseline content-alignment</a>,
	shifting the content of the box within its content box,
	and may also affect the sizing of the box itself.
	See [[#baseline-align-content]].

	When specified for 'align-self'/'justify-self',
	these values trigger <a>baseline self-alignment</a>,
	shifting the entire box within its container,
	which may affect the sizing of its container.
	See [[#baseline-align-self]].

	If both <a>baseline content-alignment</a> <em>and</em> <a>baseline self-alignment</a> are specified in the same axis on the same box,
	only <a>baseline self-alignment</a> is honored in that axis;
	the content-alignment in that axis must be treated as ''start''.

	<p class='issue'>Add example images here.

	If a box has no <a>natural baseline</a> in the appropriate axis
	or does not belong to a <a>shared alignment context</a>,
	then the <a>fallback alignment</a> is used.

    Note: Because they are equivalent, and ''baseline'' is shorter,
	the CSSOM serializes ''first baseline'' as ''baseline''.

	Note: For the somewhat-related 'vertical-align' property,
	due to inconsistent design decisions in CSS2.1,
	''baseline'' is not equivalent to ''first baseline''
	as its <a>baseline alignment preference</a> depends on 'display'.

<h3 id='distribution-values'>
Distributed Alignment: the ''<content-distribution>/stretch'', ''space-between'', ''space-around'', and ''space-evenly'' keywords</h3>

	The <dfn>distributed alignment</dfn> values are used by 'justify-content' and 'align-content'
	to disperse extra space among the <a>alignment subjects</a>.

	<figure>
		<img src="images/distribute.svg" alt="space-between | space-around | space-evenly | stretch">
		<figcaption>The <a>distributed alignment</a> values</figcaption>
	</figure>

	When space cannot be distributed in this way,
	these values behave as their <a>fallback alignment</a>.
	Each distribution value has an associated <a>fallback alignment</a>,
	but one can alternatively be explicitly specified in the property.

	<dl dfn-type="value" dfn-for="align-content, justify-content, <content-distribution>">
		<dt><dfn>space-between</dfn>
		<dd>
			The <a>alignment subjects</a> are evenly distributed in the <a>alignment container</a>.
			The first <a>alignment subject</a> is placed flush with the start edge of the <a>alignment container</a>,
			the last <a>alignment subject</a> is placed flush with the end edge of the <a>alignment container</a>,
			and the remaining <a>alignment subjects</a> are distributed so that the spacing between any two adjacent <a>alignment subjects</a> is the same.

			<figure>
				<img src="images/space-between.svg"
				     alt="For example, given three items, all excess space is split in two and distributed: one half between the first two and one half between the last two items.">
			</figure>

			Unless otherwise specified,
			this value falls back to ''start''.

		<dt><dfn>space-around</dfn>
		<dd>
			The <a>alignment subjects</a> are evenly distributed in the <a>alignment container</a>,
			with a half-size space on either end.
			The <a>alignment subjects</a> are distributed so that the spacing between any two adjacent <a>alignment subjects</a> is the same,
			and the spacing before the first and after the last <a>alignment subject</a> is half the size of the other spacing.

			<figure>
				<img src="images/space-around.svg"
				     alt="For example, given three items, all excess space is split into sixths and distributed: one sixth at the start, one at the end, and two sixths (one third) each between the first two and between the last two items.">
			</figure>

			Unless otherwise specified,
			this value falls back to ''center''.

		<dt><dfn>space-evenly</dfn>
		<dd>
			The <a>alignment subjects</a> are evenly distributed in the <a>alignment container</a>,
			with a full-size space on either end.
			The <a>alignment subjects</a> are distributed so that the spacing between any two adjacent <a>alignment subjects</a>,
			before the first <a>alignment subject</a>,
			and after the last <a>alignment subject</a>
			is the same.

			<figure>
				<img src="images/space-evenly.svg"
				     alt="For example, given three items, all excess space is split into fourths and distributed: to the start, to the end, to between the first two, and to between the last two items.">
			</figure>

			Unless otherwise specified,
			this value falls back to ''center''.

		<dt><dfn>stretch</dfn>
		<dd>
			If the combined size of the <a>alignment subjects</a> is less than the size of the <a>alignment container</a>,
			any <css>auto</css>-sized <a>alignment subjects</a> have their size increased equally (not proportionally),
			while still respecting the constraints imposed by 'max-height'/'max-width'
			(or equivalent functionality),
			so that the combined size exactly fills the <a>alignment container</a>.

			<figure>
				<img src="images/space-stretch.svg"
				     alt="For example, given three items, all excess space is split into thirds and distributed: one third to each item.">
			</figure>

			Unless otherwise specified,
			this value falls back to ''flex-start''.
			<span class='note'>(For layout modes other than flex layout, ''flex-start'' is identical to ''start''.)</span>
	</dl>

	These values are represented with the <<content-distribution>> grammar term:

	<pre class='prod'><dfn>&lt;content-distribution></dfn> = space-between | space-around | space-evenly | stretch</pre>

<h3 id='overflow-values'>
Overflow Alignment: the ''safe'' and ''unsafe'' keywords</h3>

	When the <a>alignment subject</a> is larger than the <a>alignment container</a>,
	it will overflow.
	Some alignment modes, if honored in this situation,
	may cause data loss:
	for example, if the contents of a sidebar are centered,
	when they overflow they may send part of their boxes past the viewport's start edge,
	which can't be scrolled to.

	To help combat this problem,
	an <dfn export>overflow alignment</dfn> mode can be explicitly specified.
	“Unsafe” alignment honors the specified alignment mode in overflow situations, even if it causes data loss,
	while “safe” alignment changes the alignment mode in overflow situations in an attempt to avoid data loss.

	<pre class='prod'><dfn>&lt;overflow-position></dfn> = unsafe | safe</pre>

	<dl dfn-type="value" dfn-for="<overflow-position>">
		<dt><dfn>safe</dfn>
		<dd>
			If the size of the <a>alignment subject</a> overflows the <a>alignment container</a>,
			the <a>alignment subject</a> is instead aligned as if the alignment mode were ''start''.

		<dt><dfn>unsafe</dfn>
		<dd>
			Regardless of the relative sizes of the <a>alignment subject</a> and <a>alignment container</a>,
			the given alignment value is honored.
	</dl>

	If the <a>overflow alignment</a> isn't explicitly specified,
	the default <a>overflow alignment</a> is similar to ''unsafe''
	in that an overflowing <a>alignment subject</a> is allowed to overflow its <a>alignment container</a>;
	however if the this would cause it to also overflow
	the <a>scrollable overflow region</a> of its nearest ancestor <a>scroll container</a>,
	then its overflow in that direction is limited
	by biasing any remaining overflow to the end side.
	In other words, it is similar to ''safe'' alignment
	except that the limit for switching to ''start''
	is triggered by overflowing the scrollable area,
	rather than merely overflowing the <a>alignment container</a>.

	<div class='example'>
		The figure below illustrates the difference in "safe" versus "unsafe" centering,
		using a column flexbox as an example:

		<figure>
			<style>
			.cross-auto-figure > div {
				margin: 0 auto;
				width: 70px;
				background: #888;
				padding: 0 .5em;
				border-radius: 1em;
				border: 1px solid transparent;
			}
			.cross-auto-figure > div > div {
				border-spacing: 0;
				display: table;
				background: #ddd;
				color: black;
				text-align: center;
				margin: .5em auto;
				padding: .5em;
				border-radius: .5em;
			}
			</style>
			<div style="display:table; margin: 0 auto 1em;">
				<div style="display:table-cell; padding-right: 50px;" class='cross-auto-figure'>
					<div>
						<div>About</div>
						<div>Authoritarianism</div>
						<div>Blog</div>
					</div>
				</div>
				<div style="display:table-cell; padding-left: 50px;" class='cross-auto-figure'>
					<div>
						<div>About</div>
						<div style="margin-left: -31px;">Authoritarianism</div>
						<div>Blog</div>
					</div>
				</div>
			</div>
			<figcaption>
				The items in the figure on the left are set to ''align-self: safe center;'',
				while those in the figure on the right are set to ''align-self: unsafe center;''.
				If this column <a>flex container</a> was placed against the left edge of the page,
				the "safe" behavior would be more desirable,
				as the long item would be fully readable.
				In other circumstances,
				the "unsafe" centering behavior might be better,
				as it correctly centers all the items.
			</figcaption>
		</figure>
	</div>

	Issue: It may not be Web-compatible to implement the “smart” default behavior
	(though we hope so, and believe it to be likely),
	so UAs should pass any feedback on this point to the WG.
	UAs that have not implemented the “smart” default behavior
	must behave as ''unsafe''.

<!--
                   ██████   ███████  ██    ██ ████████ ████████ ██    ██ ████████
 ██   ██          ██    ██ ██     ██ ███   ██    ██    ██       ███   ██    ██
  ██ ██           ██       ██     ██ ████  ██    ██    ██       ████  ██    ██
█████████ ███████ ██       ██     ██ ██ ██ ██    ██    ██████   ██ ██ ██    ██
  ██ ██           ██       ██     ██ ██  ████    ██    ██       ██  ████    ██
 ██   ██          ██    ██ ██     ██ ██   ███    ██    ██       ██   ███    ██
                   ██████   ███████  ██    ██    ██    ████████ ██    ██    ██
-->

<h2 id='content-distribution'>
Content Distribution: the 'justify-content' and 'align-content' properties and 'place-content' shorthand</h2>

	The <dfn export>content distribution properties</dfn> 'justify-content' and 'align-content'
	control alignment of the box's content within its content box.

	<div class="figure">
		<img alt="Diagram showing that the alignment of the content within the element is affected." src="images/content-example.svg" width=212 height=212>
	</div>

	<pre class="propdef">
	Name: align-content, justify-content
	Value: normal | <<baseline-position>> |  <<content-distribution>> || [ <<overflow-position>>? && <<content-position>> ]
	Initial: normal
	Applies to: block containers, flex containers, and grid containers
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	Aligns the contents of the box as a whole.
	Values other than <dfn value for="justify-content, align-content">normal</dfn> are defined in [[#alignment-values]], above.
	If both a <<content-distribution>> and <<content-position>> are given,
	the <<content-position>> provides an explicit <a>fallback alignment</a>.

	<pre class="propdef">
	Name: place-content
	Value: [ normal | <<baseline-position>> |  <<content-distribution>> | <<content-position>> ]{1,2}
	Initial: normal
	Applies to: block containers, flex containers, and grid containers
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	This <a>shorthand property</a> sets both the 'align-content' and 'justify-content' properties in one declaration.
	The first value is assigned to 'align-content'.
	The second value is assigned to 'justify-content';
	if omitted, it is copied from the first value.

Details per Layout Mode {#distribution-details}
-----------------------------------------------

### Block Containers ### {#distribution-block}

	<table class="data align-details">
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>block container</a>’s content box.
		<tr>
			<th><a lt="alignment subject">Alignment Subject(s)</a>
			<td>
				The entire contents of the block, as a unit.
		<tr>
			<th>'align-content' Axis
			<td>
				The <a>block axis</a>.
				If a <<content-distribution>> is specified
				the <a>fallback alignment</a> is used instead.
		<tr>
			<th>'justify-content' Axis
			<td>
				Does not apply to and has no effect on <a>block containers</a>.
		<tr>
			<th>''justify-content/normal'' Behavior
			<td>
				All values other than ''justify-content/normal'' force the block container to establish a new formatting context.

				For table cells, the behavior of the ''justify-content/normal'' depends on the computed value of 'vertical-align':
				''vertical-align/top'' makes it behave as ''start'',
				''vertical-align/middle'' makes it behave as ''center'',
				''vertical-align/bottom'' makes it behave as ''end'',
				and all other values make it behave as ''baseline''.
				[[!CSS2]]

				''justify-content/normal'' otherwise behaves as ''start''.
	</table>

### Multicol Containers ### {#distribution-multicol}

	<table class="data align-details">
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>multi-column element</a>’s content box.
		<tr>
			<th><a lt="alignment subject">Alignment Subject(s)</a>
			<td>
				The column boxes.
		<tr>
			<th>'align-content' Axis
			<td>
				The <a>block axis</a>.
				If a <<content-distribution>> is specified
				the <a>fallback alignment</a> is used instead.
		<tr>
			<th>'justify-content' Axis
			<td>
				The <a>inline axis</a>.
		<tr>
			<th>''justify-content/normal'' Behavior
			<td>
				''justify-content/normal'' behaves as ''stretch'';
				both are defined as described in the column-sizing rules
				of [[!CSS3-MULTICOL]].

				In the case of multi-column elements with both a 'column-count' and 'column-width',
				'justify-content' values other than ''justify-content/normal'' or ''justify-content/stretch''
				cause the columns to take their specified 'column-width'
				rather than stretching to fill the container.
				The column boxes are then aligned as specified by 'justify-content'.
	</table>

### Flex Containers ### {#distribution-flex}

	<table class="data align-details">
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>flex container</a>’s content box.
		<tr>
			<th><a lt="alignment subject">Alignment Subject(s)</a>
			<td>
				For 'justify-content',
				the <a>flex items</a> in each <a>flex line</a>.

				For 'align-content',
				the <a>flex lines</a>.
		<tr>
			<th>'align-content' Axis
			<td>
				The <a>cross axis</a>.
		<tr>
			<th>'justify-content' Axis
			<td>
				The 'justify-content' property applies along the <a>main axis</a>,
				but since flexing in the <a>main axis</a> is controlled by 'flex',
				''<content-distribution>/stretch'' behaves as ''flex-start''
				(ignoring the specified <a>fallback alignment</a>, if any).
		<tr>
			<th>''justify-content/normal'' Behavior
			<td>
				''justify-content/normal'' behaves as ''<content-distribution>/stretch''.
	</table>

	See [[!CSS-FLEXBOX-1]] for details.

### Grid Containers ### {#distribution-grid}

	<table class="data align-details">
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>grid container</a>’s content box.
		<tr>
			<th><a lt="alignment subject">Alignment Subject(s)</a>
			<td>
				The <a>grid tracks</a>.
		<tr>
			<th>'align-content' Axis
			<td>
				The <a lt="block axis">block (column) axis</a>,
				aligning the <a>grid rows</a>.
		<tr>
			<th>'justify-content' Axis
			<td>
				The <a lt="inline axis">inline (row) axis</a>,
				aligning the <a>grid columns</a>.
		<tr>
			<th>''justify-content/normal'' Behavior
			<td>
				''justify-content/normal'' generally behaves as ''stretch'',
				except that items with an intrinsic ratio maintain that ratio.
	</table>

	See [[!CSS-GRID-1]] for details.


<h3 id="baseline-align-content">
Baseline Content-Alignment</h3>

	The content of boxes participating in row-like layout contexts (<a>shared alignment contexts</a>)
	can be baseline-aligned to each other.
	This effectively increases the padding on the box
	to align the <a>alignment baseline</a> of its contents
	with that of other baseline-aligned boxes in its <a lt="baseline-sharing group">group</a>.

	The set of boxes that participate in <a>baseline content-alignment</a>
	depends on the layout model:

	<dl>
		<dt>Table Cells:
		<dd>
			A <a>table cell</a> participates in first (last) <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its computed 'align-content' is ''first baseline'' (''last baseline'').

		<dt>Flex Items:
		<dd>
			A <a>flex item</a> participates in first (last) <a>baseline content-alignment</a>
			in its flex line if
			its computed 'align-content' is ''first baseline'' (''last baseline''),
			its <a>inline axis</a> is parallel to the <a>main axis</a>,
			and its computed 'align-self' is ''align-self/stretch'' or ''self-start'' (''self-end'').
			For this purpose,
			the ''start'', ''end'', ''flex-start'', and ''flex-end'' values of 'align-self'
			are treated as either ''self-start'' or ''self-end'',
			whichever they end up equivalent to.

		<dt>Grid Items:
		<dd>
			A <a>grid item</a> participates in first (last) <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its computed 'align-content' is ''first baseline'' (''last baseline''),
			and its computed 'align-self' or 'justify-self' (whichever affects its <a>block axis</a>)
			is ''align-self/stretch'' or ''self-start'' (''self-end'').
			For this purpose,
			the ''start'', ''end'', ''flex-start'', and ''flex-end'' values of 'align-self'
			are treated as either ''self-start'' or ''self-end'',
			whichever they end up equivalent to.
	</dl>

	If a box spans multiple <a>shared alignment contexts</a>,
	it participates in first (last) <a>baseline content-alignment</a>
	within its start-most (end-most) <a>shared alignment context</a> along that axis.

	When a box participates in first (last) <dfn export lt="baseline content-alignment|first-baseline content-alignment|last-baseline content-alignment">baseline content-alignment</dfn>
	it aligns its contents as follows:
	its <a>alignment subject</a> (i.e. content)
	is aligned to the start (end) edge of its <a>alignment container</a> (i.e. itself)
	and the minimum necessary extra space is added <strong>between its start (end) content edge and its <a>alignment subject</a>’s edge</strong>
	to align its <a>alignment baseline</a> in that axis with those of its <a>baseline-sharing group</a>.
	See [[#align-by-baseline]].
	This increases the intrinsic size of the box.

	Note: In other words, a box participating in <a>baseline content-alignment</a>
	acts like its 'padding' was increased
	so that its <a>alignment baseline</a> lines up with the <a>alignment baselines</a> of its participating siblings.
	The box itself is aligned as usual for its 'align-self'/'justify-self' value.

<h3 id="overflow-scroll-position">
Overflow and Scroll Positions</h3>

	The <a>content distribution properties</a> also affect the initial scroll position,
	setting it to display the appropriate portion of the scrollable area.
	In other words,
	the <a>scrollable overflow region</a> is aligned relative to the viewport
	as specified by the <a>content distribution property</a>.

	<div class='example'>
		For example,
		if a scrollable flex container is set to ''justify-content: flex-end''
		(or ''justify-content: flex-start'' with ''flex-flow: row-reverse''),
		it will be initially displayed scrolled all the way to the main-end edge of the scrollable area,
		and its content will overflow its main-start edge.
	</div>

	Issue: This needs to be integrated with overflow-anchor, when the property exists,
	so that you get the same behavior whether an elements *starts out* overflowing,
	or is filled element-by-element.

<!--
                   ██████  ████████ ██       ████████
 ██   ██          ██    ██ ██       ██       ██
  ██ ██           ██       ██       ██       ██
█████████ ███████  ██████  ██████   ██       ██████
  ██ ██                 ██ ██       ██       ██
 ██   ██          ██    ██ ██       ██       ██
                   ██████  ████████ ████████ ██
-->

<h2 id='self-alignment'>
Self-Alignment: Aligning the Box within its Parent</h2>

	The 'justify-self' and 'align-self' properties control alignment of the box within its containing block.

	<div class="figure">
		<img alt="Diagram showing that the alignment of the element within its containing block is affected." src="images/self-example.svg" width=212 height=212>
	</div>

<h3 id='justify-self-property'>
Inline/Main-Axis Alignment: the 'justify-self' property</h3>

	<pre class="propdef">
	Name: justify-self
	Value: auto | normal | stretch | <<baseline-position>> | [ <<overflow-position>>? && <<self-position>> ]
	Initial: auto
	Applies to: block-level boxes, absolutely-positioned boxes, and grid items
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	Justifies the box within its containing block along the inline/row/main axis:
	the box's outer edges are aligned within its <a>alignment container</a>
	<a href="#alignment-values">as described by its alignment value</a>.

	The <dfn value for="justify-self">auto</dfn> keyword is interpreted as
	''justify-self/normal'' if the box is absolutely positioned or has no parent,
	and as the computed value of 'justify-items' on the parent
	(minus any ''legacy'' keywords)
	otherwise.

	The <dfn value for="justify-self">normal</dfn> keyword
	represents the “default” alignment for the layout mode.
	Its behavior depends on the layout mode, as described below.

	When the box’s computed 'width'/'height' (as appropriate to the axis) is ''width/auto''
	and neither of its margins (in the appropriate axis) are ''margin/auto'',
	the <dfn value for="justify-self, align-self">stretch</dfn> keyword
	sets the box’s used size to the length necessary to make its outer size
	as close to filling the <a>alignment container</a> as possible
	while still respecting the constraints imposed by 'min-height'/'min-width'/'max-height'/'max-width'.
	Unless otherwise specified, this value falls back to ''flex-start''.

	All other values cause a 'width'/'height' of ''width/auto''
	to be treated as ''width/fit-content''.

	Issue: Should ''justify-self/stretch'' allow a fallback alignment,
	like it does on 'align-content' and 'justify-content'?

	Note: The ''justify-self/stretch'' keyword can cause elements to shrink,
	to fit their container.

	All other values are as defined in [[#alignment-values]], above.

	Note: ''margin/auto'' margins,
	because they effectively adjust the size of the margin area,
	take precedence over 'justify-self'.

### Block-Level Boxes ### {#justify-block}

	<table class="data align-details">
		<tr>
			<th>'justify-self' Axis
			<td>
				The block’s containing block’s <a>inline axis</a>.
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The block's containing block,
				except that for block-level elements that establish a block formatting context
				and are placed next to a float,
				the <a>alignment container</a> is reduced by the space taken up by the float.

				Issue: This is the legacy behavior of HTML <code>align</code>.
				Do we want to still do this,
				or should we do the centering behavior of margins,
				which center while <em>ignoring</em> floats,
				then shift if necessary to avoid overlapping?
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The block's margin box.
		<tr>
			<th>''justify-self/normal'' Behavior
			<td>
				Behaves as ''justify-self/start''.
		<tr>
			<th>Other Details
			<td>
				In terms of CSS2.1 block-level formatting [[!CSS2]],
				the rules for “over-constrained” computations in <a href="https://www.w3.org/TR/CSS21/visudet.html#blockwidth">section 10.3.3</a>
				are ignored in favor of alignment as specified here
				and the used value of the offset properties are not adjusted to correct for the over-constraint.

				This property does not apply to floats.
	</table>

	<div class="example">
		The effect of these rules is that an auto-sized block-level table,
		for example, can be aligned while still having side margins.
		If the table's max-content size is narrower than its containing block,
		then it is shrink-wrapped to that size and aligned as specified.
		If the table's max-content size is wider, then it fills its containing block,
		and the margins provide appropriate spacing from the containing block edges.
	</div>

### Absolutely-Positioned Boxes ### {#justify-abspos}

	<table class="data align-details">
		<tr>
			<th>'justify-self' Axis
			<td>
				The block’s containing block’s <a>inline axis</a>.
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The box's containing block,
				as modified by the offset properties ('top'/'right'/'bottom'/'left').
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The box's margin box.
		<tr>
			<th>''justify-self/normal'' Behavior
			<td>
				For consistency with CSS 2.1,
				the ''justify-self/normal'' keyword behaves as ''start'' on replaced absolutely-positioned boxes,
				and behaves as ''justify-self/stretch'' on all other absolutely-positioned boxes.

				If the box has non-''top/auto'' offsets in this axis,
				and either 'margin' in this axis is ''margin/auto'',
				an ''width/auto'' 'width' ('height', for <a>vertical writing modes</a>) is treated as ''fill-available''
				and ''margin/auto'' margins are treated as zero.
				(Otherwise, when 'justify-self' is not ''justify-self/normal'',
				''width: auto'' (''height: auto'') is treated as ''width/fit-content''
				and ''margin/auto'' margins are used for alignment
				as in in-flow block-level layout.)
		<tr>
			<th>Other Details
			<td>
				In terms of CSS2.1 formatting [[!CSS2]],
				the rules for “over-constrained” computations in <a href="https://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">section 10.3.7</a>
				are ignored in favor of alignment as specified here,
				and the used value of the offset properties are not adjusted to correct for the over-constraint.

				Values other than ''justify-self/stretch'' cause <a href="https://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">non-replaced absolutely-positioned boxes</a>
				to use <a>fit-content sizing</a> for calculating ''width/auto'' inline sizes.

				Note that ''justify-self/stretch'' <em>does</em> cause replaced absolutely-positioned elements to fill their containing block
				just as non-replaced ones do.

				If either offset property in this dimension is ''top/auto'',
				'justify-self' has no effect.
	</table>

### Static Position of Absolutely-Positioned Boxes ### {#justify-abspos-static}

	<table class="data align-details">
		<tr>
			<th>'justify-self' Axis
			<td>
				The same axis that 'justify-self' corresponds to for in-flow children of the element's parent
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The element's <a>static-position rectangle</a>,
				as defined by its parent's layout mode.
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The element's margin box <em>after</em> laying out the element,
				treated as fixed-size for the purpose of alignment.
		<tr>
			<th>''justify-self/normal'' Behavior
			<td>
				Behaves as (the fallback for) ''justify-self/stretch'' (because it is treated as fixed-size).
	</table>

### Table Cells ### {#justify-cell}

	This property does not apply to table cells,
	because their position and size is fully constrained by table layout.

### Flex Items ### {#justify-flex}

	This property does not apply to <a>flex items</a>,
	because there is more than one item in the <a>main axis</a>.
	See 'flex' for stretching and 'justify-content' for <a>main-axis</a> alignment. [[!CSS-FLEXBOX-1]]

### Grid Items ### {#justify-grid}

	<table class="data align-details">
		<tr>
			<th>'justify-self' Axis
			<td>
				The grid’s <a>row axis</a>.
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>grid area</a>.
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The <a>grid item’s</a> margin box.
		<tr>
			<th>''justify-self/normal'' Behavior
			<td>
				Generally behaves as ''justify-self/stretch'',
				except that items with an intrinsic ratio maintain that ratio.
	</table>

    See [[!CSS-GRID-1]] for details.

<h3 id='align-self-property'>
Block/Cross-Axis Alignment: the 'align-self' property</h3>

	<pre class="propdef">
	Name: align-self
	Value: auto | normal | stretch | <<baseline-position>> | [ <<overflow-position>>? && <<self-position>> ]
	Initial: auto
	Applies to: flex items, grid items, and absolutely-positioned boxes
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	Aligns the box within its containing block along the block/column/cross axis:
	the box's outer edges are aligned within its <a>alignment container</a>
	<a href="#alignment-values">as described by its alignment value</a>.

	The <dfn value for="align-self">auto</dfn> keyword is interpreted as
	''align-self/normal'' if the box is absolutely positioned or has no parent,
	and as the computed value of 'align-items' on the parent
	otherwise.

	The <dfn value for="align-self">normal</dfn> keyword
	represents the “default” alignment for the layout mode.

	The ''align-self/stretch'' keyword is as defined in [[#justify-self-property]].

	All other values are as defined in [[#alignment-values]], above.

	Note: ''margin/auto'' margins,
	because they effectively adjust the size of the margin area,
	take precedence over 'justify-self'.

### Block-Level Boxes ### {#align-block}

	The 'align-self' property does not apply to block-level boxes
	(including floats),
	because there is more than one item in the <a>block axis</a>.

### Absolutely-Positioned Boxes ### {#align-abspos}

	<table class="data align-details">
		<tr>
			<th>'align-self' Axis
			<td>
				The block’s containing block’s <a>block axis</a>.
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The box's containing block.
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The box’s margin box.
		<tr>
			<th>''align-self/normal'' Behavior
			<td>
				For consistency with CSS 2.1,
				the ''align-self/normal'' keyword behaves as ''start'' on replaced absolutely-positioned boxes,
				and behaves as ''align-self/stretch'' on all other absolutely-positioned boxes.

				If the box has non-''top/auto'' offsets in this axis,
				and either 'margin' in this axis is ''margin/auto'',
				an ''width/auto'' 'height' ('width', for <a>vertical writing modes</a>)
				is treated as ''fill-available''
				and ''margin/auto'' margins are treated as zero.
				(Otherwise, when 'align-self' is not ''align-self/normal'',
				''height: auto'' (''width: auto'') is treated as ''height/fit-content''
				and ''margin/auto'' margins are used for alignment
				as in in-flow block-level layout.)
		<tr>
			<th>Other Details
			<td>
				In terms of CSS2.1 formatting [[!CSS2]],
				the rules for "over-constrained" computations in <a href="https://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-height">section 10.6.4</a>
				are ignored in favor of alignment as specified here
				and the used value of the offset properties are not adjusted to correct for the over-constraint.

				Values other than ''align-self/stretch'' cause <a href="https://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-height">non-replaced absolutely-positioned boxes</a>
				to use shrink-to-fit sizing for calculating ''height/auto'' block sizes.

				Note that ''justify-self/stretch'' does cause replaced absolutely-positioned elements to fill their containing block
				just as non-replaced ones do.

				If either offset property in this dimension is ''top/auto'',
				'align-self' has no effect.
	</table>

### Static Position of Absolutely-Positioned Boxes ### {#align-abspos-static}

	<table class="data align-details">
		<tr>
			<th>'align-self' Axis
			<td>
				The same axis that 'align-self' corresponds to for in-flow children of the element's parent
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The element's <a>static-position rectangle</a>,
				as defined by its parent's layout mode.
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The element's margin box <em>after</em> laying out the element,
				treated as fixed-size for the purpose of alignment.
		<tr>
			<th>''align-self/normal'' Behavior
			<td>
				Behaves as (the fallback for) ''align-self/stretch'' (because it is treated as fixed-size).
	</table>

### Table Cells ### {#align-cell}

	This property does not apply to table cells,
	because their position and size is fully constrained by table layout.

### Flex Items ### {#align-flex}

	<table class="data align-details">
		<tr>
			<th>'align-self' Axis
			<td>
				The <a>flex container’s</a> <a>cross axis</a>.
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>flex line</a> the <a>flex item</a> is in.
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The <a>flex item’s</a> margin box.
		<tr>
			<th>''align-self/normal'' Behavior
			<td>
				Behaves as ''align-self/stretch''.
	</table>

	See [[!CSS-FLEXBOX-1]] for details.

### Grid Items ### {#align-grid}

	<table class="data align-details">
		<tr>
			<th>'align-self' Axis
			<td>
				The grid’s <a>column axis</a>.
		<tr>
			<th><a>Alignment Container</a>
			<td>
				The <a>grid area</a>.
		<tr>
			<th><a>Alignment Subject</a>
			<td>
				The <a>grid item’s</a> margin box.
		<tr>
			<th>''align-self/normal'' Behavior
			<td>
				Behaves as ''align-self/stretch''.
	</table>

<h3 id='place-self-property'>
Self-Alignment Shorthand: the 'place-self' property</h3>

	<pre class="propdef">
	Name: place-self
	Value: [ auto | normal | stretch | <<baseline-position>> | <<self-position>> ]{1,2}
	Initial: auto
	Applies to: block-level boxes, absolutely-positioned boxes, and grid items
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	This <a>shorthand property</a> sets
	both the 'align-self' and 'justify-self' properties
	in a single declaration.
	The first value is assigned to 'align-self'.
	The second value is assigned to 'justify-self';
	if omitted, it is copied from the first value.

<h3 id="baseline-align-self">
Baseline Self-Alignment</h3>

	Boxes participating in row-like layout contexts (<a>shared alignment contexts</a>)
	can be baseline-aligned to each other.
	This effectively increases the margins on the box
	to align its <a>alignment baseline</a>
	with other baseline-aligned boxes in its <a lt="baseline-sharing group">group</a>.

	The set of boxes that participate in <a>baseline self-alignment</a>
	depends on the layout model:

	<dl>
		<dt>Flex Items:
		<dd>
			A <a>flex item</a> participates in first (last) <a>baseline self-alignment</a> in its flex line
			if its <a>inline axis</a> is parallel to the <a>main axis</a>
			and its computed 'align-self' is ''first baseline'' (''last baseline'').
			See [[!CSS-FLEXBOX-1]] for details.

		<dt>Grid Items:
		<dd>
			A <a>grid item</a> participates in first (last) <a>baseline self-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its 'justify-self' or 'align-self' property (whichever affects its <a>block axis</a>)
			computes to ''first baseline'' (''last baseline'').
	</dl>

	If a box spans multiple <a>shared alignment contexts</a>,
	it participates in first (last) <a>baseline self-alignment</a>
	within its start-most (end-most) <a>shared alignment context</a> along that axis.

	When a box participates in first (last)  <dfn export lt="baseline self-alignment|first-baseline self-alignment|last-baseline self-alignment">baseline self-alignment</dfn>,
	it is aligned as follows:
	the minimum necessary extra space is added <strong>between its start (end) edge and the <a>alignment container</a> edge</strong>
	to match its <a>alignment baseline</a> in that axis up to that of its <a>baseline-sharing group</a>.
	See [[#align-by-baseline]].
	This may increase the intrinsic size contribution of the <a>alignment subject</a>.

	Note: In other words, a box participating in <a>baseline self-alignment</a>
	acts like its 'margin' was increased
	so that its <a>alignment baseline</a> lines up with the <a>alignment baselines</a> of its participating siblings.
	The box's contents are aligned as usual for its 'align-content'/'justify-content' value.

<!--
                  ████ ████████ ████████ ██     ██  ██████
 ██   ██           ██     ██    ██       ███   ███ ██    ██
  ██ ██            ██     ██    ██       ████ ████ ██
█████████ ███████  ██     ██    ██████   ██ ███ ██  ██████
  ██ ██            ██     ██    ██       ██     ██       ██
 ██   ██           ██     ██    ██       ██     ██ ██    ██
                  ████    ██    ████████ ██     ██  ██████
-->

<h2 id='default-alignment'>
Default Alignment</h2>

	The 'align-items' and 'justify-items' properties set the default 'align-self' and 'justify-self' behavior of the items contained by the element.

	<div class="figure">
		<img alt="Diagram showing that the alignment of grid items within the element is affected." src="images/items-example.svg" width=212 height=212>
	</div>

<h3 id='justify-items-property'>
Inline/Main-Axis Alignment: the 'justify-items' property</h3>

	<pre class="propdef">
	Name: justify-items
	Value: auto | normal | stretch | <<baseline-position>> | [ <<overflow-position>>? && <<self-position>> ] | [ legacy && [ ''<content-position>/left'' | ''<content-position>/right'' | ''<content-position>/center'' ] ]
	Initial: auto
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value, except for ''justify-items/auto'' (see prose)
	Animatable: no
	</pre>

	This property specifies the default 'justify-self' for all of the boxes
	(including anonymous boxes)
	participating in this box's formatting context.
	Values have the following meanings:

	<dl dfn-type="value" dfn-for="justify-items">
		<dt><dfn>auto</dfn>
		<dd>
			If the <a>inherited value</a> of ''justify-items'' includes the ''legacy'' keyword,
			''justify-items/auto'' computes to the <a>inherited value</a>.

			Otherwise, ''justify-items/auto'' computes to ''justify-items/normal''.

		<dt><dfn>legacy</dfn>
		<dd>
			This keyword causes the value to effectively inherit into descendants.
			It can only be combined with the ''<content-position>/center'', ''left'', and ''right'' positions.
			When ''justify-self:auto'' retrieves the value of 'justify-items',
			only the alignment keyword, not the ''legacy'' keyword, is passed to it.
			It exists to implement the legacy alignment behavior of HTML's <code>&lt;center></code> element and <code>align</code> attribute.
	</dl>

	Other values have no special handling and are merely passed to 'justify-self'.

	Issue: The ''justify-items/auto'' keyword exists solely to implement the ''legacy'' inheritance property.
	We could just rename it to ''legacy'',
	since it computes away to ''justify-items/normal'' unless you're using ''legacy'' anyway.

	Issue: The ''legacy'' keyword acts weird,
	to make it behave like an inherited value
	even though this property is not inherited.
	We don't mix inheritance and non-inheritance anywhere else,
	because it's a bad code smell.
	Should we remove ''legacy'' and make a separate inheriting property for it?
	Or just drop the behavior entirely and let it remain special HTML magic?


<h3 id='align-items-property'>
Block/Cross-Axis Alignment: the 'align-items' property</h3>

	<pre class="propdef">
	Name: align-items
	Value: normal | stretch | <<baseline-position>> | [ <<overflow-position>>? && <<self-position>> ]
	Initial: normal
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	This property specifies the default 'align-self' for all of the boxes
	(including anonymous boxes)
	participating in this box's formatting context.
	Values have the following meanings:

	Values have no special handling and are merely passed to 'align-self'.

<h3 id='place-items-property'>
Self-Alignment Shorthand: the 'place-items' property</h3>

	<pre class="propdef">
	Name: place-items
	Value: [ normal | stretch | <<baseline-position>> | <<self-position>> ] [ auto | normal | stretch | <<baseline-position>> | <<self-position>> ]?
	Initial: see individual properties
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: see individual properties
	Animatable: no
	</pre>

	This <a>shorthand property</a> sets
	both the 'align-items' and 'justify-items' properties
	in a single declaration.
	The first value is assigned to 'align-items'.
	The second value is assigned to 'justify-items';
	if omitted, it is copied from the first value.

<!--
████████     ███     ██████  ████████ ██       ████ ██    ██ ████████
██     ██   ██ ██   ██    ██ ██       ██        ██  ███   ██ ██
██     ██  ██   ██  ██       ██       ██        ██  ████  ██ ██
████████  ██     ██  ██████  ██████   ██        ██  ██ ██ ██ ██████
██     ██ █████████       ██ ██       ██        ██  ██  ████ ██
██     ██ ██     ██ ██    ██ ██       ██        ██  ██   ███ ██
████████  ██     ██  ██████  ████████ ████████ ████ ██    ██ ████████
-->

<h2 id='baseline-rules'>
Baseline Alignment Details</h2>

	Boxes in a <a>baseline-sharing group</a> are aligned to each other
	using their <a>alignment baselines</a>.
	For example, in horizontal writing modes,
	specifying ''align-content: baseline'' on table cells in the same row
	will align the alphabetic baselines of their <a>first formatted lines</a>.
	This section defines exactly how baseline alignment is performed
	in consideration of the myriad baselines and <a>writing modes</a>
	that exist in internationalized modern CSS.

	Refer to [[css-writing-modes-3#intro-baselines]]
	for more information on baselines and writing modes.

<h3 id='baseline-export'>
Determining the Baselines of a Box</h2>

	The <dfn export lt="first baseline set|first baselines|baseline set">first baseline set</dfn>
	(and <dfn export lt="last baseline set|last baselines">last baseline set</dfn>) of a box
	for a given axis
	are a set of baselines (alphabetic, central, etc.)
	nominally associated with the first (last) line of text within the box.
	The <dfn export>alignment baseline</dfn> is one of these,
	usually the dominant baseline associated with the <a>shared alignment context</a>.
	(See the 'dominant-baseline' and 'alignment-baseline' properties in [[CSS-INLINE-3]].)

	The first and last <a>baseline sets</a> of a box
	are determined differently based on the layout model, as follows:

	<dl>
		<dt>block containers
		<dd>
			The first (last) inline-axis baselines of a block container
			are <a>generated</a> from the dominant first (last) baseline of the first (last) in-flow line box in the block container,
			or are taken from the first (last) in-flow block-level child in the block container that contributes a set of first (last) baselines,
			whichever comes first (last).
			If there is no such line box or child,
			then the block container has no baselines.

			A block container has no block-axis baselines.

		<dt>tables
		<dd>
			The first (last) inline-axis baselines of a table box are
			the first (last) baselines of its first (last) row.

			When finding the baselines of an inline-block,
			any baselines contributed by table boxes must be skipped.
			(This quirk is a legacy behavior from [[CSS2]].)

			The first (last) block-axis baselines of a table box are the first (last) baselines of its first (last) column.

		<dt>table rows
		<dd>
			If any cells in the row participate in ''first baseline'' (''last baseline'') alignment along the row axis,
			the first (last) inline-axis baselines of the row
			are <a>generated</a> from their shared <a>alignment baseline</a>
			and the row's <a>first available font</a>,
			after alignment has been performed.
			Otherwise, the first (last) inline-axis baselines of the row
			are <a>synthesized</a> from the lowest and highest content edges of the cells in the row.
			[[!CSS2]]

			A table row has no block-axis baselines.

		<dt>table columns
		<dd>
			If any cells in the column participate in ''first baseline'' (''last baseline'') alignment
			along the column axis (by having a writing mode perpendicular to that of the table),
			the first (last) block-axis baselines of the column
			are <a>generated</a> from their shared <a>alignment baseline</a>
			and the column's <a>first available font</a>,
			after alignment has been performed.
			Otherwise, the first (last) inline-axis baselines of the row
			are <a>synthesized</a> from the extreme content edges of the cells in the row.
			[[!CSS2]]

			A table column has no inline-axis baselines.

		<dt>flex containers
		<dd>
			See <a href="https://www.w3.org/TR/css3-flexbox/#flex-baselines">Flex Baselines</a> in [[!CSS-FLEXBOX-1]].

		<dt>grid containers
		<dd>
			See <a href="https://www.w3.org/TR/css3-grid-layout/#grid-baselines">Grid Baselines</a> in [[!CSS-GRID-1]].
	</dl>

	To <dfn local-lt=generate|generated export>generate baselines</dfn> for a box from a single baseline,
	use the baseline table from the font settings and <a>first available font</a> of that box,
	and align that baseline set to the given single baseline.

	To <dfn local-lt=synthesize|synthesized export>synthesize baselines</dfn> from a rectangle (or two parallel lines),
	synthesize the alphabetic baseline from the lower line,
	and the central baseline by averaging the positions of the two edges or lines.

	Note: The forthcoming Inline Layout Module will define synthesis rules for baselines other than alphabetic and central.

	A box has a <dfn export>natural baseline</dfn>
	if it derives its <a>baseline set</a>(s) from a font's baseline table
	(whether or not the UA had to <a href="https://drafts.csswg.org/css-inline/#baseline-synthesis-fonts">synthesize that baseline table</a>,
	e.g. due to it being missing from the font).
	It has a <dfn export>synthesized baseline</dfn>
	if its baselines are <a>synthesized</a> from the geometry of its box,
	as described above.

	Note: The edges used to <a>synthesize</a> baselines from a box
	depend on their <a>formatting context</a>:
	inline-level boxes <a>synthesize</a> from their margin edges [[CSS-INLINE-3]],
	table cells <a>synthesize</a> from their content edges [[CSS2]],
	and grid and flex items <a>synthesize</a> from their border edges [[CSS-GRID-1]] [[CSS-FLEXBOX-1]].

	<p class='issue'>
		Maybe these things are wrong?
		CSS 2.1 is really weird about baseline alignment.

	For the purposes of finding the baselines of a box,
	it and all its in-flow descendants with a scrolling mechanism (see the 'overflow' property)
	must be considered as if scrolled to their origin.
	Furthermore, if, in the case of a box with non-''visible'' overflow,
	the resulting position of a first (last) baseline
	is past a box's end (start) margin edge,
	its position is clamped to that margin edge.
	That is, when assuming the initial scroll position,
	if a box's first baseline is past its end margin edge
	or its last baseline is past its start margin edge,
	that baseline's position is assumed to be at that edge
	so that such a box's baseline
	is never outside its margin edges.

	ISSUE: This reflects the latest CSS2.1 errata, however see also discussion of an <a href="https://github.com/w3c/csswg-drafts/issues/766">alternate solution</a> that was previously drafted here.

<h3 id='baseline-terms'>
Baseline Alignment Terminology</h3>

	A <dfn export>baseline-sharing group</dfn>
	is composed of boxes that participate in baseline alignment together.
	This is possible only if they

	<ul>
		<li>Share an <a>alignment context</a> along an axis perpendicular to their baseline alignment axis.
		<li>Have compatible <a>baseline alignment preferences</a>
		(i.e., the baselines that want to align are on the same side of the alignment context).

	</ul>

	The <a>baseline alignment preferences</a> of two boxes are compatible if they have the same <a>block flow direction</a> and <a>baseline alignment preference</a>,
	or have opposite <a>block flow direction</a> and opposite <a>baseline alignment preference</a>.
	For this purpose, boxes that establish an <a>orthogonal flow</a>
	are treated as having the same <a>block flow direction</a>
	as their <a>alignment context</a>,
	and their baselines are <a>synthesized</a> accordingly,
	exactly as for replaced elements and other boxes that have no <a>natural baseline</a>.


	Boxes share an <dfn lt="shared alignment context|alignment context" export>alignment context</dfn> along a particular axis when they are:

	<ul>
		<li>table cells in the same row, along the table's row (inline) axis
		<li>table cells in the same column, along the table's column (block) axis
		<li>grid items in the same row, along the grid's row (inline) axis
		<li>grid items in the same column, along the grid's colum (block) axis
		<li>flex items in the same flex line, along the flex container's main axis
	</ul>

	Note: Conceptually,
	the inline-level boxes on a line box also share a self-alignment context
	and participate in a baseline-sharing group;
	however they only baseline-align in response to the 'vertical-align' property,
	not any of the properties defined in this module.
	See [[CSS-INLINE-3]].

<h3 id='align-by-baseline'>
Aligning Boxes by Baseline</h3>

	Given a set of boxes and their baselines that all belong to a single <a>baseline-sharing group</a>,
	the boxes are baseline-aligned as follows:

	First, generate the alignment context's baseline table
	from its <a>first available font</a>
	and overlay also the mirror of this baseline table by aligning their central baselines.
	These are the baseline grids to which the boxes will align.

	Next, align all boxes by their specified <a>alignment baseline</a>
	to the alignment context's baseline table
	or its mirror, whichever matches its <a>line orientation</a>.
	Unless otherwise specified (e.g. via the 'alignment-baseline' property),
	the <a>alignment baseline</a> is the <a>dominant baseline</a> of the alignment context.

	Position this <dfn export>aligned subtree</dfn> within the alignment container
	according to the <a>fallback alignment</a> associated with the
	specified <a>baseline alignment preference</a>.

<!--
 ██████  ██     ██    ███    ██    ██  ██████   ████████  ██████
██    ██ ██     ██   ██ ██   ███   ██ ██    ██  ██       ██    ██
██       ██     ██  ██   ██  ████  ██ ██        ██       ██
██       █████████ ██     ██ ██ ██ ██ ██   ████ ██████    ██████
██       ██     ██ █████████ ██  ████ ██    ██  ██             ██
██    ██ ██     ██ ██     ██ ██   ███ ██    ██  ██       ██    ██
 ██████  ██     ██ ██     ██ ██    ██  ██████   ████████  ██████
-->

<h2 id="changes">
Changes</h2>

	Changes since the <a href="https://www.w3.org/TR/2016/WD-css-align-3-20160614/">previous Working Draft</a> include:

	* Make ''align-self/auto'' values of 'align-self' and 'justify-self' compute to themselves.

<h2 id="privacy-security">
Privacy and Security Considerations</h2>

	As a simple layout spec,
	this introduces no new privacy or security considerations.

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	Special thanks goes to Javier Fernandez, Markus Mielke, Alex Mogilevsky,
	and the participants in the CSSWG's March 2008 F2F alignment discussions.
