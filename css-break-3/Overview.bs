<pre class='metadata'>
Title: CSS Fragmentation Module Level 3
Status: ED
Work Status: Testing
ED: https://drafts.csswg.org/css-break/
Shortname: css-break
Group: csswg
Level: 3
TR: https://www.w3.org/TR/css-break-3/
Previous Version: https://www.w3.org/TR/2016/CR-css-break-3-20160114/
Editor: Rossen Atanassov, Microsoft, ratan@microsoft.com, w3cid 49885
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Abstract:  This module describes the fragmentation model that partitions a flow  into pages, columns, or regions.
Abstract:  It builds on the Page model module and introduces and defines the fragmentation model.
Abstract:  It adds functionality for pagination, breaking variable fragment size and orientation, widows and orphans.
Ignored Terms: background positioning area, region chain, … message topic …, reference box
At Risk: the ''region'' and ''break-after/avoid-region'' values of 'break-*'
</pre>

<h1>CSS Fragmentation Module Level 3 <br> <small>Breaking the Web, one fragment at a time</small></h1>

<h2 id="intro">
Introduction</h2>

<div class=non-normative>
  <p><em>This section is not normative.</em></p>
  <p>
    In [=paged media=] (e.g., paper, transparencies, photo album pages, pages
    displayed on computer screens as printed output simulations), as
	opposed to [=continuous media=],
	the content of the document is split into one or
    more discrete display surfaces. In order to avoid awkward breaks
    (such as halfway through a line of text), the layout engine must be
    able to shift around content that would fall across the page break.
    This process is called <dfn export>pagination</dfn>.
  </p>
  <p>
    In CSS, in addition to [=paged media=], certain layout features such as
    <a href="https://www.w3.org/TR/css3-regions/">regions</a> [[CSS3-REGIONS]]
    and <a href="https://www.w3.org/TR/css3-multicol/">multi-column layout</a>
    [[CSS3COL]] create a similarly fragmented environment.
    The generic term for breaking content across containers is
    <a>fragmentation</a>.
    This module explains how content breaks across <a>fragmentation containers</a> (<a>fragmentainers</a>)
    such as pages and columns and how such breaks can be
    <a href="#breaking-controls">controlled by the author</a>.
  </p>
</div>

<h3 id="placement">
Module Interactions</h3>

  <p>
    This module replaces and extends the pagination controls defined in
    [[CSS2]] <a href="https://www.w3.org/TR/CSS21/page.html#page-breaks">section 13.3</a>
    and in [[CSS3PAGE]].
  </p>
  <!-- End section "Modules Interactions" -->

<h3 id="values">
Value Definitions</h3>

  This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
  using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
  Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
  Combination with other CSS modules may expand the definitions of these value types.

  In addition to the property-specific values listed in their definitions,
  all properties defined in this specification
  also accept the <a>CSS-wide keywords</a> as their property value.
  For readability they have not been repeated explicitly.

<h2 id="fragmentation-model">
Fragmentation Model and Terminology</h2>

  <dl export>
    <dt><dfn>fragmentation container</dfn> (<dfn>fragmentainer</dfn>)</dt>
    <dd>
      A box&mdash;such as a page box, column box, or region&mdash;that contains
      a portion (or all) of a <a>fragmented flow</a>.
      Fragmentainers can be pre-defined, or generated as needed.
      When breakable content would overflow a fragmentainer in the block dimension,
      it breaks into the next container in its <a>fragmentation context</a>
      instead.
    </dd>
    <dt><dfn>fragmentation context</dfn></dt>
    <dd>
      An ordered series of <a>fragmentainers</a>,
      such as created by a <a href="https://www.w3.org/TR/css3-multicol/">multi-column container</a>,
      a chain of <a href="https://www.w3.org/TR/css3-regions">CSS regions</a>,
      or a [=paged media=] display.
      A given fragmentation context can only have one block flow direction
      across all its <a>fragmentainers</a>.
      (Descendants of the <a>fragmentation root</a> may have other block flow directions,
      but fragmentation proceeds according to the block flow direction applied to the <a>fragmentation root</a>.)
    </dd>
    <dt><dfn>fragmented flow</dfn></dt>
    <dd>
      Content that is being laid out in a <a>fragmentation context</a>.
      The <a>fragmented flow</a> consists of the content of a (possibly anonymous) box
      called the <dfn>fragmentation root</dfn>.
    </dd>
    <dt><dfn>fragmentation direction</dfn></dt>
    <dd>
      The block flow direction of the <a>fragmentation context</a>,
      i.e. the direction in which content is fragmented.
      (In this level of CSS, content only fragments in one dimension.)
    </dd>
    <dt><dfn>fragmentation</dfn></dt>
    <dd>
      The process of splitting a content flow across the <a>fragmentainers</a>
      that form a <a>fragmentation context</a>.
    </dd>
    <dt><dfn>box fragment</dfn> or <dfn>fragment</dfn></dt>
    <dd>
      The portion of a box that belongs to exactly one <a>fragmentainer</a>.
      A box in continuous flow always consists of only one fragment.
      A box in a fragmented flow consists of one or more fragments.
      Each fragment has its own share of the box’s border, padding, and margin,
      and therefore has its own <a>padding area</a>, <a>border area</a>, and <a>margin area</a>.
      (See 'box-decoration-break', which controls how these are affected by fragmentation.)
    <dt><dfn>remaining fragmentainer extent</dfn></dt>
    <dd>
      The remaining <a>block-axis</a> space in the <a>fragmentainer</a> available to a given element,
      i.e. between the end of preceding content in <a>fragmentainer</a>
      and the edge of the <a>fragmentainer</a>.
  </dl>

  <p>
    Each <dfn export local-lt="break">fragmentation break</dfn> (hereafter, <a>break</a>)
    ends layout of the fragmented box in the current <a>fragmentainer</a>
    and causes the remaining content to be laid out in the next <a>fragmentainer</a>,
    in some cases causing a new <a>fragmentainer</a> to be generated
    to hold the deferred content.
  </p>

  <p class="note">
    Breaking inline content into lines is another form of fragmentation,
    and similarly creates box fragments when it breaks
    <a href="https://www.w3.org/TR/CSS21/visuren.html#inline-boxes">inline boxes</a>
    across <a href="https://www.w3.org/TR/CSS21/visuren.html#line-box">line boxes</a>.
    However, inline breaking is not covered here; see [[!CSS2]]/[[CSS3TEXT]].
  </p>

  <p class="note">
    A box can be broken into multiple <a>fragments</a>
    also due to bidi reordering of text
    (see [[css-writing-modes-3#bidi-algo|Applying the Bidirectional Reordering Algorithm]]
    in [[css-writing-modes-3#text-direction|CSS Writing Modes]])
    or higher-level <a>display type</a> box splitting,
    e.g. <a href="https://www.w3.org/TR/CSS2/visuren.html#img-anon-block">block-in-inline splitting</a>
    (see <a href="https://www.w3.org/TR/CSS2/visuren.html#box-gen">CSS2&sect;9.2</a>)
    or <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">column-spanner-in-block</a> splitting
    (see <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">CSS Multi-column Layout</a>).
    The division into <a>box fragments</a> in these cases
    does not depend on layout (sizing/positioning of content).
  </p>

<h3 id="parallel-flows">
Parallel Fragmentation Flows</h3>

  <p>
    When multiple <a>formatting contexts</a> are laid out parallel to each other,
    fragmentation is performed independently in each <a>formatting context</a>.
    For example, if an element is floated,
    then a forced break inside the float
    will not affect the content outside the float
    (except insofar as it may increase the height of the float).
    UAs <em>may</em> (but are not required to)
    adjust the placement of <a>unforced breaks</a> in parallel <a>formatting contexts</a>
    to visually balance such side-by-side content,
    but <em>must not</em> do so to match a <a>forced break</a>.
  </p>

  <p>
    The following are examples of parallel flows
    whose contents will fragment independently:
  </p>
  <ul>
    <li>The contents of a float vs. the content wrapping outside the float.
    <li>The contents of a float vs. the contents of an adjacent float.
    <li>The contents of each table cell in a single table row.
    <li>The contents of each grid item in a single grid row.
    <li>The contents of each flex item in a flex layout row.
    <li>The contents of absolutely-positioned elements
        that cover the same range of their containing block's fragmentation context.
  </ul>

  <p>
    Content overflowing the content edge of a fixed-size box
    is considered parallel to the content after the fixed-size box
    and follows the normal fragmentation rules.
    Although overflowing content doesn't affect the size of the <a>fragmentation root</a> box,
    it does increase the length of the <a>fragmented flow</a>,
    spilling into or generating additional <a>fragmentainers</a> as necessary.
  </p>

<h3 id="nested-flows">
Nested Fragmentation Flows</h3>

  <p>
    Breaking a <a>fragmentainer</a> <var>F</var> effectively splits the <a>fragmentainer</a>
    into two <a>fragmentainers</a> (<var>F<sub>1</sub></var> and <var>F<sub>2</sub></var>).
    The only difference is that,
    with regards to the content of <a>fragmentainer</a> <var>F</var>,
    the type of break
    between the two pieces <var>F<sub>1</sub></var> and <var>F<sub>2</sub></var>
    is the <a href="#break-types">type of break</a> created
    by the <a>fragmentation context</a> that split <var>F</var>,
    not the type of break normally created by <var>F</var>’s own <a>fragmentation context</a>.
  </p>

  <div class="example">
    For example, if a region box is broken at a page boundary,
    then the content of the region will be affected by a page break at that point
    (but not by a region break).
  </div>

  <div class="note">
    Note that when a multi-column container breaks across pages,
    it generates a new row of columns on the next page for the rest of its content,
    so that a page break within a multi-column container
    is always both a page break and a column break.
  </div>

<h2 id="breaking-controls">
Controlling Breaks</h2>

  <p>
    The following sections explain how breaks are controlled in a <a>fragmented flow</a>.
    A page/column/region break opportunity between two boxes
    is under the influence of
    the containing block's 'break-inside' property,
    the 'break-after' property of the preceding element,
    and the 'break-before' property of the following element.
    A page/column/region break opportunity between line boxes
    is under the influence of
    the containing block's 'break-inside', 'widows', and 'orphans' properties.
    A fragmentation break can be
    allowed, forced, or discouraged depending on the values of these properties.
    A forced break overrides any break restrictions acting at that break point.
    In the case of forced page breaks, the author can also specify
    on which page (<a href="https://www.w3.org/TR/css3-page/#left-right-first">left or right</a>)
    the subsequent content should resume.

  <p>
    See the section on <a href="#breaking-rules">rules for breaking</a>
    for the exact rules on how these properties affect fragmentation.

<h3 id="break-between">
Breaks Between Boxes: the 'break-before' and 'break-after' properties</h3>

  <pre class="propdef">
  Name: break-before, break-after
  Value: auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region
  Initial: auto
  Applies to: block-level boxes, grid items, flex items, table row groups, table rows (but see prose)
  Inherited: no
  Computed value: specified keyword
  Animation type: discrete
  </pre>

  <p>
    These properties specify page/column/region break behavior
    before/after the generated box.
    The <dfn>forced break values</dfn>
    ''left'', ''right'', ''recto'', ''verso'', ''page'', ''column'' and ''region''
    create a <a href="#forced-breaks">forced break</a> in the flow
    while the <dfn>avoid break values</dfn>
    ''break-before/avoid'', ''break-before/avoid-page'', ''break-before/avoid-column'' and ''break-before/avoid-region''
    indicate that content should be kept together.
  </p>

  <p>
    Values for 'break-before' and 'break-after' are defined in the sub-sections below.
    User Agents must apply these properties to boxes in the normal flow of the <a>fragmentation root</a>.
    User agents should also apply these properties to floated boxes
    whose containing block is in the normal flow of the root fragmented element.
    User agents may also apply these properties to other boxes.
    User agents must not apply these properties to absolutely-positioned boxes.
  </p>

<h4 id="generic-break-values" class="no-num">
Generic Break Values</h4>

  <p>
    These values have an effect regardless of
    the type of fragmented context containing the flow.

  <dl dfn-type=value dfn-for='break-before,break-after'>
    <dt><dfn>auto</dfn>
    <dd>
      Neither force nor forbid a break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
    <dt><dfn>avoid</dfn>
    <dd>
      Avoid a break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
  </dl>

<h4 id="page-break-values" class="no-num">
Page Break Values</h4>

  <p>
    These values only have an effect in paginated contexts;
    if the flow is not paginated, they have no effect.

  <dl dfn-type=value dfn-for='break-before,break-after'>
    <dt><dfn>avoid-page</dfn>
    <dd>
      Avoid a page break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
    <dt><dfn>page</dfn>
    <dd>
      Always force a page break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
    <dt><dfn>left</dfn>
    <dd>
      Force one or two page breaks before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a> so that the next page is formatted as a left page.
    </dd>
    <dt><dfn>right</dfn>
    <dd>
      Force one or two page breaks before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a> so that the next page is formatted as a right page.
    </dd>
    <dt><dfn>recto</dfn>
    <dd>
      Force one or two page breaks before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a> so that
      the next page is formatted as either a left page or a right page,
      whichever is second (according to the <a>page progression</a>) in a page spread.
    </dd>
    <dt><dfn>verso</dfn>
    <dd>
      Force one or two page breaks before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a> so that
      the next page is formatted as either a left page or a right page,
      whichever is first (according to the <a>page progression</a>) in a page spread.
    </dd>
  </dl>

<h4 id="column-break-values" class="no-num">
Column Break Values</h4>

  <p>
    These values only have an effect in multi-column contexts;
    if the flow is not within a multi-column context, they have no effect.

  <dl dfn-type=value  dfn-for='break-before,break-after'>
    <dt><dfn>avoid-column</dfn>
    <dd>
      Avoid a column break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
    <dt><dfn>column</dfn>
    <dd>
      Always force a column break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
  </dl>

<h4 id="region-break-values" class="no-num">
Region Break Values</h4>

  <p>
    These values only have an effect in multi-region contexts;
    if the flow is not linked across multiple regions, these values have no effect.

  <dl dfn-type=value  dfn-for='break-before,break-after'>
    <dt><dfn>avoid-region</dfn>
    <dd>
      Avoid a region break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
    <dt><dfn>region</dfn>
    <dd>
      Always force a region break before/after the <a href="https://www.w3.org/TR/CSS21/visuren.html#block-boxes">principal box</a>.
    </dd>
  </dl>

<h4 id="break-propagation">
Child→Parent Break Propagation</h4>

  <p>
    Since breaks are only allowed between siblings,
    not between a box and its container
    (see <a href="#possible-breaks">Possible Break Points</a>),
    break values applied to children at the start/end of a parent
    are <dfn lt="propagate|propagation">propagated</dfn> to the parent,
    where they can take effect.
  </p>

  <p>
    Specifically--
    except in layout modes which define more specific rules
    to account for reordering and parallel layout
    (e.g. in <a href="http://www.w3.org/TR/css-flexbox-1/#pagination">flex layout</a> [[CSS-FLEXBOX-1]]
    or <a href="http://www.w3.org/TR/css-grid-1/#pagination">grid layout</a> [[CSS-GRID-1]])--
    a 'break-before' value on a first <a>in-flow</a> child box
    is <a>propagated</a> to its container.
    Likewise a 'break-after' value on a last <a>in-flow</a> child box
    is <a>propagated</a> to its container.
    (Conflicting values <a href="#forced-breaks">combine</a> as defined below.)
    This propagation stops before it breaks through the nearest matching fragmentation context.
  </p>

  <p>
    Break <a>propagation</a> does not affect <a>computed values</a>;
    it is part of interpreting the elements’ computed values for layout.
  </p>

<h3 id="break-within">
Breaks Within Boxes: the 'break-inside' property</h3>

  <pre class="propdef">
  Name: break-inside
  Value: auto | avoid | avoid-page | avoid-column | avoid-region
  Initial: auto
  Applies to: all elements except inline-level boxes, internal ruby boxes, table column boxes, table column group boxes, absolutely-positioned boxes
  Inherited: no
  Computed value: specified keyword
  Animation type: discrete
  </pre>

  <p>
    This property specifies page/column/region break behavior
    within the element's principal box.
    Values have the following meanings:

  <dl dfn-type=value dfn-for='break-inside,page-break-inside'>
    <dt><dfn>auto</dfn>
    <dd>
      Impose no additional breaking constraints within the box.
    </dd>
    <dt><dfn>avoid</dfn>
    <dd>
      Avoid breaks within the box.
    </dd>
    <dt><dfn>avoid-page</dfn>
    <dd>
      Avoid a page break within the box.
    </dd>
    <dt><dfn>avoid-column</dfn>
    <dd>
      Avoid a column break within the box.
    </dd>
    <dt><dfn>avoid-region</dfn>
    <dd>
      Avoid a region break within the box.
    </dd>
  </dl>

<h3 id="widows-orphans">
Breaks Between Lines: 'orphans', 'widows'</h3>

  <pre class="propdef">
  Name: orphans, widows
  Value: <<integer>>
  Initial: 2
  Applies to: <a>block containers</a> that establish an <a>inline formatting context</a>
  Inherited: yes
  Computed value: specified integer
  Animation type: by computed value type
  </pre>

  <p>
    The 'orphans' property specifies the minimum number
    of line boxes in a block container
    that must be left in a <a>fragment</a> <em>before</em> a fragmentation break.
    The 'widows' property specifies the minimum number
    of line boxes of a block container
    that must be left in a <a>fragment</a> <em>after</em> a break.
    Examples of how they are used to control fragmentation breaks are given
    <a href="#widows-orphans-example">below</a>.
  </p>

  <wpt>
  css/css-break/widows-001.html
  css/css-break/widows-orphans-001.html
  css/css-break/widows-orphans-002.html
  css/css-break/widows-orphans-003.html
  css/css-break/widows-orphans-004.html
  css/css-break/widows-orphans-005.html
  css/css-break/widows-orphans-006.html
  css/css-break/widows-orphans-007.html
  css/css-break/widows-orphans-008.html
  css/css-break/widows-orphans-009.html
  css/css-break/widows-orphans-010.html
  css/css-break/widows-orphans-011.html
  css/css-break/widows-orphans-012.html
  css/css-break/widows-orphans-013.html
  css/css-break/widows-orphans-014.html
  css/css-break/widows-orphans-015.html
  css/css-break/widows-orphans-016.html
  css/css-break/widows-orphans-017.html
  css/css-break/widows-orphans-018.html
  </wpt>

  <p>
    Only positive integers are allowed as values of 'orphans' and 'widows'.
    Negative values and zero are invalid and must cause the declaration to be
    <a href="https://www.w3.org/TR/CSS21/conform.html#ignore">ignored</a>.
  </p>
  <p>
    If a block contains fewer lines than the value of 'widows' or 'orphans',
    the rule simply becomes that all lines in the block must be kept together.
  </p>

<h3 id="page-break-properties">
Page Break Aliases: the 'page-break-before', 'page-break-after', and 'page-break-inside' properties</h3>

  <p>For compatibility with <a href="https://www.w3.org/TR/CSS21/page.html">CSS Level 2</a>,
  UAs that conform to [[!CSS2]] must alias the
  'page-break-before', 'page-break-after', and 'page-break-inside' properties
  to 'break-before', 'break-after', and 'break-inside'
  by treating the 'page-break-*' properties as [=legacy shorthands=] for the 'break-*' properties
  with the following value mappings:

  <table class="data">
    <thead>
      <tr><th>Shorthand ('page-break-*') Values
          <th>Longhand ('break-*') Values
    </thead>
    <tbody>
      <tr><td><css>auto | left | right | avoid</css>
          <td><css>auto | left | right | avoid</css>
      <tr><td><css>always</css>
          <td><css>page</css>
    </tbody>
  </table>

<h2 id="breaking-rules">
Rules for Breaking</h2>

  <p>
    A <a>fragmented flow</a> may be broken across <a>fragmentainers</a> at a number of
    <a href="#possible-breaks">possible break points</a>. In the case of
    <a href="#forced-breaks">forced breaks</a>, the UA is required to
    break the flow at that point. In the case of
    <a href="#unforced-breaks">unforced breaks</a>, the UA has to choose
    among the possible breaks that are allowed.
  </p>

  <p>
	To guarantee progress, fragmentainers are assumed to have a minimum
	<a>block size</a> of 1px regardless of their used size.

<h3 id="possible-breaks">
Possible Break Points</h3>

  <p>
    Fragmentation splits boxes in the block flow dimension.
    In block-and-inline flow, breaks may occur at the following places:
  </p>
  <dl>
    <dt id="btw-blocks">Class A</dt>
    <dd>
      Between sibling boxes of the following types:
      <dl>
        <dt>Block-parallel Fragmentation</dt>
        <dd>
          When the block flow direction of the siblings' containing block
          is parallel to that of the fragmentation context:
          <a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/visuren.html#positioning-scheme">in-flow</a> block-level boxes,
          a float and an immediately-adjacent in-flow or floated box,
          table row group boxes,
          table row boxes,
          multi-column column row boxes.
        </dd>
        <dt>Block-perpendicular Fragmentation</dt>
        <dd>
          When the block flow direction of the siblings' containing block
          is perpendicular to that of the fragmentation context:
          table column group boxes,
          table column boxes,
          multi-column column boxes.
        </dd>
      </dl>
    <dt id="btw-lines">Class B</dt>
    <dd>
      Between line boxes inside a block container box.
    </dd>
    <dt id="end-block">Class C</dt>
    <dd>
      Between the content edge of a block container box and the outer edges of its
      child content (margin edges of block-level children or line box
      edges for inline-level children) <em>if</em> there is a (non-zero)
      gap between them.
      <!-- XXX add example -->
    </dd>
  </dl>

  <p class="note">
    There is no inherent prioritization among these classes of break points.
    However, individual break points may be prioritized or de-prioritized
    by using the <a href="#breaking-controls">breaking controls</a>.

  <p class="note">
    Other layout models may add breakpoints to the above classes.
    For example, [[CSS-FLEXBOX-1]] adds certain points within a flex formatting context
    to classes A and C.
  </p>

  <p>
    Some content is not fragmentable, for example many types of
    <a href="https://www.w3.org/TR/CSS21/conform.html#replaced-element">replaced elements</a> [[!CSS2]] (such as images or video),
    scrollable elements, or a single line of text content.
    Such content is considered <dfn>monolithic</dfn>:
    it contains no possible break points.
    Any forced breaks within such boxes
    therefore cannot split the box,
    and must therefore also be ignored by the box’s own fragmentation context.

  <p>
    In addition to any content which is not generally fragmentable,
    UAs may consider as <a>monolithic</a> any elements with
    'overflow' set to ''overflow/auto'' or ''overflow/scroll'' and
    any elements with ''overflow: hidden'' and a non-''height/auto''
    <a href="https://www.w3.org/TR/css3-writing-modes/#block-size">logical height</a>
    (and no specified maximum logical height).

  <p>
    Since line boxes contain no possible break points,
    ''inline-block'' and ''inline-table'' boxes
    (and other inline-level <a>display types</a> that establish an <a>independent formatting context</a>)
    may also be considered <a>monolithic</a>:
    that is,
    in the cases where a single line box is too large
    to fit within its fragmentainer even by itself
    and the UA chooses to split the line box,
    it may fragment such boxes or it may treat them as monolithic.

<h3 id="break-types">
Types of Breaks</h3>

  <p>
    There are different types of breaks in CSS, defined based on the type of
    fragmentainers they span:
  </p>
  <dl export>
    <dt><dfn>page break</dfn></dt>
    <dd>
      A break between two <a href="https://www.w3.org/TR/css3-page/#page-box">page boxes</a>.
      [[!CSS3PAGE]]
    </dd>
    <dt><dfn>spread break</dfn></dt>
    <dd>
      A break between two page boxes that are not associated with
      <a href="https://www.w3.org/TR/css3-page/#facing-pages">facing pages</a>.
      A spread break is always also a page break.
      [[!CSS3PAGE]]
    </dd>
    <dt><dfn>column break</dfn></dt>
    <dd>
      A break between two <a href="https://www.w3.org/TR/css3-multicol/#column-box">column boxes</a>.
      Note that if the column boxes are on different pages, then the break is
      also a <a>page break</a>.
      Similarly, if the column boxes are in different regions,
      then the break is also a <a>region break</a>.
      [[!CSS3COL]]
    </dd>
    <dt><dfn>region break</dfn></dt>
    <dd>
      A break between two <a href="https://www.w3.org/TR/css3-regions/#regions">regions</a>.
      Note that if the region boxes are on different pages, then the break is
      also a <a>page break</a>.
      [[!CSS3-REGIONS]]
    </dd>
  </dl>
  <p class="note">
    A fifth type of break is the [=line break=], which is a break between
    two <a href="https://www.w3.org/TR/CSS21/visuren.html#line-box">line boxes</a>.
    These are not covered in this specification; see [[!CSS2]] [[CSS3TEXT]].
  </p>

<h3 id="forced-breaks">
Forced Breaks</h3>

  <p>
    A <dfn export>forced break</dfn> is one explicitly indicated by the style sheet author.
    A <a>forced break</a> occurs at a <a href="#btw-blocks">class A break point</a> if,
    among the 'break-after' properties specified on or <a>propagated</a> to the earlier sibling box
    and the 'break-before' properties specified on or <a>propagated</a> to the later sibling box
    there is at least one with a <a>forced break value</a>.
    (Thus a <a>forced break value</a> effectively overrides any <a>avoid break value</a>
    that also applies at that break point.)
  </p>
  <p>
    When multiple <a>forced break values</a> apply to a single break point,
    they combine such that all types of break are honored.
    When ''left'', ''right'', ''recto'', and/or ''verso'' are combined,
    the value specified on the latest element in the flow wins.
  </p>
  <p class="note">
    A forced page break must also occur at a <a href="#btw-blocks">class A break point</a>
    if the last line box above this margin and the first one below it do not have the
    same value for 'page'. See [[!CSS3PAGE]]
  </p>
  <p>
    When a forced break occurs,
    it forces ensuing content into the next fragmentainer of the type associated with the break,
    breaking through as many fragmentation contexts as necessary
    until the specified break types are all satisfied.
    If the forced break is not contained within a matching type of fragmentation context,
    then the forced break has no effect.

<h3 id="unforced-breaks">
Unforced Breaks</h3>

  <p>
    While <a href="#breaking-controls">breaking controls</a> can force breaks,
    they can also discourage them.
    An <dfn export>unforced break</dfn> is one that is inserted automatically by the UA
    in order to prevent content from overflowing the <a>fragmentainer</a>.
    The following rules control whether unforced breaking
    at a <a href="#possible-breaks">possible break point</a> is allowed:
  </p>
  <dl>
    <dt>Rule 1</dt>
    <dd>
      A <a>fragmented flow</a> may break at a <a href="#btw-blocks">class A break point</a> only if
      all the 'break-after' and 'break-before' values applicable to this
      break point allow it, which is when at least one of them forces a
      break or when none of them forbid it
      (''break-before/avoid'' or ''break-before/avoid-page''/''break-before/avoid-column''/''break-before/avoid-region'', depending on the <a href="#break-types">break type</a>).
    </dd>
    <dt>Rule 2</dt>
    <dd>
      However, if all of them are ''break-before/auto'' and a common ancestor of all
      the elements has a 'break-inside' value of ''break-inside/avoid'', then breaking
      here is not allowed.
    </dd>
    <dt>Rule 3</dt>
    <dd>
      Breaking at a <a href="#btw-lines">class B break point</a> is allowed only if the number
      of line boxes between the break and the start of the enclosing block
      box is the value of 'orphans' or more, and the number of line boxes
      between the break and the end of the box is the value of 'widows' or more.
    </dd>
    <dt>Rule 4</dt>
    <dd>
      Additionally, breaking at <a href="#btw-blocks">class B</a> or
      <a href="#end-block">class C</a> break points
      is allowed only if the 'break-inside' property of all ancestors is ''break-inside/auto''.
    </dd>
  </dl>

  <p>
    If the above doesn't provide enough break points to keep content from
    overflowing the <a>fragmentainer</a>,
    then rule 3 is dropped to provide more break points.
  </p>

  <p>
    If that still does not lead to sufficient break points,
    then rules 1, 2 and 4 are dropped in order to find additional breakpoints.
    In this case the UA may use the <css>avoid</css>s that are in effect at those
    points to weigh the appropriateness of the new breakpoints; however,
    this specification does not suggest a precise algorithm.
  </p>

  <p>
    If even that does not lead to sufficient break points,
    <a href="#valdef-box-decoration-break-clone">cloned margins/border/padding</a>
    at the [=block-end=] side are truncated;
    and if more room is still needed,
    <a href="#valdef-box-decoration-break-clone">cloned margins/border/padding</a>
    are truncated at the [=block-start=] side as well.
  </p>

  <p>
    Finally, if there are no possible break points below the top of the fragmentainer,
    and not all the content fits, the UA may break anywhere
    in order to avoid losing content off the edge of the fragmentainer.
    <span id="monolithic-breaking">
    In such cases, the UA may also fragment the contents of <a>monolithic</a> elements
    by slicing the element's graphical representation.
    However, the UA must not break at the top of the page,
    i.e. it must place at least some content on each fragmentainer,
    so that each fragmentainer has a non-zero amount of content,
    in order to guarantee progress through the content.
  </p>


<h3 id="best-breaks">
Optimizing Unforced Breaks</h3>

  <p>While CSS3 requires that a <a>fragmented flow</a> must break at allowed
    break points in order to avoid overflowing the fragmentainers in its
    fragmentation context, it does not define whether content breaks
    at a particular <a href="#unforced-breaks">allowed break</a>.
    However, it is recommended that user agents observe the following
    guidelines (while recognizing that they are sometimes contradictory):
  </p>
  <ul>
    <li>Break as few times as possible.</li>
    <li>Make all fragmentainers that don't end with a forced break appear
      to be equally filled with content.</li>
    <li>Avoid breaking inside a replaced element.</li>
  </ul>
  <div class="example" id="widows-orphans-example">
    <p>
      Suppose, for example, that the style sheet contains ''orphans : 4'',
      ''widows : 2'', and there is space for 20 lines (line boxes) available
      at the bottom of the current page, and the next block in normal flow
      is considered for placement:
    </p>
    <ul>
      <li>
        If the block contains 20 line boxes or fewer, it should be placed
        on the current page.
      </li>
      <li>
        If the block contains 21 or 22 line boxes, the second fragment of
        the paragraph must not violate the 'widows' constraint, and so
        the second fragment must contain at least two line boxes;
        likewise the first fragment must contain at least four line boxes.
      </li>
      <li>
        If the block contains 23 line boxes or more, the first fragment should
        contain 20 lines and the second fragment the remaining lines. But if
        any fragment of the block is placed on the current page, that fragment
        must contain at least four line boxes and the second fragment at least
        two line boxes.
      </li>
    </ul>
    <p>
      Now suppose that 'orphans' is ''10'', 'widows' is ''20'', and there
      are 8 lines available at the bottom of the current page:
    </p>
    <ul>
      <li>
        If the block contains 8 lines or fewer, it should be placed
        on the current page.
      </li>
      <li>
        If the block contains 9 lines or more, it must NOT be split
        (that would violate the 'orphans' constraint), so it must
        move as a block to the next page.
      </li>
    </ul>
  </div>

  Additionally, CSS imposes one requirement:
  a zero-sized <a>box fragment</a>,
  since it does not take up space,
  must appear on the earlier side of a <a>fragmentation break</a>
  if it is able to fit within the <a>fragmentainer</a>.

  Note: A zero-sized <a>box fragment</a> will be pushed
  to the next <a>fragmentainer</a>
  if it is placed immediately after content
  that itself overflows the <a>fragmentainer</a>.

<h2 id="breaking-boxes">
Box Model for Breaking</h2>

  <p class="note">
    The sizing terminology used in this section is defined in [[CSS3-SIZING]].
  </p>

<h3 id="varying-size-boxes">
Breaking into Varying-size Fragmentainers</h3>

  <p>
    When a flow is fragmented into varying-size fragmentainers, the following
    rules are observed for adapting layout:
  </p>
  <!-- try to make this clearer. Steve suggested swapping first two points (done), maybe break it up more? -->
  <ul>
    <li>
      Layout is performed per-fragmentainer, with each fragmentainer continuing
      progress from the breakpoint on the previous, but recalculating sizes
      and positions using its own size as if the entire element were fragmented
      across fragmentainers of this size. Progress is measured in percentages
      (not absolute lengths) of used/remaining fragmentainer extent and in amount of
      used/remaining content.
      However, when laying out <a>monolithic</a> elements,
      the UA may instead maintain a consistent <a>inline size</a> and resolved <a>block size</a>
      across fragmentainers.
    </li>
    <li>
      Intrinsic sizes are calculated and maintained across the entire element.
      Where an initial containing block size is needed to resolve an intrinsic
      size, assume the size of the first fragmentainer defining a fragmentation context.
    </li>
    <li>
      Fragments of boxes that began on a previous fragmentainer must obey
      placement rules with the additional constraint that fragments must
      not be positioned above the <a>block-start</a> edge of the fragmentainer.
      If this results in a box's continuation fragment
      shifting away from the <a>block-start</a> edge of the fragmentainer, then
      ''box-decoration-break: clone'', if specified, wraps the fragment
      with the box's margin in addition to its padding and border.
      <div class="figure">
        <p><img src="images/Varying-Size-Fragmentainers.svg"
          style="width: 75%"
          alt="Illustration: Breaking in varying-size fragmentainers" >
        <p class="caption">
          Illustration of breaking in varying-size fragmentainers.
        </p>
        </div>
    </li>
  </ul>

  <p class="note">
    Since document order of elements doesn't change during fragmentation,
    fragments are processed following the same rules that apply to continuous
    media. In particular, the order of floats is preserved across all
    fragments and follows the same rules as defined in CSS 2.1 9.5.
  </p>

  <p>Below are listed (informatively) some implications of these rules:</p>
  <ul>
    <li>
      Boxes (including tables) fulfilling layout constraints at their
      <a lt='stretch-fit size'>stretch-fit</a> or percentage-based size
      may change <a>inline size</a> across pages.
    </li>
    <li>
      Boxes (including tables) fulfilling layout constraints at their
      <a lt="min-content size">min-content</a>, <a lt="max-content size">max-content</a>, or absolute-length size
      will maintain their <a>inline size</a> across pages.
    </li>
    <li>
      A block-level continuation fragment may be placed below the top of
      the page if, e.g. it establishes a block formatting context and
      is placed beside a float and both it and the float continue onto
      a narrower page that is too narrow to hold both of them side-by-side.
    </li>
    <li>
      An element adjacent to a preceding float on one page may wind up above
      the float's continuation on the next page if,
      e.g. that float is pushed down because
      it no longer fits side-by-side with an earlier float
      that also continues onto this narrower page.
    </li>
    <li>
      A left float may appear on a page <em>before</em>
      the remaining fragments of a preceding right float
      if that right float does not fit on the earlier page.
      However another right float will be forced down until
      the preceding right float's remaining fragment can be placed.
  </ul>

  <div class="example">
    <p>Here is an example that shows the use of percentage-based progress:
    Suppose we have an absolutely-positioned element that is positioned
    ''top: calc(150% + 30px)'' and has ''height: calc(100% - 10px)''. If
    it is placed into a paginated context with a first page height of 400px,
    a second page of 200px, and a third page of 600px, its layout progresses
    as follows:
    <ul>
      <li>First, the top position is resolved against the height of the first page.
      This results in 630px. Since the first page has a height of only 400px, layout
      moves to the second page, recording progress of 400/630 = 63.49% with
      36.51% left to go.
      <li>Now on the second page, the top position is again resolved, this
      time against the height of the second page. This results in 330px. The
      remaining 36.51% of progress thus resolves to 120.5px, placing the top edge of
      the element 120.5px down the second page.
      <li>Now the height is resolved against the second page; it resolves
      to 190px. Since there are only 79.5px left on the page, layout moves
      to the third page, recording progress of 79.5/190 = 41.84%, with 58.16%
      left to go.
      <li>On the third page, the height resolves to 590px. The remaining
      58.16% of progress thus resolves to 343.1px, which fits on this page
      and completes the element.
    </ul>
  </div>

<h3 id="break-margins">
Adjoining Margins at Breaks</h3>

  <p>
    When an unforced break occurs before or after a block-level box,
    any margins adjoining the break are truncated to zero.
    When a forced break occurs there, adjoining margins before the break are truncated,
    but margins after the break are preserved.
    <a href="#valdef-box-decoration-break-clone">Cloned margins</a> are always
    truncated to zero on block-level boxes.
  </p>

  Note: CSS Fragmentation Level 4 will introduce control over margin truncation at breaks.

<h3 id="box-splitting">
Splitting Boxes</h3>

  <p>
    When a box breaks,
    its content box extends to fill any <a>remaining fragmentainer extent</a>
    (leaving room for any margins/borders/padding applied by ''box-decoration-break: clone'')
    before the content resumes on the next <a>fragmentainer</a>.
    (A <a>fragmentation break</a> that pushes content to the next <a>fragmentainer</a>
     effectively increases the <a>block size</a> of a box's contents.)

  <p class="note">
    The extra <a>block size</a> contributed by fragmenting the box
    (i.e. the distance from the break point to the edge of the <a>fragmentainer</a>)
    contributes progress towards any specified limits on the box's <a>block size</a>.

  <div class="figure">
    <p><img
      style="width: 80%"
      src="images/Remaining-Fragmentainer-Extent.svg"
      alt="Illustration: Filling remaining fragmentainer extent">
    <p class="caption">
      Illustration of filling the <a>remaining fragmentainer extent</a>.
    </p>
  </div>

<h3 id="break-decoration">
Fragmented Borders and Backgrounds: the 'box-decoration-break' property</h3>

  <pre class="propdef">
  Name: box-decoration-break
  Value: slice | clone
  Initial: slice
  Applies to: all elements
  Inherited: no
  Computed value: specified keyword
  Animation type: discrete
  </pre>

  <p>
    When a break (page/column/region/line<!-- ISSUE-182-->) splits a box,
    the 'box-decoration-break' property controls
  <ul>
    <li>whether the box's margins, borders, padding, and other decorations
      wrap the broken edges of the box fragments
    <li>how the <a href="https://www.w3.org/TR/css3-background/#background-positioning-area"><a>background positioning area</a></a> [[!CSS3BG]]
      (and <a>mask positioning area</a> [[!CSS-MASKING-1]],
      shape <a>reference box</a> [[!CSS-SHAPES-1]], etc.)
      is derived from or duplicated across the box fragments
      and how the element's background is drawn within them.
  </ul>
  <p>
    Values have the following meanings:
  </p>

  <dl dfn-type=value dfn-for=box-decoration-break>
    <dt><dfn>clone</dfn>
    <dd>
      Each box fragment is independently wrapped with the border, padding, and margin.
      The 'border-radius' and 'border-image' and 'box-shadow', if any,
      are applied to each fragment independently.
      The background is drawn independently in each fragment of the element.
      A no-repeat background image will thus be rendered once in each fragment of the element.

      Note: Cloned margins are <a href="#break-margins">truncated</a>
            on block-level boxes.
    </dd>

    <dt><dfn>slice</dfn>
    <dd>
      <p>
      The effect is as though the element were rendered with no breaks present,
      and then sliced by the breaks afterward:
      no border and no padding are inserted at a break;
      no box-shadow is drawn at a broken edge;
      and backgrounds, 'border-radius', and the 'border-image'
      are applied to the geometry of the whole box
      as if it were unbroken.
    </dd>
  </dl>

  <div class="figure">
    <p><img alt="Illustration:
      (1) a single box cut in two in between two lines of text by a page break and
      (2) two boxes, one before and one after the page break,
      both with a border all around and their own background image" src="images/box-break.png">

    <p class=caption>Two possibilities for 'box-decoration-break':
    on the left, the value ''slice'', on the right the value ''clone''.
  </div>

  <p>UAs should also apply 'box-decoration-break'
  to control rendering at bidi-imposed breaks--
  i.e. when bidi reordering causes an inline to split into non-contiguous fragments--
  and/or at display-type&ndash;imposed breaks--
  i.e. when a higher-level <a>display type</a>
  (such as a <a>block-level box</a> / <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">column spanner</a>)
  splits an incompatible ancestor
  (such as an <a>inline box</a> / <a>block container</a>).
  Otherwise such breaks must be handled as ''slice''.
  See [[css-writing-modes-3#bidi-algo|Applying the Bidirectional Reordering Algorithm]]
  in [[css-writing-modes-3#text-direction|CSS Writing Modes]],
  <a href="https://www.w3.org/TR/CSS2/visuren.html#box-gen">CSS2&sect;9.2 Block-level elements and block boxes</a>,
  and <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">CSS Multi-column Layout &sect;6 Spanning Columns</a>.

  <p class=note>
  For inline elements, which side of a fragment is considered the broken edge
  is determined by the parent element's inline progression direction.
  For example, if an inline element whose parent has ''direction: rtl''
  breaks across two lines, the <em>left</em> edge of the fragment on
  the first line will be the broken edge. (Note in particular that
  neither the element's own 'direction' nor its containing block's
  'direction' is used.) See [[CSS3-WRITING-MODES]].

<h4 id="joining-boxes">
Joining Boxes for ''slice''</h4>

  <p>For ''box-decoration-break: slice'', backgrounds (and 'border-image')
  are drawn as if applied to a composite box
  consisting of all of the box's fragments
  reassembled in visual order.
  This theoretical assembly occurs after the element has been laid out
  (including any justification, bidi reordering, page breaks, etc.).
  To assemble the composite box...

  <dl>
    <dt>For boxes broken across lines</dt>
    <dd>
      First, fragments on the same line are connected in visual order.
      Then, fragments on subsequent lines are ordered
      according to the element's <a>inline base direction</a>
      and aligned on the element's dominant baseline.
      For example, in a left-to-right containing block ('direction' is ''ltr''),
      the first fragment is the leftmost fragment on the first line
      and fragments from subsequent lines are put to the right of it.
      In a right-to-left containing block,
      the first fragment is the rightmost on the first line
      and subsequent fragments are put to the left of it.
    </dd>

    <dt>For boxes broken across columns</dt>
    <dd>
      Fragments are connected as if the column boxes were glued together
      in the <a>block flow direction</a> of the multi-column container.
    </dd>

    <dt>For boxes broken across pages</dt>
    <dd>
      Fragments are connected as if page content areas were glued together
      in the <a>block flow direction</a> of the root element.
    </dd>

    <dt>For boxes broken across regions</dt>
    <dd>
      Fragments are connected as if region content areas were glued together
      in the <a>block flow direction</a> of the <a>principal writing mode</a> of the <a>region chain</a>.
    </dd>
  </dl>

  <p>If the box fragments have different widths
  (heights, if the fragments are joined horizontally),
  then each piece draws its portion of the background
  assuming that the whole element has the same width (height) as this piece.
  However, if the used height (width) of an image is derived from the width (height) of the box,
  then it is calculated using the widest fragment's width
  and maintained as a fixed size.
  This ensures that right-aligned images stay aligned to the right edge,
  left-aligned images stay aligned to the left edge,
  centered images stay centered,
  and stretched images cover the background area as intended
  while preserving continuity across fragments.

<h3 id="transforms">
Transforms, Positioning, and Pagination</h3>

  <p>
    Fragmentation interacts with layout, and thus occurs <em>before</em>
    relative positioning [[!CSS2]], transforms [[!CSS3-TRANSFORMS]],
    and any other graphical effects.
    Such effects are applied per fragment:
    for example, rotation applied to a fragmented box
    will calculate a rotation origin for each fragment
    and independently rotate that fragment around its origin.
    (The origin of an overflow-only fragment is determined
    as if that content were overflowing an empty box with zero margins/borders/padding
    at the start of the fragmentainer.)
    However, in order to reduce dataloss when printing,
    the separation and transfer of page boxes <em>should</em> occur last;
    thus a transformed fragment that spans pages <em>should</em>
    be sliced at the page breaks and print in its entirety
    rather than being clipped by its originating page.

  <div class="figure">
    <p><img alt="Illustration: Transformed overflow fragmentation"
      src="images/fragmented-transforms.png">
    <p class=caption>A fixed-height box spanning 2.5 pages with overflow content spanning
      to a total of 4 pages.
      The transform origin of each fragment is the center of its border box;
      the fragment without a border box assumes a zero-height box at the start of the overflow.
  </div>

  <p>
    Absolute positioning affects layout and thus interacts with fragmentation.
    Both the coordinate system and absolutely-positioned boxes belonging to a containing block
    will fragment across fragmentainers in the same fragmentation flow as the containing block.

  <p>
    UAs are not required to correctly position boxes that span a <a>fragmentation break</a>
    and whose <a>block-start</a> edge position depends on where the box's content fragments.

  <p>
    UAs with memory constraints that prevent them from manipulating an entire document in memory
    are not required to correctly position absolutely-positioned elements
    that end up on a previously-rendered page.

<h2 class="no-num" id="changes">
Changes</h2>

  <p>The following significant changes were made since the
    <a href="https://www.w3.org/TR/2018/CR-css-break-3-20181204/'>4 December 2018 Candidate Recommendation</a>:

  <ul>
    <li id="bugfix-2018-drop-cloned">
      Fixed mistaken reference to “block-end” to “block-start”
      in rules for dropping cloned margins/border/padding.
      (<a href="https://github.com/w3c/csswg-drafts/issues/5070">Issue 5070</a>)
  </ul>

  <p>The following significant changes were made since the
    <a href="https://www.w3.org/TR/2016/CR-css-break-3-20160114/">14 January 2016 Candidate Recommendation</a>:

  <ul>
    <li id="change-2018-aliasing">
      Clarified the mechanism of aliasing for the page-break-* properties.
      (<a href="https://github.com/w3c/csswg-drafts/issues/866">Issue 866</a>)
      <blockquote>
        <p>by treating the 'page-break-*' properties as <del>shorthands</del> <ins>[=legacy shorthands=]</ins> for the 'break-*' properties
      </blockquote>

    <li id="change-2017-propagation">
      Clarified that break propagation does not affect computed values
      and that other layout modes (e.g. flex and grid) make adjustments
      to the basic break propagation rules,
      and corrected child-to-parent propagation to ignore <a>out-of-flow</a> children.
      (<a href="https://github.com/w3c/csswg-drafts/issues/2614">Issue 2614</a>)
      See [[#break-propagation]].

    <li id="change-2017-widows-applies-to">
      Clarified that 'widows' and 'orphans' have no effect on block containers
      that do not directly contain line boxes.
      (<a href="https://github.com/w3c/csswg-drafts/issues/1823">Issue 1823</a>)
      <blockquote>
        <p>Applies to: block containers <ins>that establish a new inline formatting context</ins>
      </blockquote>

    <li id="change-2018-truncate-margins">
      Clarified that margins adjoining a Class C break are also truncated
      in the same way as margins between siblings (Class A).
      (<a href="https://github.com/w3c/csswg-drafts/issues/3073">Issue 3073</a>)
      <blockquote>
        <p>
          When an unforced break occurs <del>between</del> <ins>before or after a</a> block-level box<del>es</del>,
          any margins adjoining the break <del>truncate to the <a>remaining fragmentainer extent</a> before the break,
          and</del> are truncated to zero <del>after the break</del>.
        </p>
      </blockquote>

    <li id="change-2017-inline-block-fragmentation">
      Clarified what it means if a UA chooses not to treat atomic inlines as not <a>monolithic</a>.
      (<a href="https://github.com/w3c/csswg-drafts/issues/1111">Issue 1111</a>)
      <blockquote>
        <p>Since line boxes contain no possible break points,
        ''inline-block'' and ''inline-table'' boxes
        (and other inline-level <a>display types</a> that establish an <a>independent formatting context</a>)
        may also be considered <a>monolithic</a>
        <ins>that is,
        in the cases where a single line box is too large
        to fit within its fragmentainer even by itself
        and the UA chooses to split the line box,
        it may fragment such boxes or it may treat them as monolithic</ins>.
      </blockquote>

    <li id="change-2017-zero-fragment">
      Added requirement that zero-sized fragments must stay on the previous fragmentainer.
      (<a href="https://github.com/w3c/csswg-drafts/issues/1529">Issue 1529</a>)
      <blockquote>
        <ins><p>Additionally, CSS imposes one requirement:
          a zero-sized <a>box fragment</a>,
          since it does not take up space,
          must appear on the earlier side of a <a>fragmentation break</a>
          if it is able to fit within the <a>fragmentainer</a>.</p>

          <p class="note">A zero-sized <a>box fragment</a> can be pushed
          to the next <a>fragmentainer</a>
          if it is placed immediately after content
          that itself overflows the <a>fragmentainer</a>.</p>
        </ins>
      </blockquote>

    <li id="change-2018-bidi-split-breaks">
      Clarify that bidi-imposed breaks and block-in-inline breaks create fragments,
      and that their formatting should be controlled by 'box-decoration-break'.
      (<a href="https://github.com/w3c/csswg-drafts/issues/1706">Issue 1706</a>)
      <blockquote>
        <ins><p class="note">
        A box can be broken into multiple <a>fragments</a>
        also due to bidi reordering of text
        (see [[css-writing-modes-3#bidi-algo|Applying the Bidirectional Reordering Algorithm]]
        in [[css-writing-modes-3#text-direction|CSS Writing Modes]])
        or higher-level <a>display type</a> box splitting,
        e.g. <a href="https://www.w3.org/TR/CSS2/visuren.html#img-anon-block">block-in-inline splitting</a>
        (see <a href="https://www.w3.org/TR/CSS2/visuren.html#box-gen">CSS2&sect;9.2</a>)
        or <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">column-spanner-in-block</a> splitting
        (see <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">CSS Multi-column Layout</a>).
        The division into <a>box fragments</a> in these cases
        does not depend on layout (sizing/positioning of content).</p></ins>
      </blockquote>
      <blockquote>
        <p>UAs <del>may</del><ins>should</ins> also apply 'box-decoration-break' to control rendering
        at bidi-imposed breaks--
        i.e. when bidi reordering causes an inline
        to split into non-contiguous fragments<ins>--
        and/or at display-type&ndash;imposed breaks--
        i.e. when a higher-level <a>display type</a>
        (such as a <a>block-level box</a> / <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">column spanner</a>)
        splits an incompatible ancestor
        (such as an <a>inline box</a> / <a>block container</a>)</ins>.
        Otherwise such breaks must be handled as ''slice''.
        <ins>See [[css-writing-modes-3#bidi-algo|Applying the Bidirectional Reordering Algorithm]]
        in [[css-writing-modes-3#text-direction|CSS Writing Modes]],
        <a href="https://www.w3.org/TR/CSS2/visuren.html#box-gen">CSS2&sect;9.2 Block-level elements and block boxes</a>,
        and <a href="https://www.w3.org/TR/css-multicol-1/#spanning-columns">CSS Multi-column Layout &sect;6 Spanning Columns</a>.</ins></p>
      </blockquote>

    <li id="change-2017-trivial">
      Made a handful of trivial wording fixes.
  </ul>

  <p>A <a href="https://drafts.csswg.org/css-break-3/issues-cr-2016">Disposition of Comments</a> is available.

  <p>The following significant changes were made since the
    <a href="https://www.w3.org/TR/2015/WD-css3-break-20150129/">29 January 2015 Working Draft</a>:

  <ul>
    <li>Dropped <css>any</css> and <css>always</css> values of 'break-*'.
    <li>Switched priority of 'widows' and 'orphans' vs. 'break-*' restrictions
        to make 'widows' and 'orphans' lower-priority rather than higher-priority.
    <li>Defined that margins are also cloned for ''box-decoration-break: clone''
        (but are truncated in block-level layout).
    <li>Corrected unforced breaking rules (Class A) to handle new break types
        (original rules only handled page breaks).
    <li>Allowed dropping cloned box decorations when running out of room.
  </ul>

  <p>A <a href="https://drafts.csswg.org/css-break-3/issues-lc-2015">Disposition of Comments</a> is available.

<h2 class="no-num" id="acknowledgments">
Acknowledgments</h2>

  <p>
    The editors would like to thank
    Mihai Balan,
    Michael Day,
    Alex Mogilevsky,
    Shinyu Murakami,
    Florian Rivoal,
    and Alan Stearns
    for their contributions to this module.
    Special thanks go to the former [[CSS3PAGE]] editors
    Jim Bigelow (HP),
    Melinda Grant (HP),
    Håkon Wium Lie (Opera),
    and
    Jacob Refstrup (HP)
    for their contributions to this specification,
    which is a successor of their work there.
  </p>

<h2 class="no-num" id="priv-sec">
Privacy and Security Considerations</h2>

This specification introduces no new privacy or security considerations over CSS in general.
