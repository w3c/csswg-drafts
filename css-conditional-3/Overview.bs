<pre class="metadata">
Title: CSS Conditional Rules Module Level 3
Group: csswg
Shortname: css-conditional
Level: 3
Status: ED
Implementation Report: https://test.csswg.org/harness/results/css-conditional-3_dev/grouped/
Work Status: Testing
ED: https://drafts.csswg.org/css-conditional-3/
TR: https://www.w3.org/TR/css-conditional-3/
Previous Version: https://www.w3.org/TR/2020/CR-css-conditional-3-20201208/
Previous Version: https://www.w3.org/TR/2013/CR-css3-conditional-20130404/
Test Suite: http://test.csswg.org/suites/css-conditional-3_dev/nightly-unstable/
Editor: L. David Baron, Mozilla https://www.mozilla.org/, https://dbaron.org/, w3cid 15393
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Chris Lilley, W3C, chris@w3.org, w3cid 1438
Abstract: This module contains the features of CSS for conditional processing of parts of
  style sheets, conditioned on capabilities of the processor or the
  document the style sheet is being applied to.  It includes and extends the
  functionality of CSS level&nbsp;2 [[!CSS21]], which builds on CSS level&nbsp;1
  [[CSS1]].  The main extensions compared to level&nbsp;2 are allowing nesting of
  certain at-rules inside ''@media'', and the addition of the ''@supports'' rule for
  conditional processing.
At Risk: The inclusion of @font-face rules and @keyframes rules as allowed within all of the @-rules in this specification is at risk, though only because of the relative rates of advancement of specifications.  If this specification is able to advance faster than one or both of the specifications defining those rules, then the inclusion of those rules will move from this specification to the specification defining those rules.
At Risk: The addition of support for @-rules inside of conditional grouping rules is at risk; if interoperable implementations are not found, it may be removed to advance the other features in this specification to Proposed Recommendation.
Default Highlight: css
</pre>

<pre class=link-defaults>
spec:css-color-4; type:property; text:color
spec:html; type:element; text:link
spec:css-namespaces-3; type:dfn; text:namespace prefix
spec:css-namespaces-3; type:dfn; text:CSS qualified name
</pre>

<h2 id="introduction">Introduction</h2>

<h3 id="context">Background</h3>

  <em>This section is not normative.</em>

  [[!CSS21]] defines one type of conditional group rule, the
  ''@media'' rule, and allows only style rules (not other @-rules)
  inside of it.  The ''@media'' rule provides the ability to
  have media-specific style sheets, which is also provided by style
  sheet linking features such as ''@import'' and
  <{link}>.  The restrictions on the contents of
  ''@media'' rules made them less useful; they have forced authors
  using CSS features involving @-rules in media-specific style sheets to
  use separate style sheets for each medium.

  This specification extends the rules for the contents of
  conditional group rules to allow other @-rules, which enables authors
  to combine CSS features involving @-rules with media specific style
  sheets within a single style sheet.

  This specification also defines an additional type of conditional
  group rule, ''@supports'', to
  address author and user requirements.

  The ''@supports'' rule allows CSS to be conditioned on
  implementation support for CSS properties and values.  This rule makes
  it much easier for authors to use new CSS features and provide good
  fallback for implementations that do not support those features.  This
  is particularly important for CSS features that provide new layout
  mechanisms, and for other cases where a set of related styles needs to
  be conditioned on property support.

<h3 id="placement">Module Interactions</h3>

  This module replaces and extends the ''@media'' rule
  feature defined in [[!CSS21]] section 7.2.1 and
  incorporates the modifications previously made non-normatively by
  [[!MEDIAQUERIES-4]] section 1.

<h2 id="processing">Processing of conditional group rules</h2>

This specification defines some CSS [=at-rules=],
called <dfn export lt="conditional group rule">conditional group rules</dfn>,
that associate a condition with a group of other
CSS rules.  These different rules allow testing different types of
conditions, but share common behavior for how their contents are used
when the condition is true and when the condition is false.

<div class="example">
For example, this rule:
<pre>
@media print {
  /* hide navigation controls when printing */
  #navigation { display: none }
}
</pre>
causes a particular CSS rule
(making elements with ID &ldquo;navigation&rdquo; be display:none)
apply only when the style sheet is used for a print medium.
</div>

Each conditional group rule has a condition, which at any time
evaluates to true or false.  When the condition is true, CSS processors
<strong>must</strong> apply the rules inside the group rule as though
they were at the group rule's location; when the condition is false, CSS
processors <strong>must not</strong> apply any of rules inside the group
rule.  The current state of the condition does not affect the CSS object
model, in which the contents of the group rule always remain within the
group rule.

This means that when multiple conditional group rules are nested,
a rule inside of both of them applies only when all of the rules'
conditions are true.

<div class="example">For example, with this set of nested rules:
<pre>
@media print { /* rule (1) */
  /* hide navigation controls when printing */
  #navigation { display: none }
  @media (max-width: 12cm) { /* rule (2) */
    /* keep notes in flow when printing to narrow pages */
    .note { float: none }
  }
}
</pre>
the condition of the rule marked (1) is true for print media, and the
condition of the rule marked (2) is true when the width of the display
area (which for print media is the page box) is less than or equal to
12cm.  Thus the rule ''#navigation { display: none }'' applies
whenever this style sheet is applied to print media, and the rule
''.note { float: none }'' is applied only when the style sheet
is applied to print media <em>and</em> the width of the page box is less
than or equal to 12 centimeters.</div>

When the condition for a conditional group rule changes, CSS
processors <strong>must</strong> reflect that the rules now apply or no
longer apply, except for properties whose definitions define effects of
computed values that persist past the lifetime of that value (such as
for some properties in [[CSS3-TRANSITIONS]] and
[[!CSS3-ANIMATIONS]]).

<h2 id="contents-of">
Contents of conditional group rules</h2>

All [=conditional group rules=] are defined to take a <<stylesheet>> in their block,
which means they can accept any rule that is normally allowed at the top-level of a stylesheet,
and not otherwise restricted.
(For example, an ''@import'' rule must appear at the actual beginning of a stylesheet,
and so is not valid inside of another rule.)

Invalid or unknown rules inside the <<stylesheet>> must be considered invalid and ignored,
but do not invalidate the [=conditional group rule=].

Any namespace prefixes used in a [=conditional group rule=]
must have been declared,
otherwise they are invalid.

<div class="example" id=ex-declared-ns>For example, this rule
  containing a [=CSS qualified name=] is valid,
  because the [=namespace prefix=] has been bound to a namespace url:
  <pre>
    @namespace x url(http://www.w3.org/1999/xlink);
    @supports (content: attr(x|href)) {
      // do something }
  </pre>
</div>

<div class="example">For example, to determine whether this rule is valid:
  <pre>
    @supports (content: attr(n|tooltip)) {
      // do something }
  </pre>
The user agent will consult the namespace map to see whether a namespace url exists corresponding to the "n" prefix.
</div>

<h2 id="use">
Placement of conditional group rules</h2>

Conditional group rules are allowed
wherever [=style rules=] are allowed
(at the top-level of a style sheet,
as well as within other conditional group rules).
CSS processors <strong>must</strong> process such rules
as <a href="#processing">described above</a>.

Any [=at-rules=] that are not allowed after a style rule
(e.g., ''@charset'', ''@import'', or ''@namespace'' rules)
are also not allowed after a conditional group rule,
and are therefore [=invalid=] when so placed.

<h2 id="at-media">
Media-specific style sheets:  the ''@media'' rule</h2>

The <dfn at-rule id="at-ruledef-media">@media</dfn> rule
is a conditional group rule whose condition is a media query.
Its syntax is:

<pre class="prod def" nohighlight>
@media <<media-query-list>> {
	<<stylesheet>>
}
</pre>

It consists of the at-keyword ''@media''
followed by a (possibly empty) media query list
(as defined in [[!MEDIAQUERIES-4]]),
followed by a block containing arbitrary rules.
The condition of the rule is the result of the media query.

<div class="example">
This ''@media'' rule:
<pre>
@media screen and (min-width: 35em),
       print and (min-width: 40em) {
  #section_navigation { float: left; width: 10em; }
}
</pre>
has the condition
''screen and (min-width: 35em), print and (min-width: 40em)'',
which is true for screen displays
whose viewport is at least 35 times the initial font size
and for print displays
whose viewport is at least 40 times the initial font size.
When either of these is true,
the condition of the rule is true,
and the rule
''#section_navigation { float: left; width: 10em; }''
is applied.
</div>


<h2 id="at-supports">Feature queries: the ''@supports'' rule</h2>

The <dfn at-rule id="at-ruledef-supports">@supports</dfn> rule is a conditional group
rule whose condition tests whether the user agent supports CSS
property:value pairs.  Authors can use it to write style sheets that use
new features when available but degrade gracefully when those features
are not supported.  CSS has existing mechanisms for graceful
degradation, such as ignoring unsupported properties or values, but
these are not always sufficient when large groups of styles need to be
tied to the support for certain features, as is the case for use of new
layout system features.

The syntax of the condition in the ''@supports'' rule
is similar to that defined for <<media-condition>> in [[MEDIAQUERIES-4]]:

* negation is needed so that
	the new-feature styles and the fallback styles
	can be separated
	(within the forward-compatible grammar's rules for the syntax of @-rules),
	and not required to override each other.
* conjunction (and) is needed so that
	multiple required features can be tested.
* disjunction (or) is needed
	when there are multiple alternative features for a set of styles,
	particularly when some of those alternatives are vendor-prefixed properties or values.
* "unknown" values (neither true nor false) are needed
	to allow for future-compatibility,
	so new types of support queries can be added
	and treated sensibly in older UAs.

Therefore, the syntax of the ''@supports'' rule allows
testing for property:value pairs, and arbitrary conjunctions (and),
disjunctions (or), and negations (not) of them.

The syntax of the ''@supports'' rule is:

<pre class="prod def" nohighlight>
@supports <<supports-condition>> {
	<<stylesheet>>
}
</pre>

with <<supports-condition>> defined as:

<pre class="prod def" nohighlight>
	<dfn>&lt;supports-condition></dfn> = not <<supports-in-parens>>
	                     | <<supports-in-parens>> [ and <<supports-in-parens>> ]*
	                     | <<supports-in-parens>> [ or <<supports-in-parens>> ]*
	<dfn>&lt;supports-in-parens></dfn> = ( <<supports-condition>> ) | <<supports-feature>> | <<general-enclosed>>
	<dfn>&lt;supports-feature></dfn> = <<supports-decl>>
	<dfn>&lt;supports-decl></dfn> = ( <<declaration>> )
</pre>

The above grammar is purposely very loose for forwards-compatibility reasons,
since the <<general-enclosed>> production
allows for substantial future extensibility.
Any ''@supports'' rule that does not parse according to the grammar above
(that is, a rule that does not match this loose grammar
which includes the <<general-enclosed>> production)
is invalid.
Style sheets <strong>must not</strong> use such a rule and
processors <strong>must</strong> ignore such a rule (including all of its contents).

Each of these grammar terms is associated with a boolean result,
as follows:

: <<supports-condition>>
: <<supports-in-parens>>
:: The result is the result of the child subexpression.

: not <<supports-in-parens>>
:: The result is the negation of the <<supports-in-parens>> term.
	The negation of unknown is unknown.

: <<supports-in-parens>> [ and <<supports-in-parens>> ]*
::
	The result is true if all of the <<supports-in-parens>> child terms are true,
	false if at least one of the <<supports-in-parens>> is false,
	and unknown otherwise.

: <<supports-in-parens>> [ or <<supports-in-parens>> ]*
::
	The result is false if all of the <<supports-in-parens>> child terms are false,
	true if at least one of the <<supports-in-parens>> is true,
	and unknown otherwise.

: <<supports-decl>>
::
	The result is true if the UA [=supports=] the declaration within the parentheses.

: <<general-enclosed>>
::
	The result is unknown.

	Authors must not use <<general-enclosed>> in their stylesheets.
	<span class='note'>It exists only for future-compatibility,
	so that new syntax additions do not invalidate too much of a <<supports-condition>> in older user agents.</span>

The condition of the ''@supports'' rule
is the result of the <<supports-condition>> in its prelude.

<div class="example">
For example, the following rule
<pre>
@supports ( display: flex ) {
  body, #navigation, #content { display: flex; }
  #navigation { background: blue; color: white; }
  #article { background: white; color: black; }
}
</pre>
applies the rules inside the ''@supports'' rule only when
''display: flex'' is supported.
</div>

<div class="example">
The following example shows an additional ''@supports'' rule that can
be used to provide an alternative for when ''display: flex'' is not
supported:
<pre>
@supports not ( display: flex ) {
  body { width: 100%; height: 100%; background: white; color: black; }
  #navigation { width: 25%; }
  #article { width: 75%; }
}
</pre>
Note that the 'width' declarations may be harmful to the
flex-based layout, so it is important that they be present only in
the non-flex styles.
</div>

<div class="example">
The following example checks for support for the 'box-shadow'
property, including checking for support for vendor-prefixed versions of
it.  When the support is present, it specifies both 'box-shadow' (with
the prefixed versions) and 'border' in a way what would cause the box to
become invisible were 'box-shadow' not supported.
<pre>
.noticebox {
  border: 1px solid black;
  padding: 1px;
}
@supports ( box-shadow: 0 0 2px black inset ) or
          ( -moz-box-shadow: 0 0 2px black inset ) or
          ( -webkit-box-shadow: 0 0 2px black inset ) or
          ( -o-box-shadow: 0 0 2px black inset ) {
  .noticebox {
    -moz-box-shadow: 0 0 2px black inset;
    -webkit-box-shadow: 0 0 2px black inset;
    -o-box-shadow: 0 0 2px black inset;
    box-shadow: 0 0 2px black inset; /* unprefixed last */
    /* override the rule above the @supports rule */
    border: none;
    padding: 2px;
  }
}
</pre></div>

To avoid confusion between <css>and</css> and <css>or</css>, the syntax requires
that both <css>and</css> and <css>or</css> be specified explicitly (rather than, say,
using commas or spaces for one of them).  Likewise, to avoid confusion
caused by precedence rules, the syntax does not allow <css>and</css>, <css>or</css>,
and <css>not</css> operators to be mixed without a layer of parentheses.

<div class="example">
For example, the following rule is not valid:
<pre class="illegal">
@supports (transition-property: color) or
          (animation-name: foo) and
          (transform: rotate(10deg)) {
  /* ... */
}
</pre>
Instead, authors must write one of the following:
<pre>
@supports ((transition-property: color) or
           (animation-name: foo)) and
          (transform: rotate(10deg)) {
  /* ... */
}
</pre>
<pre>
@supports (transition-property: color) or
          ((animation-name: foo) and
           (transform: rotate(10deg))) {
  /* ... */
}
</pre>
</div>

The declaration being tested must always occur within parentheses,
when it is the only thing in the expression.

<div class="example">
For example, the following rule is not valid:
<pre class="illegal">
@supports display: flex {
  /* ... */
}
</pre>
Instead, authors must write:
<pre>
@supports (display: flex) {
  /* ... */
}
</pre>
</div>

The syntax allows extra parentheses when they are not needed.  This
flexibility is sometimes useful for authors (for example, when
commenting out parts of an expression) and may also be useful for
authoring tools.

<div class="example">
For example, authors may write:
<pre>
@supports ((display: flex)) {
  /* ... */
}
</pre>
</div>

A trailing ''!important'' on a declaration being tested is allowed,
though it won't change the validity of the declaration.

<div class="example">
For example, the following rule is valid:
<pre>
@supports (display: flex !important) {
  /* ... */
}
</pre>
</div>

<h3 id="support-definition">Definition of support</h3>

For forward-compatibility,
<a href="https://www.w3.org/TR/CSS21/syndata.html#declaration">section 4.1.8
(Declarations and properties)</a> of [[!CSS21]]
defines rules for handling invalid properties and values.
CSS processors that
do not implement or partially implement a specification
<strong>must</strong> treat any part of a value that they
do not implement, or
do not have a usable level of support for,
as invalid according to this rule
for handling invalid properties and values,
and therefore <strong>must</strong> discard the declaration as a parse error.

A CSS processor is considered to <dfn export for=CSS id="dfn-support">support</dfn>
a declaration (consisting of a property and value) if it accepts that
declaration (rather than discarding it as a parse error).
If a processor does not implement, with a usable level of support,
the value given,
then it <strong>must not</strong>
accept the declaration or claim support for it.

Note: Note that properties or values
whose support is effectively disabled by user preferences
are still considered as supported by this definition.
For example, if a user has enabled a high-contrast mode
that causes colors to be overridden,
the CSS processor is still considered to support the 'color' property
even though declarations of the 'color' property may have no effect.
On the other hand, a developer-facing preference
whose purpose is to enable or disable support for an experimental CSS feature
does affect this definition of support.

These rules (and the equivalence between them) allow
authors to use fallback (either in the [[CSS1]] sense of declarations
that are overridden by later declarations or with the new capabilities
provided by the ''@supports'' rule in this specification) that works
correctly for the features implemented.  This applies especially to
compound values; implementations must implement all parts of the value
in order to consider the declaration supported, either inside a style rule
or in the declaration condition of an ''@supports'' rule.

<h2 id="apis">APIs</h2>

<h3 id='extensions-to-cssrule-interface'>
Extensions to the <code>CSSRule</code> interface</h3>

The <code>CSSRule</code> interface is extended as follows:

<pre class='idl'>
partial interface CSSRule {
    const unsigned short SUPPORTS_RULE = 12;
    <!--
    const unsigned short DOCUMENT_RULE = 13;
    -->
};
</pre>


<h3 id="the-cssconditionrule-interface">
The <code>CSSConditionRule</code> interface</h3>

The {{CSSConditionRule}} interface represents
all the &ldquo;conditional&rdquo; at-rules,
  which consist of a condition and a statement block.

<pre class='idl' export>
[Exposed=Window]
interface CSSConditionRule : CSSGroupingRule {
    attribute CSSOMString conditionText;
};
</pre>

<dl class='idl-attributes'>

  <dt><code>conditionText</code> of type <code>CSSOMString</code>
  <dd>
    The <code>conditionText</code> attribute represents
    the condition of the rule.
    Since what this condition does
    varies between the derived interfaces of <code>CSSConditionRule</code>,
    those derived interfaces
    may specify different behavior for this attribute
    (see, for example, <code>CSSMediaRule</code> below).
    In the absence of such rule-specific behavior,
    the following rules apply:

    The <code>conditionText</code> attribute, on getting, must return
    the result of serializing the associated condition.

    On setting the <code>conditionText</code> attribute these steps
      must be run:

    <ol>
      <li>Trim the given value of white space.
      <li>If the given value [=CSS/parses=]
        as the appropriate condition grammar for the given rule
        (such as <<supports-condition>> for ''@supports'', etc),
        replace the associated CSS condition with the given value.
      <li>Otherwise, do nothing.
    </ol>
</dl>


<h3 id="the-cssmediarule-interface">
The <code>CSSMediaRule</code> interface</h3>

The {{CSSMediaRule}} interface represents a ''@media'' at-rule:

<pre class='idl'>
[Exposed=Window]
interface CSSMediaRule : CSSConditionRule {
    [SameObject, PutForwards=mediaText] readonly attribute MediaList media;
};
</pre>

<dl class='idl-attributes'>
  <dt><code>media</code> of type {{MediaList}}, readonly
  <dd>The <code>media</code> attribute must return a {{MediaList}} object
    for the list of media queries specified with the ''@media'' at-rule.

  <dt><code>conditionText</code> of type <code>CSSOMString</code> (CSSMediaRule-specific definition for attribute on CSSConditionRule)
  <dd>The <code>conditionText</code> attribute (defined on the <code>CSSConditionRule</code> parent rule),
    on getting, must return the value of <code>media.mediaText</code> on the rule.

    Setting the <code>conditionText</code> attribute
      must set the <code>media.mediaText</code> attribute on the rule.
</dl>


<h3 id="the-csssupportsrule-interface">
The <code>CSSSupportsRule</code> interface</h3>

The {{CSSSupportsRule}} interface represents a ''@supports'' rule.

<pre class='idl'>
[Exposed=Window]
interface CSSSupportsRule : CSSConditionRule {
};
</pre>

<dl class='idl-attributes'>
  <dt><code>conditionText</code> of type <code>CSSOMString</code> (CSSSupportsRule-specific definition for attribute on CSSConditionRule)
  <dd>The <code>conditionText</code> attribute (defined on the <code>CSSConditionRule</code> parent rule),
    on getting, must return the condition that was specified,
    without any logical simplifications,
    so that the returned condition will evaluate to the same result
    as the specified condition
    in any conformant implementation of this specification
    (including implementations that implement future extensions
    allowed by the <<general-enclosed>> extensibility mechanism in this specification).
    In other words,
    token stream simplifications are allowed
    (such as reducing whitespace to a single space
    or omitting it in cases where it is known to be optional),
    but logical simplifications (such as removal of unneeded parentheses,
    or simplification based on evaluating results) are not allowed.

</dl>

<!--
<h3 id="the-cssdocumentrule-interface">
The <code>CSSDocumentRule</code> interface</h3>

The {{CSSDocumentRule}} interface represents a ''@document'' rule.

<pre class='idl'>
[Exposed=Window]
interface CSSDocumentRule : CSSConditionRule {
};
</pre>
-->


<h3 id='the-css-namespace'>
<span id='the-css-interface'>The <code>CSS</code> namespace, and the <code title=''>supports()</code> function</span></h3>

The {{CSS}} namespace holds useful CSS-related functions that do not belong elsewhere.

<pre class='idl'>
partial namespace CSS {
  boolean supports(CSSOMString property, CSSOMString value);
  boolean supports(CSSOMString conditionText);
};
</pre>

<dl class='idl-methods'>
	<dt><code>supports(CSSOMString property, CSSOMString value)</code>, returns <code>boolean</code>
	<dt><code>supports(CSSOMString conditionText)</code>, returns <code>boolean</code>
	<dd>
		When the {{supports(property, value)}} method is invoked
		with two arguments <var>property</var> and <var>value</var>:

    <div algorithm="supports(property, value)">
      1. If |property| is an [=ASCII case-insensitive=] match
        for any defined CSS property that the UA supports,
        and |value| successfully [=CSS/parses=] according to that property's grammar,
        return <code>true</code>.
      2. Otherwise, if |property| is a [=custom property name string=],
        return <code>true</code>.
      3. Otherwise, return <code>false</code>.

      Note: No CSS escape or whitespace processing is performed on the property name,
      so <code>CSS.supports(" width", "5px")</code> will return <code>false</code>,
      as " width" isn't the name of any property due to the leading space.
    </div>

		When the {{supports(conditionText)}} method is invoked
    with a single <var>conditionText</var> argument:

    <div algorithm="supports(conditionText)">
      1. If |conditionText|,
        [=CSS/parsed=] and evaluated as a <<supports-condition>>,
        would return true,
        return <code>true</code>.
      2. Otherwise,
        If |conditionText|,
        wrapped in parentheses
        and then [=CSS/parsed=] and evaluated as a <<supports-condition>>,
        would return true,
        return <code>true</code>.
      3. Otherwise, return <code>false</code>.

    </div>

    All namespaces in the <var>conditionText</var> argument
    are considered invalid,
    just as they are in <var>document.querySelector("a|b")</var>.
</dl>

<h2 class=no-num id=priv-sec>Privacy and Security Considerations</h2>

This spec introduces no new security considerations.

Various features in this specification,
associated mainly with the ''@media'' rule
but also to some degree with the ''@supports'' rule,
provide information to Web content about
the user's hardware and software and their configuration and state.
Most of the information is provided through the features in [[MEDIAQUERIES-4]]
rather than through the features in this specification.
However, the ''@supports'' rule may provide some additional details about the user's software
and whether it is running with non-default settings that may enable or disable certain features.

Most of this information can also be determined through other APIs.
However, the features in this specification are one of the ways this information
is exposed on the Web.

This information can also, in aggregate, be used to improve the accuracy of
<a href="https://www.w3.org/2001/tag/doc/unsanctioned-tracking/">fingerprinting</a> of the user.

<h2 id="changes">
Changes</h2>

The following (non-editorial) changes were made to this specification since the
<a href="https://www.w3.org/TR/2013/CR-css3-conditional-20130404/">4 April 2013 Candidate Recommendation</a>:

<ul>
  <!-- to 1 Dec 2020 -->
  <li>Clarified that namespaces in conditionText are invalid</li>
  <li>New editors added</li>
  <li>Added explicit call to [=CSS/parse=] rather than "matches the grammar"
  <li>Removed duplicate CSSGroupingRule, which is already defined by CSSOM
  <li>Rewrote the supports() text into algorithm form,
      to make it easier to express that you pay attention to
      the syntax of registered custom properties in the supports(prop, val) form.
  <li>Moved the definition of @supports selector to css-conditional-4.
  <li>''@supports''' is no longer at risk.
  <li>Rewrote to use CSS Syntax grammars, not CSS 2.1 grammars
  <li>Changed from CSS Interface to WebIDL-compatible CSS namespace
  <!-- changes before Oct 12, 2017 are not in GitHub. Should be in Mercurial? -->
  <li>Dropped requirement for spaces around ''and'', ''or'', and ''not'' keywords
      for consistency with <a href="http://www.w3.org/TR/css3-mediaqueries/">Media Queries</a>
      (which are themselves constrained by compatibility with the output of some CSS minimizers
      that rely on some of the more arcane aspects of CSS tokenization).
      Note that white space--or a comment--is still required <em>after</em> these keywords,
      since without it they and the ensuing opening parenthesis will be tokenized as a function opening token.
  <li>Allowed the <code title=''>supports()</code> method
      to imply parentheses for simple declarations,
      for consistency with the ''@import'' rule’s ''supports()'' function.
  <li>Fixed missing semicolons in IDL code.
  <li>Updated links, terminology, and example code in response to changes to other modules.
  <li>Spelling and grammatical corrections
  <li>Added section on privacy and security considerations.
</ul>

<h2 class=no-num id="acknowledgments">Acknowledgments</h2>


Thanks to the ideas and feedback from
Tab Atkins,
Arthur Barstow,
Ben Callahan,
<span lang="tr">Tantek Çelik</span>,
Alex Danilo,
Elika Etemad,
Pascal Germroth,
<span lang="de">Björn Höhrmann</span>,
Paul Irish,
Brad Kemper,
<span lang="nl">Anne van Kesteren</span>,
Vitor Menezes,
Alex Mogilevsky,
Chris Moschini,
James Nurthen,
Simon Pieters,
<span lang="fr">Florian Rivoal</span>,
<span lang="fr">Simon Sapin</span>,
Nicholas Shanks,
Ben Ward,
Zack Weinberg,
Estelle Weyl,
Boris Zbarsky,
and all the rest of the <a href="http://lists.w3.org/Archives/Public/www-style/">www-style</a> community.
