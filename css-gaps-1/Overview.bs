<pre class='metadata'>
Title: CSS Gap Decorations Module Level 1
Shortname: css-gaps
Level: 1
Status: ED
Group: csswg
Work Status: exploring
Repository: w3c/csswg-drafts
URL: https://drafts.csswg.org/css-gaps-1
Editor: Kevin Babbitt, Microsoft, https://github.com/kbabbitt, w3cid 124689
Abstract: This module introduces several properties to add row and column gap decorations to container layout types such as grid and flex.
</pre>
<pre class='anchors'>
urlPrefix: https://drafts.csswg.org/css-grid-3/; type: dfn; spec: CSS-GRID-3; text: masonry container
</pre>

Introduction {#intro}
=====================

	<em>This section is not normative.</em>

	[[CSS-MULTICOL-1#column-gaps-and-rules]] allows for rules to be drawn
	between columns in a <a>multicol container</a>. This specification expands
	upon the 'column-rule-width', 'column-rule-style', and 'column-rule-color'
	properties, adding equivalents in the row direction, expanding their
	application to other container layouts, and giving advanced control over
	where and how gap decorations are painted.

Value Definitions {#values}
---------------------------

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

Gap decorations {#gap-decorations}
==================================

	Various layouts in CSS such as
	<a>multicol containers</a>, <a>flex containers</a>, <a>grid containers</a>, and <a>masonry containers</a>
	position child boxes adjacent to each other with gaps, also known as <a>gutters</a>, between them.
	Each such gap may contain a <dfn>gap decoration</dfn> which authors
	may use to provide a visual separator between adjacent boxes.

	<div class="example">
		<pre>
			.grid-with-spans {
			  display: grid;
			  grid-template: repeat(4, 100px) / repeat(4, 100px);
			  gap: 20px;
			  row-rule: 6px solid red;
			  column-rule: 6px solid blue;
			}
		</pre>
		<img src="images/example-grid-with-spans.png">
		<figcaption>A grid with spanning items and gap decorations.
	</div>

	<div class="example">
		<pre>
			.flex {
			  display: flex;
			  flex-wrap: wrap;
			  gap: 20px;
			  width: 500px;
			  row-rule: 6px solid red;
			  column-rule: 6px solid blue;
			}
		</pre>
		<img src="images/example-flex.png">
		<figcaption>A flexbox with gap decorations.
	</div>

Layout and painting {#layout-painting}
--------------------------------------

	This specification does not generally define the geometry of gaps in container layouts;
	that is left to other specifications.
	See [[CSS-ALIGN-3#gaps]] for definitions pertaining to
	<a>multicol containers</a>, <a>flex containers</a>, and <a>grid containers</a>.

	<a>Gap decorations</a> do not take up space.
	That is, the presence or thickness of a <a>gap decoration</a> will not alter the placement of anything else.
	If a <a>gap decoration</a> is wider than its gap,
	any adjacent boxes will overlap the decoration,
	and in some cases the decoration may possibly extend outside the box of the container.
	<a>Gap decorations</a> are painted just above the border of the container.
	For scrollable containers,
	note that while the border and background of the container obviously aren't scrolled,
	the decorations need to scroll along with items in the container.

	A <dfn>gap intersection point</dfn> exists in each of the following locations:
	<ul>
		<li>The center of an intersection between a gap and the content edge of the container.
		<li>The center of an intersection between gaps in different directions.
	</ul>

	<a>Gap decorations</a> are painted relative to pairs of <a>gap intersection points</a>,
	in the center of the corresponding gap and parallel to its edges.
	The pairs of <a>gap intersection points</a> chosen for a gap decoration,
	and the endpoints of the painted gap decoration relative to those intersection points,
	may be adjusted using the properties in [[#segments]].

	To <dfn>determine pairs of endpoints for gap decorations</dfn> for a given gap, which has a given |direction|:

	<ol>
		<li>
			Let |pairs| be an empty list.
			Let |endpoints| be the list of <a>gap intersection points</a> that fall along the centerline of the gap,
			ordered from start to end along the gap axis.

		<li>
			If |endpoints| contains fewer than 2 items, return |pairs|.

		<li>
			Let |subset| be an empty list.
		
		<li>
			Remove the first item from |endpoints| and add it to the end of |subset|.

		<li>
			If |endpoints| is non-empty, and either of the following conditions is true...
			<ol>
				<li>
					A line segment from the first item in |subset| to the first item in |endpoints|
					does not intersect a child item in the container
				<li>
					The container is a grid,
					and the grid-|direction|-rule-break property is set to ''grid-column-rule-break/none''
			</ol>
			...then go back to step 4.
		
		<li>
			If the |direction|-rule-outset property is set to ''column-rule-outset/join'',
			add to |pairs| a tuple consisting of the first and last items in |subset|.
			Go back to step 2.
		
		<li>
			If |subset| contains fewer then 2 items, go back to step 2.
		
		<li>
			Let |offset| be half the width of the gap, minus the resolved value of the |direction|-rule-outset property.
		
		<li>
			Let |start| be equal to the first entry in |subset|.
			Offset |start| by |offset| in the forward direction along the gap axis.
		
		<li>
			Let |end| be equal to the second entry in |subset|.
			Offset |end| by |offset| in the reverse direction along the gap axis.

		<li>
			Add to |pairs| a tuple consisting of |start| and |end|.
		
		<li>
			Remove the first item from |subset|.
			Go back to step 7.

	</ol>

	A <a>gap decoration</a> is painted between each pair of endpoints identified using the steps above.

Color, style, and width {#color-style-width}
============================================

Lists of values and the ''repeat()'' notation {#lists-repeat}
-------------------------------------------------------------

	Each of the properties in this section accepts a space-separated list of values.
	Setting multiple values in this way allows for varying <a>gap decorations</a> within a given container.

	<div class="example">
		An author might specify alternating red and blue column rules as follows:
		<pre>
			column-rule-width: 1px;
			column-rule-style: solid;
			column-rule-color: red blue;
		</pre>
	</div>

	Such a list may contain <dfn>repeat()</dfn> notations.
	Similar to [[css-grid-1#repeat-notation]], these notations allow a large number of <a>gap decorations</a>
	that exhibit a recurring pattern to be written in a more compact form.

	The generic form of the ''repeat()'' syntax is, approximately,
	<pre class='prod'>
		repeat( [ <<integer [1,âˆž]>> | auto ] , &lt;value&gt;+ )
	</pre>

	The first argument to ''repeat()'' specifies the number of repetitions.
	<dl>
		<dt><<integer>>
		<dd>
			Specifies an <dfn>integer repeater</dfn>.
			An <a>integer repeater</a> expands out to the list of values in the second argument,
			repeated as many times as specified by the first argument.

			<div class="example">
				An author may write:
				<pre>
					column-rule-color: gray red blue red blue red blue gray;
				</pre>
				Or shorten to the following, which produces the same sequence of colors:
				<pre>
					column-rule-color: gray repeat(3, red blue) gray;
				</pre>
			</div>

		<dt>auto
		<dd>
			Specfies an <dfn>auto repeater</dfn>.
			An <a>auto repeater</a> will automatically fill in values for gaps
			that would not otherwise receive values from other parts of the list.
			At most one ''repeat()'' in a given list of values may be an <a>auto repeater</a>.

			<div class="example">
				Continuing from the previous example, if the author does not know how
				many columns will be in the final layout, they might instead write:
				<pre>
					column-rule-color: gray repeat(auto, red blue) gray;
				</pre>
				Which will produce a gray decoration in the first and last column gaps,
				and alternating red and blue decorations in the in-between column gaps.
			</div>
	</dl>

	The second argument to ''repeat()'' is a space-separated list of values
	that would be accepted by the property in which the ''repeat()'' appears.

	To <dfn>assign gap decoration values</dfn> to a set of gaps using a list of values:

	<ol>
		<li>
			Replace any <a>integer repeaters</a> in the list of values with their expanded-out equivalents.

		<li>
			If the list contains no <a>auto repeater</a>, then:

			<ol>
				<li>
					Beginning from the first item in the list of values and the first gap in the set of gaps,
					assign each value to the corresponding gap.
					If there are fewer values than gaps,
					repeat beginning from the first item in the list of values,
					as many times as needed.
				
				<li>
					End this algorithm.
			</ol>

		<li>
			The list contains an <a>auto repeater</a>.
			Let |leading count| be the number of entries in the list of values before the <a>auto repeater</a>.
			Let |trailing count| be the number of entries in the list of values after the <a>auto repeater</a>.

		<li>
			Partition the set of gaps as follows:

			<ol>
				<li>
					Let |leading set| contain the first |leading count| gaps in the set.
				<li>
					Let |trailing set| contain the last |trailing count| gaps in the set,
					excluding any gaps in |leading set|.
				<li>
					Let |auto set| contain any gaps not in either |leading set| or |trailing set|.
			</ol>
		
		<li>
			If |leading set| is non-empty,
			<a>assign gap decoration values</a> to |leading set|
			using the first |leading count| entries in the list of values.
		
		<li>
			If |trailing set| is non-empty,
			<a>assign gap decoration values in reverse</a> to |trailing set|
			using the last |trailing count| entries in the list of values.
		
		<li>
			If |auto set| is empty, end this algorithm.
			Otherwise, continue with the following steps.
		
		<li>
			Let |auto value count| be the number of values in the second argument of the <a>auto repeater</a>.
			Let |auto repeat count| be the number of gaps in |auto set|, divided by |auto value count|, plus 1.
			Replace the first argument of the <a>auto repeater</a> with |auto repeat count|,
			thus converting it into an <a>integer repeater</a>.
		
		<li>
			<a>Assign gap decoration values</a> to |auto set|
			using the <a>integer repeater</a> produced in the preceding step.

	</ol>

	To <dfn>assign gap decoration values in reverse</dfn> to a set of gaps using a list of values,
	follow the same steps as to <a>assign gap decoration values</a>,
	except that in step 2, change all instances of "first" to "last".

	Issue: Do the steps above define the best way to handle <a>auto repeater</a> resolution
	in cases where the number of gaps is less than the number of values?

Gap decoration color: The 'column-rule-color' and 'row-rule-color' properties {#column-row-rule-color}
------------------------------------------------------------------------------------------------------

	<pre class='propdef'>
		Name: column-rule-color, row-rule-color
		Value: <<line-color-list>> | <<auto-line-color-list>>
		Initial: curerentcolor
		Applies to: <a>grid containers</a>, <a>flex containers</a>, <a>multicol containers</a>, and <a>masonry containers</a>
		Inherited: no
		Animation type: by computed value type
	</pre>

	<pre class='prod'>
		<dfn>&lt;line-color-list&gt;</dfn>          = [ <<line-color-or-repeat>> ]+

		<dfn>&lt;auto-line-color-list&gt;</dfn>     = [ <<line-color-or-repeat>> ]*
									               <<auto-repeat-line-color>>
									               [ <<line-color-or-repeat>> ]*

		<dfn>&lt;line-color-or-repeat&gt;</dfn>     = [ <<color>> | <<repeat-line-color>> ]

		<dfn>&lt;repeat-line-color&gt;</dfn>        = repeat( [ <<integer [1,âˆž]>> ] , [ <<color>> ]+ )

		<dfn>&lt;auto-repeat-line-color&gt;</dfn>   = repeat( auto , [ <<color>> ]+ )
	</pre>

	<dl>
		<dt><dfn value for=column-rule-color><<color>></dfn></dt>
		<dd>
			Sets the color of <a>gap decorations</a>.
		</dd>
	</dl>

Gap decoration style: The 'column-rule-style' and 'row-rule-style' properties {#column-row-rule-style}
------------------------------------------------------------------------------------------------------

	<pre class='propdef'>
		Name: column-rule-style, row-rule-style
		Value: <<line-style-list>> | <<auto-line-style-list>>
		Initial: none
		Applies to: <a>grid containers</a>, <a>flex containers</a>, <a>multicol containers</a>, and <a>masonry containers</a>
		Inherited: no
		Animation type: discrete
	</pre>

	<pre class='prod'>
		<dfn>&lt;line-style-list&gt;</dfn>          = [ <<line-style-or-repeat>> ]+

		<dfn>&lt;auto-line-style-list&gt;</dfn>     = [ <<line-style-or-repeat>> ]*
									               <<auto-repeat-line-style>>
									               [ <<line-style-or-repeat>> ]*

		<dfn>&lt;line-style-or-repeat&gt;</dfn>     = [ <<line-style>> | <<repeat-line-style>> ]

		<dfn>&lt;repeat-line-style&gt;</dfn>        = repeat( [ <<integer [1,âˆž]>> ] , [ <<line-style>> ]+ )

		<dfn>&lt;auto-repeat-line-style&gt;</dfn>   = repeat( auto , [ <<line-style>> ]+ )
	</pre>

	These properties set the styles of <a>gap decorations</a>.
	The <<line-style>> values are interpreted as in the <a href="https://www.w3.org/TR/CSS2/tables.html#collapsing-borders">collapsing border model</a>.

Gap decoration width: The 'column-rule-width' and 'row-rule-width' properties {#column-row-rule-width}
------------------------------------------------------------------------------------------------------
	<pre class='propdef'>
		Name: column-rule-width, row-rule-width
		Value: <<line-width-list>> | <<auto-line-width-list>>
		Initial: medium
		Applies to: <a>grid containers</a>, <a>flex containers</a>, <a>multicol containers</a>, and <a>masonry containers</a>
		Inherited: no
		Computed value: list of absolute lengths, <a>snapped as a border width</a>, or ''0'' under conditions described below
		Animation type: by computed value type
	</pre>

	<pre class='prod'>
		<dfn>&lt;line-width-list&gt;</dfn>          = [ <<line-width-or-repeat>> ]+

		<dfn>&lt;auto-line-width-list&gt;</dfn>     = [ <<line-width-or-repeat>> ]*
									               <<auto-repeat-line-width>>
									               [ <<line-width-or-repeat>> ]*

		<dfn>&lt;line-width-or-repeat&gt;</dfn>     = [ <<line-width>> | <<repeat-line-width>> ]

		<dfn>&lt;repeat-line-width&gt;</dfn>        = repeat( [ <<integer [1,âˆž]>> ] , [ <<line-width>> ]+ )

		<dfn>&lt;auto-repeat-line-width&gt;</dfn>   = repeat( auto , [ <<line-width>> ]+ )
	</pre>

	This property sets the widths of <a>gap decorations</a>. Negative values are not allowed.

	If the computed value of ''column-rule-style'' is ''border-style/none'' or ''border-style/hidden'',
	then the computed value of ''column-rule-width'' is ''0''.
	This behavior is for backwards compatibility with [[css-multicol-1#crw]].

	Issue: Should we extend the "force to 0" behavior to the row properties?

	Issue: Should the "force to 0" behavior apply when lists of values are involved?
	If so, how should this be handled with unaligned lists?

Gap decoration shorthands: The 'column-rule' and 'row-rule' properties {#gap-decoration-shorthands}
---------------------------------------------------------------------------------------------------

	<pre class='propdef shorthand'>
		Name: column-rule, row-rule
		Value: <<gap-rule-list>> | <<auto-gap-rule-list>>
	</pre>

	<pre class='prod'>
		<dfn>&lt;gap-rule-list&gt;</dfn>        = <<gap-rule-or-repeat>> [ / <<gap-rule-or-repeat>> ]*

		<dfn>&lt;auto-gap-rule-list&gt;</dfn>   = [ [ <<gap-rule-or-repeat>> ] / ]*
								             <<auto-repeat-gap-rule>>
								             [ / [ <<gap-rule-or-repeat>> ] ]*

		<dfn>&lt;gap-rule-or-repeat&gt;</dfn>   = [ <<gap-rule>> | <<repeat-gap-rule>> ]

		<dfn>&lt;repeat-gap-rule&gt;</dfn>      = repeat( [ <<integer [1,âˆž]>> ] , [ <<gap-rule>> ]# )

		<dfn>&lt;auto-repeat-gap-rule&gt;</dfn> = repeat( auto , [ <<gap-rule>> ]# )

		<dfn>&lt;gap-rule&gt;</dfn>             = [ <<line-width>> || <<line-style>> || <<color>> ]
	</pre>

	These shorthands set the corresponding width, style, and color properties as a set.

	Issue: Are the slashes to separate values into tuples the right way to structure this?
	Or would it be safe to allow free-form mixing, for example 'column-rule: 1px 5px solid black'?
	Note that commas are reserved for future extension of the grammar to support
	<a href="https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/CSSGapDecorations/explainer.md#placement-of-gap-decorations">gap decoration areas</a>.

Bi-directional gap decoration shorthands: The 'gap-rule-color', 'gap-rule-style', 'gap-rule-width', and 'gap-rule' properties {#gap-rule-bi-directional}
--------------------------------------------------------------------------------------------------------------------------------------------------------

	<pre class='propdef shorthand'>
		Name: gap-rule-color
		Value: <<'column-rule-color'>>
		Inherited: no
		Applies to: Same as 'column-rule-color' and 'row-rule-color'
	</pre>

	<pre class='propdef shorthand'>
		Name: gap-rule-style
		Value: <<'column-rule-style'>>
		Inherited: no
		Applies to: Same as 'column-rule-style' and 'row-rule-style'
	</pre>

	<pre class='propdef shorthand'>
		Name: gap-rule-width
		Value: <<'column-rule-width'>>
		Inherited: no
		Applies to: Same as 'column-rule-width' and 'row-rule-width'
	</pre>

	<pre class='propdef shorthand'>
		Name: gap-rule
		Value: <<'column-rule'>>
		Inherited: no
		Applies to: Same as 'column-rule' and 'row-rule'
	</pre>

	These shorthands set the corresponding column and row properties to the same values.

Gap decoration segments {#segments}
===================================

Gap decoration segment length: The 'column-rule-outset' and 'row-rule-outset' properties {#outset}
--------------------------------------------------------------------------------------------------

	<pre class='propdef'>
		Name: column-rule-outset, row-rule-outset
		Value: ''join'' | <<length-percentage>>
		Initial: ''join''
		Applies to: <a>grid containers</a>, <a>flex containers</a>, <a>multicol containers</a>, and <a>masonry containers</a>
		Inherited: no
		Percentages: refer to the gap width in the perpendicular direction
		Animation type: by computed value type
	</pre>

	<dl dfn-type="value" dfn-for="column-rule-outset, row-rule-outset">
		<dt><dfn>join</dfn>
		<dd>
			<a>Gap decorations</a> run continuously as far as possible
			along a given gap.
			In an interpolation context, ''join'' is treated as ''50%''.
		</dd>
		<dt><dfn><<length-percentage>></dfn>
		<dd>
			<a>Gap decorations</a> run from one gap intersection to the next,
			modified by the value given.
			Positive values extend into the neighboring intersection;
			negative values recede from it.
			These offsets also apply at the edges of the container,
			where negative values may extend beyond the content bounds of the container.
		</dd>
	</dl>

	For specific details on how these values are handled,
	see the steps to <a>determine pairs of endpoints for gap decorations</a>.

	<div class="example">
		The following examples illustrate adjustment of gap decoration endpoints using the 'column-rule-outset' property.
		<dl>
			<dt><pre>column-rule-outset: join;</pre>
			<dd>
				<img src="images/example-column-outset-join.png">

			<dt><pre>column-rule-outset: 0px;</pre>
			<dd>
				<img src="images/example-column-outset-0px.png">

			<dt><pre>column-rule-outset: 5px;</pre>
			<dd>
				<img src="images/example-column-outset-5px.png">

			<dt><pre>column-rule-outset: -5px;</pre>
			<dd>
				<img src="images/example-column-outset-minus-5px.png">
		</dl>
	</div>

Interaction with spanning items in Grid: The 'grid-column-rule-break', 'grid-row-rule-break', and 'grid-rule-break' properties {#grid-rule-break}
-------------------------------------------------------------------------------------------------------------------------------------------------

	<pre class='propdef'>
		Name: grid-column-rule-break, grid-row-rule-break
		Value: ''span'' | ''none''
		Initial: ''span''
		Applies to: <a>grid containers</a>
		Inherited: no
		Animation type: discrete
	</pre>

	<dl dfn-type="value" dfn-for="grid-column-rule-break, grid-row-rule-break">
		<dt><dfn>span</dfn>
		<dd>
			Gaps are treated as starting and ending either at edges of the container,
			or where a child item spans across the gap in the perpendicular direction.
		</dd>
		<dt><dfn>none</dfn>
		<dd>
			Gaps are treated as starting and ending at edges of the container only.
		</dd>
	</dl>

	For specific details on how these values are handled,
	see the steps to <a>determine pairs of endpoints for gap decorations</a>.

	<pre class='propdef shorthand'>
		Name: grid-rule-break
		Value: span | none
		Applies to: Same as 'grid-column-rule-break' and 'grid-row-rule-break'
	</pre>

	Sets the 'grid-column-rule-break' and 'grid-row-rule-break' properties to the same value.

Gap decoration paint order: The 'gap-rule-paint-order' property {#gap-rule-paint-order}
---------------------------------------------------------------------------------------
	<pre class='propdef'>
		Name: gap-rule-paint-order
		Value: row-over-column | column-over-row
		Initial: row-over-column
		Applies to: <a>grid containers</a>, <a>flex containers</a>, and <a>masonry containers</a>
		Inherited: no
		Animation type: discrete
	</pre>

	Sets the paint order for <a>gap decorations</a> in two-dimensional containers.

<h2 class=no-num id=privacy>Privacy Considerations</h2>

No new privacy considerations have been reported on this specification.

<h2 class=no-num id=security>Security Considerations</h2>

No new security considerations have been reported on this specification.
