<pre class='metadata'>
Title: CSS Values and Units Module Level 5
Group: CSSWG
Shortname: css-values
Level: 5
Status: ED
Work Status: Refining
ED: https://drafts.csswg.org/css-values-5/
TR: https://www.w3.org/TR/css-values-5/
Editor: Tab Atkins, Google, http://xanthir.com/contact/, w3cid 42199
Editor: fantasai, http://fantasai.inkedblade.net/contact, w3cid 35400
Abstract: This CSS module describes the common values and units that CSS properties accept and the syntax used for describing them in CSS property definitions.
Ignored Terms: <spacing-limit>, containing block, property
Ignored Vars: Cn+1, n
Inline Github Issues: no
Default Highlight: css
</pre>
<pre class='link-defaults'>
</pre>
<style>
code, small { white-space: nowrap }
pre.value { font: inherit; white-space: pre-wrap; margin: 0; padding: 0; }
#propvalues td { text-align: right; }
#propvalues td + td { text-align: left; }
dt + dt::before { content: ", "; }
dl:not(.switch) dt { display: inline; }
td > small { display: block; }
</style>

<h2 id="intro">
Introduction</h2>

	The value definition field of each CSS property can contain keywords,
	data types (which appear between <css>&lt;</css> and <css>></css>),
	and information on how they can be combined.
	Generic data types (<<length>> being the most widely used)
	that can be used by many properties are described in this specification,
	while more specific data types (e.g., <<spacing-limit>>)
	are described in the corresponding modules.

<h3 id="placement">
Module Interactions</h3>

	This module supersedes [[CSS-VALUES-4]]
	which replaces and extends the data type definitions in [[!CSS21]] sections
	<a href="https://www.w3.org/TR/CSS21/about.html#value-defs">1.4.2.1</a>,
	<a href="https://www.w3.org/TR/CSS21/syndata.html#values">4.3</a>,
	and <a href="https://www.w3.org/TR/CSS21/aural.html#aural-intro">A.2</a>.

<!--
██     ██ ████ ██     ██   ███ ███
███   ███  ██   ██   ██   ██     ██
████ ████  ██    ██ ██   ██       ██
██ ███ ██  ██     ███    ██       ██
██     ██  ██    ██ ██   ██       ██
██     ██  ██   ██   ██   ██     ██
██     ██ ████ ██     ██   ███ ███
-->

<!--

<h3 id="interpolate">
Representing Interpolated Values: the ''mix()'' notation</h3>

	[=Interpolation=] of two values can be represented
	by the <dfn>mix()</dfn> [=functional notation=],
	whose syntax is defined as follows:

	<pre class="prod">
		mix( <<percentage>> ';' <<start-value>> ';' <<end-value>> )
	</pre>

	<dl dfn-for="mix()">
		<dt><dfn value><<percentage>></dfn>
		<dd>
			Represents the interpolation point
			as progress from <<start-value>> to <<end-value>>.

		<dt><dfn type noexport><<start-value>></dfn>
		<dd>
			The value at the “start” (0%) of the interpolation range.

		<dt><dfn type noexport><<end-value>></dfn>
		<dd>
			The value at the “end” (100%) of the interpolation range.
	</dl>

	Note: This [=functional notation=] uses semicolons to separate arguments
	rather than the more typical comma
	because the values themselves can contain commas.

	A ''mix()'' notation is invalid if either its <<start-value>> or <<end-value>>
	is invalid if substituted in its place,
	or if the property using it is [=not animatable=].

	ISSUE(6700):
	Define more precisely where mix() is allowed.
	Is it a top-level functional notation only?
	Or can it be nested more deeply in the grammar somehow?

	Progress values below ''0%'' and above ''100%'' are valid;
	they represent interpolation beyond the range represented
	by the start and end values.

	ISSUE(6245): Incorporate interpolation along an easing line.

-->

<!--
████████  ███████   ██████    ██████   ██       ████████   ███ ███
   ██    ██     ██ ██    ██  ██    ██  ██       ██        ██     ██
   ██    ██     ██ ██        ██        ██       ██       ██       ██
   ██    ██     ██ ██   ████ ██   ████ ██       ██████   ██       ██
   ██    ██     ██ ██    ██  ██    ██  ██       ██       ██       ██
   ██    ██     ██ ██    ██  ██    ██  ██       ██        ██     ██
   ██     ███████   ██████    ██████   ████████ ████████   ███ ███
-->

<h3 id="toggle-notation">
Toggling Between Values: ''toggle()''</h3>

	The <dfn>toggle()</dfn> expression allows descendant elements
	to cycle over a list of values instead of inheriting the same value.

	<div class='example'>
		The following example makes <code>&lt;em></code> elements italic in general,
		but makes them normal if they're inside something that's italic:

		<pre>em { font-style: toggle(italic; normal); }</pre>
	</div>

	<div class='example'>
		The following example cycles markers for nested lists,
		so that a top level list has ''list-style-type/disc''-shaped markers,
		but nested lists use ''list-style-type/circle'', then ''list-style-type/square'', then ''list-style-type/box'',
		and then repeat through the list of marker shapes,
		starting again (for the 5th list deep) with ''list-style-type/disc''.

		<pre>ul { list-style-type: toggle(disc; circle; square; box); }</pre>
	</div>

	The syntax of the ''toggle()'' expression is:

	<pre>toggle( <<toggle-value>> [ ';' <<toggle-value>> ]+ )</pre>

	where <dfn>&lt;toggle-value></dfn> is any CSS value
	that is valid where the expression is placed.
	If any of the values inside are not valid,
	then the entire ''toggle()'' expression is invalid.
	The ''toggle()'' expression may be used as the value of any property,
	but must be the only component in that property's value.

	Note: This [=functional notation=] uses semicolons to separate arguments
	rather than the more typical comma
	because the values themselves can contain commas.

	The ''toggle()'' notation is not allowed to be nested;
	nor may it contain ''attr()'' or ''calc()'' notations.
	Declarations containing such constructs are invalid.

	<div class="example">
		The following ''toggle()'' examples are all invalid:

		<pre>
		background-position: 10px toggle(50px, 100px);
		/* toggle() must be the sole value of the property */

		list-style-type: toggle(disc, 50px);
		/* ''50px'' isn't a valid value of 'list-style-type' */
		</pre>
	</div>

	To determine the computed value of ''toggle()'',
	first evaluate each argument as if it were the sole value of the property in which ''toggle()'' is placed
	to determine the computed value that each represents,
	called <var>C<sub>n</sub></var> for the <var>n</var>-th argument to ''toggle()''.
	Then, compare the property's <a>inherited value</a>
	with each <var>C<sub>n</sub></var>.
	For the earliest <var>C<sub>n</sub></var> that matches the <a>inherited value</a>,
	the computed value of ''toggle()'' is <var>C<sub>n+1</sub></var>.
	If the match was the last argument in the list,
	or there was no match,
	the computed value of ''toggle()'' is the computed value that the first argument represents.


	Note: This means that repeating values in a ''toggle()'' short-circuits the list.
	For example ''toggle(1em; 2em; 1em; 4em)'' will be equivalent to ''toggle(1em; 2em)''.

	<!-- Issue: Should this short-circuiting affect the computed value? -->

	Note: That ''toggle()'' explicitly looks at the computed value of the parent,
	so it works even on non-inherited properties.
	This is similar to the ''inherit'' keyword,
	which works even on non-inherited properties.

	Note: That the <a href="https://www.w3.org/TR/CSS21/cascade.html#computed-value">computed value</a> of a property is an abstract set of values,
	not a particular serialization [[!CSS21]],
	so comparison between computed values should always be unambiguous and have the expected result.
	For example,
	a Level 2 <l spec=css2>'background-position'</l> computed value
	is just two offsets, each represented as an absolute length or a percentage,
	so the declarations ''background-position: top center'' and ''background-position: 50% 0%''
	produce identical computed values.
	If the "Computed Value" line of a property definition seems to define something ambiguous or overly strict,
	please <a href="#status">provide feedback</a> so we can fix it.

	If ''toggle()'' is used on a <a>shorthand property</a>,
	it sets each of its longhands to a ''toggle()'' value
	with arguments corresponding to what the longhand would have received
	had each of the original ''toggle()'' arguments been the sole value of the <a>shorthand</a>.

	<div class="example">
		For example, the following shorthand declaration:

		<pre>margin: toggle(1px 2px, 4px, 1px 5px 4px);</pre>

		is equivalent to the following longhand declarations:

		<pre>
		margin-top:    toggle(1px; 4px; 1px);
		margin-right:  toggle(2px; 4px; 5px);
		margin-bottom: toggle(1px; 4px; 4px);
		margin-left:   toggle(2px; 4px; 5px);
		</pre>

		Note that, since ''1px'' appears twice in the top margin and ''4px'' appears twice in bottom margin,
		they will cycle between only two values
		while the left and right margins cycle through three.
		In other words, the declarations above will yield the same computed values
		as the longhand declarations below:

		<pre>
		margin-top:    toggle(1px; 4px);
		margin-right:  toggle(2px; 4px; 5px);
		margin-bottom: toggle(1px; 4px);
		margin-left:   toggle(2px; 4px; 5px);
		</pre>

		which may not be what was intended.
	</div>

<!--
   ███    ████████ ████████ ████████    ███ ███
  ██ ██      ██       ██    ██     ██  ██     ██
 ██   ██     ██       ██    ██     ██ ██       ██
██     ██    ██       ██    ████████  ██       ██
█████████    ██       ██    ██   ██   ██       ██
██     ██    ██       ██    ██    ██   ██     ██
██     ██    ██       ██    ██     ██   ███ ███
-->

<h2 id="attr-notation">
Attribute References: the ''attr()'' function</h2>

<!--
Ian's proposal:
  http://lists.w3.org/Archives/Member/w3c-css-wg/2002OctDec/0141.html
-->

	The <dfn>attr()</dfn> function substitutes the value of an  <l spec=dom>[=attribute=]</l> on an <l spec=dom>[=/element=]</l>
	into a property,
	similar to how the ''var()'' function
	substitutes a [=custom property=] value into a function.

	<pre class=prod>
		attr() = attr( <<q-name>> <<attr-type>>? , <<declaration-value>>?)

		<dfn>&lt;attr-type></dfn> = string | url | ident | color | number | percentage |
		              length | angle | time | frequency | flex | <<dimension-unit>>
	</pre>

	The <dfn>&lt;dimension-unit></dfn> production matches a literal "%" character
	(that is, a <<delim-token>> with a value of "%")
	or an ident whose value is any of the CSS units
	for <<length>>, <<angle>>, <<time>>, <<frequency>>, or <<flex>> values
	(such as ''px'' or ''ms'').

	The arguments of ''attr()'' are:

	: <<q-name>>
	:: Gives the name of the attribute being referenced.

		If no namespace is specified
		(just an identifier is given, like ''attr(foo)''),
		the null namespace is implied.
		(This is usually what's desired,
		as namespaced attributes are rare.
		In particular, HTML and SVG do not contain namespaced attributes.)
		As with [=attribute selectors=],
		the case-sensitivity of <<q-name>> depends on the document language.

		If ''attr()'' is used in a property applied to an element,
		it references the attribute of the given name on that element;
		if applied to a pseudo-element,
		the attribute is looked up on the pseudo-element's [=originating element=].

	: <<attr-type>>
	::
		Specifies what kind of CSS value
		the attribute's value will be interpreted into
		(the ''attr()''’s <dfn dfn for=attr()>substitution value</dfn>)
		and what, if any, special parsing will be done to the value.

		The possible values and their behavior are defined in [[#attr-types]].

		Defaults to ''string'' if omitted.

	: <<declaration-value>>
	::
		Specifies a fallback value for the ''attr()'',
		which will be substituted instead of the attribute's value
		if the attribute is missing
		or fails to parse as the specified type.

		If the <<attr-type>> argument is ''string'',
		defaults to the empty string if omitted;
		otherwise, defaults to the [=guaranteed-invalid value=] if omitted.

	If a property contains one or more ''attr()'' functions,
	and those functions are syntactically valid,
	the entire property's grammar must be assumed to be valid at parse time.
	It is only syntax-checked at computed-value time,
	after ''attr()'' functions have been [=substitute an attr()|substituted=].

	<div class='note'>
		Note that the default value need not be of the type given.
		For instance, if the type required of the attribute by the author is ''px'',
		the default could still be <css>auto</css>,
		like in ''width: attr(size px, auto);''.
	</div>

<h3 id="attr-types">
''attr()'' Types</h3>

	The behavior of the ''attr()'' function
	depends partially on the value of the <<attr-type>> argument:

	<dl dfn-type=value dfn-for=attr()>
		: <dfn>string</dfn>
		:: The [=substitution value=] is a CSS string,
			whose value is the literal value of the attribute.
			(No CSS parsing or "cleanup" of the value is performed.)

			No value triggers fallback.

		: <dfn>url</dfn>
		:: The [=substitution value=] is a CSS <<url>> value,
			whose url is the literal value of the attribute.
			(No CSS parsing or "cleanup" of the value is performed.)

			Note: If ''url()'' was syntactically capable of containing functions,
			''attr(foo url)'' would be identical to ''url(attr(foo string))''.

			No value triggers fallback.

		: <dfn>ident</dfn>
		:: The [=substitution value=] is a CSS <<custom-ident>>,
			whose value is the literal value of the attribute,
			with [=strip leading and trailing ASCII whitespace|leading and trailing ASCII whitespace stripped=].
			(No CSS parsing of the value is performed.)

			If the attribute value,
			after trimming,
			is the empty string,
			there is instead no [=substitution value=].

			If the <<custom-ident>>’s value is a [=CSS-wide keyword=]
			or <css>default</css>,
			there is instead no [=substitution value=].

		: <dfn>color</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<hex-color>>
			or a [=named color=] ident,
			the [=substitution value=] is that result as a <<color>>.

			Otherwise there is no [=substitution value=].

		: <dfn>number</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<number-token>>,
			the result is the [=substitution value=].

			Otherwise, there is no [=substitution value=].

		: <dfn>percentage</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<percentage-token>>,
			the result is the [=substitution value=].

			Otherwise, there is no [=substitution value=].

		: <dfn>length</dfn>
		: <dfn>angle</dfn>
		: <dfn>time</dfn>
		: <dfn>frequency</dfn>
		: <dfn>flex</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<dimension-token>>
			whose unit matches the given type,
			the result is the [=substitution value=].

			Otherwise, there is no [=substitution value=].

		: <dfn><<dimension-unit>></dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<number-token>>,
			the [=substitution value=] is a dimension
			with the result's value,
			and the given unit.

			Otherwise, there is no [=substitution value=].
	</dl>

	Issue: Do we want to allow [=math functions=] as attr values
	for all the numeric types?
	And color functions for "color"?
	I think we do,
	but I'd have to check the contents to make sure they don't contain further reference functions;
	<code highlight=html>foo="rgb(var(--red), 0, 0)"</code>
	needs to be illegal for ''attr(foo color)''.

	<div class="example">
		This example shows the use of attr() to visually illustrate data
		in an XML file:

		<pre>
		&lt;stock>
			&lt;wood length="12"/>
			&lt;wood length="5"/>
			&lt;metal length="19"/>
			&lt;wood length="4"/>
		&lt;/stock>

		stock::before {
			display: block;
			content: "To scale, the lengths of materials in stock are:";
		}
		stock > * {
			display: block;
			width: attr(length em, 0px);
			height: 1em;
			border: solid thin;
			margin: 0.5em;
		}
		wood {
			background: orange url(wood.png);
		}
		metal {
			background: silver url(metal.png);
		}
		</pre>
	</div>

<h3 id=attr-substitution>
''attr()'' Substitution</h3>

	Issue: attr() and var() substitute at the same time,
	so I should probably rewrite [=substitute a var()=]
	to be more generally about "substitute a reference"
	and just use that for both of these functions.

	''attr()'' functions are [=substitute an attr()|substituted=] at computed-value time.
	If a declaration,
	once all ''attr()'' functions are substituted in,
	does not match its declared grammar,
	the declaration is [=invalid at computed-value time=].

	To <dfn export>substitute an ''attr()''</dfn>:

	1. If the ''attr()'' function has a [=substitution value=],
		replace the ''attr()'' function by the [=substitution value=].
	2. Otherwise, if the ''attr()'' function has a fallback value as its last argument,
		replace the ''attr()'' function by the fallback value.
		If there are any ''var()'' or ''attr()'' references in the fallback,
		[=substitute an attr()|substitute=] them as well.
	3. Otherwise, the property containing the ''attr()'' function
		is [=invalid at computed-value time=].


<!--
████████ ████████  ██████
██          ██    ██    ██
██          ██    ██
██████      ██    ██
██          ██    ██
██          ██    ██    ██
████████    ██     ██████
-->


<h2 class="no-num" id="acknowledgments">
Acknowledgments</h2>

	Firstly, the editors would like to thank
	all of the contributors to the <a href="http://www.w3.org/TR/css-values-4/#acknowledgements">previous level</a>
	of this module.

	Secondly, we would like to acknowledge
	L. David Baron
	and
	Mike Bremford
	for their comments and suggestions,
	which have improved Level 5.

<h2 class="no-num" id="changes">
Changes</h2>

<h3 class=no-num id="changes-recent">
Recent Changes</h3>

	(This is a subset of [[#additions-L4]].)

<h3 class=no-num id="additions-L3">
Additions Since Level 4</h3>

	Additions since <a href="http://www.w3.org/TR/css-values-4/">CSS Values and Units Level 4</a>:

	<ul>
		<li>Added the ''toggle()'' and ''attr()'' notations
	</ul>

<h2 class="no-num" id="sec-pri">
Security and Privacy Considerations</h2>

	This specification mostly just defines units that are common to CSS specifications,
	and which present no security concerns.

	Note: Does URL handling have a security concern?  Probably.

	This specification defines units that expose the user's screen size
	and default font size,
	but both are trivially observable from JS,
	so they do not constitute a new privacy risk.
