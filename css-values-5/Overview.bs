<pre class='metadata'>
Title: CSS Values and Units Module Level 5
Group: CSSWG
Shortname: css-values
Level: 5
Status: ED
Work Status: Exploring
ED: https://drafts.csswg.org/css-values-5/
TR: https://www.w3.org/TR/css-values-5/
Editor: Tab Atkins, Google, http://xanthir.com/contact/, w3cid 42199
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Abstract: This CSS module describes the common values and units that CSS properties accept and the syntax used for describing them in CSS property definitions.
Ignored Terms: <spacing-limit>, containing block, property
Ignored Vars: Cn+1, n
Inline Github Issues: no
Default Highlight: css
</pre>
<pre class='link-defaults'>
spec: css-values-4; type: dfn; text: determine the type of a calculation
</pre>
<style>
code, small { white-space: nowrap }
pre.value { font: inherit; white-space: pre-wrap; margin: 0; padding: 0; }
#propvalues td { text-align: right; }
#propvalues td + td { text-align: left; }
dt + dt::before { content: ", "; }
dl:not(.switch) dt { display: inline; }
td > small { display: block; }
</style>

<h2 id="intro">
Introduction</h2>

	ISSUE: <strong>This is a diff spec against <a href="https://www.w3.org/TR/css-values-4/">CSS Values and Units Level 4</a>.</strong>

<h3 id="placement">
Module Interactions</h3>

	This module extends [[CSS-VALUES-4]]
	which replaces and extends the data type definitions in [[!CSS21]] sections
	<a href="https://www.w3.org/TR/CSS21/about.html#value-defs">1.4.2.1</a>,
	<a href="https://www.w3.org/TR/CSS21/syndata.html#values">4.3</a>,
	and <a href="https://www.w3.org/TR/CSS21/aural.html#aural-intro">A.2</a>.

<!--
██     ██ ████████  ██
██     ██ ██     ██ ██
██     ██ ██     ██ ██
██     ██ ████████  ██
██     ██ ██   ██   ██
██     ██ ██    ██  ██
 ███████  ██     ██ ████████
-->

<h3 id="urls">
Resource Locators: the <<url>> type</h3>

	See [[css-values-4#urls]].

<h4 id='request-url-modifiers'>
Request URL Modifiers</h4>

	<dfn><<request-url-modifier>></dfn>s are <<url-modifier>>s
	that affect the <<url>>’s resource [=/request=]
	by applying associated [=URL request modifier steps=].
	See [[css-values-4#url-processing]].

	This specification defines the following <<request-url-modifier>>s:

	<pre class=prod>
		<<request-url-modifier>> = <<crossorigin-modifier>> | <<integrity-modifier>> | <<referrerpolicy-modifier>>
		<<crossorigin-modifier>> = crossorigin(anonymous | use-credentials)
		<<integrity-modifier>> = integrity(<<string>>)
		<<referrerpolicy-modifier>> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)
	</pre>

	<dl dfn-for="<request-url-modifier>">
		<dt><dfn><<crossorigin-modifier>></dfn> = <dfn function lt="crossorigin()">crossorigin</dfn>(<dfn value>anonymous</dfn> | <dfn value>use-credentials</dfn>)
		<dd>
			The [=URL request modifier steps=] for this modifier given [=/request=] |req| are:

			1. Set [=/request=]'s [=request/mode=] to "cors".

			2. If the given value is ''use-credentials'',
				set [=/request=]'s [=request/credentials mode=] to "include".

		<dt><dfn><<integrity-modifier>></dfn> = <dfn function lt="integrity()">integrity</dfn>(<<string>>)
		<dd>
			The [=URL request modifier steps=] for this modifier given [=/request=] |req|
			are to set [=/request=]'s [=request/integrity metadata=]
			to the given <<string>>.

		<dt><dfn><<referrerpolicy-modifier>></dfn> = <dfn function lt="referrerpolicy()">referrerpolicy</dfn>(<dfn value>no-referrer</dfn> | <dfn value>no-referrer-when-downgrade</dfn> | <dfn value>same-origin</dfn> | <dfn value>origin</dfn> | <dfn value>strict-origin</dfn> | <dfn value>origin-when-cross-origin</dfn> | <dfn value>strict-origin-when-cross-origin</dfn> | <dfn value>unsafe-url</dfn>)
		<dd>
			The [=URL request modifier steps=] for this modifier given [=/request=] |req|
			are to set [=/request=]'s [=request/referrer policy=]
			to the {{ReferrerPolicy}} that matches the given value.
	</dl>

	<div algorithm>
		To <dfn>apply request modifiers from URL value</dfn>
		given a [=/request=] |req|
		and a <<url>> |url|,
		call the [=request modifier steps=] for |url|'s <<request-url-modifier>>s in sequence
		given |req|.
	</div>


<!--
████████  ███████   ██████    ██████   ██       ████████   ███ ███
   ██    ██     ██ ██    ██  ██    ██  ██       ██        ██     ██
   ██    ██     ██ ██        ██        ██       ██       ██       ██
   ██    ██     ██ ██   ████ ██   ████ ██       ██████   ██       ██
   ██    ██     ██ ██    ██  ██    ██  ██       ██       ██       ██
   ██    ██     ██ ██    ██  ██    ██  ██       ██        ██     ██
   ██     ███████   ██████    ██████   ████████ ████████   ███ ███
-->

<h3 id="toggle-notation">
Toggling Between Values: ''toggle()''</h3>

	The <dfn>toggle()</dfn> expression allows descendant elements
	to cycle over a list of values instead of inheriting the same value.

	<div class='example'>
		The following example makes <code>&lt;em></code> elements italic in general,
		but makes them normal if they're inside something that's italic:

		<pre>em { font-style: toggle(italic; normal); }</pre>
	</div>

	<div class='example'>
		The following example cycles markers for nested lists,
		so that a top level list has ''list-style-type/disc''-shaped markers,
		but nested lists use ''list-style-type/circle'', then ''list-style-type/square'', then ''list-style-type/box'',
		and then repeat through the list of marker shapes,
		starting again (for the 5th list deep) with ''list-style-type/disc''.

		<pre>ul { list-style-type: toggle(disc; circle; square; box); }</pre>
	</div>

	The syntax of the ''toggle()'' expression is:

	<pre>toggle( <<toggle-value>> [ ';' <<toggle-value>> ]+ )</pre>

	where <dfn>&lt;toggle-value></dfn> is any CSS value
	that is valid where the expression is placed.
	If any of the values inside are not valid,
	then the entire ''toggle()'' expression is invalid.
	The ''toggle()'' expression may be used as the value of any property,
	but must be the only component in that property's value.

	Note: This [=functional notation=] uses semicolons to separate arguments
	rather than the more typical comma
	because the values themselves can contain commas.

	The ''toggle()'' notation is not allowed to be nested;
	nor may it contain ''attr()'' or ''calc()'' notations.
	Declarations containing such constructs are invalid.

	<div class="example">
		The following ''toggle()'' examples are all invalid:

		<pre>
		background-position: 10px toggle(50px, 100px);
		/* toggle() must be the sole value of the property */

		list-style-type: toggle(disc, 50px);
		/* ''50px'' isn't a valid value of 'list-style-type' */
		</pre>
	</div>

	To determine the computed value of ''toggle()'',
	first evaluate each argument as if it were the sole value of the property in which ''toggle()'' is placed
	to determine the computed value that each represents,
	called <var>C<sub>n</sub></var> for the <var>n</var>-th argument to ''toggle()''.
	Then, compare the property's <a>inherited value</a>
	with each <var>C<sub>n</sub></var>.
	For the earliest <var>C<sub>n</sub></var> that matches the <a>inherited value</a>,
	the computed value of ''toggle()'' is <var>C<sub>n+1</sub></var>.
	If the match was the last argument in the list,
	or there was no match,
	the computed value of ''toggle()'' is the computed value that the first argument represents.


	Note: This means that repeating values in a ''toggle()'' short-circuits the list.
	For example ''toggle(1em; 2em; 1em; 4em)'' will be equivalent to ''toggle(1em; 2em)''.

	<!-- Issue: Should this short-circuiting affect the computed value? -->

	Note: That ''toggle()'' explicitly looks at the computed value of the parent,
	so it works even on non-inherited properties.
	This is similar to the ''inherit'' keyword,
	which works even on non-inherited properties.

	Note: That the <a href="https://www.w3.org/TR/CSS21/cascade.html#computed-value">computed value</a> of a property is an abstract set of values,
	not a particular serialization [[!CSS21]],
	so comparison between computed values should always be unambiguous and have the expected result.
	For example,
	a Level 2 <l spec=css22>'background-position'</l> computed value
	is just two offsets, each represented as an absolute length or a percentage,
	so the declarations ''background-position: top center'' and ''background-position: 50% 0%''
	produce identical computed values.
	If the "Computed Value" line of a property definition seems to define something ambiguous or overly strict,
	please <a href="#sotd">provide feedback</a> so we can fix it.

	If ''toggle()'' is used on a <a>shorthand property</a>,
	it sets each of its longhands to a ''toggle()'' value
	with arguments corresponding to what the longhand would have received
	had each of the original ''toggle()'' arguments been the sole value of the <a>shorthand</a>.

	<div class="example">
		For example, the following shorthand declaration:

		<pre>margin: toggle(1px 2px, 4px, 1px 5px 4px);</pre>

		is equivalent to the following longhand declarations:

		<pre>
		margin-top:    toggle(1px; 4px; 1px);
		margin-right:  toggle(2px; 4px; 5px);
		margin-bottom: toggle(1px; 4px; 4px);
		margin-left:   toggle(2px; 4px; 5px);
		</pre>

		Note that, since ''1px'' appears twice in the top margin and ''4px'' appears twice in bottom margin,
		they will cycle between only two values
		while the left and right margins cycle through three.
		In other words, the declarations above will yield the same computed values
		as the longhand declarations below:

		<pre>
		margin-top:    toggle(1px; 4px);
		margin-right:  toggle(2px; 4px; 5px);
		margin-bottom: toggle(1px; 4px);
		margin-left:   toggle(2px; 4px; 5px);
		</pre>

		which may not be what was intended.
	</div>

<!--
   ███    ████████ ████████ ████████    ███ ███
  ██ ██      ██       ██    ██     ██  ██     ██
 ██   ██     ██       ██    ██     ██ ██       ██
██     ██    ██       ██    ████████  ██       ██
█████████    ██       ██    ██   ██   ██       ██
██     ██    ██       ██    ██    ██   ██     ██
██     ██    ██       ██    ██     ██   ███ ███
-->

<h2 id="attr-notation">
Attribute References: the ''attr()'' function</h2>

<!--
Ian's proposal:
  http://lists.w3.org/Archives/Member/w3c-css-wg/2002OctDec/0141.html
-->

	The <dfn>attr()</dfn> function substitutes the value of an  <l spec=dom>[=attribute=]</l> on an <l spec=dom>[=/element=]</l>
	into a property,
	similar to how the ''var()'' function
	substitutes a [=custom property=] value into a function.

	<pre class=prod>
		attr() = attr( <<q-name>> <<attr-type>>? , <<declaration-value>>?)

		<dfn>&lt;attr-type></dfn> = string | url | ident | color | number | percentage |
		              length | angle | time | frequency | flex | <<dimension-unit>>
	</pre>

	The <dfn>&lt;dimension-unit></dfn> production matches a literal "%" character
	(that is, a <<delim-token>> with a value of "%")
	or an ident whose value is any of the CSS units
	for <<length>>, <<angle>>, <<time>>, <<frequency>>, or <<flex>> values
	(such as ''px'' or ''ms'').

	The arguments of ''attr()'' are:

	: <<q-name>>
	:: Gives the name of the attribute being referenced.

		If no namespace is specified
		(just an identifier is given, like ''attr(foo)''),
		the null namespace is implied.
		(This is usually what's desired,
		as namespaced attributes are rare.
		In particular, HTML and SVG do not contain namespaced attributes.)
		As with [=attribute selectors=],
		the case-sensitivity of <<q-name>> depends on the document language.

		If ''attr()'' is used in a property applied to an element,
		it references the attribute of the given name on that element;
		if applied to a pseudo-element,
		the attribute is looked up on the pseudo-element's [=originating element=].

	: <<attr-type>>
	::
		Specifies what kind of CSS value
		the attribute's value will be interpreted into
		(the ''attr()''’s <dfn dfn for=attr()>substitution value</dfn>)
		and what, if any, special parsing will be done to the value.

		The possible values and their behavior are defined in [[#attr-types]].

		Defaults to ''string'' if omitted.

	: <<declaration-value>>
	::
		Specifies a fallback value for the ''attr()'',
		which will be substituted instead of the attribute's value
		if the attribute is missing
		or fails to parse as the specified type.

		If the <<attr-type>> argument is ''string'',
		defaults to the empty string if omitted;
		otherwise, defaults to the [=guaranteed-invalid value=] if omitted.

	If a property contains one or more ''attr()'' functions,
	and those functions are syntactically valid,
	the entire property's grammar must be assumed to be valid at parse time.
	It is only syntax-checked at computed-value time,
	after ''attr()'' functions have been [=substitute an attr()|substituted=].

	<div class='note'>
		Note that the default value need not be of the type given.
		For instance, if the type required of the attribute by the author is ''px'',
		the default could still be <css>auto</css>,
		like in ''width: attr(size px, auto);''.
	</div>

<h3 id="attr-types">
''attr()'' Types</h3>

	The behavior of the ''attr()'' function
	depends partially on the value of the <<attr-type>> argument:

	<dl dfn-type=value dfn-for=attr()>
		: <dfn>string</dfn>
		:: The [=substitution value=] is a CSS string,
			whose value is the literal value of the attribute.
			(No CSS parsing or "cleanup" of the value is performed.)

			No value triggers fallback.

		: <dfn>url</dfn>
		:: The [=substitution value=] is a CSS <<url>> value,
			whose url is the literal value of the attribute.
			(No CSS parsing or "cleanup" of the value is performed.)

			Note: If ''url()'' was syntactically capable of containing functions,
			''attr(foo url)'' would be identical to ''url(attr(foo string))''.

			No value triggers fallback.

		: <dfn>ident</dfn>
		:: The [=substitution value=] is a CSS <<custom-ident>>,
			whose value is the literal value of the attribute,
			with [=strip leading and trailing ASCII whitespace|leading and trailing ASCII whitespace stripped=].
			(No CSS parsing of the value is performed.)

			If the attribute value,
			after trimming,
			is the empty string,
			there is instead no [=substitution value=].

			If the <<custom-ident>>’s value is a [=CSS-wide keyword=]
			or <css>default</css>,
			there is instead no [=substitution value=].

		: <dfn>color</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<hex-color>>
			or a [=named color=] ident,
			the [=substitution value=] is that result as a <<color>>.

			Otherwise there is no [=substitution value=].

		: <dfn>number</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<number-token>>,
			the result is the [=substitution value=].

			Otherwise, there is no [=substitution value=].

		: <dfn>percentage</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<percentage-token>>,
			the result is the [=substitution value=].

			Otherwise, there is no [=substitution value=].

		: <dfn>length</dfn>
		: <dfn>angle</dfn>
		: <dfn>time</dfn>
		: <dfn>frequency</dfn>
		: <dfn>flex</dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<dimension-token>>
			whose unit matches the given type,
			the result is the [=substitution value=].

			Otherwise, there is no [=substitution value=].

		: <dfn><<dimension-unit>></dfn>
		::
			[=Parse a component value=] from the attribute's value.
			If the result is a <<number-token>>,
			the [=substitution value=] is a dimension
			with the result's value,
			and the given unit.

			Otherwise, there is no [=substitution value=].
	</dl>

	Issue: Do we want to allow [=math functions=] as attr values
	for all the numeric types?
	And color functions for "color"?
	I think we do,
	but I'd have to check the contents to make sure they don't contain further reference functions;
	<code highlight=html>foo="rgb(var(--red), 0, 0)"</code>
	needs to be illegal for ''attr(foo color)''.

	<div class="example">
		This example shows the use of attr() to visually illustrate data
		in an XML file:

		<pre>
		&lt;stock>
			&lt;wood length="12"/>
			&lt;wood length="5"/>
			&lt;metal length="19"/>
			&lt;wood length="4"/>
		&lt;/stock>

		stock::before {
			display: block;
			content: "To scale, the lengths of materials in stock are:";
		}
		stock > * {
			display: block;
			width: attr(length em, 0px);
			height: 1em;
			border: solid thin;
			margin: 0.5em;
		}
		wood {
			background: orange url(wood.png);
		}
		metal {
			background: silver url(metal.png);
		}
		</pre>
	</div>

<h3 id=attr-substitution>
''attr()'' Substitution</h3>

	Issue: attr() and var() substitute at the same time,
	so I should probably rewrite [=substitute a var()=]
	to be more generally about "substitute a reference"
	and just use that for both of these functions.

	''attr()'' functions are [=substitute an attr()|substituted=] at computed-value time.
	If a declaration,
	once all ''attr()'' functions are substituted in,
	does not match its declared grammar,
	the declaration is [=invalid at computed-value time=].

	To <dfn export>substitute an ''attr()''</dfn>:

	1. If the ''attr()'' function has a [=substitution value=],
		replace the ''attr()'' function by the [=substitution value=].
	2. Otherwise, if the ''attr()'' function has a fallback value as its last argument,
		replace the ''attr()'' function by the fallback value.
		If there are any ''var()'' or ''attr()'' references in the fallback,
		[=substitute an attr()|substitute=] them as well.
	3. Otherwise, the property containing the ''attr()'' function
		is [=invalid at computed-value time=].

<!--
████████     ███    ██    ██ ████████   ███████  ██     ██
██     ██   ██ ██   ███   ██ ██     ██ ██     ██ ███   ███
██     ██  ██   ██  ████  ██ ██     ██ ██     ██ ████ ████
████████  ██     ██ ██ ██ ██ ██     ██ ██     ██ ██ ███ ██
██   ██   █████████ ██  ████ ██     ██ ██     ██ ██     ██
██    ██  ██     ██ ██   ███ ██     ██ ██     ██ ██     ██
██     ██ ██     ██ ██    ██ ████████   ███████  ██     ██
-->

<h2 id=randomness>
Generating Random Values</h2>

	It is often useful to incorporate some degree of "randomness" to a design,
	either to make repeated elements on a page feel less static and identical,
	or just to add a bit of "flair" to a page without being distracting.

	The ''random()'' and ''random-item()'' functions
	(the <dfn export for=CSS>random functions</dfn>)
	allow authors to incorporate randomness into their page,
	while keeping this randomness predictable from a design perspective,
	letting authors decide whether a random value should be reused in several places
	or be unique between instances.

	The exact random-number generation method is UA-defined.
	It <em>should</em> be the case that two distinct random values
	have no easily-detectable correlation,
	but this specification intentionally does not specify what that means
	in terms of cryptographic strength.
	Authors <em>must not</em> rely on [=random functions=]
	for any purposes that depend on quality cryptography.

<h3 id=random>
Generating a Random Numeric Value: the ''random()'' function</h3>

	The <dfn>random()</dfn> function is a [=math function=]
	that represents a random value between a minimum and maximum value,
	drawn from a uniform distribution,
	optionally limiting the possible values to a step between those limits:

	<pre class=prod>
	&lt;random()> = random( <<random-caching-options>>? , <<calc-sum>>, <<calc-sum>>, [by <<calc-sum>>]? );

	<dfn><<random-caching-options>></dfn> = <<dashed-ident>> || per-element
	</pre>

	Its arguments are:

	<dl>
		: <<random-caching-options>>
		:: The optional <<random-caching-options>>
			provides some control over whether a given ''random()'' function
			resolves similarly or differently to other ''random()''s on the page.
			See [[#random-caching]] for details.

			<div class=note>
				By default, ''random()'' resolves to a single value,
				shared by all elements using that style,
				and two ''random()'' functions with identical arguments
				will resolve to the same random value.

				Providing a <<dashed-ident>> does nothing,
				but can make the argument lists distinct
				between two or more otherwise-identical ''random()'' functions,
				so they'll generate distinct values.

				The ''per-element'' keyword causes the ''random()'' function
				to generate a different value <em>on each element</em> the function is applied to,
				rather than resolving to a single value per usage in the stylesheet.
			</div>

		: <<calc-sum>>, <<calc-sum>>
		:: The two required [=calculations=]
			specify the  minimum and maximum value
			the function can resolve to.
			Both limits are inclusive
			(the result can be the min or the max).

			If the maximum value is less than the minimum value,
			it behaves as if it's equal to the minimum value.

			<div class=example>
				For example, ''random(100px, 300px)''
				will resolve to a random <<length>> between ''100px'' and ''300px'':
				it might be ''100px'', ''300px'', or any value between them like ''234.5px''.
			</div>

		: ''by <<calc-sum>>''
		:: The final optional argument
			specifies a step value:
			the values the function can resolve to
			are further restricted to the form <code>min + (N * step)</code>,
			where N is a non-negative integer
			chosen uniformly randomly from the possible values
			that result in an in-range value.

			<div class=example>
				For example, ''random(100px, 300px, by 50px)''
				can only resolve to ''100px'', ''150px'', ''200px'', ''250px'', or ''300px'';
				it will never return a value like ''120px''.

				While the minimum value is always a possible result,
				the maximum value isn't always,
				if it's not also a multiple of the step from the minimum.
				For example, in ''random(100px, 300px, by 30px)'',
				the largest possible value it can resolve to is ''280px'',
				6 steps from the minimum value.

				Note that rounding issues might have an effect here:
				in ''random(100px, 200px, by 100px / 3)''
				you'll definitely get three possible values
				(''100px'', and approximately ''133.33px'' and ''166.67px''),
				but whether ''200px'' is possible depends on rounding precision.
				To be safe, you can put the maximum value
				<em>slightly above</em> where you expect the final step to land,
				like ''random(100px, 201px, by 100px / 3)''.
			</div>

			<div class=example>
				As explained in the definition of ''round()'',
				CSS has no "natural" precision for values,
				but the step value can be used to assign one.

				For example, ''random(100px, 500px, by 1px)''
				restricts it to resolving only to whole px values;
				''random(1, 10, by 1)''
				is restricted to resolving only to integers;
				etc.
			</div>

			Note: The definition of the step <em>does not</em> allow
			for naively generating a random value in the range
			and then rounding it to the nearest step value,
			as that can result in the values not appearing with the same weights.
			For example, ''random(100px, 200px, by 50px)''
			has to generate the three possible values each with a 1/3 chance;
			a naive rounding-based method will instead incorrectly generate ''150px''
			twice as often as the boundary values.
	</dl>

	All of the [=calculation=] arguments can resolve to any <<number>>, <<dimension>>, or <<percentage>>,
	but must have the <em>same</em> [=determine the type of a calculation|type=], or else the function is invalid;
	the result will have the same type as the arguments.

	<div class=example>
		For example, ''random(50px, 100%, by 1em)'' is valid
		(assuming percentages are valid in the context this is used,
		and resolve to a <<length>>),
		as all three arguments resolve to a length.

		However, ''random(50px, 180deg)'' is invalid,
		as lengths and angles are not the same type.
	</div>

	If ''per-element'' is not present in the <<random-caching-options>>,
	a ''random()'' function can be [=simplify a calculation tree|simplified=]
	as soon as its argument [=calculations=]
	can be simplified to numeric values.
	If ''per-element'' is specified in the <<random-caching-options>>,
	the function cannot be simplified until [=used value=] time.

	Issue: At least in theory it should be fine to use ''random()''
	in non-property contexts,
	so long as ''per-element'' isn't specified;
	it's well-defined what happens with <code>@media (max-width: random(100px, 500px)) {...}</code>,
	for example.
	I suspect we want to disallow it, tho?

<h4 id=random-infinities>
Argument Ranges</h4>

	In ''random(A, B, by C)'',
	if A or B is infinite,
	the result is NaN.
	If C is infinite,
	the result is A.

	(If C is zero or negative,
	the result is A,
	but that falls out of the standard definition.)

	Note: As usual for [=math functions=],
	if any argument calculation is NaN,
	the result is NaN.

<h3 id=random-item>
Picking A Random Item From A List: the ''random-item()'' function</h3>

	The <dfn>random-item()</dfn> function
	resolves to a random item
	from among its list of items.

	<pre class=prod>
	&lt;random-item()> = random-item( <<random-caching-options>> ';' <<any-value>> [ ';' <<any-value>> ]* )
	</pre>

	The <em>required</em> <<random-caching-options>>
	is interpreted identically to ''random()''.
	(See [[#random-caching]] for details.)

	<div class=note>
		Like ''random()'',
		the <<dashed-ident>> can be used to force similar ''random-item()'' functions
		to generate distinct random values,
		and ''per-element''
		causes it to resolve to a distinct value on each element.

		Aside from these,
		the grouping of ''random-item()'' functions as "identical"
		is much simpler:
		all that matters is the number of arguments.

		That is, ''random-item(--x; red; blue; green)''
		and ''random-item(--x; 1; 2; 3)''
		will always resolve to the same argument index:
		either ''red'' and ''1'', or ''blue'' and ''2'', or ''green'' and ''3''.
		This allows coordination between groups of properties
		that all want to use a random set of values.

		On the other hand, ''random-item(--x; red; blue; green)''
		and ''random-item(--x; 1; 2; 3; 4)''
		will have no connection to each other;
		any of the 12 possible combinations can occur.
	</div>

	Note: The <<random-caching-options>> argument is required in ''random-item()'',
	but optional in ''random()'',
	both for parsing reasons
	(it's impossible to tell whether ''random-item(--foo; --bar; --baz)''
	has three <<any-value>> arguments
	or two and a <<random-caching-options>> argument),
	and because accidentally associating the random generation of ''random-item()'' functions together
	is much easier to do accidentally,
	since only the number of arguments is used to distinguish instances.

	The remaining arguments are arbitrary sequences of CSS values,
	separated by semicolons.
	The ''random-item()'' function resolves to one of these sequences,
	chosen uniformly at random.

	Note: Unlike most functions in CSS,
	''random-item()'' separates its arguments with semicolons,
	rather than commas,
	because its arguments can contain commas themselves.

	The ''random-item()'' function is an [=arbitrary substitution function=],
	like ''var()''.

	<div class=note>
		That is, if you use ''random-item()'':

		* So long as ''random-item()'' itself (and any other [=arbitrary substitution functions=])
			is syntactically valid,
			the entire property is assumed to be valid at parse time.
		* ''random-item()'' is substituted with whatever value it resolves to
			at [=computed value=] time
			when you'd [=substitute a var()=],
			so children all inherit the same resolved value.
		* If the substituted value ends up making the property invalid,
			the property's value becomes the [=guaranteed-invalid value=].
	</div>

	Issue: Define [=arbitrary substitution function=],
	probably over in Variables,
	since we have several upcoming functions leaning on this functionality.

	Issue: Since ''random-item()'' is var()-like,
	we probably want to restrict it to only be usable in properties.
	(This is likely something we want to apply to all such functions.)
	Tho ''random()'' is a fundamentally different kind of value,
	we probably want to restrict it as well,
	for thematic consistency.



<h3 id=random-caching>
Generating/Caching Random Values: the <<random-caching-options>> value</h4>

	In a programming language like JavaScript,
	there's a clear temporal ordering to code,
	so you can tell exactly <em>when</em> something like a call to {{Math/random()|Math.random()}} is evaluated.
	You can also store the results in a variable,
	making it clear when you're reusing a single random value in multiple places,
	versus using a distinct random value in each location.

	CSS, on the other hand, is a declarative language
	(code is not "executed" in any particular order,
	nor is there any control over how many times something is "executed");
	it makes it very easy to apply identical styles to multiple elements
	but difficult to specify distinct values for each of them
	(making it unclear whether a property using ''random()''
	is meant to resolve to the same value on each element it's applied to
	or to distinct values on each);
	and it has very limited "variable" functionality
	(making it difficult to intentionally reuse a particular randomly-generated value in several places).

	To resolve these issues,
	the ''random()'' and ''random-item()'' functions are defined to generate random values
	under the following caching semantics:

	* Each instance of ''random()'' or ''random-item()'' in a stylesheet
		specifies a <dfn>random-caching key</dfn>.
		Two instances of either function must resolve to <em>identical</em> values
		if their [=random-caching keys=] are identical;
		they must resolve to <em>distinct</em> values
		if they're different.

		("Distinct" here means generated by a fresh random operation;
		this might coincidentally result in the same value as another random operation.)

	* For ''random()'',
		the [=random-caching key=]
		is a [=tuple=] of:

		1. The [=used value=] of the minimum [=calculation=].
		2. The [=used value=] of the maximum [=calculation=].
		3. The [=used value=] of the step [=calculation=], if present,
			or null otherwise.
		4. The <<dashed-ident>> part of the <<random-caching-options>>, if present,
			or null otherwise.
		5. If ''per-element'' is specified in the <<random-caching-options>>,
			a unique value per element or pseudo-element the function appears in.

	* For ''random-item()'',
		the [=random-caching key=]
		is a [=tuple=] of:

		1. The number of arguments to the function.
		2. The <<dashed-ident>> part of the <<random-caching-options>>, if present,
			or null otherwise.
		3. If ''per-element'' is specified in the <<random-caching-options>>,
			a unique value per element or pseudo-element the function appears in.

	The "unique value per element or pseudo-element" must have the same lifetime
	as a JavaScript reference to the element
	(or to the [=originating element=] + sufficient additional info to uniquely identify the pseudo-element).
	Elements in separate documents
	(including across refreshes of the same page,
	which produces distinct documents with distinct elements)
	<em>should</em> have distinct unique values.
	(This is not strictly required,
	to allow for pseudo-random generation of these values,
	but uniqueness should be likely enough
	that authors cannot depend on elements having the same values across documents.)

	<div class=example>
		For example, in the following stylesheet:

		<pre highlight=css>
		.random-square {
			width: random(100px, 500px);
			height: random(100px, 500px);
		}
		</pre>

		The [=random-caching keys=] for both functions are identical:
		<code>(100px, 500px, null, null, null)</code>.
		This means that both will resolve to the exact same value,
		guaranteeing a square element
		with a size somewhere between ''100px'' and ''500px''.
		Additionally, <em>every</em> ''.random-square'' element
		will have the same size.

		On other hand, in this stylesheet:

		<pre highlight=css>
		.random-rect {
			width: random(100px, 500px);
			height: random(--x, 100px, 500px);
		}
		</pre>

		The [=random-caching keys=] are distinct between the two functions:
		the function in 'width' has <code>(100px, 500px, null, null, null)</code>,
		while the function in 'height' has <code>(100px, 500px, null, --x, null)</code>.

		This means the two functions will resolve to distinct random values,
		making it very unlikely for the element to be square.
		However, every element matching ''.random-rect''
		will still have the <em>same</em> random size.

		Changing any aspect of the function also alters this key.
		The following two declarations are similarly distinct,
		resulting in the width and height having no connection to each other:

		<pre highlight=css>
		.random-rect-2 {
			width: random(100px, 500px);
			height: random(100px, 500px, by 50px);
		}
		</pre>

		But so long as the [=used-values=] end up identical,
		two functions that look distinct might end up identical.
		For example, in the following code:

		<pre highlight=css>
		.random-square-2 {
			font-size: 16px;
			width: random(160px, 320px);
			height: random(10em, 20em);
		}
		</pre>

		The two functions superficially look different,
		but after the lengths are fully resolved
		they end up with identical [=random-caching keys=];
		each is <code>(160px, 320px, null, null, null)</code>,
		so actually the widths and heights will end up always identical.
	</div>

	<div class=example>
		By default, each instance of a ''random()'' function in a stylesheet
		essentially resolves to a static value,
		which is then shared by every element that property applies to.
		This behavior can be changed with the ''per-element'' keyword.

		For example, in:

		<pre highlight=css>
		.foo { width: random(100px, 500px); }
		</pre>

		Multiple elements matching ''.foo'' will end up with the same random width.

		But in:

		<pre highlight=css>
		.foo { width: random(per-element, 100px, 500px); }
		</pre>

		Every element matching ''.foo'' will get its own <em>unique</em> width.

		Note that this causes the value to be unique per element,
		not per <em>value</em> necessarily.
		For example, in:

		<pre highlight=css>
		.random-squares {
			width: random(per-element, 100px, 500px);
			height: random(per-element, 100px, 500px);
		}
		</pre>

		Every element matching ''.random-squares'' will get a distinct random value,
		but that value will be <em>the same</em> for 'width' and 'height' on a given element,
		making the element square.
		This is because in both properties
		the [=random-caching key=] is <code>(100px, 500px, null, null, [unique value for the element])</code>,
		so both functions will resolve to the same length on a single element.

		This makes random values in [=custom properties=] act more predictably.
		The preceding code could also be written as:

		<pre highlight=css>
		.foo {
			--size: random(per-element, 100px, 500px);
			width: var(--size);
			height: var(--size);
		}
		</pre>
	</div>




<!--
████████ ████████  ██████
██          ██    ██    ██
██          ██    ██
██████      ██    ██
██          ██    ██
██          ██    ██    ██
████████    ██     ██████
-->


<h2 class="no-num" id="acknowledgments">
Acknowledgments</h2>

	Firstly, the editors would like to thank
	all of the contributors to the <a href="https://www.w3.org/TR/css-values-4/#acknowledgments">previous level</a>
	of this module.

	Secondly, we would like to acknowledge
	L. David Baron
	and
	Mike Bremford
	for their comments and suggestions,
	which have improved Level 5.

<h2 class="no-num" id="changes">
Changes</h2>

<h3 class=no-num id="changes-recent">
Recent Changes</h3>

	(This is a subset of [[#additions-L4]].)

<h3 class=no-num id="additions-L4">
Additions Since Level 4</h3>

	Additions since <a href="http://www.w3.org/TR/css-values-4/">CSS Values and Units Level 4</a>:

	<ul>
		<li>Added the ''toggle()'' and ''attr()'' notations
	</ul>

<h2 class="no-num" id="sec-pri">
Security and Privacy Considerations</h2>

	This specification mostly just defines units that are common to CSS specifications,
	and which present no security concerns.

	Note: Does URL handling have a security concern?  Probably.

	This specification defines units that expose the user's screen size
	and default font size,
	but both are trivially observable from JS,
	so they do not constitute a new privacy risk.
