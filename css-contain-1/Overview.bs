<pre class=metadata>
Title: CSS Containment Module Level 1
Level: 1
Shortname: css-contain
Status: ED
Work Status: Testing
Group: csswg
ED: https://drafts.csswg.org/css-contain/
TR: https://www.w3.org/TR/css-contain-1/
Previous Version: https://www.w3.org/TR/2018/CR-css-contain-1-20180524/
Previous Version: https://www.w3.org/TR/2017/CR-css-contain-1-20170808/
Previous Version: https://www.w3.org/TR/2017/WD-css-contain-1-20170419/
Previous Version: https://www.w3.org/TR/2017/WD-css-contain-1-20170221/
Editor: Tab Atkins, Google, http://xanthir.com/contact/, w3cid 42199
Editor: Florian Rivoal, On behalf of Bloomberg, https://florian.rivoal.net/, w3cid 43241
Abstract: This CSS module describes the 'contain' property, which indicates that the element's subtree is independent of the rest of the page. This enables heavy optimizations by user agents when used well.
Ignored Terms: scrollWidth, scrollHeight, clientWidth, clientHeight
</pre>
<pre class="anchors">
spec: css2; urlPrefix: https://www.w3.org/TR/CSS2/
	type: property; url: generate.html#propdef-content; text: content
	type: value; for: content; url: generate.html#value-def-open-quote; text: open-quote
	type: value; for: content; url: generate.html#value-def-close-quote; text: close-quote
	type: value; for: content; url: generate.html#value-def-no-open-quote; text: no-open-quote
	type: value; for: content; url: generate.html#value-def-no-close-quote; text: no-close-quote
	type: dfn; url: box.html#padding-edge; text: padding edge

spec: css-backgrounds-3;
	type: dfn; url: https://drafts.csswg.org/css-backgrounds-3/#corner-clipping; text: corner clipping
</pre>
<pre class=link-defaults>
spec:css21; type:dfn; text:stacking context
spec:css-content; type:property; text:content
spec:css-display-3; type:property; text:display
spec:css-lists-3; type:property; text:counter-increment
</pre>
<h2 id='intro'>
Introduction</h2>

	Efficiently rendering a website relies on the User Agent being able to detect what parts of the page are being displayed,
	which parts might affect the currently-displayed section,
	and what can be ignored.

	There are various heuristics that can be used to guess when a given sub-tree is independent of the rest of the page in some manner,
	but they're fragile,
	so innocuous changes to a page may inadvertently make it flunk the heuristics and fall into a slow mode.
	There are also many things that would be good to isolate which are difficult or impossible to detect in a heuristic manner.

	To alleviate these problems
	and allow strong, predictable isolation of a subtree from the rest of the page,
	this specification defines a 'contain' property.

<h2 id='contain-property'>
Strong Containment: the 'contain' property</h2>

	<pre class='propdef'>
		Name: contain
		Value: none | strict | content | [ size || layout || style || paint ]
		Initial: none
		Inherited: no
		Applies to: all elements
		Media: all
		Computed value: specified value
	</pre>

	The 'contain' property allows an author to indicate that an element and its contents are,
	as much as possible,
	<em>independent</em> of the rest of the document tree.
	This allows user agents to utilize much stronger optimizations when rendering a page using 'contain' properly,
	and allows authors to be confident that their page won't accidentally fall into a slow code path
	due to an innocuous change.

	<dl dfn-type=value dfn-for=contain>
		<dt><dfn>none</dfn>
		<dd>
			This value indicates that the property has no effect.
			The element renders as normal,
			with no containment effects applied.

		<dt><dfn>strict</dfn>
		<dd>
			This value turns on all forms of <a>containment</a> for the element.
			In other words, it behaves the same as ''contain: size layout style paint;'',
			so that its contents are guaranteed to have no effect on the rest of the page outside the element's bounds.

		<dt><dfn>content</dfn>
		<dd>
			This value turns on all forms of <a>containment</a> <em>except</em> <a>size containment</a> for the element.
			In other words, it behaves the same as ''contain: layout style paint;''.

			Note: ''contain: content'' is reasonably "safe" to apply widely;
			its effects are fairly minor in practice,
			and most content won't run afoul of its restrictions.
			However, because it doesn't apply <a>size containment</a>,
			the element can still respond to the size of its contents,
			which can cause layout-invalidation to percolate further up the tree than desired.
			Use ''contain: strict'' when possible,
			to gain as much containment as you can.

		<dt><dfn>size</dfn>
		<dd>
			The value turns on <a>size containment</a> for the element.
			This ensures that the containing element can be laid out
			without needing to examine its descendants.

		<dt><dfn>layout</dfn>
		<dd>
			This value turns on <a>layout containment</a> for the element.
			This ensures that the containing element is <em>totally opaque</em> for layout purposes;
			nothing outside can affect its internal layout,
			and vice versa.

		<dt><dfn>style</dfn>
		<dd>
			This value turns on <a>style containment</a> for the element.
			This ensures that,
			for properties which can have effects on more than just an element and its descendants,
			those effects don't escape the containing element.

		<dt><dfn>paint</dfn>
		<dd>
			This value turns on <a>paint containment</a> for the element.
			This ensures that the descendants of the containing element don't display outside its bounds,
			so if an element is off-screen or otherwise not visible,
			its descendants are also guaranteed to be not visible.
	</dl>

	<div class='example'>
		'contain' is useful when used widely on a page,
		particularly when a page contains a lot of "widgets" which are all independent.

		For example, assume a micropost social network had markup something like this:

		<pre><code highlight=markup>
			&lt;body>
				&lt;aside>...&lt;/aside>
				&lt;section>
					&lt;h2>Messages&lt;/h2>
					&lt;article>
						Lol, check out this dog: images.example.com/jsK3jkl
					&lt;/article>
					&lt;article>
						I had a ham sandwich today. #goodtimes
					&lt;/article>
					&lt;article>
						I have political opinions that you need to hear!
					&lt;/article>
					…
				&lt;/section>
			&lt;/body>
		</code></pre>

		There are probably a <em>lot</em> of messages displayed on the site,
		but each is independent and won't affect anything else on the site.
		As such, each can be marked with ''contain: content'' to communicate this to the user agent,
		so it can optimize the page and skip a lot of computation for messages that are off-screen.
		If the size of each message is known ahead of time,
		''contain: strict'' can be applied to communicate further restrictions.
	</div>


<h2 id='containment-types'>
Types of Containment</h2>

	There are several varieties of <dfn export>containment</dfn> that an element can be subject to,
	restricting the effects that its descendants can have on the rest of the page in various ways.
	<a>Containment</a> enables much more powerful optimizations by user agents,
	and helps authors compose their page out of functional units,
	as it limits how widely a given change can affect a document.

	Advisement: Specification authors introducing new properties or mechanisms
	need to consider whether and how the various types of containment
	affect what they are introducing,
	and include in their specification any effect not described here.

<h3 id='containment-size'>
Size Containment</h3>

	If the element does not generate a <a>principal box</a> (as is the case with ''display: contents'' or ''display: none''),
	or if the element is a ''table'',
	or if the element is an <a spec="css-display-3">internal table element</a>,
	or if the element is an <a spec="css-display-3">internal ruby element</a>,
	or if the element's <a>principal box</a> is a <a spec="css-display-3" lt="atomic inline">non-atomic</a> <a spec="css-display-3">inline-level</a> box,
	size containment has no effect.
	Otherwise, giving an element <dfn export>size containment</dfn> has the following effects:

	1. When laying out the containing element,
		it must be treated as having no contents.

		After layout of the element is complete,
		its contents must then be laid out into the containing element's resolved size.

		<a>Replaced elements</a> must be treated as having an intrinsic width and height of 0.
	2. Elements with <a>size containment</a> are <a spec=css-break-3>monolithic</a> (See [[CSS-BREAK-3#possible-breaks]]).

	By itself, <a>size containment</a> does not offer much optimization opportunity.
	Its primary benefit on its own is that tools which want to lay out the containing element's contents
	based on the containing element's size
	(such as a JS library implementing the "container query" concept)
	can do so without fear of "infinite loops",
	where having a child's size respond to the size of the containing element
	causes the containing element's size to change as well,
	possibly triggering <em>further</em> changes in how the child sizes itself
	and possibly thus more changes to the containing element's size,
	ad infinitum.

	When paired with <a>layout containment</a>, though,
	possible optimizations that can be enabled include (but are not limited to):

	1. When the style or contents of a descendant of the containing element is changed,
		calculating what part of the DOM tree is "dirtied" and might need to be re-laid out
		can stop at the containing element.

	2. When laying out the page,
		if the containing element is off-screen or obscured,
		the layout of its contents can be delayed or done at a lower priority.

<h3 id='containment-layout'>
Layout Containment</h3>

	If the element does not generate a <a>principal box</a> (as is the case with ''display: contents'' or ''display: none''),
	or if the element is an <a spec="css-display-3">internal table element</a> other than ''display: table-cell'',
	or if the element is an <a spec="css-display-3">internal ruby element</a>,
	or if the element's <a>principal box</a> is a <a spec="css-display-3" lt="atomic inline">non-atomic</a> <a spec="css-display-3">inline-level</a> box,
	layout containment has no effect.
	Otherwise, giving an element <dfn export>layout containment</dfn> has the following effects:

	1. The element [=establishes an independent formatting context=].

	2. If a <a>fragmentation context</a> participates in <a>layout containment</a>,
		the first element with <a>layout containment</a>
		affecting the <a>fragmentation context</a>
		must “trap” the remainder of the <a>fragmented flow</a>.
		<a>Fragmentation</a> must not continue past the <a>layout containment</a> boundary,
		and the last <a>fragmentation container</a>
		within the first <a>layout containment</a> boundary
		is treated as if it is the last <a>fragmentation container</a>
		in its <a>fragmentation context</a>.

		If subsequent <a>fragmentation containers</a> in the <a>fragmentation context</a>
		are only generated when more content remains in the <a>fragmented flow</a>,
		then they are not generated.
		If they would exist regardless,
		they remain part of the <a>fragmentation context</a>,
		but do not receive any content from the <a>fragmented flow</a>.

		Note: [[CSS-REGIONS-1]] has details over how <a>layout containment</a> affects
		regions.

	3. If the contents of the element overflow the element,
		they must be treated as <a>ink overflow</a>.

	4. The element acts as a containing block for absolutely positioned and fixed positioned descendants.

	5. [=Forced breaks=] are allowed within elements with [=layout containment=],
		but do not propagate to the parent as otherwise described in [[CSS-BREAK-3#break-between]].

		Note: This introduces the previously non-existent possibility that [=forced breaks=]
		may occur between a box and its container (See [[CSS-BREAK-3#possible-breaks]]).

	Possible optimizations that can be enabled by <a>layout containment</a> include (but are not limited to):

	1. When laying out the page,
		the contents of separate containing elements
		can be laid out in parallel,
		as they're guaranteed not to affect each other.

	2. When laying out the page,
		if the containing element is off-screen or obscured
		and the layout of the visible parts of the screen do not depend on the size of the containing element
		(for example, if the containing element is near the end of a block container,
		and you're viewing the beginning of the block container),
		the layout of the containing elements' contents can be delayed or done at a lower priority.

		(When paired with <a>size containment</a>,
		this optimization can be applied more liberally.)

<h3 id='containment-style'>
Style Containment</h3>

	Giving an element <dfn export>style containment</dfn> has the following effects:

	1. The 'counter-increment' and 'counter-set' properties
	    must be <a for=property>scoped</a> to the element's sub-tree
	    and create a new counter.

	2. The effects of the 'content' property's
	    ''content/open-quote'', ''content/close-quote'', ''content/no-open-quote'' and ''content/no-close-quote''
	    must be <a for=property>scoped</a> to the element's sub-tree.

	    Note: This implies that the depth of quote nesting in the subtree
	    is unchanged and starts at the value that its context normally implies,
	    but that changes to the depth of quote nesting by these values inside the subtree
	    do not affect the depth of quote nesting outside the subtree.

	Note: [[CSS-REGIONS-1]] has normative requirements on how <a>style containment</a> affects regions.

	A <dfn export for=property lt="scoped | scoped property | scoped properties">scoped property</dfn> has its effects scoped to a particular element or subtree.
	If scoped to an element,
	it must act as if the scoping element was the root of the document
	for the purpose of evaluating the property's effects:
	any uses of the property outside the scoping element must have no effect on the uses of the property on or in the scoping element,
	and vice versa.
	If scoped to a sub-tree, it's the same,
	except the scoping element itself is counted as "outside" the tree,
	like the rest of the document,
	and the effects of the property on that element are unaffected by scoping.
	When considering the effects of the scoped property on elements <em>inside</em> the subtree,
	the element at the base of the subtree is treated as if it was the root of the document.

	<div class=example>
	As 'counter-increment' is scoped to an element's subtree,
	the first use of it within the subtree acts as if the named counter were set to 0 at the scoping element,
	regardless of whether the counter had been used outside the scoping element.
	Any increments made within the subtree have no effect on counters of the same name outside the scoping element.
	However, the ''content/counter()'' and ''content/counters()'' value of the 'content' property is not itself scoped,
	and can refer to counters established outside of the subtree.
	Therefore, the following code results in <q><samp>1 1.2</samp></q> being displayed:
	<pre><code highlight=markup>
	&lt;div>&lt;/div>
	</code></pre>
	<pre><code highlight=css>
	div {
		contain: style;
		counter-increment: n;
	}
	div::before, div::after {
		content: counters(n, '.') " ";
	}
	div::after {
		counter-increment: n 2;
	}
	</code></pre>
	</div>

	Possible optimizations that can be enabled by <a>style containment</a> include (but are not limited to):

	1. Whenever a property is changed on a descendant of the containing element,
		calculating what part of the DOM tree is "dirtied" and might need to have its style recalculated
		can stop at the containing element.

<h3 id='containment-paint'>
Paint Containment</h3>

	If the element does not generate a <a>principal box</a> (as is the case with ''display: contents'' or ''display: none''),
	or if the element is an <a spec="css-display-3">internal table element</a> other than ''display: table-cell'',
	or if the element is an <a spec="css-display-3">internal ruby element</a>,
	or if the element's <a>principal box</a> is a <a spec="css-display-3" lt="atomic inline">non-atomic</a> <a spec="css-display-3">inline-level</a> box,
	paint containment has no effect.
	Otherwise, giving an element <dfn export>paint containment</dfn> has the following effects:

	1. The contents of the element
		including both the paint of the descendants and their geometry
		must be clipped to the <a>padding edge</a> of the element's <a>principal box</a>,
		taking <a>corner clipping</a> into account.
		This does not include the creation of any mechanism
		to access or indicate the presence of the clipped content;
		nor does it inhibit the creation of any such mechanism through other properties,
		<span class=informative>such as 'overflow', 'resize', or 'text-overflow'</span>.
		<span class=note>This is as if to ''overflow: visible'' was changed to ''overflow: clip'' at used value.</span>
	2. The element acts as a containing block for absolutely positioned and fixed positioned descendants.
	3. The element creates a <a>stacking context</a>.
	4. The element [=establishes an independent formatting context=].

<div class=informative>
	Possible optimizations that can be enabled by <a>paint containment</a> include (but are not limited to):

	1. If the containing element is off-screen or obscured,
		the UA can directly skip trying to paint its contents,
		as they're guaranteed to be off-screen/obscured as well.

	2. Unless the clipped content is made accessible via a separate mechanism
		such as the 'overflow', 'resize', or 'text-overflow' properties,
		the UA can reserve "canvas" space for the element exactly the element's size.
		(In similar, scrollable, situations, like ''overflow: hidden'',
		it's possible to scroll to the currently-clipped content,
		so UAs often predictively overpaint somewhat
		so there's something to see as soon as the scroll happens,
		rather than a frame later.)

	3. Because they are guaranteed to be stacking contexts,
		scrolling elements can be painted into a single GPU layer.
</div>


Privacy and Security Considerations {#privsec}
==============================================

This specification introduces no new privacy or security considerations.

Like any other CSS specification, it affects the rendering of the document,
but does not introduce any special ability to present content in a misleading way
that was not previously available through other CSS modules
and that isn't inherent to the act of formatting the document.

The <a href="http://www.w3.org/2001/tag/">TAG</a> has developed a <a href="https://www.w3.org/TR/security-privacy-questionnaire/">self-review questionaire</a>
to help editors and Working Groups evaluate the risks introduced by their specifications.
Answers are provided below.

<dl>
<dt>Does this specification deal with personally-identifiable information?
<dd>No.

<dt>Does this specification deal with high-value data?
<dd>No.

<dt>Does this specification introduce new state for an origin that persists across browsing sessions?
<dd>No.

<dt>Does this specification expose persistent, cross-origin state to the web?
<dd>No.

<dt>Does this specification expose any other data to an origin that it doesn’t currently have access to?
<dd>No.

<dt>Does this specification enable new script execution/loading mechanisms?
<dd>No.

<dt>Does this specification allow an origin access to a user’s location?
<dd>No.

<dt>Does this specification allow an origin access to sensors on a user’s device?
<dd>No.

<dt>Does this specification allow an origin access to aspects of a user’s local computing environment?
<dd>No.

<dt>Does this specification allow an origin access to other devices?
<dd>No.

<dt>Does this specification allow an origin some measure of control over a user agent’s native UI?
<dd>No.

<dt>Does this specification expose temporary identifiers to the web?
<dd>No.

<dt>Does this specification distinguish between behavior in first-party and third-party contexts?
<dd>No.

<dt>How should this specification work in the context of a user agent’s "incognito" mode?
<dd>No difference in behavior is needed.

<dt>Does this specification persist data to a user’s local device?
<dd>No.

<dt>Does this specification have a "Security Considerations" and "Privacy Considerations" section?
<dd>Yes, this is the section you are currently reading.

<dt>Does this specification allow downgrading default security characteristics?
<dd>No.
</dl>

<h2 class="no-num non-normative" id="changes">Appendix A. Changes</h2>

This appendix is <em>informative</em>.

<h3 id="2018-05-24-changes">Changes from the
<a href="https://www.w3.org/TR/2018/CR-css-contain-1-20180524/">Candidate Recommendation of 24 May 2018</a></h3>

* Size containment does not apply to tables

<h3 id="2017-08-08-changes">Changes from the
<a href="https://www.w3.org/TR/2017/CR-css-contain-1-20170808/">Candidate Recommendation of 8 August 2017</a></h3>

<ul>
	<li>Clarify to which box paint containment clips (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/5b92ee3c170e3be239937a3ae069f37655ff6671">see tests</a>).
	<li>Move the interaction between containment and the <code>bookmark-*</code> and <code>string-set</code> properties to  [[CSS-CONTENT-3]] (additional tests not needed, no change in behavior).
	<li>Remove the effects of style containment on the "break-*" properties (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/d6a4f606a0501fe6ca526483a7a379ba2e9eaa1c">see tests</a>).
	<li>Move the description of the effects of containement on regions from this specification to [[CSS-REGIONS-1]] (additional tests not needed, no change in behavior).
	<li>Clarify the effects of style scoping on counter-set and counter-increment (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/d7fbc4794403dfeb55f13310d4c1cb51813e2d6e">see tests</a>)
	<li>Size layout and paint containment don't apply to internal ruby elements (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/ba5a04e3d65f9f39c2d6431a9ece5eb15d22116b">see tests</a>)
	<li>Layout, Paint, and size containments do not apply to non-atomic inlines (see <a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/402a19bde8981a402d9dba73083f84d96e4aeeb9">tests here</a> and <a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/69b5681ee7aa5a028eb694b2c93bfd48c1ef08e4">one more test here</a>)
	<li>Align paint containment's behavior with overflow:clip (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/e2f844700a4a165f7ab6a0f021bbe1bf4d921cc0">see test</a>)
	<li>Elements with size containment are monolithic (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/536f74e4137196b34d63752f5a9217e23c4fb899#diff-bd8852c889db6d2b471bae58105f9374">see test</a>)
	<li>Forced breaks area allowed in elements with layout containments, but do not propagate (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/536f74e4137196b34d63752f5a9217e23c4fb899">see tests</a>)
	<li>Clarify the effects of scoping to a subtree (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/7aad64ade18bce9db257c34d72c6dad126a9e9cd">see test</a>)
	<li>Clarify the effects of scoping on open/close quotes (<a href="https://github.com/web-platform-tests/wpt/pull/10549/commits/f6efd2ff775bea39e34b1b260959de618908046b">see tests</a>)
	<li>Editorial clarification: replace "Becoming a formatting context" (aka "Becoming a formatting context root") with "Establish a FC" (additional tests not needed, no change in behavior)
</ul>

<h3 id="2017-04-19-changes">Changes from the
<a href="https://www.w3.org/TR/2017/WD-css-contain-1-20170419/">Working Draft of 19 April 2017</a></h3>

<ul>
	<li>Clarify the interaction with display: contents
	<li>Clarify how containment works on table parts
	<li>Move the interaction between containment and fragmentation of overflow from this specification to CSS-OVERFLOW-4
</ul>

<h3 id="fpwd-changes">Changes from the
<a href="https://www.w3.org/TR/2017/WD-css-contain-1-20170221/">First Public Working Draft of 21 February 2017</a></h3>

<ul>
	<li>Specify handling of replaced elements for size containment
	<li>Layout containment makes element act as a containing block for absolutely positioned and fixed positioned descendants.
</ul>
