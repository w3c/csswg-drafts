<pre class=metadata>
Title: CSS Containment Module Level 1
Level: 1
Shortname: css-contain
Status: ED
Date: 2024-06-25
Prepare for TR: yes
Implementation Report: https://drafts.csswg.org/css-contain-1/implementation-report-2022-09
Work Status: completed
Group: csswg
ED: https://drafts.csswg.org/css-contain-1/
TR: https://www.w3.org/TR/css-contain-1/
Previous Version: https://www.w3.org/TR/2024/REC-css-contain-1-20240625/
Editor: Tab Atkins, Google, http://xanthir.com/contact/, w3cid 42199
Editor: Florian Rivoal, On behalf of Bloomberg, https://florian.rivoal.net/, w3cid 43241
Abstract: This CSS module describes the 'contain' property, which indicates that the element's subtree is independent of the rest of the page. This enables heavy optimizations by user agents when used well.
Status Text: <p>This document was published by the CSS Working Group as a Recommendation using the <a href="https://www.w3.org/2021/Process-20211102/#recs-and-notes">Recommendation track</a>.
	<!--It includes <a href="https://www.w3.org/2021/Process-20211102/#proposed-corrections">proposed corrections</a>.</p><p class="correction proposed">Proposed corrections are marked in the document.-->
	<p>W3C recommends the wide deployment of this specification as a standard for the Web.
WPT Path Prefix: css/css-contain/
Include MDN Panels: no
!Errata: https://www.w3.org/Style/2022/REC-contain-1-20221025-errata.html
</pre>
<pre class="anchors">
spec: css2; urlPrefix: https://www.w3.org/TR/CSS2/
	type: property; url: visudet.html#propdef-vertical-align; text: vertical-align
	type: dfn; url: box.html#padding-edge; text: padding edge

spec: css-backgrounds-3;
	type: dfn; url: https://drafts.csswg.org/css-backgrounds-3/#corner-clipping; text: corner clipping
</pre>
<pre class=link-defaults>
spec:css-display-3; type:property; text:display
spec:css-ui-3; type:property; text:text-overflow
spec:css-grid-1; type:property; text:grid
spec:css-break-3; type:dfn; text:forced break
spec:css-break-3; type:dfn; text:fragmentation
spec:css-break-3; type:dfn; text:fragmentation container
spec:css-break-3; type:dfn; text:fragmentation context
spec:css-break-3; type:dfn; text:fragmented flow
spec:css21; type:value; property: height; text:auto
spec:css-sizing-4; type:property; text:aspect-ratio
spec:css-sizing-3; type:value; for:width; text:min-content
spec:css-sizing-3; type:value; for:width; text:max-content
</pre>

<h2 id='intro'>
Introduction</h2>

	Efficiently rendering a website relies on the user agent being able to detect what parts of the page are being displayed,
	which parts might affect the currently-displayed section,
	and what can be ignored.

	There are various heuristics that can be used to guess when a given sub-tree is independent of the rest of the page in some manner,
	but they're fragile,
	so innocuous changes to a page may inadvertently make it fail such heuristic tests,
	causing rendering to fall into a slow code path.
	There are also many things that would be good to isolate which are difficult or impossible to detect in a heuristic manner.

	To alleviate these problems
	and allow strong, predictable isolation of a subtree from the rest of the page,
	this specification defines a 'contain' property.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

<h2 id='contain-property'>
Strong Containment: the 'contain' property</h2>

	<wpt title="The following tests are crash tests
	            that relate to general usage
	            of this feature
	            but are not particularly tied to any particular normative statement.">
	contain-chrome-thcrash-001.html
	contain-crash.html
	contain-flexbox-outline.html
	crashtests/contain-nested-crash-001.html
	crashtests/contain-nested-crash-002.html
	crashtests/contain-nested-crash-003.html
	crashtests/contain-nested-crash-004.html
	crashtests/contain-nested-relayout-boundary.html
	</wpt>

	<pre class='propdef'>
		Name: contain
		Value: none | strict | content | [ size || layout || paint ]
		Initial: none
		Inherited: no
		Applies to: See <a href="#contain-applies">below</a>
		Computed value: the keyword ''contain/none'' or one or more of ''size'', ''layout'', ''paint''
		Animation type: not animatable
	</pre>

	<wpt>
	contain-animation-001.html
	inheritance.html
	parsing/contain-computed.html
	parsing/contain-invalid.html
	parsing/contain-valid.html
	parsing/contain-computed-children.html

	contain-layout-size-003.html
	contain-paint-size-001.html
	contain-paint-size-002.html
	contain-paint-size-003.html
	</wpt>

	<p class=all-media>User agents are expected to support this property on all media, including non-visual ones.</p>

	The 'contain' property allows an author to indicate that an element and its contents are,
	as much as possible,
	<em>independent</em> of the rest of the document tree.
	This allows user agents to utilize much stronger optimizations when rendering a page using 'contain' properly,
	and allows authors to be confident that their page won't accidentally fall into a slow code path
	due to an innocuous change.

	<dl dfn-type=value dfn-for=contain>
		<dt><dfn>none</dfn>
		<dd>
			This value indicates that the property has no effect.
			The element renders as normal,
			with no containment effects applied.

		<dt><dfn>strict</dfn>
		<dd>
			This value computes to ''size layout paint'',
			and thus turns on all forms of <a>containment</a> for the element.

			<wpt>
				contain-strict-001.html
				contain-strict-002.html
				contain-strict-003.html

				contain-flexbox-outline.html
			</wpt>

		<dt><dfn>content</dfn>
		<dd>
			This value computes to ''layout paint'',
			and thus turns on all forms of <a>containment</a> <em>except</em> <a>size containment</a> for the element.

			<wpt>
				contain-content-001.html
				contain-content-002.html
				contain-content-003.html
				contain-content-004.html
			</wpt>

			Note: ''contain: content'' is reasonably "safe" to apply widely;
			its effects are fairly minor in practice,
			and most content won't run afoul of its restrictions.
			However, because it doesn't apply <a>size containment</a>,
			the element can still respond to the size of its contents,
			which can cause layout-invalidation to percolate further up the tree than desired.
			Use ''contain: strict'' when possible,
			to gain as much containment as you can.

		<dt><dfn>size</dfn>
		<dd>
			The value turns on <a>size containment</a> for the element.
			This ensures that the [=size containment box|containment box=] can be laid out
			without needing to examine its descendants.

			<wpt>
				contain-size-001.html
				contain-size-002.html
				contain-size-003.html
				contain-size-004.html
				contain-size-005.html
				contain-size-006.html
				contain-size-007.html
				contain-size-008.html
				contain-size-009.html
				contain-size-010.html
				contain-size-011.html
				contain-size-012.html
				contain-size-012b.html
				contain-size-013.html
				contain-size-021.html
				contain-size-023.html
				contain-size-025.html
				contain-size-027.html
				contain-size-041.html
				contain-size-042.html
				contain-size-051.html
				contain-size-052.html
				contain-size-056.html
				contain-size-061.html
				contain-size-062.html
				contain-size-063.html
				contain-size-baseline-001.html
				contain-size-borders.html
				contain-size-breaks-001.html
				contain-size-button-001.html
				contain-size-fieldset-001.html
				contain-size-fieldset-002.html
				contain-size-flexbox-001.html
				contain-size-flexbox-002.html
				contain-size-grid-001.html
				contain-size-grid-002.html
				contain-size-grid-003.html
				contain-size-grid-004.html
				contain-size-grid-005.html
				contain-size-grid-006.html
				contain-size-monolithic-001.html
				contain-size-monolithic-002.html
				contain-size-multicol-001.html
				contain-size-multicol-as-flex-item.html
				contain-size-replaced-001.html
				contain-size-replaced-002.html
				contain-size-replaced-003a.html
				contain-size-replaced-003b.html
				contain-size-replaced-003c.html
				contain-size-replaced-004.html
				contain-size-replaced-005.html
				contain-size-replaced-006.html
				contain-size-replaced-007.html
				contain-size-select-001.html
				contain-size-select-002.html
				contain-size-scrollbars-001.html
				contain-size-scrollbars-002.html
				contain-size-scrollbars-003.html
				contain-size-scrollbars-004.html

				contain-layout-size-003.html
				contain-paint-size-001.html
				contain-paint-size-002.html
				contain-paint-size-003.html
				contain-size-removed.html
				contain-size-dynamic-001.html
				contain-size-grid-indefinite-height-min-height-flex-row.html
				contain-size-grid-stretches-auto-rows.html
			</wpt>

		<dt><dfn>layout</dfn>
		<dd>
			This value turns on <a>layout containment</a> for the element.
			This ensures that the [=layout containment box|containment box=] is <em>totally opaque</em> for layout purposes;
			nothing outside can affect its internal layout,
			and vice versa.

			<wpt>
				contain-layout-001.html
				contain-layout-002.html
				contain-layout-003.html
				contain-layout-004.html
				contain-layout-005.html
				contain-layout-006.html
				contain-layout-007.html
				contain-layout-009.html
				contain-layout-010.html
				contain-layout-011.html
				contain-layout-012.html
				contain-layout-013.html
				contain-layout-014.html
				contain-layout-016.html
				contain-layout-017.html
				contain-layout-018.html
				contain-layout-019.html
				contain-layout-020.html
				contain-layout-021.html
				contain-layout-baseline-001.html
				contain-layout-baseline-002.html
				contain-layout-baseline-003.html
				contain-layout-baseline-004.html
				contain-layout-baseline-005.html
				contain-layout-breaks-001.html
				contain-layout-breaks-002.html
				contain-layout-cell-001.html
				contain-layout-cell-002.html
				contain-layout-flexbox-001.html
				contain-layout-grid-001.html
				contain-layout-ifc-022.html
				contain-layout-independent-formatting-context-001.html
				contain-layout-independent-formatting-context-002.html
				contain-layout-independent-formatting-context-003.html
				contain-layout-ink-overflow-013.html
				contain-layout-ink-overflow-014.html
				contain-layout-ink-overflow-015.html
				contain-layout-ink-overflow-016.html
				contain-layout-ink-overflow-017.html
				contain-layout-ink-overflow-018.html
				contain-layout-ink-overflow-019.html
				contain-layout-ink-overflow-020.html
				contain-layout-size-003.html
				contain-subgrid-001.html
				contain-layout-dynamic-001.html
				contain-layout-dynamic-004.html
				contain-layout-dynamic-005.html
			</wpt>

		<dt><dfn>paint</dfn>
		<dd>
			This value turns on <a>paint containment</a> for the element.
			This ensures that the descendants of the [=paint containment box|containment box=] don't display outside its bounds,
			so if an element is off-screen or otherwise not visible,
			its descendants are also guaranteed to be not visible.

			<wpt>
				contain-paint-001.html
				contain-paint-002.html
				contain-paint-004.html
				contain-paint-005.html
				contain-paint-006.html
				contain-paint-007.html
				contain-paint-008.html
				contain-paint-009.html
				contain-paint-010.html
				contain-paint-011.html
				contain-paint-012.html
				contain-paint-014.html
				contain-paint-015.html
				contain-paint-016.html
				contain-paint-017.html
				contain-paint-018.html
				contain-paint-019.html
				contain-paint-020.html
				contain-paint-021.html
				contain-paint-022.html
				contain-paint-023.html
				contain-paint-024.html
				contain-paint-025.html
				contain-paint-047.html
				contain-paint-048.html
				contain-paint-baseline-001.html
				contain-paint-cell-001.html
				contain-paint-cell-002.html
				contain-paint-clip-011.html
				contain-paint-clip-012.html
				contain-paint-clip-013.html
				contain-paint-clip-014.html
				contain-paint-clip-015.html
				contain-paint-clip-016.html
				contain-paint-clip-017.html
				contain-paint-clip-018.html
				contain-paint-clip-019.html
				contain-paint-ifc-011.html
				contain-paint-independent-formatting-context-001.html
				contain-paint-independent-formatting-context-002.html
				contain-paint-independent-formatting-context-003.html
				contain-paint-size-001.html
				contain-paint-size-002.html
				contain-paint-size-003.html
				contain-paint-table-001.html
				contain-paint-table-002.html
				contain-subgrid-001.html
				contain-paint-change-opacity.html
				contain-paint-dynamic-001.html
				contain-paint-dynamic-002.html
				contain-paint-dynamic-003.html
				contain-paint-dynamic-004.html
				contain-paint-dynamic-005.html
			</wpt>
	</dl>

	<span id="contain-applies">This property generally applies to all elements (including [[css-pseudo-4#generated-content]])</span>,
	although some types of containment have no effect on some elements,
	as detailed in [[#containment-types]].
	In addition, in the case of [[SVG2]],
	the 'contain' property only applies to <{svg}> elements that have an associated CSS layout box.

	<div class='example'>
		'contain' is useful when used widely on a page,
		particularly when a page contains a lot of "widgets" which are all independent.

		For example, assume a micropost social network had markup something like this:

		<pre><code highlight=markup>
			&lt;body>
				&lt;aside>...&lt;/aside>
				&lt;section>
					&lt;h2>Messages&lt;/h2>
					&lt;article>
						Lol, check out this dog: images.example.com/jsK3jkl
					&lt;/article>
					&lt;article>
						I had a ham sandwich today. #goodtimes
					&lt;/article>
					&lt;article>
						I have political opinions that you need to hear!
					&lt;/article>
					…
				&lt;/section>
			&lt;/body>
		</code></pre>

		There are probably a <em>lot</em> of messages displayed on the site,
		but each is independent and won't affect anything else on the site.
		As such, each can be marked with ''contain: content'' to communicate this to the user agent,
		so it can optimize the page and skip a lot of computation for messages that are off-screen.
		If the size of each message is known ahead of time,
		''contain: strict'' can be applied to communicate further restrictions.
	</div>

	Additionally, when the [=used value=] of the 'contain' property
	on either the HTML <{html}> or <{body}> elements
	is anything other than ''contain/none'',
	propagation of properties
	from the <{body}> element
	to the [=initial containing block=], the viewport, or the [=canvas background=],
	is disabled.
	Notably, this affects:
	* 'writing-mode', 'direction', and 'text-orientation' (see [[CSS-WRITING-MODES-3#principal-flow]])
	* 'overflow' and its longhands (see [[CSS-OVERFLOW-3#overflow-propagation]])
	* 'background' and its longhands (see [[CSS-BACKGROUNDS-3#body-background]])

	<wpt>
		contain-body-bg-001.html
		contain-body-bg-002.html
		contain-body-bg-003.html
		contain-body-bg-004.html
		contain-body-dir-001.html
		contain-body-dir-002.html
		contain-body-dir-003.html
		contain-body-dir-004.html
		contain-body-overflow-001.html
		contain-body-overflow-002.html
		contain-body-overflow-003.html
		contain-body-overflow-004.html
		contain-body-t-o-001.html
		contain-body-t-o-002.html
		contain-body-t-o-003.html
		contain-body-t-o-004.html
		contain-body-w-m-001.html
		contain-body-w-m-002.html
		contain-body-w-m-003.html
		contain-body-w-m-004.html
		contain-html-bg-001.html
		contain-html-bg-002.html
		contain-html-bg-003.html
		contain-html-bg-004.html
		contain-html-dir-001.html
		contain-html-dir-002.html
		contain-html-dir-003.html
		contain-html-dir-004.html
		contain-html-overflow-001.html
		contain-html-overflow-002.html
		contain-html-overflow-003.html
		contain-html-overflow-004.html
		contain-html-t-o-001.html
		contain-html-t-o-002.html
		contain-html-t-o-003.html
		contain-html-t-o-004.html
		contain-html-w-m-001.html
		contain-html-w-m-002.html
		contain-html-w-m-003.html
		contain-html-w-m-004.html
	</wpt>

	Note: Propagation
	to the [=initial containing block=], the viewport, or the [=canvas background=],
	of properties set on the <{html}> element itself
	is unaffected.

<h2 id='containment-types'>
Types of Containment</h2>

	There are several varieties of <dfn export>containment</dfn> that an element can be subject to,
	restricting the effects that its descendants can have on the rest of the page in various ways.
	<a>Containment</a> enables much more powerful optimizations by user agents,
	and helps authors compose their page out of functional units,
	as it limits how widely a given change can affect a document.

	Advisement: Specification authors introducing new properties or mechanisms
	need to consider whether and how the various types of containment
	affect what they are introducing,
	and include in their specification any effect not described here.

<h3 id='containment-size'>
Size Containment</h3>

	Giving an element <dfn export>size containment</dfn>
	makes its [=principal box=] a <dfn>size containment box</dfn>
	and has the following effects:

	1.
		The [=intrinsic sizes=] of the [=size containment box=]
		are determined as if the element had no content,
		following the same logic as when [=sizing as if empty=].

		Note: This affects explicit invocations of the ''min-content'' or ''max-content'' keywords,
		as well as any calculation that depends on these measurement,
		such as sizing <span class=informative>[=grid tracks=]</span> into which a size contained item is placed,
		or if [=fit-content sizing=] the containment box's parent.

		<wpt>
		contain-size-013.html
		contain-size-041.html
		contain-size-042.html
		contain-size-replaced-001.html
		contain-size-replaced-002.html
		contain-size-replaced-003a.html
		contain-size-replaced-003b.html
		contain-size-replaced-003c.html
		contain-size-replaced-004.html
		contain-size-replaced-005.html
		contain-size-replaced-006.html
		contain-size-block-001.html
		contain-size-block-002.html
		contain-size-block-003.html
		contain-size-block-004.html
		contain-size-button-002.html
		contain-size-fieldset-003.html
		contain-size-flex-001.html
		contain-size-grid-005.html
		contain-size-grid-006.html
		contain-size-inline-block-001.html
		contain-size-inline-block-002.html
		contain-size-inline-block-003.html
		contain-size-inline-block-004.html
		contain-size-inline-flex-001.html
		contain-size-multicol-002.html
		contain-size-multicol-003.html
		contain-size-select-elem-001.html
		contain-size-select-elem-002.html
		contain-size-select-elem-003.html
		contain-size-select-elem-004.html
		contain-size-select-elem-005.html
		</wpt>

	2. Laying out a [=size containment box=] and its content is conceptually done in two phases:
		<dl>
			<dt><dfn>Sizing as if empty</dfn>
			<dd>
				The [=used value|used=] 'width' and 'height' of the [=size containment box|containment box=]
				are determined as if performing a normal layout of the box,
				except that it is treated as having no content--
				not even through pseudo elements such as ''::before'', ''::after'', or ''::marker''.

				<wpt>
				contain-size-021.html
				contain-size-023.html
				contain-size-025.html
				contain-size-027.html
				contain-size-061.html
				contain-size-062.html
				contain-size-063.html
				contain-size-borders.html
				contain-size-fieldset-001.html
				contain-size-fieldset-002.html
				contain-size-select-001.html
				contain-size-select-002.html
				contain-size-scrollbars-001.html
				contain-size-scrollbars-002.html
				contain-size-scrollbars-003.html
				contain-size-scrollbars-004.html

				contain-size-button-001.html
				contain-size-flexbox-001.html
				contain-size-flexbox-002.html
				contain-size-grid-001.html
				</wpt>

				<a>Replaced elements</a> must be treated as having a [=natural dimensions|natural=] width and height of 0
				and no [=natural aspect ratio=].

				Note: Size containment only suppresses the [=natural aspect ratio=],
				so properties like 'aspect-ratio' which affect that [=preferred aspect ratio=] directly
				are honored.

				<wpt>
				contain-size-013.html
				contain-size-041.html
				contain-size-042.html
				contain-size-replaced-001.html
				contain-size-replaced-002.html
				contain-size-replaced-003a.html
				contain-size-replaced-003b.html
				contain-size-replaced-003c.html
				contain-size-replaced-004.html
				contain-size-replaced-005.html
				</wpt>
				<wpt pathprefix=css/css-sizing/aspect-ratio/>
				replaced-element-023.html
				replaced-element-025.html
				replaced-element-027.html
				</wpt>

				All CSS properties of the [=size containment box=] are taken into account
				as they would be when performing layout normally.
				Other specifications may make specific exemptions.

				<wpt>
				contain-size-replaced-006.html
				</wpt>

				Note: Even when the element's [=sizing properties=] specify an intrinsic size,
				this does not necessarily make the element zero-sized:
				properties set on the element itself
				continue to be taken into account,
				which can cause it to be larger.

				<wpt>
				contain-size-grid-002.html
				contain-size-grid-003.html
				contain-size-multicol-001.html
				contain-size-multicol-as-flex-item.html
				</wpt>

			<dt><dfn>Laying out in-place</dfn>
			<dd>
				The [=size containment box|containment box=]'s content
				(including any pseudo-elements)
				must then be laid out into
				the now fixed-size [=size containment box|containment box=] normally.

				<wpt>
				contain-size-064.html
				<wpt>
		</dl>

		Note: [=Size containment=] does not suppress baseline alignment.
		See [=layout containment=] for that.

		<wpt>
		contain-size-baseline-001.html
		contain-size-fieldset-004.html
		contain-size-inline-block-001.html
		contain-size-inline-block-002.html
		contain-size-inline-block-003.html
		contain-size-inline-block-004.html
		contain-size-inline-flex-001.html
		</wpt>

	3. [=Size containment boxes=] are <a spec=css-break-3>monolithic</a> (See [[CSS-BREAK-3#possible-breaks]]).

		<wpt>
		contain-size-breaks-001.html
		contain-size-monolithic-001.html
		contain-size-monolithic-002.html
		contain-size-multicol-004.html
		</wpt>

	<div class=example>
		Given the following markup and style, the image would be sized to 100px by 100px,
		as the aspect ratio set by the 'aspect-ratio' property takes effect.
		<pre><code class=lang-css>
		img {
			width: 100px;
			aspect-ratio: 1/1;
			contain: size;
		}
		</code><code class=lang-html>
		&lt;img src="https://www.example.com/300x100.jpg">
		</code></pre>

		If the 'aspect-ratio' property had not been declared,
		the image would have been 100px by 0px,
		as its [=natural aspect ratio=] is suppressed,
		and its [=natural height=] is treated as 0.
	</div>

	However, giving an element [=size containment=]
	has no effect if any of the following are true:

	* if the element does not generate a <a>principal box</a>
		(as is the case with ''display: contents'' or ''display: none'')
	* if its [=inner display type=] is ''display/table''
		<wpt>
		contain-size-012.html
		contain-size-012b.html
		</wpt>
	* if its [=principal box=] is
		an <a spec="css-display-3">internal table box</a>
		<wpt>
		contain-size-006.html
		contain-size-007.html
		contain-size-008.html
		contain-size-009.html
		contain-size-010.html
		contain-size-051.html
		contain-size-052.html
		</wpt>
	* if its [=principal box=] is
		an <a spec="css-display-3">internal ruby box</a>
		or a <a spec="css-display-3" lt="atomic inline">non-atomic</a> <a spec="css-display-3">inline-level</a> box
		<wpt>
		contain-size-002.html
		contain-size-003.html
		contain-size-004.html
		contain-size-005.html

		contain-size-001.html
		</wpt>

	Note: Internal table boxes,
	which do not include table captions,
	are excluded,
	because the table layout algorithm
	does not allow boxes to become smaller than their inflow content.
	Sizing a table cell as if it was empty and then laying out its content inside without changing the size
	is effectively an undefined operation.
	Manually setting the 'width' or 'height' properties to ''0''
	cannot make it smaller than its content.
	This concern does not apply to table captions,
	which are perfectly capable of having a fixed size
	that is independent of their content.

	<wpt>
	contain-size-011.html
	contain-size-056.html
	contain-size-table-caption-001.html
	</wpt>

<h4 id='containment-size-opt' class="no-toc">
Possible Size-Containment Optimizations</h4>

	<em>This section is non-normative.</em>

	By itself, <a>size containment</a> does not offer much optimization opportunity.
	Its primary benefit on its own is that tools which want to lay out the [=size containment box|containment box=]'s contents
	based on the [=size containment box|containment box=]'s size
	(such as a JS library implementing the "container query" concept)
	can do so without fear of "infinite loops",
	where having a child's size respond to the size of the [=size containment box|containment box=]
	causes the [=size containment box|containment box=]'s size to change as well,
	possibly triggering <em>further</em> changes in how the child sizes itself
	and possibly thus more changes to the [=size containment box|containment box=]'s size,
	ad infinitum.

	When paired with <a>layout containment</a>, though,
	possible optimizations that can be enabled include (but are not limited to):

	1. When the style or contents of a descendant of the [=size containment box|containment box=] is changed,
		calculating what part of the DOM tree is "dirtied" and might need to be re-laid out
		can stop at the [=size containment box|containment box=].

	2. When laying out the page,
		if the [=size containment box|containment box=] is off-screen or obscured,
		the layout of its contents (i.e. "[=laying out in-place=]") can be delayed or done at a lower priority.

<h3 id='containment-layout'>
Layout Containment</h3>

	Giving an element <dfn export>layout containment</dfn>
	makes its [=principal box=] a <dfn>layout containment box</dfn>
	and has the following effects:

	1. The [=layout containment box=] [=establishes an independent formatting context=].

		<wpt>
		contain-layout-ifc-022.html
		contain-layout-independent-formatting-context-001.html
		contain-layout-independent-formatting-context-002.html
		contain-subgrid-001.html
		contain-layout-formatting-context-float-001.html
		contain-layout-formatting-context-margin-001.html
		</wpt>

	2. If at least one [=fragmentation container=] of a [=fragmentation context=] has [=layout containment=],
		or if at least one [=fragmentation container=] of a [=fragmentation context=] is a descendant of [=layout containment box=]
		<strong>and</strong> at least one subsequent [=fragmentation container=] of the same [=fragmentation context=]
		is not a descendant of that same element with layout containment,
		then the first [=layout containment box=]
		which is either a [=fragmentation container=] itself
		or is an ancestor of a [=fragmentation container=]
		must “trap” the remainder of the [=fragmented flow=]:
		[=fragmentation=] must not continue past the [=layout containment=] boundary,
		and the last [=fragmentation container=]
		within the first [=layout containment=] boundary
		is treated as if it is the last [=fragmentation container=]
		in its [=fragmentation context=].

		If subsequent [=fragmentation containers=] in the [=fragmentation context=]
		are only generated when more content remains in the [=fragmented flow=],
		then they are not generated.
		If they would exist regardless,
		they remain part of the [=fragmentation context=],
		but do not receive any content from the [=fragmented flow=].

		Note: At the time of writing, no stable specification is affected by this point.
		Only specifications that would enable some (but not all) fragmentation containers of a fragmentation context
		to be layout-contained (or descendants of a layout contained element)
		are concerned.
		This is not the case of [[CSS-PAGE-3]] nor of [[CSS-MULTICOL-1]].
		This requirement is nonetheless included because
		several mechanisms that would make this a possibility have been considered
		(e.g.: [[CSS-REGIONS-1]], ''::nth-fragment()'', a hypothetical selector for individual columns of a multicol…),
		and the guarantees that layout containment is intended to offer would not be realized
		if such mechanisms did not abide by this rule.
		[[CSS-REGIONS-1]] has details over how <a>layout containment</a> affects
		regions.

		<div class=example>
			<pre><code highlight=markup>
				&lt;article>Lorem ipsum…&lt;/article>
				&lt;div id=a>&lt;/div>
				&lt;aside>
				  &lt;div id=b>&lt;/div>
				  &lt;div id=c>&lt;/div>
				&lt;/aside>
				&lt;aside>
				  &lt;div id=d>&lt;/div>
				  &lt;div id=e>&lt;/div>
				&lt;/aside>
				&lt;div id=f>&lt;/div>
			</code></pre>
			<pre><code highlight=css>
				article {flow-into: foo;}
				#a, #b, #c, #d, #e, #f {flow-from: foo;}
				aside {contain: layout}
			</code></pre>

			In this [[CSS-REGIONS-1]] example,
			content can flow from <code>#a</code> to <code>#b</code>,
			from <code>#b</code> to <code>#c</code>.
			However as <code>#c</code> is the last fragment container in the first [=layout containment box=]
			it traps all the remaining content,
			and nothing gets flowed into <code>#d</code>, <code>#e</code>, or <code>#f</code>.
		</div>

	3. If the computed value of the 'overflow' property is
		either ''overflow/visible'' or ''overflow/clip'' or a combination thereof,
		any overflow must be treated as [=ink overflow=].

		<wpt>
		contain-layout-ink-overflow-013.html
		contain-layout-ink-overflow-014.html
		contain-layout-ink-overflow-015.html
		contain-layout-ink-overflow-016.html
		contain-layout-ink-overflow-017.html
		contain-layout-ink-overflow-018.html
		contain-layout-ink-overflow-019.html
		contain-layout-ink-overflow-020.html
		contain-layout-overflow-001.html
		contain-layout-overflow-002.html
		</wpt>

	4. The [=layout containment box=] establishes an [=absolute positioning containing block=] and a [=fixed positioning containing block=].

		<wpt>
		contain-layout-006.html
		contain-layout-007.html
		contain-layout-cell-001.html
		contain-layout-cell-002.html
		contain-layout-021.html
		contain-layout-containing-block-absolute-001.html
		contain-layout-containing-block-fixed-001.html
		</wpt>

	5. The [=layout containment box=] creates a <a>stacking context</a>.

		<wpt>
		contain-layout-016.html
		contain-layout-017.html
		contain-layout-018.html
		contain-layout-stacking-context-001.html
		</wpt>

	6. [=Forced breaks=] are allowed within [=layout containment boxes=]
		but do not propagate to the parent as otherwise described in [[CSS-BREAK-3#break-between]].

		<wpt>
		contain-layout-breaks-001.html
		contain-layout-breaks-002.html
		</wpt>

		Note: This introduces the previously non-existent possibility that [=forced breaks=]
		may occur between a box and its container (See [[CSS-BREAK-3#possible-breaks]]).

	7. For the purpose of the 'vertical-align' property,
		or any other property whose effects
		need to relate the position of the [=layout containment box=]'s baseline
		to something other than its descendants,
		the [=layout containment box|containment box=] is treated as having no baseline.

		<wpt>
		contain-layout-baseline-001.html
		contain-layout-flexbox-001.html
		contain-layout-grid-001.html
		contain-layout-baseline-002.html
		contain-layout-baseline-003.html
		contain-layout-baseline-004.html
		contain-layout-baseline-005.html
		contain-layout-suppress-baseline-001.html
		contain-layout-suppress-baseline-002.html
		</wpt>

	However, giving an element [=layout containment=]
	has no effect if any of the following are true:

	* if the element does not generate a <a>principal box</a>
		(as is the case with ''display: contents'' or ''display: none'')
		<wpt>
		contain-layout-ignored-cases-no-principal-box-001.html
		contain-layout-ignored-cases-no-principal-box-002.html
		contain-layout-ignored-cases-no-principal-box-003.html
		</wpt>
	* if its [=principal box=] is
		an <a spec="css-display-3">internal table box</a>
		other than ''display/table-cell''
		<wpt>
		contain-layout-009.html
		contain-layout-010.html
		contain-layout-011.html
		contain-layout-012.html
		contain-layout-013.html

		contain-layout-014.html
		</wpt>
	* if its [=principal box=] is
		an <a spec="css-display-3">internal ruby box</a>
		or a <a spec="css-display-3" lt="atomic inline">non-atomic</a> <a spec="css-display-3">inline-level</a> box
		<wpt>
		contain-layout-002.html
		contain-layout-003.html
		contain-layout-004.html
		contain-layout-005.html

		contain-layout-001.html
		contain-layout-independent-formatting-context-003.html
		contain-layout-ignored-cases-ib-split-001.html
		</wpt>


<h4 id='containment-layout-opt' class="no-toc">
Possible Layout-Containment Optimizations</h4>

	<em>This section is non-normative.</em>

	Possible optimizations that can be enabled by <a>layout containment</a> include (but are not limited to):

	1. When laying out the page,
		the contents of separate [=layout containment boxes|containment boxes=]
		can be laid out in parallel,
		as they're guaranteed not to affect each other.

	2. When laying out the page,
		if the [=layout containment box|containment box=] is off-screen or obscured
		and the layout of the visible parts of the screen do not depend on the size of the [=layout containment box|containment box=]
		(for example, if the [=layout containment box|containment box=] is near the end of a block container,
		and you're viewing the beginning of the block container),
		the layout of the [=layout containment box|containment box=]' contents can be delayed or done at a lower priority.

		(When paired with <a>size containment</a>,
		this optimization can be applied more liberally.)

<h3 id='containment-paint'>
Paint Containment</h3>

	Giving an element <dfn export>paint containment</dfn>
	makes its [=principal box=] a <dfn>paint containment box</dfn>
	and has the following effects:

	1. The contents of the element
		including any [=ink overflow|ink=] or [=scrollable overflow=]
		must be clipped to the <a>padding edge</a> of the [=paint containment box=],
		taking <a>corner clipping</a> into account.
		This does not include the creation of any mechanism
		to access or indicate the presence of the clipped content;
		nor does it inhibit the creation of any such mechanism through other properties,
		<span class=informative>such as 'overflow', 'resize', or 'text-overflow'</span>.

		<wpt>
		contain-paint-050.html
		</wpt>

		Note: The next level of this specification [[CSS-CONTAIN-2]] refines this effect
		to apply to the [=overflow clip edge=] rather than the [=padding edge=],
		in order to take the new 'overflow-clip-margin' property into account.
		For implementations that do not support 'overflow-clip-margin',
		the effect is identical.

		Note: The behavior is described in this paragraph is equivalent to changing
		''overflow-x: visible'' into ''overflow-x: clip''
		and
		''overflow-y: visible'' into ''overflow-y: clip''
		at used value time,
		while leaving other values of 'overflow-x' and 'overflow-y' unchanged.

		<wpt>
		contain-paint-001.html
		contain-paint-004.html
		contain-paint-047.html
		contain-paint-048.html
		contain-paint-cell-001.html
		contain-paint-cell-002.html
		contain-paint-clip-011.html
		contain-paint-clip-012.html
		contain-paint-clip-013.html
		contain-paint-clip-014.html
		contain-paint-clip-015.html
		contain-paint-clip-016.html
		contain-paint-clip-017.html
		contain-paint-clip-018.html
		contain-paint-clip-019.html
		contain-paint-table-001.html
		contain-paint-table-002.html
		contain-paint-026.html
		contain-paint-049.html
		contain-paint-clip-001.html
		contain-paint-clip-002.html
		contain-paint-clip-003.html
		contain-paint-clip-004.html
		contain-paint-clip-005.html
		contain-paint-clip-006.html
		</wpt>

	2. The [=paint containment box=] establishes an [=absolute positioning containing block=] and a [=fixed positioning containing block=].

		<wpt>
		contain-paint-009.html
		contain-paint-010.html
		contain-paint-022.html
		contain-paint-023.html
		contain-paint-024.html
		contain-paint-containing-block-absolute-001.html
		contain-paint-containing-block-fixed-001.html
		</wpt>

	3. The [=paint containment box=] creates a <a>stacking context</a>.

		<wpt>
		contain-paint-020.html
		contain-paint-021.html
		contain-paint-025.html
		contain-subgrid-001.html
		contain-paint-stacking-context-001a.html
		contain-paint-stacking-context-001b.html
		</wpt>

	4. The [=paint containment box=] [=establishes an independent formatting context=].

		<wpt>
		contain-paint-ifc-011.html
		contain-paint-independent-formatting-context-001.html
		contain-paint-independent-formatting-context-002.html
		contain-paint-formatting-context-float-001.html
		contain-paint-formatting-context-margin-001.html
		contain-paint-baseline-001.html
		</wpt>

	However, giving an element [=paint containment=]
	has no effect if any of the following are true:

	* if the element does not generate a <a>principal box</a>
		(as is the case with ''display: contents'' or ''display: none'')
		<wpt>
		contain-paint-ignored-cases-no-principal-box-001.html
		</wpt>
	* if its [=principal box=] is
		an <a spec="css-display-3">internal table box</a>
		other than ''display/table-cell''
		<wpt>
		contain-paint-014.html
		contain-paint-015.html
		contain-paint-016.html
		contain-paint-017.html
		contain-paint-018.html
		contain-paint-019.html
		contain-paint-ignored-cases-internal-table-001a.html
		contain-paint-ignored-cases-internal-table-001b.html
		</wpt>
	* if its [=principal box=] is
		an <a spec="css-display-3">internal ruby box</a>
		or a <a spec="css-display-3" lt="atomic inline">non-atomic</a> <a spec="css-display-3">inline-level</a> box
		<wpt>
		contain-paint-005.html
		contain-paint-006.html
		contain-paint-007.html
		contain-paint-008.html
		contain-paint-ignored-cases-ruby-containing-block-001.html
		contain-paint-ignored-cases-ruby-stacking-and-clipping-001.html

		contain-paint-002.html
		contain-paint-011.html
		contain-paint-012.html
		contain-paint-independent-formatting-context-003.html
		contain-paint-ignored-cases-ib-split-001.html
		</wpt>

<h4 id='containment-paint-opt' class="no-toc">
Possible Paint-Containment Optimizations</h4>

	<em>This section is non-normative.</em>

	Possible optimizations that can be enabled by <a>paint containment</a> include (but are not limited to):

	1. If the [=paint containment box|containment box=] is off-screen or obscured,
		the UA can usually skip trying to paint its contents,
		as they're guaranteed to be off-screen/obscured as well.

		Note: Some paint effects such as the ''blur()'' filter from [[FILTER-EFFECTS-1]]
		have non local effects.
		The user agent needs to keep track of these,
		as it may need to repaint parts of an element with such a filter
		when its descendents change,
		even if they have [=paint containment=]
		and could otherwise be skipped.

	2. Unless the clipped content is made accessible via a separate mechanism
		such as the 'overflow', 'resize', or 'text-overflow' properties,
		the UA can reserve "canvas" space for the box exactly the box's size.
		(In similar, scrollable, situations, like ''overflow: hidden'',
		it's possible to scroll to the currently-clipped content,
		so UAs often predictively overpaint somewhat
		so there's something to see as soon as the scroll happens,
		rather than a frame later.)

	3. Because they are guaranteed to be stacking contexts,
		scrolling elements can be painted into a single GPU layer.


<h2 id=privacy oldids="priv-sec">
Privacy Considerations</h2>

	There are no known privacy impacts of the features in this specification.


<h2 id=security>
Security Considerations</h2>

	There are no known security impacts of the features in this specification.

	Like any other CSS specification, it affects the rendering of the document,
	but does not introduce any special ability to present content in a misleading way
	that was not previously available through other CSS modules
	and that isn't inherent to the act of formatting the document.


<h2 class="no-num non-normative" id="changes">Appendix A. Changes</h2>

This appendix is <em>informative</em>.

<h3 id="2024-06-25-changes">Changes from the
<a href="https://www.w3.org/TR/2024/REC-css-contain-1-20240625/">Recommendation of 25 June 2024</a></h3>

	No change yet.

<h3 id=old-changes oldids="2022-10-25-changes, 2020-12-22-changes, 2019-11-21-changes, 2019-04-30-changes, 2018-11-08-changes,2018-05-24-changes, 2017-08-08-changes, 2017-04-19-changes, fpwd-changes">
Earlier Changes</h3>

	Details about earlier changes to this specification
	can be found in <a href="https://www.w3.org/TR/2024/REC-css-contain-1-20240625/">the Changes section of its previous publication</a>.

<wpt title="WPT tests not applicable to this specification, as they related to later levels.">
contain-inline-size-bfc-floats-001.html
contain-inline-size-bfc-floats-002.html
contain-inline-size-fieldset.html
contain-inline-size-flex.html
contain-inline-size-flexitem.html
contain-inline-size-grid.html
contain-inline-size-intrinsic.html
contain-inline-size-legend.html
contain-inline-size-multicol.html
contain-inline-size-regular-container.html
contain-inline-size-removed.html
contain-inline-size-replaced.html
contain-inline-size-table.html
contain-inline-size-vertical-rl-.html
content-visibility/animation-display-lock.html
content-visibility/content-visibility-001.html
content-visibility/content-visibility-002.html
content-visibility/content-visibility-003.html
content-visibility/content-visibility-004.html
content-visibility/content-visibility-005.html
content-visibility/content-visibility-006.html
content-visibility/content-visibility-007.html
content-visibility/content-visibility-008.html
content-visibility/content-visibility-009.html
content-visibility/content-visibility-010.html
content-visibility/content-visibility-011.html
content-visibility/content-visibility-012.html
content-visibility/content-visibility-013.html
content-visibility/content-visibility-014.html
content-visibility/content-visibility-015.html
content-visibility/content-visibility-016.html
content-visibility/content-visibility-017.html
content-visibility/content-visibility-018.html
content-visibility/content-visibility-019.sub.https.html
content-visibility/content-visibility-020.html
content-visibility/content-visibility-021.html
content-visibility/content-visibility-022.html
content-visibility/content-visibility-023.html
content-visibility/content-visibility-024.html
content-visibility/content-visibility-025.html
content-visibility/content-visibility-026.html
content-visibility/content-visibility-027.html
content-visibility/content-visibility-028.html
content-visibility/content-visibility-029.html
content-visibility/content-visibility-030.html
content-visibility/content-visibility-031.html
content-visibility/content-visibility-032.html
content-visibility/content-visibility-033.sub.https.html
content-visibility/content-visibility-034.html
content-visibility/content-visibility-035.html
content-visibility/content-visibility-036.html
content-visibility/content-visibility-037.html
content-visibility/content-visibility-038.html
content-visibility/content-visibility-039.html
content-visibility/content-visibility-040.html
content-visibility/content-visibility-041.html
content-visibility/content-visibility-042.html
content-visibility/content-visibility-043.html
content-visibility/content-visibility-044.html
content-visibility/content-visibility-045.html
content-visibility/content-visibility-046.html
content-visibility/content-visibility-047.html
content-visibility/content-visibility-048.html
content-visibility/content-visibility-049.html
content-visibility/content-visibility-050.html
content-visibility/content-visibility-051.html
content-visibility/content-visibility-052.html
content-visibility/content-visibility-053.html
content-visibility/content-visibility-054.html
content-visibility/content-visibility-055.html
content-visibility/content-visibility-056.html
content-visibility/content-visibility-057.html
content-visibility/content-visibility-058.html
content-visibility/content-visibility-060.html
content-visibility/content-visibility-061.html
content-visibility/content-visibility-062.html
content-visibility/content-visibility-063.html
content-visibility/content-visibility-064.html
content-visibility/content-visibility-065.html
content-visibility/content-visibility-066.html
content-visibility/content-visibility-067.html
content-visibility/content-visibility-068.html
content-visibility/content-visibility-069.html
content-visibility/content-visibility-070.html
content-visibility/content-visibility-071.html
content-visibility/content-visibility-072.html
content-visibility/content-visibility-073.html
content-visibility/content-visibility-074.html
content-visibility/content-visibility-075.html
content-visibility/content-visibility-076.html
content-visibility/content-visibility-077.html
content-visibility/content-visibility-078.html
content-visibility/content-visibility-079.html
content-visibility/content-visibility-080.html
content-visibility/content-visibility-081.html
content-visibility/content-visibility-082.html
content-visibility/content-visibility-083.html
content-visibility/content-visibility-084.html
content-visibility/content-visibility-auto-in-iframe.html
content-visibility/content-visibility-auto-intrinsic-width.html
content-visibility/content-visibility-auto-selection-crash.html
content-visibility/content-visibility-auto-state-changed-first-observation.html
content-visibility/content-visibility-auto-state-changed-removed.html
content-visibility/content-visibility-auto-state-changed.html
content-visibility/content-visibility-canvas.html
content-visibility/content-visibility-continuations-crash.html
content-visibility/content-visibility-fieldset-size.html
content-visibility/content-visibility-forced-layout-client-rects.html
content-visibility/content-visibility-form-controls-crash.html
content-visibility/content-visibility-hit-test-contents-crash.html
content-visibility/content-visibility-img.html
content-visibility/content-visibility-in-svg-000-crash.html
content-visibility/content-visibility-input-image.html
content-visibility/content-visibility-output-crash.html
content-visibility/content-visibility-resize-observer-no-error.html
content-visibility/content-visibility-svg.html
content-visibility/content-visibility-video.html
content-visibility/content-visibility-with-top-layer-000.html
content-visibility/content-visibility-with-top-layer-001.html
content-visibility/content-visibility-with-top-layer-002.html
content-visibility/content-visibility-with-top-layer-003.html
content-visibility/content-visibility-with-top-layer-004.html
content-visibility/content-visibility-with-top-layer-005.html
content-visibility/content-visibility-with-top-layer-006.html
content-visibility/content-visibility-with-top-layer-hide-after-addition.html
content-visibility/contentvisibility-nestedslot-crash.html
content-visibility/crashtests/first-line-and-inline-block.html
content-visibility/detach-locked-slot-children-crash.html
content-visibility/document-element-computed-style.html
content-visibility/dynamic-change-paint-fully-obscuring-child-001.html
content-visibility/element-reassigned-to-skipped-slot.html
content-visibility/element-reassigned-to-slot-in-skipped-subtree.html
content-visibility/hidden-execcommand-crash.html
content-visibility/hidden-pseudo-element-removed-crash.html
content-visibility/inheritance.html
content-visibility/meter-selection-crash.html
content-visibility/parsing/content-visibility-computed.html
content-visibility/parsing/content-visibility-invalid.html
content-visibility/parsing/content-visibility-valid.html
content-visibility/scrollIntoView-target-with-contents-hidden.html
content-visibility/scrollIntoView-with-focus-target-with-contents-hidden.html
content-visibility/slot-content-visibility-1-crash.html
content-visibility/slot-content-visibility-10-crash.html
content-visibility/slot-content-visibility-11-crash.html
content-visibility/slot-content-visibility-12-crash.html
content-visibility/slot-content-visibility-13-crash.html
content-visibility/slot-content-visibility-14-crash.html
content-visibility/slot-content-visibility-15-crash.html
content-visibility/slot-content-visibility-16-crash.html
content-visibility/slot-content-visibility-17-crash.html
content-visibility/slot-content-visibility-18-crash.html
content-visibility/slot-content-visibility-19-crash.html
content-visibility/slot-content-visibility-2-crash.html
content-visibility/slot-content-visibility-20-crash.html
content-visibility/slot-content-visibility-21-crash.html
content-visibility/slot-content-visibility-22-crash.html
content-visibility/slot-content-visibility-3-crash.html
content-visibility/slot-content-visibility-4-crash.html
content-visibility/slot-content-visibility-5-crash.html
content-visibility/slot-content-visibility-6-crash.html
content-visibility/slot-content-visibility-7-crash.html
content-visibility/slot-content-visibility-8-crash.html
content-visibility/slot-content-visibility-9-crash.html
quote-scoping-empty-style-boundaries.html
content-visibility/content-visibility-085.html
content-visibility/content-visibility-086.html
content-visibility/content-visibility-087.html
content-visibility/content-visibility-088.html
content-visibility/content-visibility-089.html
content-visibility/content-visibility-090.html
content-visibility/content-visibility-091.html
content-visibility/content-visibility-092.html
content-visibility/content-visibility-093.html
content-visibility/content-visibility-094.html
content-visibility/content-visibility-095.html
content-visibility/content-visibility-096.html
content-visibility/content-visibility-097.html
content-visibility/content-visibility-098.html
content-visibility/content-visibility-099.html
content-visibility/content-visibility-animation-and-scroll.html
content-visibility/content-visibility-animation-becomes-visible.html
content-visibility/content-visibility-animation-in-auto-subtree.html
content-visibility/content-visibility-animation-with-scroll-timeline-in-auto-subtree.html
content-visibility/content-visibility-animation-with-scroll-timeline-in-hidden-subtree.html
content-visibility/content-visibility-auto-applied-to-th-crash.html
content-visibility/content-visibility-auto-first-observation-immediate.html
content-visibility/content-visibility-auto-nested-scroll.html
content-visibility/content-visibility-auto-nested.html
content-visibility/content-visibility-auto-relevancy-updates.html
content-visibility/content-visibility-auto-text-fragment.html
content-visibility/content-visibility-background-clip-crash.html
content-visibility/content-visibility-interpolation.html
content-visibility/content-visibility-intrinsic-size-001.html
content-visibility/content-visibility-layout-containment-001.html
content-visibility/content-visibility-layout-paint-containment-001.html
content-visibility/content-visibility-on-g.html
content-visibility/content-visibility-on-root-svg.html
content-visibility/content-visibility-paint-containment-001.html
content-visibility/content-visibility-paint-containment-002.html
content-visibility/content-visibility-paint-containment-003.html
content-visibility/content-visibility-selection-crash.html
content-visibility/content-visibility-size-containment-001.html
content-visibility/content-visibility-style-containment-001.html
content-visibility/content-visibility-svg-path.html
content-visibility/content-visibility-svg-rect.html
content-visibility/content-visibility-svg-text.html
content-visibility/content-visibility-vs-scrollIntoView-001.html
content-visibility/content-visibility-vs-scrollIntoView-002.html
content-visibility/content-visibility-vs-scrollIntoView-003.html
content-visibility/content-visibility-web-animation-in-auto-subtree.html
content-visibility/content-visibility-with-float-crash.html
content-visibility/content-visibility-with-popover-top-layer-000.html
content-visibility/content-visibility-with-popover-top-layer-001.html
content-visibility/content-visibility-with-popover-top-layer-002.html
content-visibility/content-visibility-with-popover-top-layer-003.html
content-visibility/content-visibility-with-popover-top-layer-004.html
content-visibility/content-visibility-with-popover-top-layer-005.html
content-visibility/content-visibility-with-popover-top-layer-006.html
content-visibility/content-visibility-with-popover-top-layer-and-auto-descendant.html
content-visibility/content-visibility-with-popover-top-layer-hide-after-addition.html
content-visibility/content-visibility-with-top-layer-007.html
content-visibility/content-visibility-with-top-layer-008.html
content-visibility/content-visibility-with-top-layer-and-auto-descendant.html
content-visibility/content-visibility-with-top-layer-in-auto-subtree-removal.html
content-visibility/crashtests/content-visibility-transition-finished-001.html
content-visibility/crashtests/grid-dynamic.html
content-visibility/display-ruby-text-crash.html
content-visibility/locked-frame-crash.html
content-visibility/touch-action-beside-display-locked-fixedpos-iframe-crash.html
contain-style-dynamic-001.html
contain-style-remove-element-crash.html
contain-inline-size-grid-indefinite-height-min-height-flex-row.html
contain-inline-size-grid-stretches-auto-rows.html
counter-scoping-004.html
quote-scoping-invalidation-001.html
quote-scoping-invalidation-002.html
quote-scoping-invalidation-003.html
quote-scoping-invalidation-004.html
quote-scoping-shadow-dom-crash.html
container-type-important.html
contain-content-011.html
contain-strict-011.html
contain-style-baseline-001.html
contain-style-breaks-001.html
contain-style-breaks-002.html
contain-style-breaks-003.html
contain-style-breaks-004.html
contain-style-breaks-005.html
contain-style-counters-001.html
contain-style-counters-002.html
contain-style-counters-003.html
contain-style-counters-004.html
contain-style-counters-005.html
contain-style-ol-ordinal-li-container.html
contain-style-ol-ordinal-pseudo-reversed.html
contain-style-ol-ordinal-pseudo.html
contain-style-ol-ordinal-reversed.html
contain-style-ol-ordinal-start-reversed.html
contain-style-ol-ordinal-start.html
contain-style-ol-ordinal.html
counter-scoping-001.html
counter-scoping-002.html
counter-scoping-003.html
quote-scoping-001.html
quote-scoping-002.html
quote-scoping-003.html
quote-scoping-004.html
</wpt>
