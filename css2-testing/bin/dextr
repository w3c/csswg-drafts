#!/usr/local/bin/perl
# Extract entries from the CSS properties database
# The database has the following format:
# name;; values;; initial-value;; media
# Special characters: 
#  1) Translate "*" into the words "all elements"
#  1.a) Translate "XX" into "not defined for shorthand properties"
#  2) "<name>" means the value is defined elsewhere. Translate to
#     <span class="value-inst-name">&lt;name&gt;</span>
#  3) "<'name'>" means the set of values is the same as for the
#      property with the same name. Translate to
#     <span class="propinst-name">&lt;'name'&gt;</span>     
#
# Ian Jacobs - ij@w3.org (Based on work by Arnaud Le Hors)
# $Id: dextr,v 1.18 2006-10-09 18:55:52 ihickson Exp $

$PROGNAME = substr($0, rindex($0, "/") + 1);

if (!$ARGV[0]) {
    print "Usage: $PROGNAME [-n] file [tgt_dir]\n";
    exit 1;
}

if ($ARGV[0] eq "-n") {
    $noindex = 1;
    shift;
} else {
    $noindex = 0;
}

# copy file in memory
if (!open(input, $ARGV[0])) {
    print "$PROGNAME Error: Cannot open file: $ARGV[0]\n";
    exit 1;
}
$buf = "";
while (<input>) {
    $buf .= $_;
}
close(input);

$path = "";
if ($ARGV[1]) {
    $path = "$ARGV[1]/";
}

# regexps
$sp = "[ \t\n]*";		# whitespace
$patt = "$sp(.*?)$sp";
$blockst = "[/][*]";
$blocket = "[*][/]";

sub format_descriptor {
my $name = $_[0]; 
my $values = $_[1]; 
my $init = $_[2];
my $media = $_[3];
#Do next three lines in src files to get headings right.
print output "<div class=\"descdef\">\n";
print output "<dl><dt>\n";
@names = split(/[, \t\n]+/, $name);
$comma = "";
foreach $n (@names) {
if ($noindex) {
    print output "$comma<a name=\"descdef-$n\" class=\"descdef-title\"><strong>'$n'</strong> (Descriptor)</a>";
} else {
    print output "$comma<span class=\"index-def\" title=\"'$n' (descriptor)\"><a name=\"descdef-$n\" class=\"descdef-title\"><strong>'$n'</strong> (Descriptor)</a></span>";
}
$comma = ", ";
}
print output "\n<dd>\n";
print output "<table class=\"descinfo\" cellspacing=0 cellpadding=0>\n";

# We use cellspacing/cellpadding until more browsers
# handle tables correctly.
&format_values($values);
&format_init($init);
&format_media($media);
print output "</table>\n";
print output "</dl>\n";
print output "</div>\n\n";
}  

# Include an nbsp before TD since CSS not used to
# align tables yet.
sub format_values {
$values = $_[0];
$values =~ s/<([^>']*)>/<span class=\"value-inst-$1\">&lt;$1&gt;<\/span>/g;
print output "<tr valign=baseline>";
print output "<td><em>Value:</em>&nbsp;&nbsp;";
print output "<td>$values\n";
}

sub format_init {
$init = $_[0];
$init =~ s/XX/not defined for shorthand properties/g;
$init =~ s/<([^>']*)>/<span class=\"value-inst-$1\">&lt;$1&gt;<\/span>/g;
print output "<tr valign=baseline>";
print output "<td><em>Initial:</em>&nbsp;&nbsp;";
print output "<td>$init\n";
}

sub format_media {
    $fmedia = $_[0];
    $fmedia =~ s/visual/<a href=\"media.html#visual-media-group\" class=\"noxref\">visual<\/a>/;
    $fmedia =~ s/aural/<a href=\"media.html#aural-media-group\" class=\"noxref\">aural<\/a>/;
    $fmedia =~ s/tactile/<a href=\"media.html#tactile-media-group\" class=\"noxref\">tactile<\/a>/;
    $fmedia =~ s/continuous/<a href=\"media.html#continuous-media-group\" class=\"noxref\">continuous<\/a>/;
    $fmedia =~ s/paged/<a href=\"media.html#paged-media-group\" class=\"noxref\">paged<\/a>/;
    $fmedia =~ s/grid/<a href=\"media.html#grid-media-group\" class=\"noxref\">grid<\/a>/;
    $fmedia =~ s/all/<a href=\"media.html#all-media-group\" class=\"noxref\">all<\/a>/;
    $fmedia =~ s/interactive/<a href=\"media.html#interactive-media-group\" class=\"noxref\">interactive<\/a>/;
    $fmedia =~ s/static/<a href=\"media.html#static-media-group\" class=\"noxref\">static<\/a>/;
    print output "<tr valign=baseline>";
    print output "<td><em>Media:</em>&nbsp;&nbsp;";
    print output "<td>$fmedia\n";
}


# extract every possible block
$_ = $buf;
while (/$blockst$patt;;$patt;;$patt;;$patt$blocket/s) {
    # Set parameters first (before any modifications)
    $placeholder = $';
    my @names = split(/[, \t\n]+/, $1);
    my $name = $names[0];
    $output = "$path$name.srb";
    print "\textracting $output\n";
    open(output, "> $output");
    &format_descriptor($1, $2, $3, $4);
    close(output);
    $_ = $placeholder;
}
