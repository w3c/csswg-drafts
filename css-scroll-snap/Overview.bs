<pre class="metadata">
Title: CSS Scroll Snap Module Level 1
Group: csswg
Shortname: css-scroll-snap
TR: https://www.w3.org/TR/css-scroll-snap-1/
Level: 1
Status: ED
Previous Version: https://www.w3.org/TR/2016/WD-css-scroll-snap-1-20160623/
Previous Version: https://www.w3.org/TR/2016/WD-css-snappoints-1-20160329/
Previous Version: https://www.w3.org/TR/2015/WD-css-snappoints-1-20150326/
Work Status: Exploring
ED: https://drafts.csswg.org/css-scroll-snap-1/
Editor: Matt Rakow, Microsoft
Editor: Jacob Rossi, Microsoft
Editor: Tab Atkins-Bittner, Google, http://xanthir.com/contact/
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact
Abstract: This module contains features to control panning and scrolling behavior with “snap positions”.
Ignored Terms: containing block chain
At Risk: ''point'' value of 'scroll-snap-type'
At Risk: 'scroll-snap-stop'
</pre>

Introduction {#intro}
=====================

    <em>This section is not normative.</em>

    Popular UX paradigms for scrollable content frequently employ paging through content,
    or sectioning into logical divisions.
    This is especially true for touch interactions
    where it is quicker and easier for users to quickly pan through a flatly-arranged breadth of content
    rather than delving into a heirarchical structure through tap navigation.
    For example, it is easier for a user to view many photos in a photo album
    by panning through a photo slideshow view
    rather than tapping on individual photos in an album.

    However, given the imprecise nature of scrolling inputs
    like touch panning and mousewheel scrolling,
    it is difficult for web developers to guarantee a well-controlled scrolling experience,
    in particular creating the effect of paging through content.
    For instance, it is easy for a user to land at an awkward scroll position
    which leaves a page partially on-screen when panning.

    To this end, we introduce scroll snap positions
    which enforce the scroll positions that a <a>scroll container’s</a> scrollport may end at
    after a scrolling operation has completed.

Module interactions {#placement}
--------------------------------

    This module extends the scrolling user interface features defined in [[!CSS21]] section 11.1.

    None of the properties in this module apply to the ''::first-line'' and ''::first-letter'' pseudo-elements.

Values {#values}
----------------

    This specification follows the
    <a href="https://www.w3.org/TR/CSS21/about.html#property-defs">CSS property
    definition conventions</a> from [[!CSS21]]. Value types not defined in
    this specification are defined in CSS Level 2 Revision 1 [[!CSS21]].
    Other CSS modules may expand the definitions of these value types: for
    example [[CSS3VAL]], when combined with this module, expands the
    definition of the <<length>> value type as used in this specification.

<!--
████████ ██     ██    ███    ██     ██ ████████  ██       ████████  ██████
██        ██   ██    ██ ██   ███   ███ ██     ██ ██       ██       ██    ██
██         ██ ██    ██   ██  ████ ████ ██     ██ ██       ██       ██
██████      ███    ██     ██ ██ ███ ██ ████████  ██       ██████    ██████
██         ██ ██   █████████ ██     ██ ██        ██       ██             ██
██        ██   ██  ██     ██ ██     ██ ██        ██       ██       ██    ██
████████ ██     ██ ██     ██ ██     ██ ██        ████████ ████████  ██████
-->

Motivating Examples {#examples}
===============================

    <div class="example">
        In this example, a series of images arranged in a <a>scroll container</a>
        are used to build a photo gallery.  In this example the <a>scroll container</a>
        is larger than the photos contained within (such that multiple images may be seen simultaneously), and the image
        sizes vary.  Using mandatory element-based snap
        positions, scrolling will always complete with an image centered in the <a>scroll container’s</a> scrollport.

        <pre class="lang-css">
            img {
                /* Specifies that the center of each photo
                   should align with the center of the scroll
                   container in the X axis when snapping */
                scroll-snap-align: center none;
            }
            .photoGallery {
                width: 500px;
                overflow-x: auto;
                overflow-y: hidden;
                white-space: nowrap;
                /* Requires that the scroll position always be
                   at a snap position when the scrolling
                   operation completes. */
                scroll-snap-type: mandatory;
            }
        </pre>

        <pre class="lang-html">
            &lt;div class="photoGallery">
                &lt;img src="img1.jpg">
                &lt;img src="img2.jpg">
                &lt;img src="img3.jpg">
                &lt;img src="img4.jpg">
                &lt;img src="img5.jpg">
            &lt;/div>
        </pre>

        <figure>
            <img src="images/element_snap_positions.png" alt="">

            <figcaption>
                The layout of the scroll container’s contents in the example.
                The snapport is represented by the red rectangle, and the snap area is represented by the yellow rectangle.  Since the scroll-snap-align is “center” in the X axis, a snap position is established at each scroll position which aligns the X-center of the snapport (represented by a red dotted line) with the X-center of a snap area (represented by a yellow dotted line).
            </figcaption>
        </figure>
    </div>

    <div class="example">
        This example builds a paginated document that aligns each page near to (but not exactly on) the edge of the <a>scroll container</a>.
        This allows the previous page to “peek” in from above in order to make the user aware that they are not yet at the top of the document.
        Using proximity snap positions instead of mandatory snap positions allows the user to stop halfway through a page (rather than forcing them
        to snap one page at a time).  However, if a scrolling operation would finish near a snap position, then the scroll will be adjusted to
        align the page as specified.

        <pre class="lang-css">
            .page {
                /* Defines the top of each page as the
                   edge that should be used for snapping */
                scroll-snap-align: none start;
            }
            .docScroller {
                width: 500px;
                overflow-x: hidden;
                overflow-y: auto;
                /* Specifies that each element’s snap area should
                   align with a 100px offset from the top edge. */
                scroll-snap-padding: 100px 0 0;
                /* Encourages scrolling to end at a snap position when the
                    operation completes, if it is near a snap position */
                scroll-snap-type: proximity;
            }
        </pre>

        <pre class="lang-html">
            &lt;div class="docScroller">
                &lt;div class="page">Page 1&lt;/div>
                &lt;div class="page">Page 2&lt;/div>
                &lt;div class="page">Page 3&lt;/div>
                &lt;div class="page">Page 4&lt;/div>
            &lt;/div>
        </pre>

        <figure>
            <img src="images/element_snap_positions_offset.png" alt="">

            <figcaption>
                The layout of the scroll container’s contents in the example.
                The snapport is represented by the red rectangle (inset from the top by 100px due to the scroll-snap-padding), and the snap area is represented by the yellow rectangle.  Since the scroll-snap-align is “start” in the Y axis, a snap position is established at each scroll position which aligns the Y-start of the snapport (represented by a red dotted line) with the Y-start of a snap area (represented by a yellow dotted line).
            </figcaption>
        </figure>
    </div>

<!--
 ███████  ██     ██ ████████ ████████  ██     ██ ████ ████████ ██      ██
██     ██ ██     ██ ██       ██     ██ ██     ██  ██  ██       ██  ██  ██
██     ██ ██     ██ ██       ██     ██ ██     ██  ██  ██       ██  ██  ██
██     ██ ██     ██ ██████   ████████  ██     ██  ██  ██████   ██  ██  ██
██     ██  ██   ██  ██       ██   ██    ██   ██   ██  ██       ██  ██  ██
██     ██   ██ ██   ██       ██    ██    ██ ██    ██  ██       ██  ██  ██
 ███████     ███    ████████ ██     ██    ███    ████ ████████  ███  ███
-->

Overview {#overview}
====================

    This module introduces control over <dfn lt="scroll snap position" local-lt="snap position">scroll snap positions</dfn>,
    which are scroll positions that produce particular alignments
    of content within a scroll container.
    Using the 'scroll-snap-type' property on the relevant <a>scroll container</a>,
    the author can request a particular bias
    for the scrollport to land on a <a>snap position</a>
    after scrolling operations.

    <a>Snap positions</a> are specified
    as a particular alignment ('scroll-snap-align')
    of an element’s <a>scroll snap area</a>
    (its border bounding box, as modified by 'scroll-snap-margin')
    within the <a>scroll container</a>’s <a>snapport</a>
    (its scrollport, as reduced by 'scroll-snap-padding').
    This is conceptually equivalent to specifying the alignment of
    an <a>alignment subject</a> within an <a>alignment container</a>.
    A scroll position that satisfies the specified alignment
    is a <a>snap position</a>.

    The act of adjusting the scroll position
    of a scroll container’s scrollport
    such that it is aligned to a snap position
    is called <dfn lt="snap | snapping | snapped">snapping</dfn>,
    and a <a>scroll container</a> is said to be
    <a>snapped</a> to a <a>snap position</a>
    if its scrollport’s scroll position
    is that <a>snap position</a>
    and there is no active scrolling operation.
    The CSS Scroll Snap Module
    intentionally does not specify nor mandate
    any precise animations or physics used to enforce <a>snap positions</a>;
    this is left up to the user agent.

    <a>Snap positions</a> only affect the nearest ancestor <a>scroll container</a>
    on the element’s <a>containing block chain</a>.


Capturing Scroll Snap Areas:  Properties on the scroll container {#properties-on-the-scroll-container}
======================================================================================================

<!--
████████ ██    ██ ████████  ████████
   ██     ██  ██  ██     ██ ██
   ██      ████   ██     ██ ██
   ██       ██    ████████  ██████
   ██       ██    ██        ██
   ██       ██    ██        ██
   ██       ██    ██        ████████
-->

Scroll Snapping Rules: the 'scroll-snap-type' property {#scroll-snap-type}
--------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-type
    Value: none | [ x | y | block | inline | both ] [ mandatory | proximity ]? ]! | point
    Initial: none
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: interactive
    Computed value: as specified
    Animatable: no
    </pre>

    The 'scroll-snap-type' property specifies
    whether a <a>scroll container</a> is a <a>scroll snap container</a>,
    how strictly it <a>snaps</a>,
    and which axes are considered.

    The <dfn noexport lt="strictness value">strictness values</dfn>
    (''scroll-snap-type/none'', ''proximity'', ''mandatory'')
    specify how strictly
    <a>snap positions</a> are enforced on the <a>scroll container</a>
    (by forcing an adjustment to the scroll position).
    If no strictness value is specified, ''proximity'' is assumed.
    Values are defined as follows:

    Issue: Currently considering renaming the ''mandatory''/''proximity''.

    <dl dfn-type="value" dfn-for="scroll-snap-type">
        <dt><dfn>none</dfn>
        <dd>
            If specified on a <a>scroll container</a>, the <a>scroll container</a> must not <a>snap</a>.

        <dt><dfn>mandatory</dfn>
        <dd>
            If specified on a <a>scroll container</a>, the <a>scroll container</a> is required to be <a>snapped</a> to a snap position when there are no active scrolling operations.  If a reachable snap position exists then the scroll container must <a>snap</a> at the termination of a scroll (if none exist then no <a>snapping</a> occurs).

            If the content changes such that the scroll container would no longer be <a>snapped</a> (e.g. content is added, moved, deleted, resized) to the same snap position it was snapped to before the content change, the scroll container must be re-snapped.  If the same snap position it was snapped to before the content change still exists (e.g. its associated element was not deleted) and is reachable, the scroll container must be re-snapped to that same snap position after the content change.

        <dt><dfn>proximity</dfn>
        <dd>
            If specified on a <a>scroll container</a>, the <a>scroll container</a> may <a>snap</a> to a snap position at the termination of a scroll, at the discretion of the UA given the parameters of the scroll.

            If the content changes such that the scroll container would no longer be <a>snapped</a> (e.g. content is added, moved, deleted, resized) to the same snap position it was snapped to before the content change and that same snap position still exists (e.g. its associated element was not deleted) and is reachable, the scroll container must be re-snapped to that same snap position after the content change.

            Issue: The text for mandatory and proximity resnapping requirements has some overlap -- try to rewrite this more concisely and without repetition without altering functionality
    </dl>

    A box <dfn export>captures snap positions</dfn>
    if it is a <a>scroll container</a>
    <em>or</em> has a value other than ''scroll-snap-type/none'' for 'scroll-snap-type'.
    If a box’s nearest <a lt="captures snap positions">snap-position capturing</a> ancestor
    on its <a>containing block chain</a>
    is a <a>scroll container</a> with a non-''scroll-snap-type/none'' value for 'scroll-snap-type',
    that is the box’s <dfn export local-lt="snap container">scroll snap container</dfn>.
    Otherwise, the box has no <a>scroll snap container</a>,
    and its <a>snap positions</a> do not trigger <a>snapping</a>.

    The <dfn noexport lt="axis value">axis values</dfn>
    specify what axis(es) are affected by <a>snap positions</a>,
    and whether <a>snap positions</a> are evaluated independently per axis,
    or together as a 2D point.
    Values are defined as follows:

    <dl dfn-type=value dfn-for="scroll-snap-type">
        <dt><dfn>x</dfn>
        <dd>
            The <a>scroll container</a> <a>snaps</a> to <a>snap positions</a>
            in its horizontal axis only.

        <dt><dfn>y</dfn>
        <dd>
            The <a>scroll container</a> <a>snaps</a> to <a>snap positions</a>
            in its vertical axis only.

        <dt><dfn>block</dfn>
        <dd>
            The <a>scroll container</a> <a>snaps</a> to <a>snap positions</a>
            in its block axis only.

        <dt><dfn>inline</dfn>
        <dd>
            The <a>scroll container</a> <a>snaps</a> to <a>snap positions</a>
            in its inline axis only.

        <dt><dfn>both</dfn>
        <dd>
            The <a>scroll container</a> <a>snaps</a> to <a>snap positions</a>
            in both of its axes independently
            (potentially snapping to different elements in each axis).
    </dl>

    Advisement:
    Authors should use mandatory snap positions with consideration of
    varyingly-sized screens and (if applicable) varying-sized content.
    In particular, although access to snapped elements larger than the scrollport
    is handled by the UA,
    if authors assign mandatory snapping to non-adjacent siblings,
    content in between can become inaccessible
    in cases where it is longer than the screen.

<!--
████████     ███    ████████  ████████  ████ ██    ██  ██████
██     ██   ██ ██   ██     ██ ██     ██  ██  ███   ██ ██    ██
██     ██  ██   ██  ██     ██ ██     ██  ██  ████  ██ ██
████████  ██     ██ ██     ██ ██     ██  ██  ██ ██ ██ ██   ████
██        █████████ ██     ██ ██     ██  ██  ██  ████ ██    ██
██        ██     ██ ██     ██ ██     ██  ██  ██   ███ ██    ██
██        ██     ██ ████████  ████████  ████ ██    ██  ██████
-->

Scroll Snapport: the 'scroll-snap-padding' property {#scroll-snap-padding}
--------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-padding
    Value: [ <<length>> | <<percentage>> ]{1,4}
    Initial: 0
    Applies to: <a>scroll containers</a>
    Inherited: no
    Percentages: relative to the corresponding dimension of the scroll container’s scrollport
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length, percentage, or calc
    </pre>

    The 'scroll-snap-padding' property defines the <dfn local-lt="snapport">scroll snapport</dfn>-- the area of the scrollport that is used as the <a>alignment container</a>
    for the <a>scroll snap areas</a> when calculating <a>snap positions</a>.
    Values are interpreted as for 'padding',
    and specify inward offsets from each edge of the scrollport.

    <div class="example">
        In this example, scroll-snap-padding is used to center slideshow images
        within the portion of the scrollport
        that is not obscured by a fixed-position toolbar.

        <pre class="lang-css">
            body {
                overflow-x: auto;
                overflow-y: hidden;
                scroll-snap-type: mandatory;
                scroll-snap-padding: 0 500px 0 0;
            }
            .toolbar {
                position: fixed;
                height: 100%;
                width: 500px;
                right: 0;
            }
            img {
                scroll-snap-align: center none;
            }
        </pre>
    </div>

    This property is a <a>shorthand property</a> that sets
    all of the <a href="#longhands"><css>scroll-snap-padding-*</css> longhands</a>
    in one declaration.

Aligning Scroll Snap Areas:  Properties on the elements {#properties-on-the-elements}
=====================================================================================

<!--
   ███    ████████  ████████    ███
  ██ ██   ██     ██ ██         ██ ██
 ██   ██  ██     ██ ██        ██   ██
██     ██ ████████  ██████   ██     ██
█████████ ██   ██   ██       █████████
██     ██ ██    ██  ██       ██     ██
██     ██ ██     ██ ████████ ██     ██
-->

Scroll Snapping Area: the 'scroll-snap-margin' property {#scroll-snap-margin}
-----------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-margin
    Value: <<length>>{1,4}
    Initial: 0
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length
    </pre>

    The 'scroll-snap-margin' property defines
    the <dfn lt="scroll snap area" local-lt="snap area">scroll snap area</dfn>
    that is used for snapping this box to the snapport.
    The <<length>> values give outsets
    (interpreted as for 'margin' or 'border-image-outset').
    The <a>scroll snap area</a> is the rectangular bounding box of the transformed border box,
    plus the specified outsets,
    axis-aligned in the <a>scroll container’s</a> coordinate space.

    Note: This ensures that the <a>scroll snap area</a> is always rectangular
    and axis-aligned to the <a>scroll container’s</a> coordinate space.

    This property is a <a>shorthand property</a> that sets
    all of the <a href="#longhands"><css>scroll-snap-margin-*</css> longhands</a>
    in one declaration.

<!--
   ███    ██       ████  ██████   ██    ██
  ██ ██   ██        ██  ██    ██  ███   ██
 ██   ██  ██        ██  ██        ████  ██
██     ██ ██        ██  ██   ████ ██ ██ ██
█████████ ██        ██  ██    ██  ██  ████
██     ██ ██        ██  ██    ██  ██   ███
██     ██ ████████ ████  ██████   ██    ██
-->

Scroll Snapping Alignment: the 'scroll-snap-align' property {#scroll-snap-align}
--------------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-align
    Value: [ none | start | end | center ]{1,2}
    Initial: none
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: interactive
    Computed value: two keywords
    Animatable: no
    </pre>

    The 'scroll-snap-align' property specifies
    the box’s <a>snap position</a> as an alignment of
    its <a>snap area</a> (as the <a>alignment subject</a>)
    within its <a>snap container’s</a> <a>snapport</a> (as the <a>alignment container</a>).
    The two values specify the snapping alignment
    in the <a>inline axis</a> and <a>block axis</a>, respectively.
    If only one value is specified, the second value defaults to the same value.

    Values are defined as follows:

    <dl dfn-type="value" dfn-for="scroll-snap-align">
        <dt><dfn>none</dfn>
        <dd>
            This box does not define a <a>snap position</a> in the specified axis.

        <dt><dfn>start</dfn>
        <dd>
            Start alignment of this box’s <a>scroll snap area</a>
            within the <a>scroll container</a>’s <a>snapport</a>
            is a <a>snap position</a>
            in the specified axis.

        <dt><dfn>end</dfn>
        <dd>
            End alignment of this box’s <a>scroll snap area</a>
            within the <a>scroll container</a>’s <a>snapport</a>
            is a <a>snap position</a>
            in the specified axis.

        <dt><dfn>center</dfn>
        <dd>
            Center alignment of this box’s <a>scroll snap area</a>
            within the <a>scroll container</a>’s <a>snapport</a>
            is a <a>snap position</a>
            in the specified axis.
    </dl>

<h4 id="snap-scope">
Scoping Valid Snap Positions to Visible Boxes</h4>

<div class="issue">
    <strong>Need to define that a box is not <a>snapped</a> if it is off-screen,
    even if its snap alignment is satisfied in the other axis.</strong>

    Since the purpose of scroll snapping is to align content within the viewport
    for optimal viewing:
    in all cases, the specified alignment creates a valid <a>snap position</a>
    only if at least part of the <a>snap area</a> is within the <a>snapport</a>.
    For example, a <a>snap area</a> is top-aligned to the <a>snapport</a>
    if its top edge is coincident with the <a>snapport</a>’s top edge;
    however, this alignment is nonetheless not a valid <a>snap position</a>
    if the entire <a>snap area</a> is outside the <a>snapport</a>.

    <figure>
        <pre class="ascii-art">
            ╔════viewport════╗┈┈┈┈┈┈┈┈┌──────────────┐
            ║  ┌─────┐ ┌──┐  ║        │ top-snapping │
            ║  ├──┐  │ └──┘  ║        │   element    │
            ║  └──┴──┘       ║        │              │
            ╚════════════════╝        │              │
                                      └──────────────┘
        </pre>
        <figcaption>
          Alignment of an off-screen element
          is not considered <a>snapping</a>.
        </figcaption>
    </figure>

    <details class="note">
        <summary>Why limit snapping to only when the element is visible?</summary>
        As the <a href="https://www.webkit.org/blog/4017/scroll-snapping-with-css-snap-points/">WebKit implementers point out</a>,
        extending a snap edge infinitely across the canvas
        only allows for snapping gridded layouts,
        and produces odd behavior for the user
        when off-screen elements do not align
        with on-screen elements.
        (If this requirement is onerous for implementers however,
        we can default to a gridded behavior
        and introduce a switch to get smarter behavior.)
    </details>
</div>

<h4 id="snap-overflow">
Snapping Boxes that Overflow the Scrollport</h4>

    If the <a>snap area</a> is larger than the <a>snapport</a> in a particular axis,
    then any scroll position in which the <a>snap area</a> covers the <a>snapport</a>,
    and the distance between the geometrically previous and subsequent <a>snap positions</a> in that axis
    is larger than size of the <a>snapport</a> in that axis,
    is a valid <a>snap position</a> in that axis.
    The UA may use the specified alignment as a more precise target
    for certain scroll operations (e.g. explicit paging).

    <div class="example">
        For example, take the first example in [[#examples]],
        which had a photo as the area.
        The author wants mandatory snapping from item to item,
        but if the item happens to be larger than your viewport,
        you want to be able to scroll around the whole thing once you’re over it.

        Since the <a>snap area</a> is larger than the <a>snapport</a>,
        while the area fully fills the viewport,
        the container can be scrolled arbitrarily and will not try to snap back to its aligned position.
        However, if the container is scrolled such that the area
        no longer fully fills the viewport in an axis,
        the area resists outward scrolling
        until it is scrolled sufficiently to trigger snapping to a different <a>snap position</a>.
    </div>

    <div class=example>
        For another example,
        mandatory top-snapping on nested <{section}> elements
        can produce large snapping areas
        (from large top-level sections)
        potentially filled with smaller snapping areas
        (from the subsections).
        When the subsections are small enough,
        they snap normally;
        when they're longer,
        the viewer can scroll arbitrarily within them,
        or within a large segment of the top-level section that has no subsections to snap to.

        <figure>
            <pre class=ascii-art>
            ┌─ top-level section ─┐ ━┓
            │                     │ 1┃
            │                     │  ┃
            │                     │ ━┩
            │                     │  ┆
            │                     │  ┆
            │┌─── sub-section ───┐│  ╯ ━┓
            │└───────────────────┘│    2┃
            │┌─── sub-section ───┐│ ━┓  ┃
            ││                   ││ 3┃ ━┛
            │└───────────────────┘│  ┃
            │┌─── sub-section ───┐│ ━┛ ━┓
            │└───────────────────┘│    4┃
            │┌─── sub-section ───┐│ ━┓  ┃
            ││                   ││ 5┃ ━┛
            ││                   ││  ┃
            ││                   ││ ━┩
            ││                   ││  ┆
            ││                   ││  ┆
            ││                   ││  ┆
            │└───────────────────┘│  ┆
            └─────────────────────┘  ╯
            </pre>
            <figcaption>
                In the figure above,
                the five numbered viewports
                represent the five snap positions
                associated with the top-level section
                and its four subsections.
                Because the first and last snap positions are part of ranges taller than the viewport,
                the viewer is allowed to scroll freely
                between the top and bottom of each range.
            </figcaption>
        </figure>

        Note: If the author had instead set mandatory snap positions on the headings of each section
        (rather than the sections themselves),
        the contents of the first and fifth sections
        would be partially inaccessible to the user,
        as the heading snap area does not extend to cover the whole section.
    </div>


<h4 id="unreachable">
Unreachable Snap Positions</h4>

    If a <a>snap position</a> is unreachable as specified,
    such that aligning to it would require scrolling the <a>scroll container</a>’s viewport
    past the edge of its <a>scrollable overflow region</a>,
    the <em>used</em> <a>snap position</a> for this <a>snap area</a>
    is the position resulting from scrolling <em>as much as possible</em> in each relevant axis
    toward the desired <a>snap position</a>.

<!--
 ██████  ████████  ███████  ████████
██    ██    ██    ██     ██ ██     ██
██          ██    ██     ██ ██     ██
 ██████     ██    ██     ██ ████████
      ██    ██    ██     ██ ██
██    ██    ██    ██     ██ ██
 ██████     ██     ███████  ██
-->

Scroll Snap Limits: the 'scroll-snap-stop' property {#scroll-snap-stop}
--------------------------

    <pre class="propdef">
    Name: scroll-snap-stop
    Value: normal | always
    Initial: normal
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Computed value: as specified
    Animatable: no
    Media: interactive
    </pre>

    This property specifies whether the <a>scroll container</a> must stop at each <a>snap position</a>
    it passes, or may pass multiple <a>snap positions</a> before coming to rest.
    Values are defined as follows:

    <dl dfn-type=value dfn-for=scroll-snap-stop>
        <dt><dfn>normal</dfn>
        <dd>
            The <a>scroll container</a> may pass by a <a>snap position</a> defined
            by this element during the execution of a scrolling operation.

        <dt><dfn>always</dfn>
        <dd>
            The <a>scroll container</a> must not pass by a <a>snap position</a>
            defined by this element during the execution of a scrolling operation.
    </dl>

    Issue: It’s been proposed to rename ''normal'', but not to what.

Snapping Mechanics {#snap-concepts}
===================================

    The precise model algorithm to select a <a>snap position</a> to snap to
    is intentionally left mostly undefined,
    so that user agents can take into account sophisticated models of user intention and interaction
    and adjust how they respond over time,
    to best serve the user.

    This section defines some useful concepts to aid in discussing scroll-snapping mechanics,
    and provides some guidelines for what an effective scroll-snapping strategy might look like.
    User agents are encouraged to adapt this guidance
    and apply their own best judgement
    when defining their own snapping behavior.
    It also provides a small number of behavior requirements,
    to ensure a minimum reasonable behavior that authors can depend on
    when designing their interfaces with scroll-snapping in mind.


<!--
████████ ██    ██ ████████  ████████  ██████
   ██     ██  ██  ██     ██ ██       ██    ██
   ██      ████   ██     ██ ██       ██
   ██       ██    ████████  ██████    ██████
   ██       ██    ██        ██             ██
   ██       ██    ██        ██       ██    ██
   ██       ██    ██        ████████  ██████
-->

Types of Scrolling Methods {#scroll-types}
------------------------------------------

    When a page is scrolled,
    the action is performed with
    an intended end position
    and/or an intended direction.
    Each combination of these two things
    defines a distinct category of scrolling,
    which can be treated slightly differently:

    : <dfn export>intended end position</dfn>
    ::
        <div class="example">
            Common examples of scrolls with only an <a>intended end position</a> include:

            * a panning gesture,
                released without momentum
            * manipulating the scrollbar “thumb” explicitly
            * programmatically scrolling via APIs such as {{Window/scrollTo()}}
            * tabbing through the document’s focusable elements
            * navigating to an anchor within the page
        </div>

    : <dfn export>intended direction and end position</dfn>
    ::
        <div class="example">
            Common examples of scrolls with both an <a>intended direction and end position</a> include:

            * a “fling” gesture,
                interpreted with momentum
            * programmatically scrolling via APIs such as {{Window/scrollBy()}}
        </div>

        The intended end point of the scroll prior to intervention from features such
        as snap points is its <dfn noexport>natural end-point</dfn>.

    : <dfn export>intended direction</dfn>
    ::
        <div class="example">
            Common examples of scrolls with only an <a>intended direction</a> include:

            * pressing an arrow key on the keyboard
            * a swiping gesture interpreted as a fixed (rather than inertial) scroll
        </div>

    Additionally, because page layouts usually align things vertically and/or horizontally,
    UAs sometimes <dfn export>axis-lock</dfn> a scroll when its direction
    is sufficiently vertical or horizontal.
    An <a>axis-locked</a> scroll is bound to only scroll along that axis.
    This prevents less-precise input mechanisms from drifting in the non-primary axis.

<!--
 ██████  ██     ██  ███████   ███████   ██████  ████ ██    ██  ██████
██    ██ ██     ██ ██     ██ ██     ██ ██    ██  ██  ███   ██ ██    ██
██       ██     ██ ██     ██ ██     ██ ██        ██  ████  ██ ██
██       █████████ ██     ██ ██     ██  ██████   ██  ██ ██ ██ ██   ████
██       ██     ██ ██     ██ ██     ██       ██  ██  ██  ████ ██    ██
██    ██ ██     ██ ██     ██ ██     ██ ██    ██  ██  ██   ███ ██    ██
 ██████  ██     ██  ███████   ███████   ██████  ████ ██    ██  ██████
-->

Choosing Snap Positions {#choosing}
-----------------------------------

    A <a>scroll container</a> can have many <a>snap areas</a>
    scattered throughout its <a>scrollable overflow region</a>.
    A naïve algorithm for selecting a <a>snap position</a>
    can produce behavior that is unintuitive for users,
    so care is required when designing a selection algorithm.
    Here are a few pointers that can aid in the selection process:

    * <a>Snap positions</a> should be chosen to minimize the distance between the end-point
        (or the <a>natural end-point</a>)
        and the final snapped scroll position,
        subject to the additional constraints listed in this section.

    * If a scroll is <a>axis-locked</a>,
        any <a>snap positions</a> in the other axis should be ignored
        during the scroll.
        (However, <a>snap positions</a> in the other axis can still effect the final scroll position.)

    * In order to prevent a far-offscreen element
        from having difficult-to-understand effects
        on the scroll position,
        <a>snap positions</a> should be ignored if their elements are far outside of the “corridor”
        that the <a>snapport</a> defines as it moves through the <a>scrollable overflow region</a>,
        or a hypothetical “corridor” in the direction of a scroll with only an <a>intended direction</a>,
        or the <a>snapport</a> after an scroll with only an <a>intended end position</a>.

    * User agents <em>must</em> ensure that a user can “escape” a <a>snap position</a>,
        regardless of the scroll method.
        For example, if the snap type is ''mandatory''
        and the next <a>snap position</a> is more than two screen-widths away,
        a naïve “always snap to nearest” selection algorithm might “trap” the user
        if their end position was only one screen-width away.
        Instead, a smarter algorithm that only returned to the starting <a>snap position</a>
        if the end-point was a fairly small distance from it,
        and otherwise ignored the starting snap position,
        would give better behavior.

        (This implies that a scroll with only an <a>intended direction</a> must always ignore the starting <a>snap positions</a>.)

    * If a page is navigated to a fragment that defines a target element
        (one that would be matched by '':target'',
        or the target of {{Element/scrollIntoView()}}),
        and that element defines some <a>snap positions</a>,
        the user agent should <a>snap</a> to one of that element’s <a>snap positions</a>.
        The user agent may do this even when the <a>scroll container</a> has ''scroll-snap-type: none''.

<!--
██        ███████  ██    ██  ██████   ██     ██    ███    ██    ██ ████████   ██████
██       ██     ██ ███   ██ ██    ██  ██     ██   ██ ██   ███   ██ ██     ██ ██    ██
██       ██     ██ ████  ██ ██        ██     ██  ██   ██  ████  ██ ██     ██ ██
██       ██     ██ ██ ██ ██ ██   ████ █████████ ██     ██ ██ ██ ██ ██     ██  ██████
██       ██     ██ ██  ████ ██    ██  ██     ██ █████████ ██  ████ ██     ██       ██
██       ██     ██ ██   ███ ██    ██  ██     ██ ██     ██ ██   ███ ██     ██ ██    ██
████████  ███████  ██    ██  ██████   ██     ██ ██     ██ ██    ██ ████████   ██████
-->

Appendix A: Longhands {#longhands}
==================================

Physical Longhands for 'scroll-snap-padding' {#padding-longhands-physical}
--------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-padding-top, scroll-snap-padding-right, scroll-snap-padding-bottom, scroll-snap-padding-left
    Value: <<length>> | <<percentage>>
    Initial: 0
    Applies to: <a>scroll containers</a>
    Inherited: no
    Percentages: relative to the scroll container’s scrollport
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length, percentage, or calc
    </pre>

    These <a>longhands</a> of 'scroll-snap-padding' specify
    the top, right, bottom, and left edges
    of the <a>snapport</a>, respectively.

Flow-relative Longhands for 'scroll-snap-padding'  {#padding-longhands-logical}
-------------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-padding-inline-start, scroll-snap-padding-block-start, scroll-snap-padding-inline-end, scroll-snap-padding-block-end
    Value: <<length>> | <<percentage>>
    Initial: 0
    Applies to: <a>scroll containers</a>
    Inherited: no
    Percentages: relative to the scroll container’s scrollport
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length, percentage, or calc
    </pre>

    These <a>longhands</a> of 'scroll-snap-padding' specify
    the block-start, inline-start, block-end, and inline-end edges
    of the <a>snapport</a>, respectively.

    <pre class="propdef">
    Name: scroll-snap-padding-block, scroll-snap-padding-inline
    Value: [ <<length>> | <<percentage>> ]{1,2}
    Initial: 0
    Applies to: all elements
    Inherited: no
    Percentages: relative to the scroll container’s scrollport
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length, percentage, or calc
    </pre>

    These <a>shorthands</a> of 'scroll-snap-padding-block-start' + 'scroll-snap-padding-block-end'
    and 'scroll-snap-padding-inline-start' + 'scroll-snap-padding-inline-end'
    are <a>longhands</a> of 'scroll-snap-padding',
    and specify the block-axis and inline-axis edges of the <a>snapport</a>, respectively.

    If two values are specified, the first gives the start value
    and the second gives the end value.

Physical Longhands for 'scroll-snap-margin'  {#margin-longhands-physical}
-------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-margin-top, scroll-snap-margin-right, scroll-snap-margin-bottom, scroll-snap-margin-left
    Value: <<length>>
    Initial: 0
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length
    </pre>

    These <a>longhands</a> of 'scroll-snap-margin' specify
    the top, right, bottom, and left edges
    of the <a>scroll snap area</a>, respectively.

Flow-relative Longhands for 'scroll-snap-margin'  {#margin-longhands-logical}
-----------------------------------------------------------------------------

    <pre class="propdef">
    Name: scroll-snap-margin-block-start, scroll-snap-margin-inline-start, scroll-snap-margin-block-end, scroll-snap-margin-inline-end
    Value: <<length>>
    Initial: 0
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length
    </pre>

    These <a>longhands</a> of 'scroll-snap-margin' specify the block-start, inline-start, block-end, and inline-end edges of the <a>scroll snap area</a>, respectively.

    <pre class="propdef">
    Name: scroll-snap-margin-block, scroll-snap-margin-inline
    Value: <<length>>{1,2}
    Initial: 0
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: interactive
    Computed value: as specified, with lengths made absolute
    Animatable: as length
    </pre>

    These <a>shorthands</a> of 'scroll-snap-margin-block-start' + 'scroll-snap-margin-block-end'
    and 'scroll-snap-margin-inline-start' + 'scroll-snap-margin-inline-end'
    are <a>longhands</a> of 'scroll-snap-margin',
    and specify the block-axis and inline-axis edges
    of the <a>scroll snap area</a>, respectively.

    If two values are specified, the first gives the start value
    and the second gives the end value.

Privacy and Security Considerations {#priv-sec}
===============================================

    This specification does not expose any information whatsoever
    that is not already exposed to the DOM directly;
    it just makes scrolling slightly more functional.
    There are no new privacy or security considerations.

Acknowledgements {#acknowledgements}
====================================

    Many thanks to
    David Baron,
    Simon Fraser,
    Håkon Wium Lie,
    Edward O’Connor,
    François Remy,
    Majid Valpour,
    and most especially Robert O’Callahan
    for their proposals and recommendations,
    which have been incorporated into this document.
