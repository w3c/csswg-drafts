<pre class='metadata'>
Title: CSS Shapes Module Level 2
Status: ED
Work Status: Exploring
Shortname: css-shapes
Level: 2
Group: csswg
TR: https://www.w3.org/TR/css-shapes-2/
ED: https://drafts.csswg.org/css-shapes-2/
Editor: Rossen Atanassov, Microsoft Corporation, ratan@microsoft.com, w3cid 49885
Editor: Alan Stearns, Adobe Systems&#44; Inc., stearns@adobe.com, w3cid 46659
Editor: Noam Rosenthal, Google, w3cid 121539
Abstract: This draft contains the features of CSS relating to wrapping content around and inside shapes. It (implicitly for now) includes and extends the functionality of CSS Shapes Level 1 [[CSS-SHAPES]]. The main points of extension compared to level 1 include additional ways of defining shapes, defining an exclusion area using a shape, and restricting an element's content area using a shape.
Link Defaults: css2 (property) margin, css-display-3 (value) table
</pre>

<pre class='link-defaults'>
spec:css-masking-1; type: value
	text: nonzero
	text: evenodd
spec:css-shapes-1;
	type:property;
		text:shape-margin
		text:shape-outside
	type:dfn; text: reference box
	type:function; text: path()
spec:css-writing-modes-4; type:concept; text:physical
spec:css-writing-modes-4; type:concept; text:"writing mode"
spec:svg2; type:property;
	text:fill-rule
spec:css-values-5; type:value;
	text:top;
	text:right;
	text:bottom;
	text:left;
	text:center;
	text:x-start;
	text:y-start;
	text:x-end;
	text:y-end;
</pre>

<style type="text/css">
	.singleImgExample {
		display: block;
		margin: auto;
	}

	.example-table {
		table-layout: fixed;
		width: 100%;
	}

	.example-table tr td img {
		width: 90%;
	}
</style>


<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	Level 1 of this specification defined properties
	to control the geometry of an element's [=float area=].
	This level defines how shapes apply to exclusions.
	It also includes a 'shape-inside' property
	for applying a shape to an element's content area.
	Finally, it defines new ways of specifying shapes for all of these applications.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the [=CSS-wide keywords=] as their property value.
	For readability they have not been repeated explicitly.


<h2 id="terminology">
Terminology</h2>

	: <dfn>exclusion area</dfn>
	:: The area used for excluding inline flow content around an exclusion box.
		The [=exclusion area=] is equivalent to the [=border box=] for an exclusion box.
		This specification's 'shape-outside' property
		can be used to define arbitrary, non-rectangular [=exclusion areas=].
		The 'shape-inside' property also defines an [=exclusion area=],
		but in this case it is the area outside the shape that inline content avoids.

	: <dfn>float area</dfn>
	:: The area used for wrapping content around a float element.
		By default, the float area is the float element's [=margin box=].
		This specification's 'shape-outside' property can be used
		to define arbitrary, non-rectangular float areas.

	: <dfn>content area</dfn>
	:: The [=content area=] is normally used for layout of the inline flow content of a box.

	: <dfn>direction-agnostic size</dfn>
	:: The [=direction-agnostic size=] of a box is equal to the length of the diagonal of the box,
		divided by sqrt(2).

		Note: This is a method of averaging the width and height of a box
		used by SVG in some cases,
		when a percentage of a box's size is desired
		but the context doesn't specifically favor the width or the height.
		For square boxes, this is the same as the width/height.


<h2 id="shapes">
Shapes</h2>

	Shapes define arbitrary geometric contours
	around which inline content flows.
	The shape-outside property defines the [=float area=] for a float,
	and the [=exclusion area=] for an exclusion.


<h2 id="basic-shape-functions">
Basic Shapes</h3>

	Add the final
	<a href="https://www.w3.org/TR/css-shapes/#basic-shape-functions">level 1</a>
	section.

<h3 id="supported-basic-shapes">
Supported Shapes</h3>

	Add the final
	<a href="https://www.w3.org/TR/css-shapes/#basic-shape-functions">level 1</a>
	sections.

<h4 id='shape-function'>
The ''shape()'' Function</h4>

	While the ''path()'' function allows reuse of the SVG path syntax
	to define more arbitrary shapes than allowed by more specialized shape functions,
	it requires writing a path as a single string
	(which is not compatible with, for example, building a path piecemeal with ''var()''),
	and inherits a number of limitations from SVG,
	such as implicitly only allowing the ''px'' unit.

	The ''shape()'' function uses a set of commands equivalent to the ones used by ''path()'',
	but does so with more standard CSS syntax,
	and allows the full range of CSS functionality,
	such as additional units and math functions.
	The commands used by ''shape()'' are dynamically turned into path segments when it is used for rendering,
	e.g., when computing the rendered 'clip-path'.

	<pre class=prod>
		<dfn>shape()</dfn> = shape( <<'fill-rule'>>? from <<coordinate-pair>>, <<shape-command>>#)
	</pre>

	The <<'fill-rule'>> is interpreted identically to the same argument in ''path()''.

	The rest of the arguments define a list of path data commands,
	identical to that of an <a href="https://www.w3.org/TR/SVG11/paths.html#PathData">SVG Path</a>,
	which the function represents.

	The <css>from <<coordinate-pair>></css> represents the starting point for the first shape-command.
	It adds an initial <a href="https://www.w3.org/TR/SVG/paths.html#PathDataMovetoCommands">absolute moveto</a>
	to the list of path data commands,
	with the <<coordinate-pair>> measured from the top-left corner of the [=reference box=].

	The sequence of <dfn><<shape-command>></dfn>s represent
	further <a href="https://www.w3.org/TR/SVG11/paths.html#PathData">path data commands</a>.
	Each command's starting point is the previous command's ending point.

	<pre class=prod>
		<<shape-command>> = <<move-command>> | <<line-command>> | close |
		                  <<horizontal-line-command>> | <<vertical-line-command>> | 
		                  <<curve-command>> | <<smooth-command>> | <<arc-command>>

		<<move-command>> = move <<command-end-point>>
		<<line-command>> = line <<command-end-point>>
		<<horizontal-line-command>> = hline
						[ to [ <<length-percentage>> | left | center | right | x-start | x-end ]
						| by <<length-percentage>> ]
		<<vertical-line-command>> = vline
						[ to [ <<length-percentage>> | top | center | bottom | y-start | y-end ]
						| by <<length-percentage>> ]
		<<curve-command>> = curve
						[ [ to <<position>> with <<control-point>> [ / <<control-point>> ]? ]
						| [ by <<coordinate-pair>> with <<relative-control-point>> [ / <<relative-control-point>> ]? ] ]
		<<smooth-command>> = smooth
						[ [ to <<position>> [ with <<control-point>> ]? ]
						| [ by <<coordinate-pair>> [ with <<relative-control-point>> ]? ] ]
		<<arc-command>> = arc <<command-end-point>>
								[ [ of <<length-percentage>>{1,2} ]
								  && <<arc-sweep>>? && <<arc-size>>? && [rotate <<angle>>]? ]

		<<command-end-point>> = [ to <<position>> | by <<coordinate-pair>> ]
		<<control-point>> = [ <<position>> | <<relative-control-point>> ]
		<<relative-control-point>> = <<coordinate-pair>> [ from [ start | end | origin ] ]?
		<<coordinate-pair>> = <<length-percentage>>{2}
		<<arc-sweep>> = cw | ccw
		<<arc-size>> = large | small
	</pre>

	<dl dfn-for="shape()">
		<dt><dfn><<coordinate-pair>></dfn> = <<length-percentage>>{2}
		<dd>Defines a pair of coordinates,
			representing a rightward and downward offset, respectively,
			from a specified reference point.
			Percentages are resolved against the width or height, respectively,
			of the [=reference box=].

		<dt><dfn><<command-end-point>></dfn> = [ <dfn value for="shape(), <command-end-point>">to</dfn> <<position>> | <dfn value for="shape(), <command-end-point>">by</dfn> <<coordinate-pair>> ]
		<dd>
			Every command can be specified in "absolute" or "relative" coordinates,
			determined by their ''shape()/by'' or ''shape()/to'' component.
			''shape()/to'' indicates that any <<coordinate-pair>>s in the command
			are relative to the top-left corner of the [=reference box=],
			while ''shape()/by'' indicates that the <<coordinate-pair>>s
			are relative to the command's starting point.

			<<relative-control-point>> defines how ''shape()/by'' and ''shape()/to'' are interpreted for curve control points,
			while <<horizontal-line-command>> and <<vertical-line-command>> define how ''shape()/by'' and ''shape()/to'' are
			interpreted for horizontal and vertical lines, respectively.

			When ''shape()/to'' is used, the coordinates can be specified as <<position>>s instead of <<coordinate-pair>>s.

			Note: In either case, <<percentage>> values in <<coordinate-pair>>s
			are always computed relative to the [=reference box's=] size.

		<dt><dfn><<move-command>></dfn> = <dfn value>move</dfn> <<command-end-point>>
		<dd>
			Adds a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataMovetoCommands">moveto</a> command
			to the list of path data commands,
			with an ending point specified by the <<coordinate-pair>>.

			This draws nothing,
			and merely "moves the pen" for the next command.

			Note: This starts a new subpath,
			for the purpose of the ''close'' command.

		<dt><dfn><<line-command>></dfn> = <dfn value>line</dfn> <<command-end-point>>
		<dd>
			Adds a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands">lineto</a> command
			to the list of path data commands,
			with an ending point specified by the <<coordinate-pair>>.

			This draws a straight line from the command's starting point to its ending point.

		<dt><dfn><<horizontal-line-command>></dfn> = hline [ to [ <<length-percentage>> | left | center | right | x-start | x-end ]
															| by <<length-percentage>> ]
		<dd>
			Adds a horizontal
			<a href="https://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands">lineto</a> command
			to the list of path data commands.

			This is equivalent to a ''line'' command
			with the <<length-percentage>> given as the horizontal component of the <<coordinate-pair>>.
			Specifying the horizontal component of <<position>> instead of a <<length-percentage>> (''left'', ''center'', ''right'', ''x-start'', or ''x-end''),
			would draw a line to that <<position>>, with the <<position>>'s vertical component remaining the same as the starting point.

		<dt><dfn><<vertical-line-command>></dfn> = vline [ to [ <<length-percentage>> | top | center | bottom | y-start | y-end ] | by <<length-percentage>> ]
		<dd>
			Adds a vertical
			<a href="https://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands">lineto</a> command
			to the list of path data commands.

			This is equivalent to a ''line'' command
			with the <<length-percentage>> given as the vertical component of the <<coordinate-pair>>.
			Specifying the horizontal component of <<position>>
			(''top'', ''center'', ''bottom'', ''y-start'', or ''y-end'')
			instead of a <<length-percentage>>,
			would draw a line to that <<position>>, with the <<position>>'s horizontal component remaining the same as the starting point.

		<dt><dfn><<curve-command>></dfn> = <dfn value>curve</dfn> [ [ to <<position>> with <<control-point>> [ / <<control-point>> ]? ]
						| [ by <<coordinate-pair>> with <<relative-control-point>> [ / <<relative-control-point>> ]? ] ]
		<dd>
			Adds a Bézier curve command to the list of path data commands,
			ending at the point specified by the <<position>> following the ''shape()/to'' keyword,
			or the <<coordinate-pair>> following the ''shape()/by'' keyword, as specified by <<command-end-point>>.

			The <css>with</css> component specifies control points for the curve:
			if a single <<control-point>> or <<relative-control-point>> is provided,
			the command specifies a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands">quadratic curve</a>;
			if two  <<control-point>>s or <<relative-control-point>>s are provided,
			it specifies a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands">cubic curve</a>.

		<dt><dfn><<smooth-command>></dfn> = <dfn value>smooth</dfn> [ [ to <<position>> [with <<control-point>> ]? ]
						| [ by <<coordinate-pair>> [ with <<relative-control-point>> ]? ] ]
		<dd>
			Adds a smooth Bézier curve command to the list of path data commands,
			ending at the point specified by the <<position>> following the ''shape()/to'' keyword, or the <<coordinate-pair>> following the ''shape()/by'' keyword, as specified by <<command-end-point>>.
			The <css>with</css> component specifies control points for the curve:
			if it's omitted,
			the command specifies a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands">smooth quadratic curve</a>;
			if it's provided,
			if specifies a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands">smooth cubic curve</a>.

			Note: A ''smooth'' command is equivalent to a ''curve'' command
			with the first control point automatically specified
			as the reflection of the previous curve's second control point
			around the starting point,
			or as the starting point if the previous path data command wasn't a curve.
			This ensures G1 continuity with the previous command,
			so the curve appears to smoothly continue from the previous command,
			rather than possibly making a sudden direction change.

		<dt><dfn><<control-point>></dfn> = [ <<position>> | <<relative-control-point>> ]
		<dd>
			Provides a control point to a quadratic or cubic Bézier curve.

		<dt><dfn><<relative-control-point>></dfn> = <<coordinate-pair>> [ from [ start | end | origin ] ]?
		<dd>
			Provides a control point to a quadratic or cubic Bézier curve.
			When a <css>from</css> keyword is specified followed by <css>start</css>, <css>end</css>, or <css>origin</css>,
			the given <<coordinate-pair>> is relative to
			the command's starting point, the command's end point, or the [=reference box=], respectively.
			If such component is not provided, the <<coordinate-pair>> is relative to the segment's start.

		<dt><dfn><<arc-command>></dfn> = <dfn value>arc</dfn> <<command-end-point>> [[of <<length-percentage>>{1,2}] && <<arc-sweep>>? && <<arc-size>>? && rotate <<angle>>? ]
		<dd>
			Add an <a href="https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands">elliptical arc</a> command
			to the list of path data commands,
			ending at the <<command-end-point>>.

			The <css>of</css> component specifies the size of the ellipse that the arc is taken from.
			The first <<length-percentage>> provides the horizontal radius of the ellipse
			and the second provides the vertical radius.
			Like for <<coordinate-pair>>s,
			<<percentage>> values are resolved against the width or height of the [=reference box=],
			as appropriate.

			If only one <<length-percentage>> is provided,
			both radiuses use the provided value.
			In that case, <<percentage>> values are resolved against the [=direction-agnostic size=] of the [=reference box=]
			(similar to the ''circle()'' function).

			<div class=note>
				Note that SVG has [[svg2#ArcOutOfRangeParameters|some specific error-handling for the ellipse radiuses]]:

				* if the endpoint is the same as the starting point, the command does nothing
				* if either radius is zero, the command is equivalent to a <<line-command>> to the ending point
				* if either radius is negative, its absolute value is used instead
				* if the radiuses don't describe an ellipse large enough
					to intersect both the starting point and ending point
					(after rotation by the specified <<angle>>),
					they are scaled up uniformly until the ellipse is just large enough to reach.
			</div>

			The ellipse described by the specified radiuses defaults to being axis-aligned,
			but can be rotated by specifying an <<angle>>.
			Similar to the ''rotate()'' transform function,
			positive angles specify a clockwise rotation,
			and negative angles specify a counterclockwise rotation.
			If omitted, this defaults to ''0deg''.

			The ending point, radiuses, and angle,
			taken together,
			usually define two possible ellipses
			that intersect the starting point and ending point,
			and each ellipse can be traced in either direction,
			for a total of four possible arcs.
			The <<arc-sweep>> and <<arc-size>> components specify which of these arcs is desired:

			* <dfn><<arc-sweep>></dfn> can be <dfn value for="shape(), arc">cw</dfn> or <dfn value for="shape(), arc">ccw</dfn>,
				indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively,
				must be chosen.
				If omitted, this defaults to ''ccw''.

				Note: In the SVG arc command, ''cw'' corresponds to the value 1 for the sweep flag, and ''ccw'' to the value 0.

			* <dfn><<arc-size>></dfn> can be <dfn value for="shape(), arc">large</dfn> or <dfn value for="shape(), arc">small</dfn>,
				indicating that the larger or smaller, respectively, of the two possible arcs
				must be chosen.
				If omitted, this defaults to ''small''.

				Note: In the SVG arc command, ''large'' corresponds to the value 1 for the large flag, and ''small'' to the 0.

				Note: If the starting and ending points are on exactly opposite sides of the ellipse,
				both possible arcs are the same size,
				but also there is only one possible ellipse.
				In this case, the <<arc-sweep>> distinguishes which of the two possible arcs will be chosen,
				and <<arc-size>> has no effect.

			<figure>
				<img src="images/four-arcs.svg">
				<figcaption>
					A depiction of the two possible ellipses,
					and four possible arcs,
					that can be chosen between.
				</figcaption>
			</figure>

		<dt><dfn value>close</dfn>
		<dd>
			Adds a <a href="https://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand">closepath</a> command
			to the list of path data commands.

			Note: This is similar to a ''line'' command
			with its ending point set to the starting point of the subpath.
			When specifying a raw shape, they're identical,
			but if the path is stroked,
			the ending point of the ''close'' command is smoothly joined
			with the start of the subpath,
			which affects how line-joins and line-caps are rendered.
	</dl>

<h5 id=shape-examples>Using ''shape()'' to create responsive, parametric speech bubble</h5>

<div class=example>
The ''shape()'' function enables shapes that are responsive, rather than scalable.
While the ''polygon()'' shape is also responsive, it only support simple rounded corners and not complex curves.

To demonstrate, let's start with a speech bubble, such as the following:

<img src="images/bubble.svg" width=300 style="background: unset">

Using this shape with a ''clip-path'' can be done by using the ''path()'' function:

<pre highlight="css">
.bubble { clip-path: path("m 5 0 H 95 Q 100 0 100 5 V 92 Q 100 97 95 97 H 70 l -2 3 l -2 -3 H 5 Q 0 97 0 92 V 5 Q 0 0 5 0") };
</pre>

Altohugh this path can easily scale, the scaled results are not always desirable. e.g. when scaled to a small balloon, the arrow and corners are scaled to become almost invisible:

<img src="images/bubble.svg" width=100 style="background: unset">

To construct this shape using the ''shape()'' function, let's start by turning all the pixel values from the ''path'' function to percentages.
Note that the ''shape()'' function begins with <css>from</css>:

<pre highlight="css">
.bubble { clip-path: shape(	from 5% 0%,
							hline to 95%,
							curve to 100% 5% with 100% 0%,
							vline to 92%,
							curve to 95% 97% with 100% 97%,
							hline to 70%,
							line by -2% 3%,
							line by -2% -3%,
							hline to 5%,
							curve to 0% 92% with 0% 97%,
							vline to 5%,
							curve to 5% 0% with 0% 0%); }
</pre>

To make this path responsive, as in, respond well to size changes, we will convert some of its units to ''px'' values,
specifically the ones the control the curves and arrows:

<pre highlight="css">
.bubble { clip-path: shape(	from 5px 0%,
							hline to calc(100% - 5px),
							curve to 100% 5px with 100% 0%,
							vline to calc(100% - 8px),
							curve to calc(100% - 5px) calc(100% - 3px) with 100% calc(100% - 3px),
							hline to 70%,
							line by -2px 3px,
							line by -2px -3px,
							hline to 5px,
							curve to 0% calc(100% - 8px) with 0% calc(100% - 3px),
							vline to 5px,
							curve to 5px 0% with 0% 0%); }
</pre>

When applied as ''clip-path'', it would looks like the following:
<p>
<img src="images/bubble-50.svg" width=150 style="background: unset">
</p>

The whole speech bubble is scaled to the reference box, while the curves and arrows stay more constant.

Since ''shape()'' uses CSS units, we can replace some of the edges with ''position'' values:

<pre highlight="css">
.bubble { clip-path: shape(from 5px 0,
							hline to calc(100% - 5px),
							curve to right 5px with right top,
							vline to calc(100% - 8px),
							curve to calc(100% - 5px) calc(100% - 3px) with right calc(100% - 3px),
							hline to 70%,
							line by -2px 3px,
							line by -2px -3px,
							hline to 5px,
							curve to left calc(100% - 8px) with left calc(100% - 3px),
							vline to 5px,
							curve to 5px top with left top); }
</pre>

Another useful feature of ''shape()'' is that it can be used alongside CSS properties. In this case,
we can make the arrow and radius parametric:

<pre highlight="css">

:root {
	--radius: 5px;
	--arrow-length: 3px;
	--arrow-half-width: 2px;
	--arrow-position: 70%;
	--arrow-bottom-offset: calc(100% - var(--radius) - var(--arrow-length));
}

.bubble {
	animation: bubble 100ms;
	clip-path: shape(from var(---radius) top,
		hline to calc(100% - var(---radius)),
		curve to right var(---radius) with right top,
		vline to var(---arrow-bottom-offset),
		curve to calc(100% - var(---radius)) calc(100% - var(---arrow-length))
              with right calc(100% - var(---arrow-length)),
		hline to var(---arrow-position),
		line by var(---arrow-half-width) var(---arrow-length),
		line by var(---arrow-half-width) calc(0px - var(---arrow-length)),
		hline to var(---radius),
		curve to left var(---arrow-bottom-offset) with left calc(100% - var(---arrow-length)),
		vline to var(---radius),
		curve to var(---radius) top with left top); }
</pre>



</div>

<h5 id=interpolating-shape>
Interpolating the ''shape()'' Function</h5>

	''shape()'' and ''path()'' functions can be <l spec=css-values-4>[=interpolated=]</l> with each other
	if their associated list of path data commands is the same length
	and has the same commands, in order, with the first command of the ''path()'' function interpolating with the
	initial <<coordinate-pair>> in the ''shape()'' function.

		Note: The first command of a ''path()'' function is guaranteed to be a ''move'', see <a href="https://www.w3.org/TR/SVG2/paths.html#PathDataMovetoCommands">moveTo</a> in the SVG spec.

	If the starting and ending values are both ''path()'' functions,
	the interpolated value is a ''path()'' function;
	otherwise it's a ''shape()'' function.
	In either case,
	the interpolated value must represent the same list of path data commands,
	with each command having its numerical components interpolated between the corresponding components of the starting and ending list.

	For this purpose, commands are "the same" if they use the same command keyword,
	and use the same <<by-to>> keyword.
	For ''curve'' and ''smooth'', they also must have the same number of control points.

	If an ''arc'' command has different <<arc-sweep>> between its starting and ending list,
	then the interpolated result uses ''cw'' for any progress value between 0 and 1.
	If it has different <<arc-size>> keywords,
	then the interpolated result uses ''large'' for any progress value between 0 and 1.

	Note: The ''arc'' keyword interpolation rules
	are meant to match existing SVG <{path}> interpolation rules.


<h2 id='referencing-svg-shapes'>
Referencing SVG shapes</h4>

	An SVG shape can be referenced using the <code>url()</code> syntax.
	The shape can be any
	of the <a href="https://www.w3.org/TR/SVG/shapes.html">SVG basic shapes</a>
	or a <a href="https://www.w3.org/TR/SVG/paths.html">path element</a>.

	<div class="example">
		<img style="float: right" alt="results of referencing SVG shapes" src="images/svg-shape-reference.png">
		<xmp highlight=html>
			<style>
			div {
				height: 400px;
				width: 400px;
			}
			.in-a-circle {
				shape-outside: url(#circle_shape);
			}

			.in-a-path {
				shape-outside: url(#path-shape);
			}
			</style>

			<svg ...>
				<circle id="circle_shape" cx="50%" cy="50%" r="50%" />
				<path id="path-shape" d="M 100 100 L 300 100 L 200 300 z" />
			</svg>

			<div class="around-a-circle">...</div>
			<div class="around-a-path">...</div>
		</xmp>
	</div>

<h2 id="shapes-from-image">
Shapes from Image</h3>

	Add the final
	<a href="https://www.w3.org/TR/css-shapes/#shapes-from-image">level 1</a>
	section.

	Issue: One <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=16716">suggestion</a>
	is to define a shape based on an element's rendered content.
	This could have security implications.

	Issue: Another <a href="http://lists.w3.org/Archives/Public/www-style/2014Mar/0120.html">suggestion</a>
	is to add something to an image() function
	that determines the relevant pixels to use
	(both for defining a shape and for display).

<h2 id="fetching-external-shapes">
Fetching external shapes</h2>

	To <dfn>fetch an external resource for a shape</dfn>, either an SVG or an image, given a
	{{CSSStyleRule}} |rule|,
		[=fetch a style resource=] given |rule|'s URL,
		with stylesheet being |rule|'s <a spec=cssom for=CSSRule>parent CSS style sheet</a>,
		destination "image",
		CORS mode "cors",
		and processResponse being the following steps given [=/response=] |res| and null, failure or
		a byte stream |byteStream|:
			If |byteStream| is a byte stream,
			apply the image or SVG to the appropriate shape-accepting property.

		Note: shapes require CORS mode as their effect is detected by the document.


<h2 id="shapes-from-box-values">
Shapes from Box Values</h2>

	Add the final
	<a href="https://www.w3.org/TR/css-shapes/#shapes-from-box-values">level 1</a>
	section.

<h2 id="declaring-shapes">
Declaring Shapes</h3>

	A shape can be declared with the 'shape-outside' property,
	with possible modifications from the 'shape-margin' property.
	The shape defined by the 'shape-outside' and 'shape-margin' properties
	changes the geometry of a float element's [=float area=]
	and an exclusion element's [=exclusion area=].

	A shape can be declared with the 'shape-inside' property,
	with possible modifications from the 'shape-padding' property.
	The shape defined by the 'shape-inside' and 'shape-padding' properties
	defines an [=exclusion area=]
	that contributes to the element's [=wrapping context=].
	The 'shape-inside' property applies to all block-level elements.

	<div class="example">
		The red box illustrates an exclusion element's content box,
		which is unmodified and subject to normal CSS positioning
		(here absolute positioning).

		<xmp highlight=html>
			<style type="text/css">
			.exclusion	{
				wrap-flow: both;
				position: absolute;
				top: 25%;
				left: 25%;
				width: 50%;
				height: 50%;
				shape-outside: circle(50% at 50% 50%);
				border: 1px solid red;
			}
			</style>

			<div style=”position: relative;”>
				<div class=”exclusion”></div>
				Lorem ipsum dolor sit amet...
			</div>
		</xmp>
		<img class="singleImgExample"
		src="images/shapes_CSS2.1_MBP.png"
		alt="Example rendering of circle shape and box model."
		style="max-width:40%">
	</div>

<h3 id="shape-outside-property">
The 'shape-outside' Property</h4>

	Add the final <a href="https://www.w3.org/TR/css-shapes/#shape-outside-property">level 1</a> section
	with the change that shape-outside applies to block-level elements
	and has an effect if the element is an exclusion.

<h3 id="shape-inside-property">
The 'shape-inside' Property</h4>

	The 'shape-inside' property adds one or more exclusion areas
	to the element's wrapping context.
	This modifies the normal rectangular shape of the content area
	to a possibly non-rectangular wrapping area.
	The exclusion areas are defined by subtracting the shape from the element's content area.
	Any part of the shape outside the element's content area has no effect.

	<pre class='propdef'>
		Name: shape-inside
		Value: auto | outside-shape | [ <<basic-shape>> || shape-box ] | <<image>> | display
		Initial: auto
		Applies To: block-level elements
		Inherited: no
		Computed Value: computed lengths for <<basic-shape>>, the absolute URL for <<url>>, otherwise as specified
		Animation type: as defined for <<basic-shape>>, otherwise discrete
	</pre>

	The values of this property have the following meanings:

	<dl dfn-type=value dfn-for=shape-inside>
		<dt><dfn>auto</dfn>
		<dd>
			The shape is computed based on the content box of the element.

		<dt><dfn>outside-shape</dfn>
		<dd>
			The shape is computed based on
			the shape defined by the shape-outside
			and shape-margin properties.

		<dt><dfn><<basic-shape>></dfn>
		<dd>
			The shape is computed based
			on the values of one of
			the <<basic-shape>> functions.

		<dt><dfn><<url>></dfn>
		<dd>
			If the &lt;uri&gt; references an SVG shape element,
			that element defines the shape.
			Otherwise, if the &lt;uri&gt; references an image,
			the shape is extracted and computed
			based on the alpha channel
			of the specified image.

			If the &lt;uri&gt; does not reference
			an SVG shape element or an image,
			the effect is as if the value ''auto'' had been specified.

		<dt><dfn>display</dfn>
		<dd>
			The shape is computed based on the shape of the display
			as described in <a href="https://drafts.csswg.org/css-round-display">css-round-display</a>.
	</dl>

	The 'shape-inside' property applies to floats.

	The 'shape-inside' property may not apply on some elements
	such as elements with a computed 'display' value of ''display/table''.

	<figure>
		<img alt="Content flowing with and without a shape-inside"
		     src="images/shape-inside-content.png">
		<figcaption>Effect of shape-inside on inline content.</figcaption>
	</figure>

	Overflow content avoids
	the exclusion area(s) added
	by 'shape-inside' and 'shape-padding'
	(as well as any other exclusion areas
	in the element's wrapping context).
	In other words,
	overflow continues outside
	the rectangular bounds of the element.</p>

	<figure>
		<img alt="Overflow interacting with rounded rect"
		     style="display:inline-block;vertical-align:top"
		     src="images/rounded-rect-overflow.png">
		<img alt="Overflow interacting with ellipse"
		     style="display:inline-block;vertical-align:top"
		     src="images/ellipse-overflow.png">
		<figcaption>
			Overflow interacting with exclusion areas
			defined by 'shape-inside' and 'shape-padding'.
		</figcaption>
	</figure>

	Issue: improve the illustration above,
	using text to show overflow instead of grey boxes.

	When a shape-inside has a definite size
	(no percentages used in the shape's definition)
	an auto-sized element should use the shape
	as a constraint in determining its maximum size.


<h3 id="shape-image-threshold-property">
The shape-image-threshold Property</h4>

	Add the final
	<a href="https://www.w3.org/TR/css-shapes/#shape-image-threshold-property">level 1</a>
	section with the change that
	it applies to both 'shape-inside'
	and 'shape-outside'.

<h3 id="shape-image-source-type-property">
The shape-image-source-type Property</h4>

	Should we add an alpha/luminance switch
	to determine which values we use
	from the shape-image source?
	This could just be a keyword
	on the shape-image-threshold property.
	Whatever we go with should be compatible
	with the alpha/luminance switch from mask sources.

<h3 id="shape-margin-property">
The 'shape-margin' property</h4>

	Add the final
	<a href="https://www.w3.org/TR/css-shapes/#shape-margin-property">level 1</a>
	section with the change that it applies to exclusions.

<h3 id="shape-padding-property">
The 'shape-padding' Property</h4>

	The 'shape-padding' property adds padding to a shape-inside.
	This defines a new shape where every point
	is the specified distance from the shape-inside.
	This property takes on positive values only.

	<pre class='propdef'>
		Name: shape-padding
		Value: <<length-percentage [0,∞]>>
		Initial: 0
		Applies To: block-level elements
		Inherited: no
		Percentages: refer to the <a>inline size</a> of the containing block
		Computed Value: computed <<length-percentage>> value
		Animation type: by computed value
	</pre>

	<dl dfn-type="value" dfn-for="shape-padding">
		<dt><dfn><<length-percentage [0,∞]>></dfn></dt>
		<dd>
			Sets the padding of the shape to the specified value.
	</dl>

	<div class="example">
		<figure>
			<img src="images/shape-padding.png" alt="Example of a shape-padding offset">
			<figcaption>
				A 'shape-padding' creating an offset from a circular 'shape-inside'.
				The light blue rectangles represent inline content
				affected by the shape created by the padding.
			</figcaption>
		</figure>
	</div>

	Note: The 'shape-padding' property only affects layout of content
	inside the element it applies to
	while the 'shape-margin' property only affects layout of content
	outside the element.

<h2 class=no-num id=privacy>Privacy Considerations</h2>

No new privacy considerations have been reported on this specification.

<h2 class=no-num id=security>Security Considerations</h2>

No new security considerations have been reported on this specification.
