<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en">
<!-- $Id: syndata.src,v 2.199 2014-01-17 13:48:25 bbos Exp $ -->
<head>
<title>Syntax and basic data types</title>
<!--script src="http://www.w3c-test.org/css/harness/annotate.js#CSS21_DEV" type="text/javascript" defer></script-->
<style type="text/css"> 
 span.colorsquare { float:left; width:5em; height:3em; text-align:center; padding:1.2em 0 .8em }
 span.colorname { font-weight:bold }
 div.colordiagram { width:25em; height:20em; margin:1em auto; font-family:Verdana,sans-serif; font-size:12px }
 div.diagramrow { height:5em }
</style>
<style type="text/css">
.current,.proposed,span.delcurrent { background:#feb }
ins.proposed,span.insproposed { background:#bfb }
del.proposed,span.delproposed { background:#fbb }
span.insproposed { text-decoration:underline }
span.delproposed,span.delcurrent { text-decoration:line-through }
body>del,body>ins {display:block}
</style>
</head>
<body>
<h1>Syntax and basic data types</h1>
<h2><a name="syntax">Syntax</a></h2>

<p>This section describes a grammar (and <span class="index-def"
title="forward-compatible parsing"><dfn>forward-compatible
parsing</dfn></span> rules) common to any level of CSS (including
CSS&nbsp;2). Future updates of CSS will adhere to this core syntax,
although they may add additional syntactic constraints.
</p>
<p>These descriptions are normative. They are also
complemented by the normative grammar rules presented in <a
href="grammar.html">Appendix G</a>.
</p>
<p>In this specification, the expressions "immediately before" or
"immediately after" mean with no intervening white space or comments.

<h3><a name="tokenization">Tokenization</a></h3>

<p>All levels of CSS &mdash; level 1, level 2, and any future levels &mdash; use
the same core syntax. This allows UAs to parse (though not completely
understand) style sheets written in levels of CSS that did not exist at
the time the UAs were created. Designers can use this feature to
create style sheets that work with older user agents, while also
exercising the possibilities of the latest levels of CSS.
</p>
<p>At the lexical level, CSS style sheets consist of a sequence of tokens.
The list of tokens for CSS is as follows. The definitions use Lex-style
regular expressions. Octal codes refer to ISO 10646 ([[ISO10646]]). As in
Lex, in case of multiple matches, the longest match determines the token.
</p>
<table>
<thead>
<tr><th>Token		</th><th>Definition</th></tr>
</thead>
<tr><td colspan=2><hr></td></tr>
<tr><td>IDENT		</td><td><code><var>{ident}</var></code></td></tr>
<tr><td>ATKEYWORD	</td><td><code>@<var>{ident}</var></code></td></tr>
<tr><td>STRING		</td><td><code><var>{string}</var></code></td></tr>
<tr><td>BAD_STRING      </td><td><code><var>{badstring}</var></code></td></tr>
<tr><td>BAD_URI         </td><td><code><var>{baduri}</var></code></td></tr>
<tr><td>BAD_COMMENT     </td><td><code><var>{badcomment}</var></code></td></tr>
<tr><td>HASH		</td><td><code>#<var>{name}</var></code></td></tr>
<tr><td>NUMBER		</td><td><code><var>{num}</var></code></td></tr>
<tr><td>PERCENTAGE	</td><td><code><var>{num}</var>%</code></td></tr>
<tr><td>DIMENSION	</td><td><code><var>{num}{ident}</var></code></td></tr>
<tr><td>URI		</td><td><code>url\(<var>{w}{string}{w}</var>\)<br>
		|url\(<var>{w}</var>([!#$%&amp;*-\[\]-~]|<var>{nonascii}</var>|<var>{escape}</var>)*<var>{w}</var>\)</code></td></tr>
<tr><td>UNICODE-RANGE	</td><td><code>u\+[0-9a-f?]{1,6}(-[0-9a-f]{1,6})?</code></td></tr>
<tr><td>CDO		</td><td><code>&lt;!--</code></td></tr>
<tr><td>CDC		</td><td><code>--&gt;</code></td></tr>
<tr><td>:		</td><td><code>:</code></td></tr>
<tr><td>;		</td><td><code>;</code></td></tr>
<tr><td>{		</td><td><code>\{</code></td></tr>
<tr><td>}		</td><td><code>\}</code></td></tr>
<tr><td>(		</td><td><code>\(</code></td></tr>
<tr><td>)		</td><td><code>\)</code></td></tr>
<tr><td>[		</td><td><code>\[</code></td></tr>
<tr><td>]		</td><td><code>\]</code></td></tr>
<tr><td>S		</td><td><code>[ \t\r\n\f]+</code></td></tr>
<tr><td>COMMENT		</td><td><code>\/\*[^*]*\*+([^/*][^*]*\*+)*\/</code></td></tr>
<tr><td>FUNCTION	</td><td><code><var>{ident}</var>\(</code></td></tr>
<tr><td>INCLUDES	</td><td><code>~=</code></td></tr>
<tr><td>DASHMATCH	</td><td><code>|=</code></td></tr>
<tr><td>DELIM		</td><td><var>any other character not matched by
the above rules, and neither a single nor a double quote</var>
</td></tr></table>

<p>The macros in curly braces ({}) above are defined as follows:
</p>
<table>
<thead>
<tr><th>Macro	</th><th>Definition</th></tr>
</thead>
<tr><td colspan=2><hr></td></tr>
<tr><td>ident	</td><td><code>[-]?<var>{nmstart}</var><var>{nmchar}*</var></code></td></tr>
<tr><td>name	</td><td><code><var>{nmchar}+</var></code></td></tr>
<tr><td>nmstart	</td><td><code>[_a-z]|<var>{nonascii}</var>|<var>{escape}</var></code></td></tr>
<tr><td>nonascii</td><td><code>[^\0-\237]</code></td></tr>
<tr><td>unicode	</td><td><code>\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?</code></td></tr>
<tr><td>escape	</td><td><code><var>{unicode}</var>|\\[^\n\r\f0-9a-f]</code></td></tr>
<tr><td>nmchar	</td><td><code>[_a-z0-9-]|<var>{nonascii}</var>|<var>{escape}</var></code></td></tr>
<tr><td>num	</td><td><code>[0-9]+|[0-9]*\.[0-9]+</code></td></tr>
<tr><td>string	</td><td><code><var>{string1}</var>|<var>{string2}</var></code></td></tr>
<tr><td>string1	</td><td><code>\"([^\n\r\f\\"]|\\{nl}|<var>{escape}</var>)*\"</code></td></tr>
<tr><td>string2	</td><td><code>\'([^\n\r\f\\']|\\{nl}|<var>{escape}</var>)*\'</code></td></tr>
<tr><td>badstring   </td><td><code><var>{badstring1}</var>|<var>{badstring2}</var></code></td></tr>
<tr><td>badstring1  </td><td><code>\"([^\n\r\f\\"]|\\{nl}|<var>{escape}</var>)*\\?</code></td></tr>
<tr><td>badstring2  </td><td><code>\'([^\n\r\f\\']|\\{nl}|<var>{escape}</var>)*\\?</code></td></tr>
<tr><td>badcomment  </td><td><code><var>{badcomment1}</var>|<var>{badcomment2}</var></code></td></tr>
<tr><td>badcomment1 </td><td><code>\/\*[^*]*\*+([^/*][^*]*\*+)*</code></td></tr>
<tr><td>badcomment2 </td><td><code>\/\*[^*]*(\*+[^/*][^*]*)*</code></td></tr>
<tr><td>baduri      </td><td><code><var>{baduri1}</var>|<var>{baduri2}</var>|<var>{baduri3}</var></code></td></tr>
<tr><td>baduri1     </td><td><code>url\(<var>{w}</var>([!#$%&*-~]|<var>{nonascii}</var>|<var>{escape}</var>)*<var>{w}</var></code></td></tr>
<tr><td>baduri2     </td><td><code>url\(<var>{w}</var><var>{string}</var><var>{w}</var></code></td></tr>
<tr><td>baduri3     </td><td><code>url\(<var>{w}</var><var>{badstring}</var></code></td></tr>
<tr><td>nl	</td><td><code>\n|\r\n|\r|\f</code></td></tr>
<tr><td>w	</td><td><code>[ \t\r\n\f]*</code></td></tr>
</table>

<div class="example">
<p>For example, the rule of the longest match means that
"<code>red--&gt</code>" is tokenized as the IDENT "<code>red--</code>"
followed by the DELIM "<code>&gt;</code>", rather than as an IDENT
followed by a CDC.
</div>

<p>Below is the core syntax for CSS. The sections that follow describe
how to use it. <a href="grammar.html">Appendix G</a> describes a
more restrictive grammar that is closer to the CSS level 2 language.
Parts of style sheets that can be parsed according to this grammar but
not according to the grammar in Appendix G are among the parts that
will be ignored according to the <a href="#parsing-errors">rules for
handling parsing errors</a>.
</p>
<pre>
stylesheet  : [ CDO | CDC | S | statement ]*;
statement   : ruleset | at-rule;
at-rule     : ATKEYWORD S* any* [ block | ';' S* ];
block       : '{' S* [ any | block | ATKEYWORD S* | ';' S* ]* '}' S*;
ruleset     : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
selector    : any+;
declaration : property S* ':' S* value;
property    : IDENT;
value       : [ any | block | ATKEYWORD S* ]+;
any         : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
              | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
              | DASHMATCH | ':' | FUNCTION S* [any|unused]* ')'
              | '(' S* [any|unused]* ')' | '[' S* [any|unused]* ']'
              ] S*;
unused      : block | ATKEYWORD S* | ';' S* | CDO S* | CDC S*;
</pre>

<p>The "unused" production is not used in CSS and will not be used by
any future extension. It is included here only to help with error
handling. (See <a href="#parsing-errors">4.2 "Rules for handling
parsing errors."</a>)

<p><a name="comment">COMMENT</a> tokens do not occur
in the grammar (to keep it readable), but any number of these tokens
may appear anywhere outside other tokens. (Note, however, that a
comment before or within the @charset rule disables the @charset.)</p>

<p>The token S in the grammar above stands for <a
name="whitespace">white space</a>. Only the characters "space" (<!--Unicode
code 32-->U+0020), "tab" (U+0009), "line feed" (<!--10-->U+000A), "carriage return" (<!--13-->U+000D), and
"form feed" (<!--12-->U+000C) can occur in white space. Other space-like characters,
such as "em-space" (<!--8195-->U+2003) and "ideographic space" (<!--12288-->U+3000), are never part of white space.
</p>
<p>The meaning of input that cannot be tokenized or parsed is
undefined in CSS&nbsp;2.
</p>

<h3><a name="keywords">Keywords</a></h3>

<!-- provide better explanation of where keywords appear:
media types, at-rules, etc. -IJ -->

<p>Keywords have the form of <a
href="#value-def-identifier">identifiers.</a> Keywords must not be
placed between quotes ("..." or '...'). Thus,
</p>
<pre>
red
</pre>

<p>is a keyword, but
</p>
<pre>
"red"
</pre>

<p>is not. (It is a <a href="#strings">string</a>.) Other illegal examples:

<div class="illegal-example">
<pre><code>
width: "auto";
border: "none";
background: "red";
</code></pre>
</div>

<h4><a name="vendor-keywords">Vendor-specific extensions</a></h4>

<p>In CSS, identifiers may begin with '<code
class="css">-</code>' (dash) or '<code
class="css">_</code>' (underscore). Keywords
and <a href="#properties">property names</a> beginning
with <code class="css">-</code>' or '<code
class="css">_</code>' are reserved for vendor-specific extensions. Such vendor-specific extensions should have one of the following formats:
</p>
<pre>
'-' + vendor identifier + '-' + meaningful name
'_' + vendor identifier + '-' + meaningful name
</pre>
<div class="example">
<p>For example, if XYZ organization added a property to describe the color of the
border on the East side of the display, they might call it <span
class="css">-xyz-border-east-color</span>.
</p>
<p>Other known examples:</p>
<pre>
-moz-box-sizing
-moz-border-radius
-wap-accesskey
</pre>
</div>
<p>An initial dash or underscore is guaranteed never to be used in a property or keyword by any current or future level of CSS. Thus typical CSS implementations may not
recognize such properties and may ignore them according to the <a
href="#parsing-errors">rules for handling parsing errors</a>. However, because the initial dash or underscore is part of the grammar, CSS&nbsp;2 implementers should always be able to use a CSS-conforming parser, whether or not they support any vendor-specific extensions.
</p>

<p>Authors should avoid vendor-specific extensions</p>

<h4><a name="vendor-keyword-history">Informative Historical Notes</a></h4>
<p>This section is informative.</p>
<p>At the time of writing, the following prefixes are known to exist:</p>

<table border='1'>
<thead><tr><th>prefix</th><th>organization</th></tr></thead>
<tbody>
<tr><td><code>-ms-</code>, <code>mso-</code></td><td>Microsoft</td></tr>
<tr><td><code>-moz-</code></td><td>Mozilla</td></tr>
<tr><td><code>-o-</code>, <code>-xv-</code></td><td>Opera Software</td></tr>
<tr><td><code>-atsc-</code></td><td>Advanced Television Standards Committee</td></tr>
<tr><td><code>-wap-</code></td><td>The WAP Forum</td></tr>
<tr><td><code>-khtml-</code></td><td>KDE</td></tr>
<tr><td><code>-webkit-</code></td><td>Apple</td></tr>
<tr><td><code>prince-</code></td><td>YesLogic</td></tr>
<tr><td><code>-ah-</code></td><td>Antenna House</td></tr>
<tr><td><code>-hp-</code></td><td>Hewlett Packard</td></tr>
<tr><td><code>-ro-</code></td><td>Real Objects</td></tr>
<tr><td><code>-rim-</code></td><td>Research In Motion</td></tr>
<tr><td><code>-tc-</code></td><td>TallComponents</td></tr>
</tbody>
</table>

<h3><a name="characters">Characters and case</a></h3>
<p>  The following rules always hold:</p>

<ul>
    <li> All CSS syntax is <span class="index-inst" title="case
    sensitivity">case-insensitive</span> within the ASCII
    range (i.e., [a-z] and [A-Z] are equivalent), except for parts that are
    not under the control of CSS. For example, the case-sensitivity of
    values of the HTML attributes "id" and "class", of font names, and
    of URIs lies outside the scope of this specification. Note in
    particular that element names are case-insensitive in HTML, but
    case-sensitive in XML.
    </li>

    <li> In CSS, <span class="index-def"
    title="identifier|identifier, definition of"><a
    name="value-def-identifier"><dfn>identifiers</dfn></a></span>
    (including element names, classes, and IDs in <a
    href="selector.html">selectors</a>) can contain only the
    characters [a-zA-Z0-9] and ISO 10646 characters  U+00A0 and higher,
    plus the hyphen (-) and the underscore (_); they cannot start with
    a digit, two hyphens, or a hyphen followed by a digit.
    Identifiers can also contain escaped characters and any ISO 10646
    character as a numeric code (see next item).
    <span class="example">For instance, the identifier "B&amp;W?" may
    be written as "B\&amp;W\?" or "B\26 W\3F".</span>
    <p>Note that Unicode is code-by-code equivalent to ISO 10646 (see
    [[UNICODE]] and [[ISO10646]]).
    </p>
	</li>
    <li> In CSS&nbsp;2, a backslash (\) character can indicate one
    of three types of <span class="index-def" title="backslash
    escapes"> <a name="escaped-characters">character
    escape.</a></span> Inside a CSS comment, a backslash stands for
    itself, and if a backslash is immediately followed by the end of
    the style sheet, it also stands for itself (i.e., a DELIM token).

    <p>First, inside a <a href="#strings">string</a>, a backslash
    followed by a newline is ignored (i.e., the string is deemed not
    to contain either the backslash or the newline).
    Outside a string, a backslash followed by a newline stands for
    itself (i.e., a DELIM followed by a newline).

    <p>Second, it cancels the meaning of special CSS characters.
        Any character (except a
        hexadecimal digit, linefeed, carriage return, or form feed)
        can be escaped
        with a backslash to remove its special meaning.
        For example, <samp>"\""</samp> is a string consisting of one
        double quote. Style sheet preprocessors must not remove
       these backslashes from a style sheet since that would
       change the style sheet's meaning.
	</p>
    <p>Third, backslash escapes allow authors to refer to characters
    they cannot easily put in a document. In this case, the backslash
    is followed by at most six hexadecimal digits (0..9A..F), which
    stand for the ISO 10646 ([[ISO10646]]) 
    character with that number, which must not be zero. 
    (It is undefined in CSS&nbsp;2 what happens if a style sheet
    <em>does</em> contain a character with Unicode codepoint zero.)
    If a character in the range [0-9a-fA-F] follows the hexadecimal number,
    the end of the number needs to be made clear. There are two ways
    to do that:
	</p>
    <ol>
    <li>with a space (or other white space character): "\26 B" ("&amp;B").
        In this case, user agents should treat a "CR/LF" pair 
        (<!--13/10-->U+000D/U+000A) as a single white space character.</li>
    <li>by providing exactly 6 hexadecimal digits: "\000026B" ("&amp;B")</li>
    </ol>

    <p>In fact, these two methods may be combined. Only one white space
    character is ignored after a hexadecimal escape. Note that this means
    that a "real" space after the escape sequence must be
    doubled.
    </p>
    <p>If the number is outside the range allowed by Unicode (e.g.,
    "\110000" is above the maximum 10FFFF allowed in current Unicode),
    the UA may replace the escape with the "replacement character"
    (U+FFFD). If the character is to be displayed, the UA should show
    a visible symbol, such as a "missing character" glyph (cf. <a
    href="fonts.html#algorithm">15.2,</a> point 5).
	</li>
    <li class=note>Note: Backslash escapes are always
    considered to be part of an <a
    href="#value-def-identifier">identifier</a> or a string (i.e.,
    "\7B" is not punctuation, even though "{" is, and "\32" is allowed
    at the start of a class name, even though "2" is not).

    <p>The identifier "te\st" is exactly the same identifier as "test".
    </li>
  </ul>


<h3><a name="statements">Statements</a></h3>

<p> A CSS style sheet, for any level of CSS, consists of a list of
<span class="index-inst" title="statements"><em>statements</em></span>
(see the <a href="#tokenization">grammar</a> above). There are two
kinds of statements: <span
class="index-inst" title="at-rules"><em>at-rules</em></span>
and <span class="index-inst" title="rule sets"><em>rule
sets.</em></span> There may be <a href="#whitespace">white space</a>
around the statements.
</p>

<h3><span class="index-def" title="at-rule">
<a name="at-rules">At-rules</a></span></h3>

<p> At-rules start with an <dfn>at-keyword</dfn>, an '@' character
followed immediately by an <a
href="#value-def-identifier">identifier</a> (for example, '@import',
'@page').
</p>
<p> An at-rule consists of everything up to and including the next
semicolon (;) or the next <a href="#block">block,</a> whichever comes
first.
</p>

<p>CSS&nbsp;2 user agents must <span class="index-inst" title="ignore"><a
href="#ignore">ignore</a></span> any <a
href="cascade.html#at-import">'@import'</a> rule that occurs inside a <a
href="#block">block</a> or after any non-ignored statement other than an <span
class="index-inst">@charset</span> or an @import rule.
</p>

<div class="illegal-example"><p>
Assume, for example, that a CSS&nbsp;2 parser encounters this style sheet:
</p>
<pre><code>
@import "subs.css";
h1 { color: blue }
@import "list.css";
</code></pre>

<p> The second '@import' is illegal according to CSS&nbsp;2. The CSS&nbsp;2 parser
<span class="index-inst" title="ignore"><a href="#ignore">ignores</a></span>
the whole at-rule, effectively reducing the style sheet to:
</p>
<pre><code class="css">
@import "subs.css";
h1 { color: blue }
</code></pre>
</div>

<div class="illegal-example"><p>
In the following example, the second '@import' rule is invalid,
since it occurs inside a '@media' <a href="#block">block</a>.
</p>
<pre><code>
@import "subs.css";
@media print {
  @import "print-main.css";
  body { font-size: 10pt }
}
h1 {color: blue }
</code></pre>
<p>Instead, to achieve the effect of only importing a style sheet 
for 'print' media, use the @import rule with media syntax, e.g.:
</p>
<pre><code class="css">
@import "subs.css";
@import "print-main.css" print;
@media print {
  body { font-size: 10pt }
}
h1 {color: blue }
</code></pre>

</div>

<h3><a name="block">Blocks</a></h3>

<p> A <span class="index-inst" title="block"><em>block</em></span>
starts with a left curly brace ({) and ends with the matching right
curly brace (}). In between there may be any tokens, except that
parentheses ((&nbsp;)), brackets ([&nbsp;]), and braces ({&nbsp;}) must
always occur in
matching pairs and may be nested. Single (') and double quotes (")
<!-- " --> must also occur in matching pairs, and characters between them
are parsed as a <span class="index-inst" title="string">string</span>.
See <a href="#tokenization">Tokenization</a> above for the definition
of a string.
</p>

<div class="illegal-example">
<p> Here is an example of a block. Note that the right brace between
the double quotes does not match the opening brace of the block, and that the
second single quote is an <a href="#escaped-characters">escaped
character</a>, and thus does not match the first single quote:
</p>
<pre><code>
{ causta: "}" + ({7} * '\'') }
</code></pre>

<p>Note that the above rule is not valid CSS&nbsp;2, but it is still
a block as defined above.
</p>
</div>

<h3><a name="rule-sets">Rule sets, declaration blocks, and selectors</a></h3>

<p> A rule set (also called "rule") consists of a selector followed by
a declaration block.
</p>
<p> A <span class="index-def"
title="declaration block"><dfn>declaration block</dfn></span>
starts with a left curly
brace ({) and ends with the matching right curly brace (}). In between
there must be a list of zero or more semicolon-separated (;)
declarations.
</p>
<p>The <span class="index-def"
title="selector"><em>selector</em></span> (see also the section on <a
href="selector.html">selectors</a>) consists of everything up to (but
not including) the first left curly brace ({).  A selector always goes
together with a declaration block. When a user agent cannot parse the selector (i.e., it
is not valid CSS&nbsp;2), it must <span class="index-inst" title="ignore"><a
href="#ignore">ignore</a></span> the selector and the following
declaration block (if any) as well.
</p>
<p>CSS&nbsp;2 gives a special meaning to the comma (,) in
selectors. However, since it is not known if the comma may acquire
other meanings in future updates of CSS, the whole statement should
be <span class="index-inst" title="ignore"><a
href="#ignore">ignored</a></span> if there is an error anywhere in the
selector, even though the rest of the selector may look reasonable in
CSS&nbsp;2.
</p>
<div class=illegal-example>
<p>For example, since the "&amp;" is not a valid token in a CSS&nbsp;2
selector, a CSS&nbsp;2 user agent must
<span class="index-inst" title="ignore"><a href="#ignore">ignore</a></span>
the whole second line, and not set the color of H3 to red:
</p>
<pre><code>
h1, h2 {color: green }
h3, h4 &amp; h5 {color: red }
h6 {color: black }
</code></pre>
</div>

<div class="example">
<p>Here is a more complex example. The first two pairs of curly braces
are inside a string, and do not mark the end of the selector. This is
a valid CSS&nbsp;2 rule.
</p>
<pre><code class="css">
p[example="public class foo\
{\
    private int x;\
\
    foo(int x) {\
        this.x = x;\
    }\
\
}"] { color: red }
</code></pre>
</div>

<h3><a name="declaration">Declarations</a> and <a
name="properties">properties</a></h3>

<p> A <span class="index-def"
title="declaration"><dfn>declaration</dfn></span> is either empty or
consists of a <span class="index-inst"
title="property">property name</span>, followed by a colon (:), followed by
a property value. Around each of these there may be <a
href="#whitespace">white space</a>.
</p>
<p>Because of the way selectors work, multiple declarations for the
same selector may be organized into semicolon (;) separated
groups.</p>

<div class="example"><p>
Thus, the following rules:</p>
<pre><code class="css">
h1 { font-weight: bold }
h1 { font-size: 12px }
h1 { line-height: 14px }
h1 { font-family: Helvetica }
h1 { font-variant: normal }
h1 { font-style: normal }
</code></pre>

<p>are equivalent to:</p>

<pre><code class="css">
h1 {
  font-weight: bold;
  font-size: 12px;
  line-height: 14px;
  font-family: Helvetica;
  font-variant: normal;
  font-style: normal
}
</code></pre>
</div>

<p>A property name is an <a
href="#value-def-identifier">identifier</a>. Any token may occur
in the property value.  Parentheses ("(&nbsp;)"), brackets ("[&nbsp;]"),
braces ("{&nbsp;}"), single
quotes ('), and double quotes (") <!-- " --> must come in matching
pairs, and semicolons not in strings must be <a
href="#escaped-characters">escaped</a>. Parentheses, brackets, and
braces may be nested. Inside the quotes, characters are parsed as a
string.
</p>
<p>The syntax of <span class="index-def" title="value">values</span>
is specified separately for each property, but in any case, values are
built from identifiers, strings, numbers, lengths, percentages, URIs,
colors, etc.
</p>
<p>A user agent must <span class="index-inst" title="ignore"><a
href="#ignore">ignore</a></span> a declaration with an invalid property
name or an invalid value. Every CSS property has its own syntactic
and semantic restrictions on the values it accepts.
</p>
<div class="illegal-example"><p>
For example, assume a CSS&nbsp;2 parser encounters this style sheet:
</p>
<pre><code>
h1 { color: red; font-style: 12pt }  /* Invalid value: 12pt */
p { color: blue;  font-vendor: any;  /* Invalid prop.: font-vendor */
    font-variant: small-caps }
em em { font-style: normal }
</code></pre>

<p> The second declaration on the first line has an invalid value
'12pt'. The second declaration on the second line contains an
undefined property 'font-vendor'. The CSS&nbsp;2 parser will <span
class="index-inst" title="ignore"><a href="#ignore">ignore</a></span> these
declarations, effectively reducing the style sheet to:
</p>
<pre class="example"><code class="css">
h1 { color: red; }
p { color: blue;  font-variant: small-caps }
em em { font-style: normal }
</code></pre>
</div>

<h3><a name="comments">Comments</a></h3>

<p><span class="index-inst" title="comments">Comments </span> begin
with the characters "/*" and end with the characters "*/". They may
occur anywhere outside other tokens,
and their contents have no influence on the rendering.  Comments may
not be nested.
</p>
<p>CSS also allows the SGML comment delimiters ("&lt;!--" and
"--&gt;") in certain places defined by the grammar, but they do not
delimit CSS
comments. They are permitted so that style rules appearing in an HTML
source document (in the STYLE element) may be hidden from pre-HTML 3.2
user agents. See the HTML 4 specification ([[-HTML4]]) for more information.
</p>

<h2><a name="parsing-errors">Rules for handling parsing
errors</a></h2>

<p>In some cases, user agents must ignore part of an illegal style
sheet. This specification defines <span class="index-def"
title="ignore"><a name="ignore"><dfn>ignore</dfn></a></span> to mean
that the user agent parses the illegal part (in order to find its
beginning and end), but otherwise acts as if it had not been there. 
CSS&nbsp;2 reserves for future updates of CSS all property:value combinations 
and @-keywords that do not contain an identifier beginning with dash or 
underscore. Implementations must ignore such combinations (other than those 
introduced by future updates of CSS).
</p>
<!-- How are "beginning" and "end" defined? -IJ -->

<p>To ensure that new properties and new values for existing
properties can be added in the future, user agents are required to
obey the following rules when they encounter the following
scenarios:</p>

<ul>
<li><strong>Unknown properties.</strong> User agents must <span
class="index-inst" title="ignore"><a href="#ignore">ignore</a></span> a <a
href="syndata.html#declaration">declaration</a> with an unknown
property. For example, if the style sheet is:

<pre class="illegal-example">
h1 { color: red; rotation: 70minutes }
</pre>

<p> the user agent will treat this as if the style sheet had been
</p>
<pre class="example"><code class="css">
h1 { color: red }
</code></pre>
</li>
<li id="illegalvalues"><strong>Illegal values.</strong> User agents must ignore a
declaration with an illegal value. For example:

<pre class="illegal-example"><code>
img { float: left }       /* correct CSS&nbsp;2 */
img { float: left here }  /* "here" is not a value of 'float' */
img { background: "red" } /* keywords cannot be quoted */
img { border-width: 3 }   /* a unit must be specified for length values */
</code></pre>

A CSS&nbsp;2 parser would honor the first rule and
<span class="index-inst" title="ignore"><a href="#ignore">ignore</a></span>
the rest, as if the style sheet had been:

<pre class="example"><code class="css">
img { float: left }
img { }
img { }
img { }
</code></pre>

<p>A user agent conforming to a future CSS specification may accept one or
more of the other rules as well.</p>
</li>
<li><strong>Malformed declarations.</strong> User agents must handle
unexpected tokens encountered while parsing a declaration by reading
until the end of the declaration, while observing the rules for matching
pairs of (), [], {}, "", and '', and correctly handling escapes. For
example, a malformed declaration may be missing a property name, colon (:), or
property value. The following are all equivalent:


<pre class="example"><code>
p { color:green }
p { color:green; color }  /* malformed declaration missing ':', value */
p { color:red;   color; color:green }  /* same with expected recovery */
p { color:green; color: } /* malformed declaration missing value */
p { color:red;   color:; color:green } /* same with expected recovery */
p { color:green; color{;color:maroon} } /* unexpected tokens { } */
p { color:red;   color{;color:maroon}; color:green } /* same with recovery */
</code></pre>

</li>


<li><strong>Malformed statements.</strong> User agents must handle
unexpected tokens encountered while parsing a statement by reading
until the end of the statement, while observing the rules for matching
pairs of (), [], {}, "", and '', and correctly handling escapes. For
example, a malformed statement may contain an unexpected closing brace
or at-keyword. E.g., the following lines are all ignored:

<!-- An unexpected token when parsing the stylesheet production is
considered to be the start of a (malformed) ruleset, which ends at
the next balanced {} pair at top level. -->

<pre>
p @here {color: red}     /* ruleset with unexpected at-keyword "@here" */
@foo @bar;               /* at-rule with unexpected at-keyword "@bar" */
}} {{ - }}               /* ruleset with unexpected right brace */
) ( {} ) p {color: red } /* ruleset with unexpected right parenthesis */
</pre>

<!-- Note that the ") (" in the last line do not count as a balanced
pair. -->

<li><strong>At-rules with unknown at-keywords.</strong> User agents must <span
class="index-inst" title="ignore"><a href="#ignore">ignore</a></span>
an invalid at-keyword together with everything following it, up to the
end of the block that contains the invalid at-keyword, or up to and
including the next semicolon (;), or up to and including the next
block ({...}), whichever comes first. For example, consider the
following:

<pre class="illegal-example"><code>
@three-dee {
  @background-lighting {
    azimuth: 30deg;
    elevation: 190deg;
  }
  h1 { color: red }
}
h1 { color: blue }
</code></pre>

<p> The '@three-dee' at-rule is not part of CSS&nbsp;2. Therefore, the whole
at-rule (up to, and including, the third right curly brace) is <span
class="index-inst" title="ignore"><a href="#ignore">ignored.</a></span> A
CSS&nbsp;2 user agent <span class="index-inst" title="ignore"><a
href="#ignore">ignores</a></span> it, effectively reducing the style sheet
to:</p>

<pre class="example"><code class="css">
h1 { color: blue }
</code></pre>

<p>Something inside an at-rule that is ignored because it is invalid,
such as an invalid declaration within an @media-rule, does not make
the entire at-rule invalid.
</p>

</li>

<li id=unexpected-eof><strong>Unexpected end of style sheet.</strong>
<p>
User agents must close all open constructs (for example: blocks, parentheses, brackets, rules, strings, and comments) at the end of the
style sheet. For example:
</p>
<pre class="illegal-example"><code>
  @media screen {
    p:before { content: 'Hello
</code></pre>
<p>
would be treated the same as:
</p>
<pre class="example"><code class="css">
  @media screen {
    p:before { content: 'Hello'; }
  }
</code></pre>
<p>
in a conformant UA.
</p>
</li>
<li><strong>Unexpected end of string.</strong>
<p>
   User agents must close strings upon reaching the end of a line
   (i.e., before an unescaped line feed, carriage return or form
   feed character), but
   then drop the construct (declaration or rule) in which the string
   was found. For example:
</p>
<pre><code>
      p {
        color: green;
        font-family: 'Courier New Times
        color: red;
        color: green;
      }
</code></pre>
<p>
   ...would be treated the same as:
</p>
<pre><code class="css">
      p { color: green; color: green; }
</code></pre>
<p>
   ...because the second declaration (from 'font-family' to the
   semicolon after 'color: red') is invalid and is dropped.
</p>
</li>
<li>See also <a href="#rule-sets">Rule sets, declaration blocks, and
selectors</a> for parsing rules for declaration blocks.
</li>
</ul>

<!--
<p>How to handle unparseable and untokenizable style sheets is
undefined in CSS&nbsp;2
</p>
-->

<h2><a name="values">Values</a></h2>

<h3><a name="numbers">Integers and real numbers</a></h3>

<p>Some value types may have integer values (denoted by <span
class="index-def" title="&lt;integer&gt;::definition of"><a
name="value-def-integer" class="value-def">&lt;integer&gt;</a></span>)
or real number values (denoted by <span class="index-def"
title="&lt;number&gt;::definition of"><a name="value-def-number"
class="value-def">&lt;number&gt;</a></span>).  Real numbers and
integers are specified in decimal notation only. An &lt;integer&gt;
consists of one or more digits "0" to "9". A &lt;number&gt; can either
be an &lt;integer&gt;, or it can be zero or more digits followed by a
dot (.) followed by one or more digits. Both integers and real numbers
may be preceded by a "-" or "+" to indicate the sign.
-0 is equivalent to 0 and is not a negative number.</p>

<p>Note that many properties that allow an integer or real number as a
value actually restrict the value to some range, often to a
non-negative value.
</p>

<h3><a name="length-units">Lengths</a></h3>

<p>Lengths refer to distance measurements.</p>

<p> The format of a length value (denoted by <span class="index-def"
title="&lt;length&gt;::definition of"><a name="value-def-length"
class="value-def">&lt;length&gt;</a></span> in this specification) is
a <span
class="value-inst-number">&lt;number&gt;</span> (with or without a
decimal point) immediately followed by a unit identifier (e.g., px,
em, etc.). After a zero length, the unit identifier is optional.
</p>
<p> Some properties allow negative length values, but this may
complicate the formatting model and there may be
implementation-specific limits. If a negative length value cannot be
supported, it should be converted to the nearest value that can be
supported.
</p>
<p>If a negative length value is set on a property that does not allow
   negative length values, the declaration is ignored.
</p>

<p>In cases where the <a href="cascade.html#usedValue">used</a>
length cannot be supported, user agents must approximate it in the
<a href="cascade.html#actual-value">actual value.</a>

<p><a name="absrel-units">There are two types of length units:
relative and absolute.</a> <span class="index-def" title="relative
units"><em>Relative length</em></span> units specify a length relative

to another length property. Style sheets that use relative units
can more easily scale from one output environment
to another.
</p>
<p>Relative units are:</p>
<ul>
<li><strong>em</strong>: the <span class="propinst-font-size">'font-size'</span> of the relevant font</li>
<li><strong>ex</strong>: the <span class="descinst">'x-height'</span> of the relevant font</li>

</ul>

<div class="example">
<pre><code class="css">
h1 { margin: 0.5em }      /* em */
h1 { margin: 1ex }        /* ex */
</code></pre>
</div>

<p>The <span class="index-def" title="em (unit)|quad width"><a
name="em-width">'em'</a></span> unit is equal to the computed value of
the <span class="propinst-font-size">'font-size'</span> property of
the element on which it is used. The exception is when 'em' occurs in
the value of the 'font-size' property itself, in which case it refers
to the font size of the parent element. It may be used for vertical or
horizontal measurement. (This unit is also sometimes called the
quad-width in typographic texts.)
</p>
<p>The <span class="index-def" title="x-height|ex (unit)"><a
name="ex">'ex'</a></span> unit is defined by the element's first available
font.
The exception is when 'ex' occurs in the value of the <span
class="propinst-font-size">'font-size'</span> property, in which case
it refers to the 'ex' of the parent element.

<p>The <span class="descinst-x-height">'x-height'</span> is so called
because it is often equal to the height of the lowercase "x". However,
an 'ex' is defined even for fonts that do not contain an "x".</p>
<p>The x-height of a font can be found in different ways. Some fonts
contain reliable metrics for the x-height. If reliable font metrics are
not available, UAs may determine the x-height from the height of a
lowercase glyph. One possible heuristic is to look at how far the glyph
for the lowercase "o" extends below the baseline, and subtract that value
from the top of its bounding box. In the cases where it is impossible or
impractical to determine the x-height, a value of 0.5em should be used.</p>
<div class="example">
<p>The rule:
</p>
<pre><code class="css">
h1 { line-height: 1.2em }
</code></pre>

<p>means that the line height of "h1" elements will be 20% greater
than the font size of the "h1" elements. On the other hand:
</p>
<pre><code class="css">
h1 { font-size: 1.2em }
</code></pre>

<p>means that the font-size of "h1" elements will be 20% greater than
the font size inherited by "h1" elements.</p>
</div>

<p>When specified for the root of the <a href="conform.html#doctree">
document tree</a> (e.g., "HTML" in HTML), 'em' and 'ex' refer to
the property's <a href="about.html#initial-value">initial value</a>.
</p>

<p>Child elements do not inherit the relative values specified for
their parent; they inherit the <a
href="cascade.html#computed-value">computed values</a>.</p>

<div class="example"><p> 
In the following rules, the computed <span
class="propinst-text-indent">'text-indent'</span> value of "h1" elements
will be 36px, not 45px, if "h1" is a child of the "body" element.
</p>
<pre><code class="css">
body {
  font-size: 12px;
  text-indent: 3em;  /* i.e., 36px */
}
h1 { font-size: 15px }
</code></pre>
</div>

<p><span class="index-def" title="absolute length"><em> Absolute

length</em></span>

units are fixed in relation to each other.
They are mainly useful
when the output
environment is known. The absolute units consist of the physical units
(in, cm, mm, pt, pc) and the px unit:

</p>
<ul>
<li><strong>in</strong>: inches &mdash; 1in is equal
                         to 2.54cm.</li>
<li><strong>cm</strong>: centimeters</li>
<li><strong>mm</strong>: millimeters</li>
<li><strong>pt</strong>: points &mdash; the points used by CSS are equal to
                         1/72nd of 1in. </li>
<li><strong>pc</strong>: picas &mdash; 1pc is equal
                         to 12pt.</li>
<li><strong>px</strong>: pixel units &mdash; 1px is equal to 0.75pt.</li>
</ul>


<p>For a CSS device, these dimensions are either anchored (i) by
relating the physical units to their physical measurements, or
(ii) by relating the pixel unit to the <i>reference pixel</i>.
For print media and similar high-resolution devices, the anchor unit
should be one of the standard physical units (inches, centimeters, etc).
For lower-resolution devices, and devices with unusual viewing distances,
it is recommended instead that the anchor unit be the pixel unit. For
such devices it is recommended that the pixel unit refer to the whole
number of device pixels that best approximates the reference pixel.

<p class="note">Note that if the anchor unit is the pixel unit,
the physical units might not match their physical measurements.
Alternatively if the anchor unit is a physical unit, the pixel
unit might not map to a whole number of device pixels.</p>

<p class="note">Note that this definition of the pixel unit and
the physical units differs from previous versions of CSS. In
particular, in previous versions of CSS the pixel unit and the
physical units were not related by a fixed ratio: the physical
units were always tied to their physical measurements while the
pixel unit would vary to most closely match the reference pixel.
(This change was made because too much existing content relies
on the assumption of 96dpi, and breaking that assumption breaks
the content.)

<p>The <span class="index-def" title="reference pixel|pixel"><em>reference pixel</em></span> is the
visual angle of one pixel on a device with a pixel density of 96dpi
and a distance from the reader of an arm's length. For a nominal arm's
length of 28 inches, the visual angle is therefore about 0.0213
degrees. For reading at arm's length, 1px thus corresponds to about
0.26&nbsp;mm (1/96&nbsp;inch).
</p>

<p>The image below illustrates the effect of viewing distance on
the size of a reference pixel: a reading distance of 71&nbsp;cm
(28&nbsp;inches) results in a reference pixel of 0.26&nbsp;mm,
while a reading distance of 3.5&nbsp;m (12&nbsp;feet) results in
a reference pixel of 1.3&nbsp;mm.
</p>

<div class="figure">
<p><img src="images/pixel1.png" alt="Showing that pixels must become
larger if the viewing distance increases"></p>
</div>

<p>This second image illustrates the effect of a device's resolution
on the pixel unit: an area of 1px by 1px is covered by a single dot
in a low-resolution device (e.g. a typical computer display), while
the same area is covered by 16 dots in a higher resolution device
(such as a printer).
</p>

<div class="figure">
<p><img src="images/pixel2.png" alt="Showing that more device pixels (dots)
are needed to cover a 1px by 1px area on a high-resolution device than
on a low-res one"></p>
</div>


<div class="example">
<pre><code class="css">
h1 { margin: 0.5in }      /* inches  */
h2 { line-height: 3cm }   /* centimeters */
h3 { word-spacing: 4mm }  /* millimeters */
h4 { font-size: 12pt }    /* points */
h4 { font-size: 1pc }     /* picas */
p  { font-size: 12px }    /* px */
</code></pre>
</div>

<h3> <a name="percentage-units">Percentages</a></h3>

<p> The format of a percentage value (denoted by <span
class="index-def" title="&lt;percentage&gt;::definition of"><a
name="value-def-percentage"
class="value-def">&lt;percentage&gt;</a></span> in this specification)
is a <span class="index-inst"
title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span> immediately
followed by '%'.
</p>
<p> Percentage values are always relative to another value, for
example a length. Each property that allows percentages also defines
the value to which the percentage refers. The value may be that of
another property for the same element, a property for an ancestor
element, or a value of the formatting context (e.g., the width of a <a
href="visuren.html#containing-block">containing block</a>). When a
percentage value is set for a property of the <a
href="conform.html#root">root</a> element and the percentage is
defined as referring to the inherited value of some property, the
resultant value is the percentage times the <a
href="about.html#initial-value">initial value</a> of that property.
</p>
<div class="example"><p> 
Since child elements (generally) inherit the <a
href="cascade.html#computed-value">computed values</a> of their parent, in
the following example, the children of the P element will inherit a
value of 12px for <span
class="propinst-line-height">'line-height'</span>, not the percentage
value (120%):
</p>
<pre><code class="css">
p { font-size: 10px }
p { line-height: 120% }  /* 120% of 'font-size' */
</code></pre>
</div>

<h3><a name="uri">URLs and URIs</a></h3>

<p>URI values (Uniform Resource Identifiers, see [[RFC3986]], which
includes URLs, URNs, etc) in this specification are denoted by <span
class="index-def" title="&lt;uri&gt;::definition of"><a
name="value-def-uri" class="value-def">&lt;uri&gt;</a></span>.  The
functional notation used to designate URIs in property values is
"url()", as in:
</p>
<div class="example">
<pre><code class="css">
body { background: url("http://www.example.com/pinkish.png") }
</code></pre>
</div>

<p> The format of a URI value is 'url(' followed by optional <a
href="#whitespace">white space</a> followed by an optional single quote
(') or double quote (") character followed by the URI
itself, followed by an optional single quote (') or double quote (")
character followed by optional white space followed by
')'. The two quote characters must be the same.
</p>
<div class="example"><p>An example without quotes:
</p>
<pre><code>
li { list-style: url(http://www.example.com/redball.png) disc }
</code></pre>
</div>

<p>
Some characters appearing in an unquoted URI, such as parentheses, 
white space characters, single quotes (') and double quotes 
(&quot;), must be escaped with a backslash so that the resulting URI value
is a URI token: '\(', '\)'.
</p> 
<p>Depending on the type of URI, it might also be possible to write
the above characters as URI-escapes (where "(" = %28, ")" = %29, etc.)
as described in [[RFC3986]].
</p>
<div class=note>
<p><em>Note that COMMENT tokens cannot occur within other tokens:
thus, "url(/*x*/pic.png)" denotes the URI "/*x*/pic.png", not
"pic.png".</em>
</div>

<p> In order to create modular style sheets that are not dependent on
the absolute location of a resource, authors may use relative URIs.
Relative URIs (as defined in [[RFC3986]]) are resolved to full URIs
using a base URI. RFC&nbsp;3986, section&nbsp;5, defines the normative
algorithm for this process. For CSS style sheets, the base URI is that
of the style sheet, not that of the source document.
</p>
<div class="example">
<p>For example, suppose the following rule:</p>

<pre><code class="css">
body { background: url("yellow") }
</code></pre>

<p>is located in a style sheet designated by the URI:</p>

<pre>http://www.example.org/style/basic.css</pre>

<p>The background of the source document's BODY will be tiled with
whatever image is described by the resource designated
by the URI
</p>
<pre>http://www.example.org/style/yellow</pre>
</div>

<p>User agents may vary in how they handle invalid URIs or URIs that
designate
unavailable or inapplicable resources.
</p>
<h3><a name="counter">Counters</a></h3>

<p><span class="index-def" title="&lt;counter&gt;, definition of"><a
name="value-def-counter">Counters</a></span> are denoted by
case-sensitive identifiers (see the <span
class="propinst-counter-increment">'counter-increment'</span> and
<span class="propinst-counter-reset">'counter-reset'</span>
properties). To refer to the value of a counter, the notation
<span class="index-def" title="counter()">
'counter(&lt;identifier&gt;)'</span> or 'counter(&lt;identifier&gt;,
&lt;'list-style-type'&gt;)', with optional white space separating the tokens,
is used. The default style is 'decimal'.
</p>
<p>To refer to a sequence of nested counters of the same name, the
notation is 'counters(&lt;identifier&gt;, &lt;string&gt;)' or
'counters(&lt;identifier&gt;, &lt;string&gt;, &lt;'list-style-type'&gt;)'
with optional white space separating the tokens.
</p>
<p>See <a href="generate.html#scope">"Nested counters and scope"</a>
in the chapter on <a href="generate.html">generated content</a> for
how user agents must determine the value or values of the counter. See
the definition of counter values of the <span
class="propinst-content">'content'</span> property for how it must
convert these values to a string.
</p>
<p>In CSS&nbsp;2, the values of counters can
only be referred to from the <span
class="propinst-content">'content'</span> property. Note that 'none'
is a possible &lt;'list-style-type'&gt;: 'counter(x,
none)' yields an empty string.
</p>
<div class="example">
<p>Here is a style sheet that numbers paragraphs (p) for each chapter
(h1). The paragraphs are numbered with roman numerals, followed by a
period and a space:
</p>
<pre><code class="css">
p {counter-increment: par-num}
h1 {counter-reset: par-num}
p:before {content: counter(par-num, upper-roman) ". "}
</code></pre>
</div>

<h3><a name="color-units">Colors</a></h3>
<p>
A <span class="index-def" title="&lt;color&gt;::definition of"><a
name="value-def-color" class="value-def">&lt;color&gt;</a></span>
is either a keyword or a numerical RGB specification.
</p>
<p> The list of color keywords is: aqua, black, blue, fuchsia,
gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal,
white, and yellow. These 17 colors have the following values:
</p>

<div class="colordiagram" id="TanteksColorDiagram20020613">
<div class="diagramrow">
<span class="colorsquare" style="background:maroon;color:white"><span class="colorname">maroon</span> #800000
</span><span class="colorsquare" style="background:red"><span class="colorname">red</span> #ff0000
</span><span class="colorsquare" style="background:orange"><span class="colorname">orange</span> #ffA500
</span><span class="colorsquare" style="background:yellow"><span class="colorname">yellow</span> #ffff00
</span><span class="colorsquare" style="background:olive;color:white"><span class="colorname">olive</span> #808000</span>
</div>
<div class="diagramrow">
<span class="colorsquare" style="background:purple;color:white"><span class="colorname">purple</span> #800080</span>
<span class="colorsquare" style="background:fuchsia"><span class="colorname">fuchsia</span> #ff00ff</span>
<span class="colorsquare" style="background:white"><span class="colorname">white</span> #ffffff</span>
<span class="colorsquare" style="background:lime"><span class="colorname">lime</span> #00ff00</span>
<span class="colorsquare" style="background:green;color:white"><span class="colorname">green</span> #008000</span>
</div>
<div class="diagramrow" style="padding:0 2.5em">
<span class="colorsquare" style="background:navy;color:white"><span class="colorname">navy</span> #000080</span>
<span class="colorsquare" style="background:blue"><span class="colorname">blue</span> #0000ff</span>
<span class="colorsquare" style="background:aqua"><span class="colorname">aqua</span> #00ffff</span>
<span class="colorsquare" style="background:teal;color:white"><span class="colorname">teal</span> #008080</span>
</div>
<div class="diagramrow" style="padding:0 5em">
<span class="colorsquare" style="background:black;color:white"><span class="colorname">black</span> #000000</span>
<span class="colorsquare" style="background:silver"><span class="colorname">silver</span> #c0c0c0</span>
<span class="colorsquare" style="background:gray;color:white"><span class="colorname">gray</span> #808080</span>
</div>
</div>

<p>
In addition to these color keywords, users may specify
keywords that correspond to the colors used by certain objects in the
user's environment. Please consult the section on <a
href="./ui.html#system-colors">system colors</a> for more information.
</p>

<div class="example">
<pre><code class="css">
body {color: black; background: white }
h1 { color: maroon }
h2 { color: olive }
</code></pre>
</div>

<p>The RGB color model is used in numerical color
specifications. These examples all specify the same color:
</p>
<div class="example">
<pre><code class="css">
em { color: #f00 }              /* #rgb */
em { color: #ff0000 }           /* #rrggbb */
em { color: rgb(255,0,0) }      
em { color: rgb(100%, 0%, 0%) } 
</code></pre>
</div>

<p> The format of an RGB value in hexadecimal notation is a '#'
immediately followed by either three or six hexadecimal
characters. The three-digit RGB notation (#rgb) is converted into
six-digit form (#rrggbb) by replicating digits, not by adding
zeros. For example, #fb0 expands to #ffbb00. This ensures that
white (#ffffff) can be specified with the short notation (#fff) and
removes any dependencies on the color depth of the display.
</p>
<p> The format of an RGB value in the functional notation is 'rgb('
followed by a comma-separated list of three numerical values (either
three integer values or three percentage values) followed by ')'.
The integer value 255 corresponds to 100%, and to F or FF in the
hexadecimal notation: rgb(255,255,255) = rgb(100%,100%,100%) =
#FFF. <a href="#whitespace">White space</a> characters are allowed
around the numerical values.
</p>
<p>All RGB colors are specified in the sRGB color space (see
[[SRGB]]).  User agents may vary in the fidelity with which they
represent these colors, but using sRGB provides an unambiguous and
objectively measurable definition of what the color should be, which
can be related to international standards (see [[COLORIMETRY]]).
</p>
<p><a href="conform.html#conformance">Conforming user agents</a> may
limit their color-displaying efforts to performing a gamma-correction
on them. sRGB specifies a display gamma of 2.2 under specified viewing
conditions. User agents should adjust the colors given in CSS such that,
in combination with an output device's "natural" display gamma, an
effective display gamma of 2.2 is produced. <!--See the section on <a
href="colors.html#gamma-correction">gamma correction</a> for further
details.--> Note that only colors specified in CSS are affected; e.g.,
images are expected to carry their own color information.
</p>
<p>Values outside the device gamut should be clipped or
mapped into the gamut when the gamut is known: the red, green,
and blue values must be changed to fall within the range supported by
the device. User agents may perform higher quality mapping of colors
from one gamut to another. For a typical CRT monitor, whose device
gamut is the same as sRGB, the four rules below are equivalent:
</p>
<div class="example">
<pre><code class="css">
em { color: rgb(255,0,0) }       /* integer range 0 - 255 */
em { color: rgb(300,0,0) }       /* clipped to rgb(255,0,0) */
em { color: rgb(255,-10,0) }     /* clipped to rgb(255,0,0) */
em { color: rgb(110%, 0%, 0%) }  /* clipped to rgb(100%,0%,0%) */
</code></pre>
</div>

<p>Other devices, such as printers, have different gamuts than sRGB;
some colors outside the 0..255 sRGB range will be representable
(inside the device gamut), while other colors inside the 0..255 sRGB
range will be outside the device gamut and will thus be mapped.
</p>
<div class=note><p><em><strong>Note.</strong> Mapping or clipping of
color values should be done to the actual device gamut if known (which
may be larger or smaller than 0..255).</em>
</div>

<h3><a name="strings">Strings</a></h3>

<p><span class="index-def" title="&lt;string&gt;, definition of"><a
name="value-def-string">Strings</a></span> can either be written
with double quotes or with single quotes. Double quotes cannot occur
inside double quotes, unless escaped (e.g., as '\"' or as
'\22'). Analogously for single quotes (e.g., "\'" or "\27"). 
</p>
<div class="example">
<pre>
"this is a 'string'"
"this is a \"string\""
'this is a "string"'
'this is a \'string\''
</pre>
</div>

<p>A string cannot directly contain a <span class="index-inst"
title="newline">newline</span>. 
To include a newline in a string, use an escape representing the line feed 
character in ISO-10646 (U+000A), such as "\A" or "\00000a". 
This character represents the generic notion of "newline" in CSS.
See the <span
class="propinst-content">'content'</span> property for an example.
</p>
<p>It is possible to break strings over several lines, for aesthetic
or other reasons, but in such a case the newline itself has to be
escaped with a backslash (\). For instance, the following two
selectors are exactly the same:
</p>
<div class="example">
<pre><code class="css">
a[title="a not s\
o very long title"] {/*...*/}
a[title="a not so very long title"] {/*...*/}
</code></pre>
</div>

<h3><a name="unsupported-values">Unsupported Values</a></h3>

<p>If a UA does not support a particular value, it should <em>ignore</em> that
  value when parsing style sheets, as if that value was an 
  <a href="#illegalvalues">illegal value</a>.  For example:
</p>
<div class="example">
<pre><code class="css">
  h3 {
    display: inline;
    display: run-in;
  }
</code></pre>
</div>
<p>  
A UA that supports the 'run-in' value for the 'display' property will
accept the first display declaration and then "write over" that value with
the second display declaration. A UA that does not support the 'run-in'
value will process the first display declaration and ignore the second
display declaration.
</p>


<h2><a name="charset">CSS style sheet representation</a></h2>

<p>A CSS style sheet is a sequence of characters from the Universal
Character Set (see [[ISO10646]]). For transmission and
storage, these characters must be <span class="index-def"
title="character encoding">encoded</span> by a character encoding that
supports the set of characters available in US-ASCII (e.g., UTF-8, ISO
8859-x, SHIFT JIS, etc.).  For a good introduction to character sets
and character encodings, please consult the HTML 4
specification ([[-HTML4]], chapter 5). See also the XML 1.0
specification ([[-XML10]], sections 2.2 and 4.3.3, and Appendix F).
</p>
<p>When a style sheet is embedded in another document, such as in the
STYLE element or "style" attribute of HTML, the style sheet shares the
character encoding of the whole document.
</p>
<p>When a style sheet resides in a separate file, user agents must
observe the following <span class="index-inst" title="character
encoding::user agent's determination of">priorities</span> when
determining a style sheet's <span class="index-inst" title="character
encoding::default|default::character encoding">character
encoding</span> (from highest priority to lowest):
</p>
<ol>
<li>An HTTP "charset" parameter in a "Content-Type" field
(or similar parameters in other protocols)</li>
<li><span class="index-inst">BOM</span> and/or <span
class="index-inst">@charset</span> (see below)</li>
<li><code>&lt;link charset=""&gt;</code> or other metadata from the linking mechanism (if any)</li>
<li>charset of referring style sheet or document (if any)</li>
<li>Assume UTF-8</li>
</ol>

<p>Authors using an <span class="index-inst">@charset</span> rule must
place the rule at the very beginning of the style sheet, preceded by
no characters. (If a byte order mark is appropriate for the encoding
used, it may precede the @charset rule.)
</p>

<p>After <span class="index-def">"@charset"</span>, authors specify
the name of a character encoding (in quotes). For example:
</p>

<pre class="example"><code class="css">@charset "ISO-8859-1";</code></pre>

<p>@charset must be written literally, i.e., the 10 characters
'@charset "' (lowercase, no backslash escapes), followed by the
encoding name, followed by '";'.
</p>

<p>The name must be a charset name as described in the IANA registry.
See [[-CHARSETS]] for a complete list of charsets. Authors should use
the charset names marked as "preferred MIME name" in the IANA
registry.
</p>

<p>User agents must support at least the <span
class="index-inst">UTF-8</span> encoding.
</p>
<p>User agents must ignore any @charset rule not at the beginning of the
style sheet. When user agents detect the character encoding using the
BOM and/or the @charset rule, they should follow the following rules:
</p>

<ul>

<li>Except as specified in these rules, all @charset rules are ignored.</li>

<li>The encoding is detected based on the stream of bytes that begins
the style sheet.  The following table gives a set of possibilities for
initial byte sequences (written in hexadecimal).  The first row that
matches the beginning of the style sheet gives the result of encoding
detection based on the BOM and/or @charset rule.  If no rows match, the
encoding cannot be detected based on the BOM and/or @charset rule.  The
notation (...)* refers to repetition for which the best match is the one
that repeats as few times as possible.  The bytes marked "XX" are those
used to determine the name of the encoding, by treating them, in the
order given, as a sequence of ASCII characters.  Bytes marked "YY" are
similar, but need to be transcoded into ASCII as noted.  User agents may
ignore entries in the table if they do not support any encodings
relevant to the entry.

<table border="1"
  summary="Relationship between initial bytes of sheet and chosen encoding">
<tr><th scope="col">Initial Bytes</th><th scope="col">Result</th></tr>
<tr><td>EF BB BF 40 63 68 61 72 73 65 74 20 22 (XX)* 22 3B</td><td>as specified</td></tr>
<tr><td>EF BB BF</td><td>UTF-8</td></tr>
<tr><td>40 63 68 61 72 73 65 74 20 22 (XX)* 22 3B</td><td>as specified</td></tr>
<tr><td>FE FF 00 40 00 63 00 68 00 61 00 72 00 73 00 65 00 74 00 20 00 22 (00 XX)* 00 22 00 3B</td><td>as specified (with BE endianness if not specified)</td></tr>
<tr><td>00 40 00 63 00 68 00 61 00 72 00 73 00 65 00 74 00 20 00 22 (00 XX)* 00 22 00 3B</td><td>as specified (with BE endianness if not specified)</td></tr>
<tr><td>FF FE 40 00 63 00 68 00 61 00 72 00 73 00 65 00 74 00 20 00 22 00 (XX 00)* 22 00 3B 00</td><td>as specified (with LE endianness if not specified)</td></tr>
<tr><td>40 00 63 00 68 00 61 00 72 00 73 00 65 00 74 00 20 00 22 00 (XX 00)* 22 00 3B 00</td><td>as specified (with LE endianness if not specified)</td></tr>
<tr><td>00 00 FE FF 00 00 00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 (00 00 00 XX)* 00 00 00 22 00 00 00 3B</td><td>as specified (with BE endianness if not specified)</td></tr>
<tr><td>00 00 00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 (00 00 00 XX)* 00 00 00 22 00 00 00 3B</td><td>as specified (with BE endianness if not specified)</td></tr>
<tr><td>00 00 FF FE 00 00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 00 (00 00 XX 00)* 00 00 22 00 00 00 3B 00</td><td>as specified (with 2143 endianness if not specified)</td></tr>
<tr><td>00 00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 00 (00 00 XX 00)* 00 00 22 00 00 00 3B 00</td><td>as specified (with 2143 endianness if not specified)</td></tr>
<tr><td>FE FF 00 00 00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 00 00 (00 XX 00 00)* 00 22 00 00 00 3B 00 00</td><td>as specified (with 3412 endianness if not specified)</td></tr>
<tr><td>00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 00 00 (00 XX 00 00)* 00 22 00 00 00 3B 00 00</td><td>as specified (with 3412 endianness if not specified)</td></tr>
<tr><td>FF FE 00 00 40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 00 00 00 (XX 00 00 00)* 22 00 00 00 3B 00 00 00</td><td>as specified (with LE endianness if not specified)</td></tr>
<tr><td>40 00 00 00 63 00 00 00 68 00 00 00 61 00 00 00 72 00 00 00 73 00 00 00 65 00 00 00 74 00 00 00 20 00 00 00 22 00 00 00 (XX 00 00 00)* 22 00 00 00 3B 00 00 00</td><td>as specified (with LE endianness if not specified)</td></tr>
<tr><td>00 00 FE FF</td><td>UTF-32-BE</td></tr>
<tr><td>FF FE 00 00</td><td>UTF-32-LE</td></tr>
<tr><td>00 00 FF FE</td><td>UTF-32-2143</td></tr>
<tr><td>FE FF 00 00</td><td>UTF-32-3412</td></tr>
<tr><td>FE FF</td><td>UTF-16-BE</td></tr>
<tr><td>FF FE</td><td>UTF-16-LE</td></tr>
<tr><td>7C 83 88 81 99 A2 85 A3 40 7F (YY)* 7F 5E</td><td>as specified, transcoded from EBCDIC to ASCII</td></tr>
<tr><td>AE 83 88 81 99 A2 85 A3 40 FC (YY)* FC 5E</td><td>as specified, transcoded from IBM1026 to ASCII</td></tr>
<tr><td>00 63 68 61 72 73 65 74 20 22 (YY)* 22 3B</td><td>as specified, transcoded from GSM 03.38 to ASCII</td></tr>
<tr><td>analogous patterns</td><td>User agents may
    support additional, analogous, patterns if they support encodings
    that are not handled by the patterns here</td></tr>
</table>

</li>

<li>If the encoding is detected based on one of the entries in the table
above marked "as specified", the user agent ignores the style sheet if it
does not parse an appropriate @charset rule at the beginning of the
stream of characters resulting from decoding in the chosen @charset.
This ensures that:
  <ul>
    <li>@charset rules should only function if they are in the
    encoding of the style sheet,</li>
    <li>byte order marks are ignored only
    in encodings that support a byte order mark, and</li>
    <li>encoding names cannot contain newlines.</li>
  </ul>
</li>

</ul>

<p>User agents must ignore style sheets in unknown encodings.</p>

<h3><a name="escaping">Referring to characters not represented in a character encoding</a></h3>

<p>A style sheet may have to refer to characters that cannot be
represented in the current character encoding.  These characters must
be written as <a href="#escaped-characters">escaped</a> references to
ISO 10646 characters. These escapes serve the same purpose as numeric
character references in HTML or XML documents (see [[HTML4]],
chapters 5 and 25).
</p>
<p>The character escape mechanism should be used when only a few
characters must be represented this way. If most of a style sheet
requires escaping, authors should encode it with a more appropriate
encoding (e.g., if the style sheet contains a lot of Greek characters,
authors might use "ISO-8859-7" or "UTF-8").
</p>
<p>Intermediate processors using a different character encoding may
translate these escaped sequences into byte sequences of that
encoding. Intermediate processors must not, on
the other hand, alter escape sequences that cancel the special meaning
of an ASCII character.
</p>
<p><a href="conform.html#conformance">Conforming user agents</a> must
correctly map to ISO-10646 all characters in any character encodings
that they recognize (or they must behave as if they did).
</p>
<p>For example, a style sheet transmitted as ISO-8859-1
(Latin-1) cannot contain Greek letters directly:
"&#954;&#959;&#965;&#961;&#959;&#962;" (Greek: "kouros") has to be
written as "\3BA\3BF\3C5\3C1\3BF\3C2".
</p>
<div class="note"><p>
<em><strong>Note.</strong>
In HTML 4,
numeric character references are interpreted in "style" attribute
values but not in the content of the STYLE element. Because of this
asymmetry, we recommend that authors use the CSS character
escape mechanism rather than numeric character references
for both the "style" attribute and the STYLE element.
For example, we recommend:</em></p>

<pre class="html-example"><code class="html">
&lt;SPAN style="font-family: L\FC beck"&gt;...&lt;/SPAN&gt;
</code></pre>

<p><em>rather than:</em></p>

<pre class="html-example"><code class="html">
&lt;SPAN style="font-family: L&amp;#252;beck"&gt;...&lt;/SPAN&gt;
</code></pre>
</div>

</body>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->

