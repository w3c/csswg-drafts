<pre class="metadata">
Title: CSS Overflow Module Level 5
Status: ED
Work Status: Revising
ED: https://drafts.csswg.org/css-overflow-5/
Shortname: css-overflow
Group: csswg
Level: 5
Editor: Florian Rivoal, On behalf of Bloomberg, http://florian.rivoal.net/, w3cid 43241
Editor: Elika J. Etemad / fantasai, Apple, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Robert Flack, Google, flackr@google.com, w3cid 98451
Abstract: This module contains the features of CSS relating to scrollable overflow handling in visual media.
	It builds on the <a href="https://www.w3.org/TR/css-overflow-4/">CSS Overflow Module Level 4</a>,
	adding an appendix containing an experimental exploration
	of <a href="#fragmentation">redirecting overflow by fragmentation</a>.
</pre>
<pre class="link-defaults">
type: dfn; spec:css-multicol-1; text:overflow column
spec:css-pseudo-4; type:selector; text:::first-letter
spec:css-pseudo-4; type:selector; text:::first-line
spec:css-writing-modes-4; type:dfn; text:start
spec:css-writing-modes-4; type:dfn; text:end
</pre>
<pre class="anchors">
url: https://drafts.csswg.org/selectors-3/#subject; type: dfn; text: subject;
url: https://www.w3.org/TR/CSS21/visudet.html#strut; type: dfn; text: strut;
</pre>
	<style>
		table.source-demo-pair {
			width: 100%;
		}

		.in-cards-demo {
			width: 13em;
			height: 8em;

			padding: 4px;
			border: medium solid blue;
			margin: 6px;

			font: medium/1.3 Times New Roman, Times, serif;
			white-space: nowrap;
		}

		.bouncy-columns-demo {
			width: 6em;
			height: 10em;
			float: left;
			margin: 1em;
			font: medium/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.bouncy-columns-demo.one {
			background: aqua; color: black;
			transform: rotate(-3deg);
		}
		.bouncy-columns-demo.two {
			background: yellow; color: black;
			transform: rotate(3deg);
		}

		.article-font-inherit-demo {
			font: 1em/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.article-font-inherit-demo.one {
			width: 12em;
			font-size: 1.5em;
			margin-bottom: 1em;
			height: 4em;
		}
		.article-font-inherit-demo.two {
			width: 11em;
			margin-left: 5em;
			margin-right: 2em;
		}

		.dark-columns-demo {
			width: 6em;
			height: 10em;
			float: left;
			margin-right: 1em;
			font: medium/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.dark-columns-demo.one {
			background: aqua; color: black;
		}
		.dark-columns-demo.one :link {
			color: blue;
		}
		.dark-columns-demo.one :visited {
			color: purple;
		}
		.dark-columns-demo.two {
			background: navy; color: white;
		}
		.dark-columns-demo.two :link {
			color: aqua;
		}
		.dark-columns-demo.two :visited {
			color: fuchsia;
		}

		.article-max-lines-demo {
			font: 1em/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.article-max-lines-demo.one::first-letter {
			font-size: 2em;
			line-height: 0.9;
		}
		.article-max-lines-demo.one {
			font-size: 1.5em;
			width: 16em;
		}
		.article-max-lines-demo.two {
			width: 11.5em;
			float: left; margin-right: 1em;
		}
		.article-max-lines-demo.three {
			width: 11.5em;
			float: left;
		}
		.awesome-table td { padding: 5px; }
		.awesome-table {
			color: #000;
			background: #fff;
			margin: auto;
		}
	</style>

<h2 id="intro">
Introduction</h2>

	This specification extends [[!CSS-OVERFLOW-4]].

	: [[#scroll-marker-group|Scroll marker groups]]
	::
		This section defines pseudo-elements for automatically constructed [[#scroll-navigation|scroll navigation controls]].

	: [[#fragmentation|Redirection of Overflow]]
	::
		This section defines a highly experimental, exploratory new model
		for handling overflow by redirecting it into newly-generated [=fragmentation containers=].

	: [[#scroll-navigation|Scroll navigation controls]]
	::
		This section defines stylable scroll navigation controls
		with defined user interactions and accessible labels.


Note: At the time of writing, [[CSS-OVERFLOW-4]] is not completely finalized yet.
To avoid accidental divergences and maintenance overhead,
This specification is written as a delta specification over css-overflow Level 4.
Once the level 4 specification is final,
its content will be integrated into this specification,
which will then replace it.
Until then, this specification only contains additions and extensions to level 4.

<h3 id="scroll-marker-group">
Overflow Controls: the 'scroll-marker-group' property and pseudo-elements</h3>

	<pre class=propdef>
	Name: scroll-marker-group
	Value: none | before | after
	Initial: none
	Applies to: [=scroll containers=]
	Inherited: no
	Computed value: specified value
	Animation Type: discrete
	Canonical Order: per grammar
	</pre>

	The 'scroll-marker-group' property specifies whether the [=scroll container=] should have a '::scroll-marker-group' pseudo-element created,
	and its position relative to the scroll container.

	<dl dfn-type=value dfn-for=scroll-marker-group>
		<dt><dfn>none</dfn>
		<dd>
			The [=scroll container=] does not create a '::scroll-marker-group' pseudo-element.

		<dt><dfn>before</dfn>
		<dd>
			The [=scroll container=] generates a ''::scroll-marker-group'' pseudo-element
			whose box is an immediate preceding sibling to its [=originating element=].

		<dt><dfn>after</dfn>
		<dd>
			The [=scroll container=] generates a ''::scroll-marker-group'' pseudo-element
			whose box is an immediate following sibling to its [=originating element=].

	</dl>

<h4 id="scroll-marker-group-pseudo">The ''::scroll-marker-group'' pseudo-element</h4>

	The <dfn selector>::scroll-marker-group</dfn> pseudo-element box
	is generated by a [=scroll container=] element
	having a computed 'scroll-marker-group' property that is not 'none',
	representing a stylable sibling pseudo-element immediately adjacent to the [=scroll container=].

	The following additions are recommended for the default UA stylesheet
	to ensure that the generation of scroll marker pseudo-elements does not invalidate the layout of the site:

	<pre class="lang-css">
		/* The generation of ::scroll-marker pseudo-elements cannot invalidate layout outside of this pseudo-element. */
		::scroll-marker-group { contain: size !important; }
	</pre>

<h4 id="scroll-marker-pseudo">The ''::scroll-marker'' pseudo-element</h4>

	When the computed 'content' value of a <dfn selector>::scroll-marker</dfn> pseudo-element is not 'none'
	and its nearest ancestor [=scroll container=] [=scroll container=] has a computed 'scroll-marker-group' property that is not 'none',
	the pseudo-element generates a box attached as a child of the ''::scroll-marker-group'' pseudo-element's generated box
	on its nearest ancestor [=scroll container=].
	These boxes are added in the [=tree order=] of their <a>originating element</a>.

	These pseudo-elements behave as a <{button}>
	with {{HTMLButtonElement/scrollTargetElement}} set to its <a>originating element</a>.
	They can be focused and invoked.

<h2 id="fragmentation" class=no-num>
Appendix A: Redirection of Overflow</h2>

	<!-- Abstract: This module contains the features of CSS relating to new mechanisms of overflow handling in visual media (e.g., screen or paper).  In interactive media, it describes features that allow the overflow from a fixed size container to be handled by pagination (displaying one page at a time).  It also describes features, applying to all visual media, that allow the contents of an element to be spread across multiple fragments, allowing the contents to flow across multiple regions or to have different styles for different fragments. -->

	ISSUE: This section is highly experimental.
	It documents current attempts
	at extending the capabilities of the 'continue' property
	to solve additional use cases.
	However, it does not currently have consensus.
	It is presented here to encourage discussion,
	but non-experimental implementation is not recommended.

	<p>
		In CSS Level 1 [[CSS1]], placing more content than would fit
		inside an element with a specified size
		was generally an authoring error.
		Doing so caused the content to extend
		outside the bounds of the element,
		which would likely cause
		that content to overlap with other elements.
	</p>

	<p>
		CSS Level 2 [[CSS2]] introduced the 'overflow' property,
		which allows authors to have overflow be handled by scrolling,
		which means it is no longer an authoring error.
		It also allows authors to specify
		that overflow is handled by clipping,
		which makes sense when the author's intent
		is that the content not be shown.
		This was further refined in the CSS Overflow Module Level 3 [[CSS-OVERFLOW-3]].
	</p>

	<p>
		However, scrolling is not the only way
		to present large amounts of content,
		and may even not be the optimal way.
		After all, the codex replaced the scroll
		as the common format for large written works
		because of its advantages.
	</p>

	<p>
		This specification introduces
		a mechanism for Web pages to specify
		that an element of a page should handle overflow
		through pagination rather than through scrolling.
	</p>

	<p>
		This specification also extends the concept of overflow
		in another direction.
		Instead of requiring that authors specify a single area
		into which the content of an element must flow,
		this specification allows authors to specify multiple fragments,
		each with their own dimensions and styles,
		so that the content of the element can flow from one to the next,
		using as many as needed to place the content without overflowing.
	</p>

	<p>
		In both of these cases, implementations must
		break the content in the block-progression dimension.
		Implementations must do this is described
		in the CSS Fragmentation Module [[!CSS-BREAK-3]].
	</p>

<h3 id="channelling-overflow">
Channeling Overflow: the 'continue' property</h3>

The 'continue' property gives authors the ability
to request that content that does not fit inside an element
be fragmented (in the sense of [[!CSS-BREAK-3]]),
and provides alternatives
for where the remaining content should continue.

Notably, this property explains traditional pagination,
and extends it further.

	<pre class="propdef partial">
		Name: continue
		New Values: overflow | paginate | fragments
		Initial: auto
		Applies to: block containers [[!CSS2]], flex containers [[!CSS3-FLEXBOX]], and grid containers [[!CSS3-GRID-LAYOUT]]
		Inherited: no
		Percentages: N/A
		Computed value: see below
		Animation type: discrete
	</pre>

Issue: The naming of this property and its values is preliminary.
This was initially proposed as
"fragmentation: auto | none | break | clone | page"
in <a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html">https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html</a>,
and there is not yet wide agreement as to which naming is better.

Issue: This property is meant to generalize and replace 'region-fragment'.
Once it is sufficiently stable in this specification,
'region-fragment' should be removed from the regions specification in favor of this.

Note: ''continue: fragments'' replaces "overflow:fragments"
from earlier versions of this specification,
while ''continue: paginate'' replaces "overflow: paged-x | paged-y | paged-x-controls | paged-y-controls"

	<dl dfn-for="continue" dfn-type="value">
		<dt>auto
		<dd>''continue/auto'' may only occur as a computed value
		if the element is a <a spec="css-regions">CSS Region</a>
		other than the last one in a <a spec="css-regions">region chain</a>.
		Content that doesn't fit is pushed to the next region of the chain.

		In all other cases, ''continue/auto'' computes to one of the other values.

		Issue: this is different from the definition in [[css-overflow-4#continue]],
		where the specified value is the computed value.
		Which is model better?

		<dt><dfn>overflow</dfn>
		<dd>Content that doesn't fit overflows, according to the 'overflow' property

		<dt><dfn>paginate</dfn>
		<dd>Content that doesn't fit paginates.
		This creates a paginated view inside the element
		similar to the way that 'overflow: scroll' creates a scrollable view.

		See <a href="#paginated-overflow">paginated overflow</a>

		Note: Print is effectively "continue: paginate" on the root.
		<dt><dfn>fragments</dfn>
		<dd>content that doesn't fit causes the element to copy itself and continue laying out.

		See <a href="#fragment-overflow">fragment overflow</a>.
	</dl>

The computed value of the 'continue' for a given element or pseudo element is determined as follow:
<ol>
	<li>On elements or pseudo elements with <a>layout containment</a> (see [[!CSS-CONTAIN-1]]),
	if the specified value is ''continue/auto'' or ''continue/fragments''
	then the computed value is ''continue/overflow''.
	<li>Otherwise, if the specified value is ''continue/auto''
	<ol>
		<li>On a <a spec="css-regions">CSS Region</a> other than the last one in a <a spec="css-regions">region chain</a>,
		the computed value is ''continue/auto''
		<li>On a page
		the computed value is ''continue/paginate''
		<li>On a <a>fragment box</a>
		the computed value is ''continue/fragments''
		<li>Otherwise, the computed value is ''continue/overflow''
	</ol>
	<li>Otherwise, if the specified value is ''continue/fragments''
	<ol>
		<li>On a page
		the computed value is ''continue/paginate''
		<li>Otherwise, the computed value is the specified value
	</ol>
	<li>In all other cases, the computed value is the specified value
</ol>

Issue: If we introduce a pseudo element that can select columns in a multicol,
we would need to specify that auto computes to auto on it,
or introduce a new value and have auto compute to that
(but what would that value compute to on things that aren't columns?).

Note: For background discussions leading to this property, see these threads:
<a href="http://lists.w3.org/Archives/Public/www-style/2012May/1197.html">discussion of overflow, overflow-x, overflow-y and overflow-style</a> and
<a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html">proposal for a fragmentation property</a>

<h3 id="paginated-overflow">
Paginated overflow</h3>

This section introduces and defines the meaning of the ''continue/paginate'' value of the 'continue' property.

Issue: Write this section

Issue: Pages should be possible to style with @page rules. How does that work for nested pages?

<div class="issue">
Should traditional pagination (e.g. when printing)
be expressed through some magic in the computed value of ''continue/auto'',
or by inserting this in the UA stylesheet:
<pre><code class="lang-css">
@media (overflow-block: paged), (overflow-block: optional-paged) {
	:root {
		continue: paginate;
	}
}
</code></pre>
</div>

Issue: Traditional pagination (e.g. when printing) assumes that
:root is contained in the page box,
rather than having the page box be a pseudo element child of :root.
Can we work around that using something similar to fragment boxes?
Or maybe by having a fragment box (reproducing :root) inside a page box inside :root?

Issue: How does the page box model work when it is a child of a regular css box?

Issue: The initial proposal in [[CSS3GCPM]] and implementation from Opera
used 4 values instead of ''continue/paginate'':
"paged-x | paged-y | paged-x-controls | paged-y-controls".
Should this property also include these values,
or are they better handled as separate properties?
(e.g.: "pagination-layout: auto | horizontal | vertical", "pagination-controls: auto | none")

Issue: Ability to display N pages at once
rather than just one page at once?
Could this be a value of "pagination-layout", such as:
"pagination-layout: horizontal 2;"

Issue: Brad Kemper has proposed a model for combining pagination and
fragment overflow, which also deals with displaying multiple pages.
<a href="http://www.w3.org/mid/FF1704C5-D5C1-4D6F-A99D-0DD094036685@gmail.com">http://www.w3.org/mid/FF1704C5-D5C1-4D6F-A99D-0DD094036685@gmail.com</a>

	<p class="issue">
		The current implementation of paginated overflow uses
		the overflow/overflow-x/overflow-y properties
		rather than the overflow-style property as proposed
		in the [[CSS3GCPM]] draft
		(which also matches the [[CSS3-MARQUEE]] proposal).
		or the 'continue' property as described here.
	</p>

<h3 id="fragment-overflow">
Fragmented Overflow</h2>

This section introduces and defines the meaning of
the ''continue/fragments'' value of the 'continue' property.

	<p>
		When the computed value of 'continue' for an element is ''continue/fragments'',
		and implementations would otherwise have created a box for the element,
		then implementations must create a sequence of <dfn>fragment box</dfn>es
		for that element.
		(It is possible for an element with ''continue: fragments''
		to generate only one <a>fragment box</a>.
		However, if an element's computed 'continue' is not ''continue/fragments'',
		then its box is not a <a>fragment box</a>.)
		Every <a>fragment box</a> is a fragmentation container,
		and any overflow
		that would cause that fragmentation container to fragment
		causes another <a>fragment box</a> created as a next sibling
		of the previous one.
		<span class="issue">Or is it as though it's a next sibling of
		the element?  Need to figure out exactly how this interacts with
		other box-level fixup.</span>
		Additionally, if the <a>fragment box</a> is also
		a multi-column box (as defined in [[!css-multicol-1]]
		<span class="issue">though it defines <i>multi-column container</i></span>)
		any content that would lead to the creation of <a>overflow columns</a> [[!css-multicol-1]]
		instead is flown into an additional fragment box.
		However, fragment boxes may themselves be broken
		(due to fragmentation in a fragmentation context outside of them,
		such as pages, columns, or other fragment boxes);
		such breaking leads to fragments of the same fragment box
		rather than multiple fragment boxes.
		(This matters because fragment boxes may be styled by their index;
		such breaking leads to multiple fragments of a fragment box
		with a single index.
		This design choice is so that
		breaking a fragment box across pages does not break
		the association of indices to particular pieces of content.)
		<span class="issue">Should a forced break that breaks to
		an outer fragmentation context cause a new fragment of a single
		fragment box or a new fragment box?</span>
		<span class="issue">Should we find a term other than
		<a>fragment box</a> here to make this a little less confusing?</span>
	</p>

	<p class="issue">
		What if we want to be able to style the pieces of an element
		split within another type of fragmentation context?
		These rules prevent ever using ''::nth-fragment()'' for that,
		despite that the name seems the most logical name for such a feature.
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;title&gt;Breaking content into
  equal-sized cards&lt;/title&gt;
&lt;style&gt;
  .in-cards {
    continue: fragments;

    width: 13em;
    height: 8em;

    padding: 4px;
    border: medium solid blue;
    margin: 6px;

    font: medium/1.3 Times New
      Roman, Times, serif;
  }
&lt;/style&gt;
&lt;div class="in-cards"&gt;
  In this example, the text in the div
  is broken into a series of cards.
  These cards all have the same style.
  The presence of enough content to
  overflow one of the cards causes
  another one to be created.  The second
  card is created just like it's the
  next sibling of the first.
&lt;/div&gt;</code></pre></td><td>
			<div class="in-cards-demo">In this example, the text in the<br>div is broken into a series of<br>cards.  These cards all have the<br>same style. The presence of<br>enough content to overflow<br>one of the cards causes another</div>
			<div class="in-cards-demo">one to be created.  The second<br>card is created just like it's the<br>next sibling of the first.</div>
		</td></tr></table>
	</div>

	<div class="example">
		Authors may wish to style the opening lines of an element
		with different styles
		by putting those opening lines in a separate fragment.
		However, since it may be difficult to predict the exact height
		occupied by those lines
		in order to restrict the first fragment to that height,
		it is more convenient to use the 'max-lines' property,
		which forces a fragment to break
		after a specified number of lines.
		This forces a break after the given number of lines
		contained within the element or its descendants,
		as long as those lines are in the same block formatting context.

		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .article {
    continue: fragments;
  }
  .article::first-letter {
    font-size: 2em;
    line-height: 0.9;
  }
  .article::nth-fragment(1) {
    font-size: 1.5em;
    max-lines: 3;
  }
  .article::nth-fragment(2) {
    column-count: 2;
  }
&lt;/style&gt;
&lt;div class="article"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="article-max-lines-demo one">The max-lines property allows<br>authors to use a larger font for the first<br>few lines of an article.  Without the</div>
			<div class="article-max-lines-demo two">max-lines property, authors<br>might have to use the<br>'height' property instead, but<br>that would leave a slight gap<br>if the author miscalculated<br>how much height a given<br>number of lines would<br>occupy (which might be</div>
			<div class="article-max-lines-demo three">particularly hard if the author<br>didn't know what text would<br>be filling the space, exactly<br>what font would be used, or<br>exactly which platform's font<br>rendering would be used to<br>display the font).</div>
		</td></tr></table>
	</div>

	<p class="issue">
		We should specify that ''continue: fragments'' does not apply
		to at least some table parts,
		and perhaps other elements as well.
		We need to determine exactly which ones.
	</p>

	<p class="issue">
		This specification needs to say which type of
		fragmentation context is created
		so that it's clear which values of the 'break-*' properties
		cause breaks within this context.
		We probably want ''break-*: region'' to apply.
	</p>

	<p class="issue">
		This specification needs a processing model
		that will apply in cases where the layout containing the
		fragments has characteristics that use the intrinsic size of the fragments
		to change the amount of space available for them,
		such as [[CSS3-GRID-LAYOUT]].
		There has already been some work on such a processing model
		in [[CSS-REGIONS-1]],
		and the work done on a model there,
		and the editors of that specification,
		should inform what happens in this specification.
	</p>

<h3 id="fragment-styling">Fragment styling</h3>

<h4 id="fragment-pseudo-element">The ''::nth-fragment()'' pseudo-element</h4>

	<p>
		The <dfn selector>::nth-fragment()</dfn> pseudo-element
		is a pseudo-element
		that describes some of the <a>fragment box</a>es generated by an element.
		The argument to the pseudo-element takes the same syntax
		as the argument to the :nth-child() pseudo-class
		defined in [[!SELECT]], and has the same meaning
		except that the number is relative to
		<a>fragment box</a>es generated by the element
		instead of siblings of the element.
	</p>

	<p class="note">
		Selectors that allow addressing fragments
		by counting from the end rather than the start
		are intentionally not provided.
		Such selectors would interfere with determining
		the number of fragments.
	</p>

	<p class="issue">
		Depending on future discussions,
		this ''::nth-fragment(<var>an+b</var>)'' syntax
		may be replaced with
		the new ''::fragment:nth(<var>an+b</var>)'' syntax.
	</p>

<h4 id="style-of-fragments">Styling of fragments</h4>

	<p class="issue">
		Should this apply to continue:fragments only,
		or also to continue:paginate?
		(If it applies,
		then stricter property restrictions would be needed
		for continue:paginate.)
	</p>

	<p>
		In the absence of rules with ''::nth-fragment()'' pseudo-elements,
		the computed style for each <a>fragment box</a>
		is the computed style for the element
		for which the <a>fragment box</a> was created.
		However, the style for a <a>fragment box</a> is also influenced
		by rules whose selector's <a>subject</a> [[!SELECT]]
		has an ''::nth-fragment()'' pseudo-element,
		if the 1-based number of the <a>fragment box</a> matches
		that ''::nth-fragment()'' pseudo-element
		and the selector (excluding the ''::nth-fragment()'' pseudo-element)
		matches the element generating the fragments.
	</p>

	<p>
		When determining the style of the <a>fragment box</a>,
		these rules that match the fragment pseudo-element
		cascade together with the rules that match the element,
		with the fragment pseudo-element adding the specificity
		of a pseudo-class to the specificity calculation.
		<span class="issue">Does this need to be specified in
		the cascading module as well?</span>
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .bouncy-columns {
    continue: fragments;
    width: 6em;
    height: 10em;
    float: left;
    margin: 1em;
    font: medium/1.25 Times New
      Roman, Times, serif;
  }
  .bouncy-columns::nth-fragment(1) {
    background: aqua; color: black;
    transform: rotate(-3deg);
  }
  .bouncy-columns::nth-fragment(2) {
    background: yellow; color: black;
    transform: rotate(3deg);
  }
&lt;/style&gt;
&lt;div class="bouncy-columns"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="bouncy-columns-demo one">In this<br>example, the<br>text in the div<br>is broken into<br>a series of<br>columns.  The<br>author<br>probably</div>
			<div class="bouncy-columns-demo two">intended the<br>text to fill two<br>columns.  But<br>if it happens to<br>fill three<br>columns, the<br>third column is<br>still created.  It</div>
			<div class="bouncy-columns-demo">just doesn't<br>have any<br>fragment-specific<br>styling because<br>the author<br>didn't give it<br>any.</div>
		</td></tr></table>
	</div>

	<p>
		Styling an ''::nth-fragment()'' pseudo-element with the 'continue'
		property does take effect;
		if a <a>fragment box</a> has a
		computed value of 'continue' other than ''fragments''
		then that fragment box is the last fragment.
		However, overriding 'continue' on the first fragment
		does not cause the <a>fragment box</a> not to exist;
		whether there are fragment boxes at all is determined by
		the computed value of overflow for the element.
	</p>

	<p>
		Styling an ''::nth-fragment()'' pseudo-element with the 'content'
		property has no effect;
		the computed value of 'content' for the fragment box
		remains the same as the computed value of content for the element.
	</p>

	<p>
		Specifying ''display: none'' for a <a>fragment box</a> causes
		the fragment box with that index not to be generated.
		However, in terms of the indices
		used for matching ''::nth-fragment()'' pseudo-elements
		of later fragment boxes,
		it still counts as though it was generated.
		However, since it is not generated, it does not contain any content.
	</p>

	<p>
		Specifying other values of 'display', 'position',
		or 'float' is permitted, but is not allowed to change
		the <a>inner display type</a>.
		(Since 'continue' only
		applies to block containers, flex containers, and grid containers).
		<span class="issue">Need to specify exactly how this works</span>
	</p>

	<p>
		To match the model for other pseudo-elements
		where the pseudo-elements live inside their corresponding element,
		declarations in ''::nth-fragment()'' pseudo-elements override
		declarations in rules without the pseudo-element.
		The relative priority within such declarations is determined
		by normal cascading order (see [[!CSS2]]).
	</p>

	<p>
		Styles specified on ''::nth-fragment()'' pseudo-elements
		do affect inheritance to content within the <a>fragment box</a>.
		In other words, the content within the <a>fragment box</a> must
		inherit from the fragment box's style (i.e., the pseudo-element style)
		rather than directly from the element.
		This means that elements split between fragment boxes may
		have different styles for different parts of the element.
	</p>

	<p class="issue">
		This inheritance rule allows specifying styles indirectly
		(by using explicit ''inherit'' or using default inheritance
		on properties that don't apply to ''::first-letter'')
		that can't be specified directly
		(based on the rules in the next section).
		This is a problem.
		The restrictions that apply to styling inside fragments
		should also apply to inheritance from fragments.
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .article {
    continue: fragments;
  }
  .article::nth-fragment(1) {
    font-size: 1.5em;
    margin-bottom: 1em;
    height: 4em;
  }
  .article::nth-fragment(2) {
    margin-left: 5em;
    margin-right: 2em;
  }
&lt;/style&gt;
&lt;div class="article"&gt;
  The &lt;code&gt;font-size&lt;/code&gt; property<i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="article-font-inherit-demo one">The <code>font-size</code> property<br>specified on the fragment<br>is inherited into the</div>
			<div class="article-font-inherit-demo two">descendants of the fragment.<br>This means that inherited<br>properties can be used<br>reliably on a fragment, as in<br>this example.</div>
		</td></tr></table>
	</div>

<h4 id="style-in-fragments">Styling inside fragments</h4>

	<p class="issue">
		Should this apply to continue:fragments only,
		or also to continue:paginate?
	</p>

	<p>
		The ''::nth-fragment()'' pseudo-element
		can also be used to style
		content inside of a <a>fragment box</a>.
		Unlike the ''::first-line'' and ''::first-letter'' pseudo-elements,
		the ''::nth-fragment()'' pseudo-element can be applied
		to parts of the selector other than the subject:
		in particular, it can match ancestors of the subject.
		However, the only CSS properties applied
		by rules with such selectors
		are those that apply
		to the ''::first-letter'' pseudo-element.
	</p>

	<p>
		To be more precise,
		when a rule's selector has ''::nth-fragment()'' pseudo-elements
		attached to parts of the selector other than the subject,
		the declarations in that rule apply to
		a fragment (or pseudo-element thereof) when:
	</p>
	<ol>
		<li>
			the declarations are for properties that apply to the
			''::first-letter'' pseudo-element,
		</li>
		<li>
			the declarations would apply to
			that fragment (or pseudo-element thereof)
			had those ''::nth-fragment()'' pseudo-elements been removed,
			with a particular association between
			each sequence of simple selectors and the element it matched,
			and
		</li>
		<li>
			for each removed ''::nth-fragment()'' pseudo-element,
			the fragment lives within a <a>fragment box</a>
			of the element associated in that association
			with the selector that the pseudo-element was attached to,
			and whose index matches the pseudo-element.
		</li>
	</ol>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .dark-columns {
    continue: fragments;
    width: 6em;
    height: 10em;
    float: left;
    margin-right: 1em;
    font: medium/1.25 Times New
      Roman, Times, serif;
  }
  .dark-columns::nth-fragment(1) {
    background: aqua; color: black;
  }
  .dark-columns::nth-fragment(1) :link {
    color: blue;
  }
  .dark-columns::nth-fragment(1) :visited {
    color: purple;
  }
  .dark-columns::nth-fragment(2) {
    background: navy; color: white;
  }
  .dark-columns::nth-fragment(2) :link {
    color: aqua;
  }
  .dark-columns::nth-fragment(2) :visited {
    color: fuchsia;
  }
&lt;/style&gt;
&lt;div class="dark-columns"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="dark-columns-demo one">In this<br><a href="http://en.wiktionary.org/wiki/example">example</a>, the<br>text flows<br>from one<br>light-colored<br>fragment into<br>another<br>dark-colored</div>
			<div class="dark-columns-demo two">fragment.  We<br>therefore want<br>different styles<br>for <a href="http://www.w3.org/Provider/Style/IntoContext.html">hyperlinks</a><br>in the different<br>fragments.</div>
		</td></tr></table>
	</div>

<h2 id="scroll-navigation">
Appendix B: Scroll navigation controls</h2>

[[html#the-a-element]] allows creating navigational links to a particular scroll position within the same page.
However, there is little feedback to the user regarding the current content being viewed, and
the interaction model does not match the expectations of modern accessible UI components.

This specification adds a mechanism for creating scroll navigation controls.
The active marker, reflecting the current position, can be styled to give the user an indication of which section they are in.
The set of markers are treated as a component following the accessibility guidelines for keyboard navigation within components.

Use cases include a table of contents with links to relevant contents,
markers for scrolling carousel pages,
and scrollable tab panels.

Issue: Add images representing these examples.

Issue: Explore whether scrolltarget can be more directly associated with anchor tags.

<h3 id="scroll-target"><{button/scrolltarget}> attribute</h3>

	The <dfn element-attr for=button>scrolltarget</dfn> attribute turns a <{button}> element into a [=scroll marker control=].
	This takes the ID of the element to target as its value.

	The <dfn attribute for=HTMLButtonElement lt=scrollTargetElement>HTMLButtonElement.scrollTargetElement</dfn> instance property
	gets and sets the element being interacted with by the control button.
	This is the JavaScript equivalent of the <{button/scrolltarget}> HTML attribute.

	A 'button' with a non-null {{HTMLButtonElement/scrollTargetElement}}
	represents a <dfn export>scroll marker control</dfn> that forms a <dfn>scroll marker group</dfn> for its nearest [=scroll container=]
	in which exactly one control in the group can have its 'checked' state set to true.
	A [=scroll marker control=] with a true 'checked' state can be styled by the '':checked'' pseudo-class.

	The [=scroll marker group=] that contains a <{button}> element a also contains all the other <{button}> elements b that fulfill the following conditions:

	* The <{button}> element b has a non-null {{HTMLButtonElement/scrollTargetElement}} value.
	* a and b's {{HTMLButtonElement/scrollTargetElement}} have the same nearest [=scroll container=].

	<div algorithm="scrollTargetElement activation">
		When a [=scroll marker control=] is activated:

		1. Let <var>element</var> be the {{HTMLButtonElement/scrollTargetElement}} of the control.
		1. Let <var>block</var> be "<code>start</code>".
		1. Let <var>inline</var> be "<code>start</code>".
		1. <a lt='scroll a target into view'>Scroll the element into view</a> with <var>behavior</var>, <var>block</var>, and <var>inline</var>.
		1. If activated by invocation, move focus to <var>element</var>.
			If <var>element</var> is not focusable this will result in there being no active element,
			but the next focus change will proceed from this <var>element</var> as if it were focused.
	</div>

	Issue: Moving focus to the control on activation means that the only way to control scroll markers via the keyboard is to tab into them.
	We should retain focus after the control is activated, while still altering the point from which the next focusable element is found if the user tabs away.

<h4 id="scroll-container-scroll">Scroll tracking</h4>

	A scrolling operation might animate towards a particular position
	(e.g. scrollbar arrow clicks, arrow key presses, "behavior: smooth" programmatic scrolls)
	or might directly track a user’s input
	(e.g. touch scrolling, scrollbar dragging).
	In either case, the user agent chooses an 'eventual scroll position' to which the scroller
	will reach.

	This 'eventual scroll position' is used to determine the active marker.
	Since markers themselves may represent just the start of the content (e.g. headers), we consider the active marker to be the first one which we are at or beyond the scroll position of.

	<div algorithm="scroll tracking">
		Whenever a [=scroll container=] is scrolled, or layout changes the scroll position, the user agent must run these steps to determine the active marker:

		1. Let <var>position</var> be the 'eventual scroll position' for the scrolling operation.
		1. Let <var>markers</var> be all of the [=scroll marker control=] elements which are a part of the [=scroll marker group=] for the [=scroll container=].
		1. Let <var>targets</var> be the set of {{HTMLButtonElement/scrollTargetElement}} for those controls sorted in [=tree order=].
		1. Let <var>selected</var> be the first element in <var>targets</var>, or null if <var>targets</var> is empty.
		1. For each <var>target</var> in <var>targets</var>:
			1. Set <var>selected</var> to <var>target</var>.
			1. Let <var>targetPosition</var> be the position that would be scrolled to if we scroll <var>target</var> into view.
			1.	: If <var>targetPosition</var>'s scroll block offset is less than or equal to <var>position</var>'s scroll block offset, and
					<var>targetPosition</var>'s scroll inline offset is less than or equal to <var>position</var>'s scroll inline offset.
				::
					Update <var>selected</var> to <var>target</var>.
					Break.
		1. 	: If <var>selected</var> is not null,
			::
				1. Let <var>marker</var> be the first control in <var>markers</var> whose {{HTMLButtonElement/scrollTargetElement}} is <var>selected</var>.
				1. Set the 'checked' state of <var>marker</var> to true.
			: Otherwise,
			::
				Set the 'checked' state of all controls in <var>markers</var> to false.
	</div>

	Issue: Should we allow for none of the markers to be currently active, e.g. if not yet scrolled past the position of the first marker.

<h4 id="scroll-target-focus">Focus behavior</h4>

	A [=scroll marker control=] is only focusable if it is 'checked'. Within a group, exactly one marker is 'checked' at a time.

	When such a control is focused,
	* The down arrow or right arrow move focus to and activate the next control from its [=scroll marker group=].
	* The up arrow or left arrow move focus to and activate the previous control from its [=scroll marker group=].
	* Space or Enter invoke the control.

	Issue: We should be able to tab away from the target immediately after using arrow navigations rather than requiring activating the control first.

<h2 id=privclass=nonum>
Appendix C: Privacy Considerations</h2>

This specification introduces no new privacy considerations.

<h2 id=sec class=nonum>
Appendix D: Security Considerations</h2>

This specification introduces no new security considerations.

<h3 id="changes-l4">
Changes Since Level 4</h3>

	ISSUE: TBD

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	<p>
		Thanks especially to the feedback from
		Rossen Atanassov,
		Bert Bos,
		Tantek Çelik,
		John Daggett,
		fantasai,
		Daniel Glazman,
		Vincent Hardy,
		H&aring;kon Wium Lie,
		Peter Linss,
		Robert O'Callahan,
		Florian Rivoal,
		Alan Stearns,
		Steve Zilles,
		and all the rest of the
		<a href="http://lists.w3.org/Archives/Public/www-style/">www-style</a> community.
