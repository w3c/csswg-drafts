<pre class='metadata'>
Title: CSS View Transitions Module Level 1
Shortname: css-view-transitions
Level: 1
Status: WD
Group: csswg
Date: 2022-11-24
Prepare for TR: yes
ED: https://drafts.csswg.org/css-view-transitions-1/
TR: https://www.w3.org/TR/css-view-transitions-1/
Work Status: exploring
Editor: Tab Atkins-Bittner, Google, http://xanthir.com/contact/, w3cid 42199
Editor: Jake Archibald, Google, w3cid 76394
Editor: Khushal Sagar, Google, w3cid 122787
Abstract: This module defines the View Transition API, along with associated properties and pseudo-elements.
Markup Shorthands: css yes, markdown yes
</pre>

<pre class=link-defaults>
spec:webidl; type:dfn; text:resolve
spec:css-position-3; type:property
	text: inset-block-start
	text: inset-inline-start
spec:css-shapes-3; type:function; text:rect()
spec:webidl; type:interface; text:Promise
spec:css-images-4; type:function; text:element()
spec:dom; type:dfn; text:document
spec:css-2022; type:dfn; text:style sheet
</pre>

<pre class=anchors>
urlPrefix: https://wicg.github.io/navigation-api/; type: interface;
	text: NavigateEvent
	text: signal; for: NavigateEvent; url: #ref-for-dom-navigateevent-signalâ‘ 
urlPrefix: https://html.spec.whatwg.org/multipage/rendering.html; type: dfn;
	text: HTML user agent style sheet; url: #the-css-user-agent-style-sheet-and-presentational-hints
</pre>

<script async type="module" src="diagrams/resources/scaler.js"></script>

<style>
	spec-scaler {
		display: block;
	}
	spec-scaler:not(:defined) > * {
		display: none;
	}
	.spec-slides {
		width: 100%;
		height: 100%;
		border: none;
		display: block;
	}
	.spec-slide-controls {
		text-align: center;
	}
	.main-example-video {
		display: block;
		width: 100%;
		max-width: 702px;
		height: auto;
		margin: 0 auto;
	}

	/* Put nice boxes around each algorithm. */
	[data-algorithm]:not(.heading) {
		padding: .5em;
		border: thin solid #ddd; border-radius: .5em;
		margin: .5em calc(-0.5em - 1px);
	}
	[data-algorithm]:not(.heading) > :first-child {
		margin-top: 0;
	}
	[data-algorithm]:not(.heading) > :last-child {
		margin-bottom: 0;
	}
	[data-algorithm] [data-algorithm] {
		margin: 1em 0;
	}
	pre {
		tab-size: 2;
	}
	.domintro {
		position: relative;
		color: green;
		background: #DDFFDD;
		margin: 2.5em 0 2em 0;
		padding: 1.5em 1em 0.5em 2em;
	}
	.domintro dt, .domintro dt * {
		color: black;
		font-size: inherit;
	}
	.domintro dd {
		margin: 0.5em 0 1em 2em; padding: 0;
	}
	.domintro dd p {
		margin: 0.5em 0;
	}
	.domintro::before {
		content: 'For web developers (non-normative)';
		background: green;
		color: white;
		padding: 0.15em 0.25em;
		font-style: normal;
		position: absolute;
		top: -0.8em;
		left: -0.8em;
	}
</style>

# Introduction # {#intro}

	*This section is non-normative.*

	View Transitions is a feature that allows DOM changes to smoothly animate between states.

## Separating transitions from DOM updates ## {#separating-transitions}

	Traditionally, creating a transition between two states involves a period where both states are present in the DOM at the same time.
	In fact, it usually involves creating a specific DOM structure that can contain both states.
	If one element is "moving" between containers,
	that element often needs to exist outside of either container for the period of the transition,
	to avoid clipping from either container or ancestor elements.

	This extra in-between state often results in UX and accessibility issues,
	as the structure of the DOM is compromised for a purely-visual effect.

	View transitions avoid this troublesome in-between state by allowing the DOM to switch between states synchronously,
	then performing a customizable visual transition between the two states in another layer,
	using a static capture of the old state, and a live capture of the new state.

	These captures are used in a tree of pseudo-elements
	(detailed in [[#view-transition-pseudos]]),
	where the old state cross-fades with the new state,
	while animating from the old to new size and position.

	Since the captures are rendered in pseudo-elements,
	developers can customize the transition using familiar features,
	such as CSS and web animations.

	The developer chooses which elements are captured independently,
	meaning they can be animated independently,
	using the 'view-transition-name' CSS property.

## Lifecycle ## {#lifecycle}

	A successful view transition goes through the following phases:

	1. Developer calls <code>document.{{Document/startViewTransition}}({{UpdateCallback|updateCallback}})</code>,
		which returns <code>viewTransition</code>, a {{ViewTransition}}.

	1. Current state captured as the "old" state.

	1. Rendering paused.

	1. Developer's {{UpdateCallback|updateCallback}} is called,
		where they update document state.

	1. <code>viewTransition.{{ViewTransition/updateCallbackDone}}</code> fulfills.

	1. Current state captured as the "new" state.

	1. Transition pseudo-elements created.
		See [[#view-transition-pseudos]] for an overview of this structure.

	1. Rendering unpaused, revealing the transition pseudo-elements.

	1. <code>viewTransition.{{ViewTransition/ready}}</code> fulfills.

	1. Pseudo-elements animate until finished.

	1. Transition pseudo-elements removed.

	1. <code>viewTransition.{{ViewTransition/finished}}</code> fulfills.

	<div id="phases-diagram">
		<spec-scaler canvaswidth="1920" canvasheight="1080" style="aspect-ratio: 1920/1080">
			<iframe class="spec-slides" src="diagrams/phases/"></iframe>
		</spec-scaler>
		<p class="spec-slide-controls">
			<button disabled>Previous</button>
			<button disabled>Next</button>
		</p>
		<script type="module">
			const root = document.querySelector('#phases-diagram');
			const [previous, next] = root.querySelectorAll('.spec-slide-controls button');
			const iframe = root.querySelector('iframe');
			next.disabled = false;

			const updateButtons = (slide) => {
				next.disabled = !slide.hasNext;
				previous.disabled = !slide.hasPrevious;
			};

			next.addEventListener('click', async () => {
				const slide = iframe.contentDocument.querySelector('spec-slide');
				await slide.next();
				updateButtons(slide);
			});
			previous.addEventListener('click', async () => {
				const slide = iframe.contentDocument.querySelector('spec-slide');
				await slide.previous();
				updateButtons(slide);
			});
		</script>
	</div>

## Transitions as an enhancement ## {#transitions-as-enhancements}

	A key part of this API design is that an animated transition is an enhancement to a document state change.

	That means, a failure to create a transition,
	which can happen due to misconfiguration or device constraints,
	will not prevent the developer's {{UpdateCallback}} being called,
	even if it's known in advance that the animated transition cannot happen.

	For example, if the developer calls {{ViewTransition/skipTransition()}} at the start of the [[#lifecycle|lifecycle]],
	the steps relating to the animated transition, such as creating the pseudo-elements, will not happen.
	However, the {{UpdateCallback}} will still be called.
	It's only the transition that's skipped, not the whole state change.

	If the DOM change should also be skipped, then that should be handled by another feature.
	<code>{{NavigateEvent|navigateEvent}}.{{NavigateEvent/signal}}</code> is an example of a feature developers could use to handle this.

	Although the transition API allows DOM changes to be asynchronous via the {{UpdateCallback}},
	the transition API is not responsible for queuing or otherwise scheduling the DOM changes beyond the scheduling needed for the transition itself.
	Some asynchronous DOM changes can happen concurrently (e.g if they're happening within independent components),
	whereas others need to queue, or abort an earlier change.
	This is best left to a feature or framework that has a more holistic view of the application.

## Examples ## {#examples}

	<div class=example>
		Taking a page that already updates its content using a pattern like this:

		```js
		function spaNavigate(data) {
			updateTheDOMSomehow(data);
		}
		```

		A transition could be added like this:

		```js
		function spaNavigate(data) {
			// Fallback for browsers that don't support this API:
			if (!document.startViewTransition) {
				updateTheDOMSomehow(data);
				return;
			}

			// With a transition:
			document.startViewTransition(() => updateTheDOMSomehow(data));
		}
		```

		This results in the default transition of a quick cross-fade:

		<figure>
			<video src="diagrams/videos/default.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>

		The cross-fade is achieved using CSS animations on a [[#view-transition-pseudos|tree of pseudo-elements]],
		so customizations can be made using CSS. For example:

		```css
		::view-transition-old(root),
		::view-transition-new(root) {
			animation-duration: 5s;
		}
		```

		This results in a slower transition:

		<figure>
			<video src="diagrams/videos/slow.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>
	</div>

	<div class=example>
		Building on the previous example, motion can be added:

		```css
		@keyframes fade-in {
			from { opacity: 0; }
		}

		@keyframes fade-out {
			to { opacity: 0; }
		}

		@keyframes slide-from-right {
			from { transform: translateX(30px); }
		}

		@keyframes slide-to-left {
			to { transform: translateX(-30px); }
		}

		::view-transition-old(root) {
			animation: 90ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
				300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
		}

		::view-transition-new(root) {
			animation: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,
				300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
		}
		```

		Here's the result:

		<figure>
			<video src="diagrams/videos/slide.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>
	</div>

	<div class=example>
		Building on the previous example,
		the header and text within the header can be given their own ''::view-transition-group()''s for the transition:

		```css
		.main-header {
			view-transition-name: main-header;
		}

		.main-header-text {
			view-transition-name: main-header-text;
			/* Give the element a consistent size, assuming identical text: */
			width: fit-content;
		}
		```

		By default, these groups will transition size and position from their "old" to "new" state,
		while their visual states cross-fade:

		<figure>
			<video src="diagrams/videos/header.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>
	</div>

	<div class=example>
		Building on the previous example, let's say some pages have a sidebar:

		<figure>
			<video src="diagrams/videos/bad-sidebar.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>

		In this case, things would look better if the sidebar was static if it was in both the "old" and "new" states.
		Otherwise, it should animate in or out.

		The '':only-child'' pseudo-class can be used to create animations specifically for these states:

		```css
		.sidebar {
			view-transition-name: sidebar;
		}

		@keyframes slide-to-right {
			to { transform: translateX(30px); }
		}

		/* Entry transition */
		::view-transition-new(sidebar):only-child {
			animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-in,
				300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
		}

		/* Exit transition */
		::view-transition-old(sidebar):only-child {
			animation: 150ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
				300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-right;
		}
		```

		For cases where the sidebar has both an "old" and "new" state, the default animation is correct.

		<figure>
			<video src="diagrams/videos/good-sidebar.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>
	</div>

	<div class=example>
		Not building from previous examples this time,
		let's say we wanted to create a circular reveal from the user's cursor.
		This can't be done with CSS alone.

		Firstly, in the CSS, allow the "old" and "new" states to layer on top of one another without the default blending,
		and prevent the default cross-fade animation:

		```css
		::view-transition-image-pair(root) {
			isolation: auto;
		}

		::view-transition-old(root),
		::view-transition-new(root) {
			animation: none;
			mix-blend-mode: normal;
		}
		```

		Then, the JavaScript:

		```js
		// Store the last click event
		let lastClick;
		addEventListener('click', event => (lastClick = event));

		function spaNavigate(data) {
			// Fallback for browsers that don't support this API:
			if (!document.startViewTransition) {
				updateTheDOMSomehow(data);
				return;
			}

			// Get the click position, or fallback to the middle of the screen
			const x = lastClick?.clientX ?? innerWidth / 2;
			const y = lastClick?.clientY ?? innerHeight / 2;
			// Get the distance to the furthest corner
			const endRadius = Math.hypot(
				Math.max(x, innerWidth - x),
				Math.max(y, innerHeight - y)
			);

			// Create a transition:
			const transition = document.startViewTransition(() => {
				updateTheDOMSomehow(data);
			});

			// Wait for the pseudo-elements to be created:
			transition.ready.then(() => {
				// Animate the root's new view
				document.documentElement.animate(
					{
						clipPath: [
							\`circle(0 at ${x}px ${y}px)\`,
							\`circle(${endRadius}px at ${x}px ${y}px)\`,
						],
					},
					{
						duration: 500,
						easing: 'ease-in',
						// Specify which pseudo-element to animate
						pseudoElement: '::view-transition-new(root)',
					}
				);
			});
		}
		```

		And here's the result:

		<figure>
			<video src="diagrams/videos/circle.mp4" style="aspect-ratio: 1404/738" class="main-example-video" controls muted loop playsinline></video>
		</figure>
	</div>

# CSS properties # {#css-properties}

## 'view-transition-name' ## {#view-transition-name-prop}

	<pre class=propdef>
	Name: view-transition-name
	Value: none | <<custom-ident>>
	Initial: none
	Inherited: no
	Percentages: n/a
	Computed Value: as specified
	Animation type: discrete
	</pre>

	The 'view-transition-name' property "names" an element as participating in a view transition.

	<dl dfn-type=value dfn-for=view-transition-name>
		: <dfn>none</dfn>
		:: The element will not participate in a view transition.

		: <dfn><<custom-ident>></dfn>
		:: The element can participate in a view transition,
			as either an old or new element,
			with a <dfn dfn for>view transition name</dfn> equal to the <<custom-ident>>'s value.

			Note: The value <css>none</css> is invalid as a <<custom-ident>>.
	</dl>

	Note: This property causes the user-agent to both capture separate snapshots from the elements,
	as well as create separate pseudo-element sub-trees representing this element's "old" and "new" states.
	For the purposes of this API,
	if one element has a transition-name "foo" in the old state, and another element has a transition-name "foo" in the new state,
	they are treated as representing different visual state of the same element.
	This may be confusing, since the elements themselves are not necessarily referring to the same object,
	but it is a useful model to consider them to be visual states of the same conceptual page entity, that we happen to call "element".

# User-agent styles # {#ua-styles}

	The following is added to the [=HTML user agent style sheet=]:

	```css
	@keyframes -ua-view-transition-fade-out {
		to { opacity: 0; }
	}

	@keyframes -ua-view-transition-fade-in {
		from { opacity: 0; }
	}

	html {
		view-transition-name: root;
	}
	```

	<div class=note>
		There are further additions to the [=HTML user agent style sheet=] defined in [[#view-transition-pseudos]] for each pseudo-element,
		and other styles are added at runtime via the [=document=]'s [=document/view transition style sheet=].
	</div>

# Pseudo-elements # {#pseudo}

## Pseudo-element root ## {#pseudo-root}

	Note: This is a general definition for trees of pseudo-elements. If other features need this behavior, these definitions will be moved to [[css-pseudo-4]].

	A <dfn>pseudo-element root</dfn> is a type of [=tree-abiding pseudo-element=] that is the [=tree/root=] in a [=tree=] of [=tree-abiding pseudo-elements=],
	known as the <dfn>pseudo-element tree</dfn>.

	The [=pseudo-element tree=] defines the document order of its [=tree/descendant=] [=tree-abiding pseudo-elements=].

	When a [=pseudo-element=] [=tree/participates=] in a [=pseudo-element tree=],
	its [=originating pseudo-element=] is its [=tree/parent=].

	If a [=tree/descendant=] |pseudo| of a [=pseudo-element root=] has no other [=tree/siblings=],
	then '':only-child'' matches that |pseudo|.

	Note: This means that `::view-transition-new(ident):only-child` will only select `::view-transition-new(ident)` if the parent `::view-transitions-image-pair(ident)` contains a single [=tree/child=].
	As in, there is no [=tree/sibling=] `::view-transition-old(ident)`.

## Named view-transition pseudo-elements ## {#named-view-transition-pseudo}

	A <dfn>named view-transition pseudo-element</dfn> is a type of [=tree-abiding pseudo-elements=].

	It has a <dfn for="named view-transition pseudo-element">view-transition name</dfn>,
	a string.

	Their selector takes a <<pt-name-selector>> argument.

	<pre class=prod>
		<dfn>&lt;pt-name-selector></dfn> = '*' | <<custom-ident>>
	</pre>

	The selector matches if the <<pt-name-selector>> is `*` or matches the [=named view-transition pseudo-element=]'s [=named view-transition pseudo-element/view-transition name=].

	The specificity of a view-transition selector with a <<custom-ident>> argument is the same as for other pseudo-elements,
	and is equivalent to a [=type selector=].

	The specificity of a view-transition selector with a `*` argument is zero.

	Note: The [=named view-transition pseudo-element/view-transition name=] is set to the 'view-transition-name' that triggered its creation.

## View transition pseudo-elements ## {#view-transition-pseudos}

	<div class=note>
		Once the user-agent has captured both the "old" and "new" states of the document,
		it creates a structure of pseudo-elements like the following:

		```
		::view-transition
		â”œâ”€ ::view-transition-group(name)
		â”‚  â””â”€ ::view-transition-image-pair(name)
		â”‚     â”œâ”€ ::view-transition-old(name)
		â”‚     â””â”€ ::view-transition-new(name)
		â””â”€ â€¦other groupsâ€¦
		```

		Each element with a 'view-transition-name' is captured separately,
		and a ''::view-transition-group()'' is created for each unique 'view-transition-name'.

		For convenience, the [=document element=] is given the 'view-transition-name' "root" in the [[#ua-styles|user-agent style sheet]].

		Either ''::view-transition-old()'' or ''::view-transition-new()'' are absent in cases where the capture does not have an "old" or "new" state.

		Each of the pseudo-elements generated can be targeted by CSS in order to customize its appearance,
		behavior and/or add animations.
		This enables full customization of the transition.
	</div>

	: <dfn>::view-transition</dfn>
	::
		<div class=note>This element provides a containing block for all ''::view-transition-group()'' pseudo-elements.</div>

		A [=tree-abiding pseudo-element=] that is also
		a [=pseudo-element root=].
		Its [=originating element=] is the document's [=document element=].

		Its [=containing block=] is the [=snapshot root=].

		The following is added to the [=HTML user agent style sheet=]:

		```css
		html::view-transition {
			position: fixed;
			inset: 0;
		}
		```

		<div class="note">
			The aim of the style is to size the pseudo-element to cover the [=snapshot root=]
			and position all ''::view-transition-group()'' pseudo-elements relative to the [=snapshot root origin=].
		</div>

	: <dfn>::view-transition-group( <<pt-name-selector>> )</dfn>
	::
		<div class=note>
			This element initially mirrors the size and position of the "old" element,
			or the "new" element if there isn't an "old" element.
			It is always a [=tree/child=] of a ''::view-transition''.

			If there's both an "old" and "new" state,
			styles in the [=document/view transition style sheet=] animate this pseudo-element's 'width' and 'height'
			from the size of the old element's [=border box=] to that of the new element's [=border box=].

			Also the element's 'transform' is animated from the old element's screen space transform to the new element's screen space transform.

			This style is generated dynamically since the values of animated properties are determined at the time that the transition begins.
		</div>

		A [=tree-abiding pseudo-element=]
		that is also a [=named view-transition pseudo-element=],
		and [=tree/participates=] in a [=pseudo-element tree=].

		It is selected from its [=ultimate originating element=], the [=document element=].

		The following is added to the [=HTML user agent style sheet=]:

		```css
		html::view-transition-group(*) {
			position: absolute;
			top: 0;
			left: 0;

			animation-duration: 0.25s;
			animation-fill-mode: both;
		}
		```

	: <dfn>::view-transition-image-pair( <<pt-name-selector>> )</dfn>
	::
		<div class=note>
			This element is a child of the group element and provides ''isolation: isolate'' for its children.
			It's needed so that its children can be blended with non-normal blend modes without affecting other visual outputs.

			It is always present as a [=tree/child=] of each ''::view-transition-group()''.
		</div>

		A [=tree-abiding pseudo-element=]
		that is also a [=named view-transition pseudo-element=],
		and [=tree/participates=] in a [=pseudo-element tree=].

		It is selected from its [=ultimate originating element=], the [=document element=].

		The following is added to the [=HTML user agent style sheet=]:

		```css
		html::view-transition-image-pair(*) {
			position: absolute;
			inset: 0;

			animation-duration: inherit;
			animation-fill-mode: inherit;
		}
		```

	: <dfn>::view-transition-old( <<pt-name-selector>> )</dfn>
	::
		<div class=note>

			This element is a replaced element that produced the visual representation of the "old" state taken from user-agent provided snapshots.

			This is only ever a [=tree/child=] of a ''::view-transition-image-pair()'',
			never has any [=tree/children=],
			and is omitted if there's no "old" state to represent.

			'':only-child'' can be used to match cases where this element is the only element in the ''::view-transition-image-pair()''.

			The appearance of this element can be manipulated with `object-*` properties in the same way that other replaced elements can be.

		</div>

		A [=tree-abiding pseudo-element=]
		that is also a [=named view-transition pseudo-element=],
		and [=tree/participates=] in a [=pseudo-element tree=].

		It is selected from its [=ultimate originating element=], the [=document element=].

		It is a [=replaced element=], with [=natural dimensions=] equal to the content's size.

		Note: The image content is captured in [=capture the image=],
		then set and updated in [=setup transition pseudo-elements=] and [=update pseudo-element styles=].

		The following is added to the [=HTML user agent style sheet=]:

		```css
		html::view-transition-old(*) {
			position: absolute;
			inset-block-start: 0;
			inline-size: 100%;
			block-size: auto;

			animation-name: -ua-view-transition-fade-out;
			animation-duration: inherit;
			animation-fill-mode: inherit;
		}
		```

		Note: The aim of the style is to match the element's inline size while retaining the aspect ratio.
		It is also placed at the block start.

		Note: Additional styles in the [=document/view transition style sheet=] added to animate these pseudo-elements are detailed in [=setup transition pseudo-elements=] and [=update pseudo-element styles=].

	: <dfn>::view-transition-new( <<pt-name-selector>> )</dfn>
	:: Identical to ''::view-transition-old()'',
		except the following styles added to the [=HTML user agent style sheet=]:

		```css
		html::view-transition-old(*) {
			position: absolute;
			inset-block-start: 0;
			inline-size: 100%;
			block-size: auto;

			animation-name: -ua-view-transition-fade-in;
			animation-duration: inherit;
			animation-fill-mode: inherit;
		}
		```

	Note: The construction of this tree is performed in the [=setup transition pseudo-elements=] algorithm.

# Concepts # {#concepts}

## Phases ## {#phases-concept}

	<dfn>Phases</dfn> represent an ordered sequence of states.
	Since [=phases=] are ordered, prose can refer to phases <dfn for="phases">before</dfn> a particular phase, meaning they appear earlier in the sequence.
	<!-- or <dfn for="phases">after</dfn> a particular phase, meaning they appear later in the sequence. -->

	The initial phase is the first item in the sequence.

## The snapshot root ## {#snapshot-root-concept}

	The <dfn>snapshot root</dfn> is a rectangle that covers all areas of the window that could potentially display web content.
	This area is consistent regardless of root scrollbars or interactive widgets.

	Issue: "Interactive widgets" refers to UI described within a property definition in [[css-viewport#interactive-widget-section]].
	This should be extracted into an exported definition that can be used independently of the property.

	<figure>
		<img src="diagrams/phone-browser.svg" width="200" height="335" alt="A diagram of a phone screen, including a top status bar, a browser URL bar, web-content area with a floating scrollbar, a virtual keyboard, and a bottom bar with an OS back button">
		<img src="diagrams/phone-browser-snapshot-root.svg" width="200" height="335" alt="The previous diagram, but highlights the area that's the 'snapshot root', which includes everything except the top status bar and the bottom bar with the OS back button">
		<figcaption>
			An example of the [=snapshot root=] on a mobile OS.
			The snapshot includes the URL bar, as this can be scrolled away.
			The keyboard is included as this appears and disappears.
			The top and bottom bars are part of the OS rather than the browser, so they're not included in the snapshot root.
		</figcaption>
	</figure>

	<figure>
		<img src="diagrams/desktop-browser.svg" width="132" height="79" alt="A diagram of a desktop browser window, including a tab bar, a URL bar, and a web-content area featuring both horizontal and vertical scrollbars" style="height:auto; width: 600px">
		<img src="diagrams/desktop-browser-snapshot-root.svg" width="132" height="79" alt="The previous diagram, but highlights the area that's the 'snapshot root', which includes the web content area and the scrollbars" style="height:auto; width: 600px">
		<figcaption>
			An example of the [=snapshot root=] on a desktop OS.
			This includes the scrollbars, but does not include the URL bar, as web content never appears in that area.
		</figcaption>
	</figure>

	This means the snapshot canvas size is likely to be consistent for the [=document element=]'s [=captured element/old image=] and [=captured element/new element=].

	The <dfn>snapshot root origin</dfn> refers to the top-left corner of the [=snapshot root=].

	The <dfn>snapshot root size</dfn> refers to the width and height of the [=snapshot root=] as a [=/tuple=] of two numbers.

## The [=view-transition layer=] stacking layer ## {#view-transition-stacking-layer}

	This specification introduces a stacking layer to the [[CSS2#elaborate-stacking-contexts]].

	The ''::view-transition'' pseudo-element generates a new stacking context called the <dfn>view-transition layer</dfn>
	with the following characteristics:

	- Its parent stacking context is the root stacking context.

	- If the ''::view-transition'' pseudo-element exists,
		a new stacking context is created for the [=document element=] and [=top layer=].
		The [=view-transition layer=] is a sibling of this stacking context.

	- The [=view-transition layer=] paints after the stacking context for the [=document element=] and [=top layer=].

	Note: The intent of the feature is to be able to capture the contents of the page, which includes the top layer elements.
	In order to accomplish that, the [=view-transition layer=] cannot be a part of the captured top layer context,
	since that results in a circular dependency.
	Instead, this stacking context is a sibling of other page contents.

	Issue: Do we need to clarify that the stacking context for the root and top layer elements has filters and effects coming from the [=document element=]'s style?

## [=Captured elements=] ## {#captured-elements}

	A <dfn>captured element</dfn> is a [=struct=] with the following:

	<dl dfn-for="captured element">
		: <dfn>old image</dfn>
		:: an image or null. Initially null.

			Issue: The type of "image" needs to be linked or defined.

		: <dfn>old styles</dfn>
		:: a set of styles or null. Initially null.

			Issue: The type of "a set of styles" needs to be linked or defined.

		: <dfn>new element</dfn>
		:: an element or null. Initially null.

			Issue: The type of "element" needs to be linked or defined.
	</dl>

	In addition, a [=captured element=] has the following <dfn for="captured element">style definitions</dfn>:

	<dl dfn-for="captured element">
		: <dfn>group keyframes</dfn>
		:: A {{CSSKeyframesRule}} or null. Initially null.

		: <dfn>group animation name rule</dfn>
		:: A {{CSSStyleRule}} or null. Initially null.

		: <dfn>group styles rule</dfn>
		:: A {{CSSStyleRule}} or null. Initially null.

		: <dfn>old view-box rule</dfn>
		:: A {{CSSStyleRule}} or null. Initially null.

		: <dfn>new view-box rule</dfn>
		:: A {{CSSStyleRule}} or null. Initially null.

		: <dfn>image pair isolation rule</dfn>
		:: A {{CSSStyleRule}} or null. Initially null.

		: <dfn>view blend mode rule</dfn>
		:: A {{CSSStyleRule}} or null. Initially null.
	</dl>

	Note: These are used to update, and later remove styles
	from a [=/document=]'s [=document/view transition style sheet=].

## Additions to {{Document}} ## {#additions-to-document}

	A {{Document}} additionally has:

	<dl dfn-for=document>
		: <dfn>active DOM transition</dfn>
		:: a {{ViewTransition}} or null. Initially null.

		: <dfn>transition suppressing rendering</dfn>
		:: a boolean. Initially false.

		: <dfn>view transition style sheet</dfn>
		:: a [=/style sheet=].
			Initially a new [=/style sheet=] in the [=user-agent origin=], ordered after the [=HTML user agent style sheet=].

			Note: This is used to hold dynamic styles relating to transitions.

		: <dfn>show view-transition root pseudo-element</dfn>
		:: A boolean. Initially false.

			When this is true, [=this=]'s [=active DOM transition=]'s [=ViewTransition/transition root pseudo-element=] renders as a child of [=this=]'s [=document element=],
			and [=this=]'s [=document element=] is its [=originating element=].

			Note: The position of the [=ViewTransition/transition root pseudo-element=] within the [=document element=] does not matter, as the [=ViewTransition/transition root pseudo-element=]'s [=containing block=] is the [=snapshot root=].
	</dl>

# API # {#api}

## Additions to {{Document}} ## {#additions-to-document-api}

	<xmp class=idl>
		partial interface Document {
			ViewTransition startViewTransition(optional UpdateCallback? updateCallback = null);
		};

		callback UpdateCallback = Promise<any> ();
	</xmp>

	<dl class="domintro non-normative">
		: <code>{{ViewTransition|viewTransition}} = {{Document|document}}.{{startViewTransition}}({{UpdateCallback|updateCallback}})</code>
		:: Starts a new view transition.

			{{UpdateCallback|updateCallback}} is called asynchronously, once the current state of the document is captured.
			Then, when the promise returned by {{UpdateCallback|updateCallback}} fulfills, the new state of the document is captured.

			{{UpdateCallback|updateCallback}} is _always_ called, even if the transition cannot happen (e.g. due to duplicate `view-transition-name` values).
			The transition is an enhancement around the state change, so a failure to create a transition never prevents the state change.
			See [[#transitions-as-enhancements]] for more details on this principle.

			If the promise returned by {{UpdateCallback|updateCallback}} rejects, the transition is skipped.
	</dl>

### {{Document/startViewTransition()}} ### {#ViewTransition-prepare}

	<div algorithm>
		The [=method steps=] for <dfn method for=Document>startViewTransition(|updateCallback|)</dfn> are as follows:

		1. Let |transition| be a new {{ViewTransition}} object in [=this's=] [=relevant Realm=].

		1. Set |transition|'s [=ViewTransition/update callback=] to |updateCallback|.

		1. Let |document| be [=this's=] [=relevant global object's=] [=associated document=].

		1. If |document|'s [=active DOM transition=] is not null,
			then [=skip the view transition=] |document|'s [=active DOM transition=]
			with an "{{AbortError}}" {{DOMException}} in [=this's=] [=relevant Realm=].

			Note: This can result in two asynchronous [=ViewTransition/update callbacks=] running concurrently.
			One for the |document|'s current [=active DOM transition=], and another for this |transition|.
			As per the [design of this feature](#transitions-as-enhancements), it's assumed that the developer is using another feature or framework to correctly schedule these DOM changes.

		1. Set |document|'s [=active DOM transition=] to |transition|.

			Note: The process continues in [=setup view transition=], via [=perform pending transition operations=], which is called in [[#monkey-patch-to-rendering-algorithm]].

		1. Return |transition|.
	</div>

## The {{ViewTransition}} interface ## {#the-domtransition-interface}

	<xmp class=idl>
		[Exposed=Window]
		interface ViewTransition {
			readonly attribute Promise<undefined> updateCallbackDone;
			readonly attribute Promise<undefined> ready;
			readonly attribute Promise<undefined> finished;
			undefined skipTransition();
		};
	</xmp>

	Note: The {{ViewTransition}} represents and controls a single same-document transition.
	That is, it controls a transition where the starting and ending document are the same,
	possibly with changes to the document's DOM structure.

	<dl class="domintro non-normative">
		: <code>{{ViewTransition|viewTransition}}.{{ViewTransition/updateCallbackDone}}</code>
		:: A promise that fulfills when the promise returned by {{UpdateCallback|updateCallback}} fulfills, or rejects when it rejects.

			The View Transition API wraps a DOM change and creates a transition.
			However, sometimes you don't care about the success/failure of the transition animation,
			you just want to know if and when the DOM change happens.
			{{ViewTransition/updateCallbackDone}} is for that use-case.

		: <code>{{ViewTransition|viewTransition}}.{{ViewTransition/ready}}</code>
		:: A promise that fulfills once the pseudo-elements for the transition are created,
			and the animation is about to start.

			It rejects if the transition cannot begin.
			This can be due to misconfiguration, such as duplicate 'view-transition-name's,
			or if {{ViewTransition/updateCallbackDone}} returns a rejected promise.

			The point that {{ViewTransition/ready}} fulfills is the ideal opportunity to animate the view transition pseudo-elements with the [[web-animations-1#extensions-to-the-element-interface|web animation API]].

		: <code>{{ViewTransition|viewTransition}}.{{ViewTransition/finished}}</code>
		:: A promise that fulfills once the end state is fully visible and interactive to the user.

			It only rejects if {{UpdateCallback|updateCallback}} returns a rejected promise,
			as this indicates the end state wasn't created.

			Otherwise, if a transition fails to begin, or is skipped (from skipTransition()), the end state is still reached,
			so {{ViewTransition/finished}} fulfills.

		: <code>{{ViewTransition|viewTransition}}.{{ViewTransition/skipTransition}}()</code>
		:: Immediately finish the transition, or prevent it starting.

			This never prevents {{UpdateCallback|updateCallback}} being called,
			as the DOM change is separate to the transition. See [[#transitions-as-enhancements]] for more details on this principle.

			If this is called before {{ViewTransition/ready}} resolves, {{ViewTransition/ready}} will reject.

			If {{ViewTransition/finished}} hasn't resolved, it will fulfill or reject along with {{ViewTransition/updateCallbackDone}}.
	</dl>

	A {{ViewTransition}} has the following:

	<dl dfn-for="ViewTransition">
		: <dfn>named elements</dfn>
		:: a [=/map=], whose keys are [=view transition names=] and whose values are [=captured elements=].
			Initially a new [=map=].

		: <dfn>phase</dfn>
		:: One of the following [=phases=]:

			1. "`pending-capture`".
			1. "`update-callback-called`".
			1. "`animating`".
			1. "`done`".

			Note: For the most part, a developer using this API does not need to worry about the different phases, since they progress automatically.
			It is, however, important to understand what steps happen in each of the phases: when the snapshots are captured, when pseudo-element DOM is created, etc.
			The description of the phases below tries to be as precise as possible, with an intent to provide an unambiguous set of steps for implementors to follow in order to produce a spec-compliant implementation.

		: <dfn>update callback</dfn>
		:: an {{UpdateCallback}} or null. Initially null.

		: <dfn>ready promise</dfn>
		:: a {{Promise}}.
			Initially [=a new promise=] in [=this's=] [=relevant Realm=].

		: <dfn>update callback done promise</dfn>
		:: a {{Promise}}.
			Initially [=a new promise=] in [=this's=] [=relevant Realm=].

		: <dfn>finished promise</dfn>
		:: a {{Promise}}.
			Initially [=a new promise=] in [=this's=] [=relevant Realm=].

		: <dfn>transition root pseudo-element</dfn>
		:: a ''::view-transition''.
			Initially a new ''::view-transition''.

		: <dfn>initial snapshot root size</dfn>
		:: a [=tuple=] of two numbers (width and height), or null.
			Initially null.

			Note: This is used to detect changes in the [=snapshot root size=],
			which causes the transition to [=skip the view transition|skip=].
			[Discussion of this behavior](https://github.com/w3c/csswg-drafts/issues/8045).
	</dl>

	The {{ViewTransition/finished}} [=getter steps=] are to return [=this's=] [=ViewTransition/finished promise=].

	The {{ViewTransition/ready}} [=getter steps=] are to return [=this's=] [=ViewTransition/ready promise=].

	The {{ViewTransition/updateCallbackDone}} [=getter steps=] are to return [=this's=] [=ViewTransition/update callback done promise=].

	### {{ViewTransition/skipTransition()}} ### {#ViewTransition-skipTransition}

	<div algorithm>
		The [=method steps=] for <dfn method for="ViewTransition">skipTransition()</dfn> are:

		1. If [=this=]'s [=ViewTransition/phase=] is not "`done`",
			then [=skip the view transition=] for [=this=]
			with an "{{AbortError}}" {{DOMException}}.
	</div>

# Algorithms # {#algorithms}

## Monkey patches to rendering ## {#monkey-patch-to-rendering-algorithm}

	<div algorithm="monkey patch to rendering">
		Run the following steps before <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model:run-the-update-intersection-observations-steps">intersection observer steps</a> in the [=update the rendering=] steps:

		1. For each [=fully active=] {{Document}} in <var ignore>docs</var>,
			[=perform pending transition operations=] for that {{Document}}.

		Note: These steps will be added to the [=update the rendering=] in the HTML spec.
			As such, the prose style is written to match other steps in that algorithm.
	</div>

	<div algorithm="suppress rendering">
		In the definition for [=rendering opportunity=], add the following condition:

		A navigable has no rendering opportunities if active document has [=document/transition suppressing rendering=] set to true.

		Note: These steps will be added to the [=update the rendering=] in the HTML spec.
		See <a href="https://github.com/w3c/csswg-drafts/issues/7784">#7884</a> for more context.
	</div>

## [=Perform pending transition operations=] ## {#perform-pending-transition-operations-algorithm}

	<div algorithm>
		To <dfn>perform pending transition operations</dfn> given a {{Document}} |document|, perform the following steps:

		1. If |document|'s [=document/active DOM transition=] is not null, then:

			1. If |document|'s [=document/active DOM transition=]'s [=ViewTransition/phase=] is "`pending-capture`",
				then [=setup view transition=] with |document|'s [=document/active DOM transition=].

			1. Otherwise, if |document|'s [=document/active DOM transition=]'s [=ViewTransition/phase=] is "`animating`",
				then [=update transition DOM=] for |document|'s [=document/active DOM transition=].
	</div>

## [=Setup view transition=] ## {#setup-view-transition-algorithm}

	<div algorithm>
		To <dfn>setup view transition</dfn> given a {{ViewTransition}} |transition|,
			perform the following steps:

		1. Let |namedElements| be |transition|'s [=ViewTransition/named elements=].

		1. Let |usedTransitionNames| be a new [=/set=] of strings.

		1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

		1. Set |transition|'s [=ViewTransition/initial snapshot root size=] to the [=snapshot root size=].

		1. [=list/For each=] |element| of every {{Element}} and [=pseudo-element=] connected to |document|,
			in [paint order](https://drafts.csswg.org/css2/#painting-order):

			Issue: The link for "paint order" doesn't seem right.
				Is there a more canonical definition?

			1. If any [=flat tree=] ancestor of this |element| [=skips its contents=], then [=continue=].

			1. Let |transitionName| be the [=computed value=] of 'view-transition-name' for |element|.

			1. If |transitionName| is ''view-transition-name/none'',
				or |element| is [=element-not-rendered|not rendered=],
				then [=continue=].

			1. If any of the following is true:

				* |usedTransitionNames| [=list/contains=] |transitionName|.

				* |element| is not |element|'s [=tree/root=] and |element| does not have [=layout containment=].

				* |element| is not |element|'s [=tree/root=] and |element| allows [=fragmentation=].

				Then [=skip the view transition=] for |transition| with an "{{InvalidStateError}}" {{DOMException}}
					in |transition|'s [=relevant Realm=],
					and return.

			1. [=set/Append=] |transitionName| to |usedTransitionNames|.

			1. Let |capture| be a new [=captured element=] struct.

			1. Set |capture|'s [=old image=] to the result of [=capturing the image=] of |element|.

			1. Set |capture|'s [=captured element/old styles=] to the following:

				: 'transform'
				:: A transform that would map |element|'s [=border box=] from
					the [=snapshot root origin=] to its current visual position.
				:: This value is identity for the [=document element=].

				: 'width'
				: 'height'
				:: The size of the [=snapshot root=] if |element| is the [=document element=],
					otherwise, the width and height of |element|'s border box.

				: 'object-view-box'
				:: ''object-view-box/none'' if |element| is the [=document element=],
					otherwise, an 'object-view-box' value that, when applied to the old image,
					will cause the view box to coincide with |element|'s [=border box=] in the image.
					This must be expressed using ''&lt;basic-shape&gt;/inset()''.

				: 'writing-mode'
				:: The 'writing-mode' of |element|.

				: 'direction'
				:: The 'direction' of |element|.

				Issue: This needs proper types.

			1. Set |namedElements|[|transitionName|] to |capture|.

		1. Set |document|'s [=document/transition suppressing rendering=] to true.

		1. [=Queue a global task=] on the [=DOM manipulation task source=],
			given |transition|'s [=relevant global object=],
			to execute the following steps:

				Note: A task is queued here because the texture read back in [=capturing the image=] may be async,
					although the render steps in the HTML spec act as if it's synchronous.

				Issue: "DOM manipulation task source" doesn't link due to a [bikeshed bug](https://github.com/tabatkins/bikeshed/issues/2382).

			1. If |transition|'s [=ViewTransition/phase=] is "`done`", then abort these steps.

				Note: This happens if |transition| was [=skip the view transition|skipped=] before this point.

			1. [=Call the update callback=] of |transition|.

			1. [=promise/React=] to |transition|'s [=ViewTransition/update callback done promise=]:

				* If the promise does not settle within an implementation-defined timeout, then:

					1. If |transition|'s [=ViewTransition/phase=] is "`done`", then return.

						Note: This happens if |transition| was [=skip the view transition|skipped=] before this point.

					1. [=skip the view transition=] |transition| with a "{{TimeoutError}}" {{DOMException}}.

				* If the promise was resolved, then:

					1. If |transition|'s [=ViewTransition/phase=] is "`done`", then return.

						Note: This happens if |transition| was [=skip the view transition|skipped=] before this point.

					1. If |transition|'s [=ViewTransition/initial snapshot root size=] is not equal to the [=snapshot root size=],
						then [=skip the view transition=] for |transition|, and return.

					1. Set [=document/transition suppressing rendering=] to false.

					1. Let |usedTransitionNames| be a new [=/set=] of strings.

					1. [=list/For each=] |element| of every {{Element}} and [=pseudo-element=] connected to |document|,
						in [paint order](https://drafts.csswg.org/css2/#painting-order):

						Issue: The link for "paint order" doesn't seem right.
							Is there a more canonical definition?

						1. If any [=flat tree=] ancestor of this |element| [=skips its contents=], then [=continue=].

						1. Let |transitionName| be the [=computed value=] of 'view-transition-name' for |element|.

						1. If |transitionName| is ''view-transition-name/none'',
							or |element| is [=element-not-rendered|not rendered=],
							then [=continue=].

						1. If any of the following is true:

							* |usedTransitionNames| [=list/contains=] |transitionName|.

							* |element| is not |element|'s [=tree/root=]
								and |element| does not have [=layout containment=].

							* |element| is not |element|'s [=tree/root=]
								and |element| allows [=fragmentation=].

							Then [=skip the view transition=] |transition| with an "{{InvalidStateError}}" {{DOMException}},
								and return.

						1. [=set/Append=] |transitionName| to |usedTransitionNames|.

						1. If |namedElements|[|transitionName|] does not [=map/exist=],
							then set |namedElements|[|transitionName|] to a new [=captured element=] struct.

						1. Let |capture| be |namedElements|[|transitionName|].

						1. Let |capture|'s [=new element=] item be |element|.

					1. [=Setup transition pseudo-elements=] for |transition|.

					1. [=Update pseudo-element styles=] for |transition|.

						Note: The above steps will require running document lifecycle phases,
							to compute information calculated during style/layout.

					1. Set |transition|'s [=ViewTransition/phase=] to "`animating`".

					1. [=Resolve=] |transition|'s [=ViewTransition/ready promise=].

				* If the promise was rejected with reason |reason|, then:

					1. If |transition|'s [=ViewTransition/phase=] is "`done`", then return.

						Note: This happens if |transition| was [=skip the view transition|skipped=] before this point.

					1. [=Skip the view transition=] |transition| with |reason|.
	</div>

## Skip the view transition ## {#skip-the-view-transition-algorithm}

	<div algorithm>
		To <dfn>skip the view transition</dfn> for {{ViewTransition}} |transition| with reason |reason|:

		1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

		1. [=Assert=]: |document|'s [=document/active DOM transition=] is |transition|.

		1. [=Assert=]: |transition|'s [=ViewTransition/phase=] is not "`done`".

		1. If |transition|'s [=ViewTransition/phase=] is [=phases/before=] "`update-callback-called`", then [=call the update callback=] of |transition|.

		1. Set [=document/transition suppressing rendering=] to false.

		1. [=Clear view transition=] |transition|.

		1. Set |transition|'s [=ViewTransition/phase=] to "`done`".

		1. If |transition|'s [=ViewTransition/ready promise=] has not yet been resolved, [=reject=] it with |reason|.

			Note: The ready promise would've been resolved if {{ViewTransition/skipTransition()}} is called after we start animating.

		1. [=promise/React=] to |transition|'s [=ViewTransition/update callback done promise=]:

			* If |transition|'s [=ViewTransition/update callback done promise=] was resolved,
				then [=resolve=] |transition|'s [=ViewTransition/finished promise=].

			* If |transition|'s [=ViewTransition/update callback done promise=] was rejected with reason |reason|,
				then [=reject=] |transition|'s [=ViewTransition/finished promise=] with |reason|.
	</div>

## [=Capture the image=] ## {#capture-the-image-algorithm}

	<div algorithm>
		To <dfn lt="capture the image|capturing the image">capture the image</dfn> given an {{Element}} |element|, perform the following steps.
		They return an image.

		1. If |element| is the [=document element=], then:

			1. Render the region of the |element| and the [=top layer=] that intersects the [=snapshot root=],
				on a transparent canvas the size of the [=snapshot root=],
				following the [=capture rendering characteristics=], and these additional characteristics:

				- Areas outside |element|'s [=scrolling box=] should be rendered as if they were scrolled to, without moving or resizing the [=layout viewport=].
					This must not trigger events related to scrolling or resizing, such as {{IntersectionObserver}}s.

					<figure>
						<img src="diagrams/phone-browser-with-url.svg" width="202" height="297" alt="A phone browser window, showing a URL bar, a fixed-position element directly beneath it, and some page content beneath that. A scroll bar indicates the page has been scrolled significantly.">
						<img src="diagrams/phone-browser-without-url.svg" width="202" height="297" alt="The captured snapshot. It shows that content beneath the URL bar was included in the capture.">
						<figcaption>
							An example of what the user sees compared to the captured snapshot.
							This example assumes the root is the only element with a transition name.
						</figcaption>
					</figure>

				- Areas that cannot be scrolled to (i.e. they are out of scrolling bounds),
					should render the [=canvas background=].

					<figure>
						<img src="diagrams/phone-browser-scrolled-to-top-with-url.svg" width="202" height="297" alt="A phone browser window, showing a URL bar, and some content beneath. A scroll bar indicates the page is scrolled to the top.">
						<img src="diagrams/phone-browser-scrolled-to-top-without-url.svg" width="202" height="297" alt="The captured snapshot. It shows the area underneath the URL bar as the same color as the rest of the document.">
						<figcaption>
							An example of what the user sees compared to the captured snapshot.
							This example assumes the root is the only element with a transition name.
						</figcaption>
					</figure>

			1. Return the canvas as an image.
				The natural size of the image is equal to the [=snapshot root=].

		1. Otherwise:

			1. Render |element| and its [=tree/descendants=],
				at the same size it appears in its [=node document=],
				over an infinite transparent canvas,
				following the [=capture rendering characteristics=].

			1. Let |interestRectangle| be the result of [=computing the interest rectangle=] for |element|.

				Note: The |interestRectangle| is the subset of |element|'s [=ink overflow rectangle=] that should be captured.
					This is required for cases where an element's ink overflow rectangle needs to be clipped because of hardware constraints.
					For example, if it exceeds the maximum texture size.

			1. Return the portion of the canvas within |interestRectangle| as an image.
				The natural size of the image is equal to the |interestRectangle| bounds.
	</div>

	<div algorithm>
		The <dfn>capture rendering characteristics</dfn> are as follows:

		* The origin of |element|'s [=ink overflow rectangle=] is anchored to canvas origin.

		* If the referenced element has a transform applied to it (or its ancestors),
			then the transform is ignored.

			Note: This transform is applied to the snapshot using the `transform` property of the associated ''::view-transition-group'' pseudo-element.

		* Effects on the element, such as 'opacity' and 'filter' are applied to the capture.

		* [=list/For each=] |descendant| of [=shadow-including descendant=] {{Element}} and [=pseudo-element=] of |element|,
			if |descendant| has a [=computed value=] of 'view-transition-name' that is not ''view-transition-name/none'',
			then skip painting |descendant|.

			Note: This is necessary since the descendant will generate its own snapshot which will be displayed and animated independently.

			Issue: Refactor this so the algorithm takes a set of elements that will be captured. This centralizes the logic for deciding if an element should be included or not.

			Issue: Specify what happens with 'mix-blend-mode'.
	</div>

## [=Update transition DOM=] ## {#update-transition-dom-algorithm}

	<div algorithm>
		To <dfn>update transition DOM</dfn> given a {{ViewTransition}} |transition|:

		1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

		1. Let |hasActiveAnimations| be a boolean, initially false.

		1. [=list/For each=] |element| of |transition|'s [=ViewTransition/transition root pseudo-element=]'s [=tree/inclusive descendants=]:

			1. For each |animation| whose [=timeline=] is a [=document timeline=] associated with |document|,
				and contains at least one [=animation/associated effect=] whose [=effect target=] is |element|,
				set |hasActiveAnimations| to true if any of the following conditions is true:

				Issue: The prose around "effect target" is incorrect, but [#8001](https://github.com/w3c/csswg-drafts/issues/8001) needs to land before it can be fixed.

				- |animation|'s [=animation/play state=] is [=play state/paused=] or [=play state/running=].

				- |document|'s [=pending animation event queue=] has any events associated with |animation|.

					Issue: This prose isn't quite right, but it's blocked on [#8004](https://github.com/w3c/csswg-drafts/issues/8004).

		1. If |hasActiveAnimations| is false:

			1. Set |transition|'s [=ViewTransition/phase=] to "`done`".

			1. [=Clear view transition=] |transition|.

			1. [=Resolve=] |transition|'s [=ViewTransition/finished promise=].

			1. Return.

		1. If |transition|'s [=ViewTransition/initial snapshot root size=] is not equal to the [=snapshot root size=],
			then [=skip the view transition=] for |transition|, and return.

		1. [=Update pseudo-element styles=] for |transition|.

			Note: The above implies that a change in incoming element's size or position will cause a new keyframe to be generated.
				This can cause a visual jump.
				We could retarget smoothly but don't have a use-case to justify the complexity.
				See [issue 7813](https://github.com/w3c/csswg-drafts/issues/7813) for details.
	</div>

## [=Compute the interest rectangle=] ## {#compute-the-interest-rectangle-algorithm}

	<div algorithm>
		To <dfn lt="computing the interest rectangle|compute the interest rectangle">compute the interest rectangle</dfn> of an {{Element}} |element|, perform the following steps.
		They return a rectangle.

		1. Assert: |element| is not |element|'s [=node document=]'s [=document element=].

			Note: The [=document element=] is captured differently, as specified in [=capture the image=].

		1. If |element|'s [=ink overflow area=] does not exceed an implementation-defined maximum size,
			then return a rectangle that is equal to |element|'s [=ink overflow rectangle=].

		1. Otherwise:

			Issue: Define the algorithm used to clip the snapshot when it exceeds max size.
	</div>

## [=Setup transition pseudo-elements=] ## {#setup-transition-pseudo-elements-algorithm}

	<div algorithm>
		To <dfn>setup transition pseudo-elements</dfn> for a {{ViewTransition}} |transition|:

		1. Let |document| be [=this's=] [=relevant global object's=] [=associated document=].

		1. Set |document|'s [=show view-transition root pseudo-element=] to true.

		1. [=map/For each=] |transitionName| â†’ |capturedElement| of |transition|'s [=ViewTransition/named elements=]:

			1. Let |group| be a new ''::view-transition-group()'',
				with its [=named view-transition pseudo-element/view-transition name=] set to |transitionName|.

			1. Append |group| to |transition|'s [=ViewTransition/transition root pseudo-element=].

			1. Let |imagePair| be a new ''::view-transition-image-pair()'',
				with its [=named view-transition pseudo-element/view-transition name=] set to |transitionName|.

			1. Append |imagePair| to |group|.

			1. If |capturedElement|'s [=captured element/old image=] is not null, then:

				1. Let |old| be a new ''::view-transition-old()'',
					with its [=named view-transition pseudo-element/view-transition name=] set to |transitionName|,
					displaying |capturedElement|'s [=captured element/old image=].

				1. Append |old| to |imagePair|.

				1. Let |oldViewBox| be |capturedElement|'s [=captured element/old styles=] 'object-view-box' property.

				1. Set |capturedElement|'s [=captured element/old view-box rule=] to a new {{CSSStyleRule}} representing the following CSS,
					and append it to |document|'s [=document/view transition style sheet=].

					<!-- deliberately using <pre> so the example can contain <var> references -->
					<pre highlight="css">
						html::view-transition-old(<var>transitionName</var>) {
							object-view-box: <var>oldViewBox</var>;
						}
					</pre>

					Note: The above code example contains variables to be replaced.

			1. If |capturedElement|'s [=new element=] is not null, then:

				1. Let |new| be a new ''::view-transition-new()'',
					with its [=named view-transition pseudo-element/view-transition name=] set to |transitionName|,
					displaying the [=capture the image=] of |capturedElement|'s [=new element=].

				1. Append |new| to |imagePair|.

				The [=new element=] and its contents
				(the flat tree descendants of the element, including both text and elements, or the replaced content of a replaced element),
				except the |transition|'s [=ViewTransition/transition root pseudo-element=]'s [=tree/inclusive descendants=],
				are not painted (as if they had visibility: hidden)
				and do not respond to hit-testing (as if they had pointer-events: none) until |new| exists.

			1. If both of |capturedElement|'s [=captured element/old image=] and [=captured element/new element=]
				are not null, then:

				1. Let |transform| be |capturedElement|'s [=captured element/old styles=]'s 'transform' property.

				1. Let |width| be |capturedElement|'s [=captured element/old styles=]'s 'width' property.

				1. Let |height| be |capturedElement|'s [=captured element/old styles=]'s 'height' property.

				1. Set |capturedElement|'s [=captured element/group keyframes=] to a new {{CSSKeyframesRule}} representing the following CSS,
					and append it to |document|'s [=document/view transition style sheet=]:

					<!-- deliberately using <pre> so the example can contain <var> references -->
					<pre highlight="css">
						@keyframes -ua-view-transition-group-anim-<var>transitionName</var> {
							from {
								transform: <var>transform</var>;
								width: <var>width</var>;
								height: <var>height</var>;
							}
						}
					</pre>

					Note: The above code example contains variables to be replaced.

				1. Set |capturedElement|'s [=captured element/group animation name rule=] to a new {{CSSStyleRule}} representing the following CSS,
					and append it to |document|'s [=document/view transition style sheet=]:

					<!-- deliberately using <pre> so the example can contain <var> references -->
					<pre highlight="css">
						html::view-transition-group(<var>transitionName</var>) {
							animation-name: -ua-view-transition-group-anim-<var>transitionName</var>;
						}
					</pre>

					Note: The above code example contains variables to be replaced.

				1. Set |capturedElement|'s [=captured element/image pair isolation rule=] to a new {{CSSStyleRule}} representing the following CSS,
					and append it to |document|'s [=document/view transition style sheet=]:

					<!-- deliberately using <pre> so the example can contain <var> references -->
					<pre highlight="css">
						html::view-transition-image-pair(<var>transitionName</var>) {
							isolation: isolate;
						}
					</pre>

					Note: The above code example contains variables to be replaced.

				1. Set |capturedElement|'s [=captured element/view blend mode rule=] to a new {{CSSStyleRule}} representing the following CSS,
					and append it to |document|'s [=document/view transition style sheet=]:

					<!-- deliberately using <pre> so the example can contain <var> references -->
					<pre highlight="css">
						html::view-transition-old(<var>transitionName</var>),
						html::view-transition-new(<var>transitionName</var>) {
							mix-blend-mode: plus-lighter;
						}
					</pre>

					Note: The above code example contains variables to be replaced.

					Note: ''mix-blend-mode: plus-lighter'' ensures that the blending of identical pixels from the old and new images results in the same color value as those pixels, and achieves a "correct" cross-fade.

					Issue: Isolation and the dynamic setting of blending is only necessary to get the right cross-fade between new and old image pixels.
					Would it be simpler to always add it and try to optimize in the implementation?
	</div>

## [=Update pseudo-element styles=] ## {#style-transition-pseudo-elements-algorithm}

	<div algorithm>
		To <dfn>update pseudo-element styles</dfn> for a {{ViewTransition}} |transition|:

		1. [=map/For each=] |transitionName| â†’ |capturedElement| of |transition|'s [=ViewTransition/named elements=]:

			1. Let |width|, |height|, |transform|, |writingMode|, and |direction| be null.

			1. If |capturedElement|'s [=new element=] is null, then:

				1. Set |width| to |capturedElement|'s [=captured element/old styles=] 'width' property.

				1. Set |height| to |capturedElement|'s [=captured element/old styles=] 'height' property.

				1. Set |transform| to |capturedElement|'s [=captured element/old styles=] 'transform' property.

				1. Set |writingMode| to |capturedElement|'s [=captured element/old styles=] 'writing-mode' property.

				1. Set |direction| to |capturedElement|'s [=captured element/old styles=] 'direction' property.

			1. Otherwise:

				1. Set |width| to the current width of |capturedElement|'s [=new element=]'s [=border box=].

				1. Set |height| to the current height of |capturedElement|'s [=new element=]'s [=border box=].

				1. Set |transform| to a transform that would map |capturedElement|'s [=new element=]'s [=border box=] from the [=snapshot root origin=] to its current visual position.

				1. Set |writingMode| to the [=computed value=] of 'writing-mode' on |capturedElement|'s [=new element=].

				1. Set |direction| to the [=computed value=] of 'direction' on |capturedElement|'s [=new element=].

			1. If |capturedElement|'s [=captured element/group styles rule=] is null,
				then set |capturedElement|'s [=captured element/group styles rule=] to a new {{CSSStyleRule}} representing the following CSS,
				and append it to |document|'s [=document/view transition style sheet=].

				Otherwise, update |capturedElement|'s [=captured element/group styles rule=] to match the following CSS:

				<!-- deliberately using <pre> so the example can contain <var> references -->
				<pre highlight="css">
					html::view-transition-group(<var>transitionName</var>) {
						width: <var>width</var>;
						height: <var>height</var>;
						transform: <var>transform</var>;
						writing-mode: <var>writingMode</var>;
						direction: <var>direction</var>;
					}
				</pre>

				Note: The above code example contains variables to be replaced.

			1. If |capturedElement|'s [=new element=] is not null, then:

				1. Let |new| be the ''::view-transition-new()'' [=replaced element=] pseudo-element,
					with the name |transitionName|,
					displaying the [=capture the image=] of |capturedElement|'s [=new element=].

				1. Let |newViewBox| be an ''object-view-box'' value that when applied to |new|,
					will cause the view box to coincide with |capturedElement|'s [=new element=]'s [=border box=] in the image.
					This must be expressed using ''&lt;basic-shape&gt;/inset()''.

				1. If |capturedElement|'s [=captured element/new view-box rule=] is null,
					then set |capturedElement|'s [=captured element/new view-box rule=] to a new {{CSSStyleRule}} representing the following CSS,
					and append it to |document|'s [=document/view transition style sheet=].

					Otherwise, update |capturedElement|'s [=captured element/new view-box rule=] to match the following CSS:

					<!-- deliberately using <pre> so the example can contain <var> references -->
					<pre highlight="css">
						html::view-transition-new(<var>transitionName</var>) {
							object-view-box: <var>newViewBox</var>;
						}
					</pre>

					Note: The above code example contains variables to be replaced.

		This algorithm must be executed to update styles in [=user-agent origin=] if its effects can be observed by a web API.

		Note: An example of such a web API is `window.getComputedStyle(document.documentElement, "::view-transition")`.
	</div>

	<div algorithm>
		To <dfn>call the update callback</dfn> of a {{ViewTransition}} |transition|:

		1. [=Assert=]: |transition|'s [=ViewTransition/phase=] is [=phases/before=] "`update-callback-called`".

		1. Let |callbackPromise| be [=a new promise=] in |transition|'s [=relevant Realm=].

			* If |transition|'s [=ViewTransition/update callback=] is null, then resolve |callbackPromise|.

			* Otherwise, let |callbackPromise| be the result of [=/invoking=] |transition|'s [=ViewTransition/update callback=].

		1. Set |transition|'s [=ViewTransition/phase=] to "`update-callback-called`".

		1. [=promise/React=] to |callbackPromise|:

			* If |callbackPromise| was resolved, then [=resolve=] |transition|'s [=ViewTransition/update callback done promise=].

			* If |callbackPromise| was rejected with reason |r|, then [=reject=] |transition|'s [=ViewTransition/update callback done promise=] with |r|.
	</div>

## [=Clear view transition=] ## {#clear-view-transition-algorithm}

	<div algorithm>
		To <dfn>clear view transition</dfn> of a {{ViewTransition}} |transition|:

		1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

		1. [=Assert=]: |document|'s [=document/active DOM transition=] is |transition|.

		1. [=list/For each=] |capturedElement| of |transition|'s [=ViewTransition/named elements=]' [=map/values=]:

			1. [=list/For each=] |style| of |capturedElement|'s [=captured element/style definitions=]:

				1. If |style| is not null,
					and |style| is in |document|'s [=document/view transition style sheet=],
					then remove |style| from |document|'s [=document/view transition style sheet=].

		1. Set |document|'s [=document/show view-transition root pseudo-element=] to false.

		1. Set |document|'s [=document/active DOM transition=] to null.
	</div>

<h2 id="priv" class="no-num">Privacy Considerations</h2>

This specification introduces no new privacy considerations.

<h2 id="sec" class="no-num">Security Considerations</h2>

The images generated using [=capture the image=] algorithm could contain cross-origin data (if the Document is embedding cross-origin resources) or sensitive information like visited links.
The implementations must ensure this data can not be accessed by the Document.
This should be feasible since access to this data should already be prevented in the default rendering of the Document.
