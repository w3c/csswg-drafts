<pre class='metadata'>
Title: CSS Cascading and Inheritance Level 5
Shortname: css-cascade
Level: 5
Status: ED
Work Status: Exploring
Group: csswg
ED: https://drafts.csswg.org/css-cascade/
TR: https://www.w3.org/TR/css-cascade-5/
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Miriam E. Suzanne, Invited Expert, http://miriamsuzanne.com/contact, w3cid 117151
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/, w3cid 42199
Abstract: This CSS module describes how to collate style rules and assign values to all properties on all elements. By way of cascading and inheritance, values are propagated for all properties on all elements.
Abstract:
Abstract: New in this level is <a>cascade layers</a>.
Ignored Terms: auto, flex items, <supports-condition>
Include Can I Use Panels: yes
Informative Classes: ex
</pre>

<pre class=link-defaults>
spec:css-syntax-3; type:dfn; text:css identifier
spec:dom; type:dfn; text:shadow tree
spec:css-backgrounds-3; type:value; for:border-style; text:dotted
spec:css-color-4; type:property; text:color
spec:css-values-3; type: value; text:ex
spec:css-conditional-3; type:at-rule; text:@media
spec:mediaqueries-4; type:type; for:@media; text:all
spec:mediaqueries-4; type:type; text:<media-query>
spec:css2; type:property; text:display
spec:css2; type:value; text:red
</pre>

<pre class=ignored-specs>
spec:mediaqueries-5
spec:css-values-4
spec:css-fonts-4
</pre>

<h2 id="intro">
Introduction</h2>

	CSS defines a finite set of parameters,
	called <dfn export for=CSS lt="property">properties</dfn>,
	that direct the rendering of a document.
	Each [=property=] has a name
	(e.g., 'color', 'font-size', or 'border-style'),
	a value space
	(e.g., <<color>>, <<length-percentage>>, ''[ solid | dashed | dotted | &hellip; ]''),
	and a defined behavior on the rendering of the document.
	Properties values are assigned to various parts of the document
	via [=property declarations=],
	which assign the property a value
	(e.g. ''red'', ''12pt'', ''dotted'')
	for the associated element or box.

	One of the fundamental design principles of CSS is <a lt="cascade">cascading</a>,
	which allows several style sheets to influence the presentation of a document.
	When different declarations try to set a value for the same element/property combination,
	the conflicts must somehow be resolved.

	The opposite problem arises when no declarations try to set a the value for an element/property combination.
	In this case, a value is be found by way of <a>inheritance</a>
	or by looking at the property's <a>initial value</a>.

	The <a href="#cascade">cascading</a> and <a href="#defaulting">defaulting</a> process takes a set of declarations as input,
	and outputs a <a>specified value</a> for each property on each element.

	The rules for finding the specified value for all properties on all elements in the document are described in this specification.
	The rules for finding the specified values in the page context and its margin boxes are described in [[css-page-3]].

<h3 id="placement">
Module Interactions</h3>

	<em>This section is normative.</em>

	This module replaces and extends
	the rules for assigning property values, cascading, and inheritance defined in [[!CSS2]] chapter 6.

	Other CSS modules may expand the definitions of some of the syntax and features defined here.
	For example, the Media Queries Level 4 specification,
	when combined with this module, expands the definition of
	the <<media-query>> value type as used in this specification.

	For the purpose of this specification,
	<a>text nodes</a> are treated as <a spec=css-display-3>element</a> children of their associated element,
	and possess the full set of properties;
	since they cannot be targeted by selectors
	all of their computed values are assigned by <a href="#defaulting">defaulting</a>.

<!--
 ███████  ████ ██     ██ ████████   ███████  ████████  ████████
██     ██  ██  ███   ███ ██     ██ ██     ██ ██     ██    ██
██ ███ ██  ██  ████ ████ ██     ██ ██     ██ ██     ██    ██
██ ███ ██  ██  ██ ███ ██ ████████  ██     ██ ████████     ██
██ █████   ██  ██     ██ ██        ██     ██ ██   ██      ██
██         ██  ██     ██ ██        ██     ██ ██    ██     ██
 ███████  ████ ██     ██ ██         ███████  ██     ██    ██
-->

<h2 id="at-import">
Importing Style Sheets: the ''@import'' rule</h2>

	The <dfn>@import</dfn> rule allows users to import style rules from other style sheets.
	If an ''@import'' rule refers to a valid stylesheet,
	user agents must treat the contents of the stylesheet as if they were written in place of the ''@import'' rule,
	with two exceptions:

	* If a feature
		(such as the ''@namespace'' rule)
		<em>explicitly</em> defines that it only applies to a particular stylesheet,
		and not any imported ones,
		then it doesn't apply to the imported stylesheet.

	* If a feature relies on the relative ordering of two or more constructs in a stylesheet
		(such as the requirement that ''@namespace'' rules must not have any other rules other than
		''@import'' preceding it),
		it only applies between constructs in the same stylesheet.

	<p class='example'>
		For example, declarations in style rules from imported stylesheets interact with the cascade
		as if they were written literally into the stylesheet at the point of the ''@import''.

	Any ''@import'' rules must precede all other valid at-rules and style rules in a style sheet
	(ignoring ''@charset''), or else the ''@import'' rule is invalid.
	The syntax of ''@import'' is:

	<pre class='prod'>
		@import [ <<url>> | <<string>> ]
		        [ supports( [ <<supports-condition>> | <<declaration>> ] ) ]?
		        <<media-query-list>>? ;</pre>

	where the <<url>> or <<string>> gives the URL of the style sheet to be imported,
	and the optional [<<supports-condition>>|<<declaration>>] and <<media-query-list>>
	(collectively, the <dfn export>import conditions</dfn>)
	state the conditions under which it applies.

	<div class="example">
		The following <a href="#conditional-import">conditional <css>@import</css> rule</a>
		only loads the style sheet when the UA
		<a href="https://www.w3.org/TR/css-conditional-3/#support-definition">supports</a> ''display: flex'',
		and only applies the style sheet on a <a href="https://www.w3.org/TR/CSS2/media.html#media-types">handheld</a> device
		with a <a href="https://www.w3.org/TR/mediaqueries-4/#width">maximum viewport width</a> of 400px.

		<pre>@import url("narrow.css") supports(display: flex) handheld and (max-width: 400px);</pre>
	</div>

	If a <<string>> is provided,
	it must be interpreted as a <<url>> with the same value.

	<div class="example">
		The following lines are equivalent in meaning
		and illustrate both ''@import'' syntaxes
		(one with ''url()'' and one with a bare string):

		<pre class='lang-css'>
		@import "mystyle.css";
		@import url("mystyle.css");
		</pre>
	</div>

<h3 id=conditional-import>
Conditional ''@import'' Rules</h3>

	The <a>import conditions</a> allow the import to be media&ndash; or feature-support&ndash;dependent.
	In the absence of any <a>import conditions</a>, the import is unconditional.
	(Specifying ''@media/all'' for the <<media-query-list>> has the same effect.)
	If the <a>import conditions</a> do not match,
	the rules in the imported stylesheet do not apply,
	exactly as if the imported stylesheet were wrapped in ''@media'' and/or ''@supports'' blocks with the given conditions.

	<div class=example>
		The following rules illustrate how ''@import'' rules can be made media-dependent:

		<pre class='lang-css'>
		@import url("fineprint.css") print;
		@import url("bluish.css") projection, tv;
		@import url("narrow.css") handheld and (max-width: 400px);
		</pre>
	</div>

	User agents may therefore avoid fetching a conditional import
	as long as the <a>import conditions</a> do not match.
	Additionally, if a <<supports-condition>> blocks the application of the imported style sheet,
	the UA <em>must not</em> fetch the style sheet (unless it is loaded through some other link)
	and <em>must</em> return null for the import rule's CSSImportRule.styleSheet value
	(even if it is loaded through some other link).

	<div class="example">
		The following rule illustrates how an author can provide fallback rules for legacy user agents
		without impacting network performance on newer user agents:

		<pre class='lang-css'>
		@import url("fallback-layout.css") supports(not (display: flex));
		@supports (display: flex) {
			...
		}
		</pre>
	</div>

	A <dfn><<media-query>></dfn> corresponds to the <code>media_query_list</code> production
	and is interpreted as a <a>media query</a>,
	and a <dfn><<supports-condition>></dfn> corresponds to a <code>supports_condition</code> production
	and is interpreted as an ''@supports'' condition.
	If a <dfn><<declaration>></dfn> (a <code>declaration</code> production) is given in place of a <<supports-condition>>,
	it must be interpreted as a <code>supports_declaration_condition</code> production
	(i.e. the extra set of parentheses is implied)
	and treated as a <<supports-condition>>.

	<div class="example">
		For example, the following two lines are equivalent:
		<pre class='lang-css'>
		@import "mystyle.css" supports(display: flex);
		@import "mystyle.css" supports((display: flex));
		</pre>
	</div>

	The evaluation and full syntax of the <a>import conditions</a>
	are defined by the <a href="https://www.w3.org/TR/mediaqueries-4/">Media Queries</a> [[!MEDIAQ]]
	and <a href="https://www.w3.org/TR/css-conditional-3/">CSS Conditional Rules</a> [[!CSS-CONDITIONAL-3]] specifications.

<h3 id=import-processing>
Processing Stylesheet Imports</h3>

	When the same style sheet is imported or linked to a document in multiple places,
	user agents must process (or act as though they do) each link
	as though the link were to an independent style sheet.

	Note: This does not place any requirements on resource fetching,
	only how the style sheet is reflected in the CSSOM and used in specs such as this one.
	Assuming appropriate caching,
	it is perfectly appropriate for a UA to fetch a style sheet only once,
	even though it's linked or imported multiple times.

	The <a>origin</a> of an imported style sheet is the <a>origin</a> of the style sheet that imported it.

	The <a>environment encoding</a> of an imported style sheet is the encoding of the style sheet that imported it. [[css-syntax-3]]

<h3 id='content-type'>
Content-Type of CSS Style Sheets</h3>

	The processing of imported style sheets depends on the actual type of the linked resource:

	* If the resource does not have <l spec=html>[=Content-Type metadata=]</l>,
		the type is treated as <code>text/css</code>.
	* If the host document is in [=quirks mode=],
		and the host document's origin is [=same origin=]
		with the linked resource [=/response's=] [=response/URL's=] origin,
		the type is treated as <code>text/css</code>.
	* Otherwise, the type is determined from its <l spec=html>[=Content-Type metadata=]</l>.

	If the linked resource's type is <code>text/css</code>,
	it must be interpreted as a CSS style sheet.
	Otherwise, it must be interpreted as a network error.


<!--
 ██████  ██     ██  ███████  ████████  ████████ ██     ██    ███    ██    ██ ████████
██    ██ ██     ██ ██     ██ ██     ██    ██    ██     ██   ██ ██   ███   ██ ██     ██
██       ██     ██ ██     ██ ██     ██    ██    ██     ██  ██   ██  ████  ██ ██     ██
 ██████  █████████ ██     ██ ████████     ██    █████████ ██     ██ ██ ██ ██ ██     ██
      ██ ██     ██ ██     ██ ██   ██      ██    ██     ██ █████████ ██  ████ ██     ██
██    ██ ██     ██ ██     ██ ██    ██     ██    ██     ██ ██     ██ ██   ███ ██     ██
 ██████  ██     ██  ███████  ██     ██    ██    ██     ██ ██     ██ ██    ██ ████████
-->

<h2 id='shorthand'>
Shorthand Properties</h2>

	Some properties are <dfn export lt="shorthand property | shorthand">shorthand properties</dfn>,
	meaning that they allow authors to specify the values of several properties with a single property.
	A <a>shorthand property</a> sets all of its <dfn export lt="longhand | longhand property | sub-property">longhand sub-properties</dfn>,
	exactly as if expanded in place.

	When values are omitted from a <a>shorthand</a> form,
	unless otherwise defined,
	each “missing” <a>sub-property</a> is assigned its <a>initial value</a>.

	<div class='note'>
		This means that a <a>shorthand</a> property declaration always sets <em>all</em> of its <a>sub-properties</a>,
		even those that are not explicitly set.
		Carelessly used, this might result in inadvertently resetting some <a>sub-properties</a>.
		Carefully used, a <a>shorthand</a> can guarantee a “blank slate”
		by resetting <a>sub-properties</a> inadvertently cascaded from other sources.

		For example, writing ''background: green'' rather than ''background-color: green''
		ensures that the background color overrides any earlier declarations
		that might have set the background to an image with 'background-image'.
	</div>

	<div class='example'>
		For example, the CSS Level 1 'font' property
		is a <a>shorthand</a> property for setting <a property>font-style</a>, <a property>font-variant</a>, <a property>font-weight</a>, 'font-size', 'line-height', and <a property>font-family</a> all at once.
		The multiple declarations of this example:

		<pre class='lang-css'>
		h1 {
			font-weight: bold;
			font-size: 12pt;
			line-height: 14pt;
			font-family: Helvetica;
			font-variant: normal;
			font-style: normal;
		}
		</pre>

		can therefore be rewritten as

		<pre class='lang-css'>h1 { font: bold 12pt/14pt Helvetica }</pre>

		As more 'font' <a>sub-properties</a> are introduced into CSS,
		the shorthand declaration resets those to their initial values as well.
	</div>

	In some cases, a <a>shorthand</a> might have different syntax
	or special keywords
	that don't directly correspond to values of its <a>sub-properties</a>.
	(In such cases, the <a>shorthand</a> will explicitly define the expansion of its values.)

	In other cases, a property might be a <dfn export>reset-only sub-property</dfn> of the shorthand:
	Like other <a>sub-properties</a>, it is reset to its initial value by the shorthand when unspecified,
	but the shorthand might not include syntax to set the <a>sub-property</a>
	to any of its other values.
	<span class=ex>For example, the 'border' shorthand resets 'border-image'
	to its initial value of ''border-image/none'',
	but has no syntax to set it to anything else. [[css-backgrounds-3]]</span>

	If a <a>shorthand</a> is specified as one of the <a href="https://www.w3.org/TR/css-values-3/#common-keywords">CSS-wide keywords</a> [[!css-values-3]],
	it sets all of its <a>sub-properties</a> to that keyword,
	including any that are <a>reset-only sub-properties</a>.
	(Note that these keywords cannot be combined with other values in a single declaration, not even in a shorthand.)

	Declaring a <a>shorthand</a> property to be ''!important''
	is equivalent to declaring all of its <a>sub-properties</a> to be ''!important''.

<h3 id="aliasing">
Aliasing</h3>

	Properties sometimes change names after being supported for a while,
	such as vendor-prefixed properties being standardized.
	The original name still needs to be supported for compatibility reasons,
	but the new name is preferred.
	To accomplish this, CSS defines two different ways of “aliasing” old syntax to new syntax.

	<dl export>
		<dt><dfn lt="legacy name alias">legacy name aliases</dfn>
		<dd>
			When the old property’s syntax is identical to
			or a subset of the value space of the new property’s syntax,
			the two names are aliased with an operation on par with case-mapping:
			at parse time, the old property is converted into the new property.
			This conversion also applies in the CSSOM,
			both for string arguments and property accessors:
			requests for the old property name
			transparently transfer to the new property name instead.

			<div class=example highlight=js>
				For example, if
				<css>old-name</css> is a <a>legacy name alias</a> for <css>new-name</css>,
				<code>getComputedStyle(el).oldName</code>
				will return the computed style of the <code>newName</code> property,
				and <code>el.style.setPropertyValue("old-name", "value")</code>
				will set the <css>new-name</css> property to <code>"value"</code>.
			</div>

		<dt><dfn lt="legacy shorthand">legacy shorthands</dfn>
		<dd>
			When the old property has a distinct syntax from the new property,
			the two names are aliased using the <a>shorthand</a> mechanism.
			These shorthands are defined to be <a>legacy shorthands</a>,
			and their use is <em>deprecated</em>.
			They otherwise behave exactly as regular shorthands,
			except that the CSSOM will not use them
			when serializing declarations. [[CSSOM]]

			<div class=example highlight=js>
				For example, the 'page-break-*' properties
				are <a>legacy shorthands</a> for the 'break-*' properties
				(see [[css-break-3#page-break-properties]]).

				Setting ''page-break-before: always'' expands to ''break-before: page'' at parse time,
				like other shorthands do.
				Similarly, if ''break-before: page'' is set,
				calling <code>getComputedStyle(el).pageBreakBefore</code> will return <code>"always"</code>.
				However, when serializing a style block
				(see [[cssom-1#serializing-css-values]]),
				the 'page-break-before' property will never be chosen as the shorthand to serialize to,
				regardless of whether it or 'break-before' was specified;
				instead, 'break-before' will always be chosen.
			</div>
	</dl>

<h3 id="all-shorthand" caniuse="css-all">
Resetting All Properties: the 'all' property</h3>

	<pre class="propdef shorthand">
	Name: all
	Value: initial | inherit | unset | revert
	</pre>

	The 'all' property is a <a>shorthand</a>
	that resets <em>all</em> CSS properties
	except 'direction' and 'unicode-bidi'.
	It only accepts the <a href="https://www.w3.org/TR/css-values-3/#common-keywords">CSS-wide keywords</a>.
	It does not reset <a>custom properties</a> [[css-variables-1]].

	Note: The excepted CSS properties 'direction' and 'unicode-bidi'
	are actually markup-level features,
	and <a href="https://www.w3.org/TR/css-writing-modes-3/#text-direction">should not be set in the author's style sheet</a>.
	(They exist as CSS properties only to style document languages not supported by the UA.)
	Authors should use the appropriate markup, such as HTML's <code>dir</code> attribute, instead.
	[[css-writing-modes-3]]

	<div class='example'>
		For example, if an author specifies ''all: initial'' on an element,
		it will block all inheritance and reset all properties,
		as if no rules appeared in the author, user, or user-agent levels of the cascade.

		This can be useful for the root element of a "widget" included in a page,
		which does not wish to inherit the styles of the outer page.
		Note, however, that any "default" style applied to that element
		(such as, e.g. ''display: block'' from the UA style sheet on block elements such as <code>&lt;div></code>)
		will also be blown away.
	</div>


<!--
 ██████  ████████    ███     ██████   ████████  ██████
██    ██    ██      ██ ██   ██    ██  ██       ██    ██
██          ██     ██   ██  ██        ██       ██
 ██████     ██    ██     ██ ██   ████ ██████    ██████
      ██    ██    █████████ ██    ██  ██             ██
██    ██    ██    ██     ██ ██    ██  ██       ██    ██
 ██████     ██    ██     ██  ██████   ████████  ██████
-->

<h2 id="value-stages">
Value Processing</h2>

	Once a user agent has parsed a document and constructed a document tree,
	it must assign,
	to every element in the tree,
	and correspondingly to every box in the formatting structure,
	a value to every property that applies to the target media type.

	The final value of a CSS property for a given element or box
	is the result of a multi-step calculation:

	<ol>
		<li>
			First, all the <a>declared values</a> applied to an element are collected,
			for each property on each element.
			There may be zero or many <a>declared values</a> applied to the element.

		<li>
			Cascading yields the <a>cascaded value</a>.
			There is at most one <a>cascaded value</a> per property per element.

		<li>
			Defaulting yields the <a>specified value</a>.
			Every element has exactly one <a>specified value</a> per property.

		<li>
			Resolving value dependencies yields the <a>computed value</a>.
			Every element has exactly one <a>computed value</a> per property.

		<li>
			Formatting the document yields the <a>used value</a>.
			An element only has a <a>used value</a> for a given property
			if that property applies to the element.

		<li>
			Finally, the used value is transformed to the <a>actual value</a>
			based on constraints of the display environment.
			As with the <a>used value</a>, there may or may not be an <a>actual value</a>
			for a given property on an element.
	</ol>

	Elements that are not [=connected=]
	or are not part of the document’s [=flattened element tree=]
	do not participate in CSS value processing,
	and do not have [=declared=], [=cascaded=], [=specified=], [=computed=], [=used=], or [=actual=] values,
	even if they potentially have style declarations assigned to them
	(for example, by a <code>style</code> attribute).

<h3 id="declared">
Declared Values</h3>

	Each property declaration <a href="#filtering">applied to an element</a>
	contributes a <dfn export>declared value</dfn> for that property
	associated with the element.
	See <a href="#filtering">Filtering Declarations</a> for details.

	These values are then processed by the <a>cascade</a>
	to choose a single “winning value”.

<h3 id="cascaded">
Cascaded Values</h3>

	The <dfn export>cascaded value</dfn> represents the result of <a href="#cascade">the cascade</a>:
	it is the <a>declared value</a> that wins the cascade
	(is sorted first in the <a>output of the cascade</a>).
	If the <a>output of the cascade</a> is an empty list,
	there is no <a>cascaded value</a>.

<h3 id="specified">
Specified Values</h3>

	The <dfn export>specified value</dfn> is the value of a given property that the style sheet authors intended for that element.
	It is the result of putting the <a>cascaded value</a> through the <a href="#defaulting">defaulting</a> processes,
	guaranteeing that a <a>specified value</a> exists for every property on every element.

	In many cases, the <a>specified value</a> is the <a>cascaded value</a>.
	However, if there is no <a>cascaded value</a> at all,
	the <a>specified value</a> is <a href="#defaulting">defaulted</a>.
	The [=CSS-wide keywords=] are handled specially
	when they are the <a>cascaded value</a> of a property,
	setting the <a>specified value</a> as required by that keyword,
	see [[#defaulting-keywords]].

<h3 id="computed">
Computed Values</h3>

	The <dfn export>computed value</dfn> is the result of resolving the <a>specified value</a>
	as defined in the “Computed Value” line of the property definition table,
	generally absolutizing it in preparation for <a>inheritance</a>.

	Note: The <a>computed value</a> is the value that is transferred from parent to child during <a>inheritance</a>.
	For historical reasons,
	it is not necessarily the value returned by the {{getComputedStyle()}} function,
	which sometimes returns <a>used values</a>. [[CSSOM]]
	Furthermore, the <a>computed value</a> is an abstract data representation:
	their definitions reflect that data representation,
	not how that data is serialized.
	For example, serialization rules often allow omitting certain values which are implied during parsing;
	but those values are nonetheless part of the <a>computed value</a>.

	<div class="example">
		A <a>specified value</a> can be either absolute (i.e., not relative to another value, as in ''red'' or ''2mm'')
		or relative (i.e., relative to another value, as in ''auto'', ''2em'').
		Computing a relative value generally absolutizes it:

		<ul>
			<li>
				values with relative units
				(''em'', ''ex'', ''vh'', ''vw'')
				must be made absolute by multiplying with the appropriate reference size

			<li>
				certain keywords
				(e.g., ''smaller'', ''bolder'')
				must be replaced according to their definitions

			<li>
				percentages on some properties must be multiplied by a reference value
				(defined by the property)

			<li>
				valid relative URLs must be resolved to become absolute.
		</ul>

		See examples (f), (g) and (h) in the <a href="#stages-examples">table below</a>.
	</div>

	Note: In general, the <a>computed value</a> resolves the <a>specified value</a>
	as far as possible without laying out the document
	or performing other expensive or hard-to-parallelize operations,
	such as resolving network requests
	or retrieving values other than from the element and its parent.

	The <a>computed value</a> exists even when the property does not apply.
	However, some properties may change how they determine the <a>computed value</a>
	based on whether the property [=applies to=] the element.

<h3 id='used'>
Used Values</h3>

	The <dfn export>used value</dfn> is the result of taking the <a>computed value</a>
	and completing any remaining calculations to make it the absolute theoretical value
	used in the formatting of the document.

	<p class='example'>
		For example, a declaration of ''width: auto'' can't be resolved into a length without knowing the layout of the element's ancestors,
		so the <a>computed value</a> is ''auto'',
		while the <a>used value</a> is an absolute length, such as ''100px''. [[CSS2]]

	<p class='example'>
		As another example, a <code>&lt;div></code> might have a computed 'break-before' value of ''auto'',
		but acquire a used 'break-before' value of ''break-before/page'' by propagation from its first child. [[css-break-3]]

	If a property does not <dfn export for=CSS id="applies-to">apply to</dfn>
	this element or box type--
	as noted in its “Applies to” line--
	then it does not directly take effect on that type of box or element,
	and therefore has no <a>used value</a> for that property.

	<p class='example'>
		For example, the 'flex' property has no <a>used value</a>
		on elements that aren't <a>flex items</a>.

	Note: A property defined to apply to “all elements”
	applies to all elements and [=display types=],
	but not necessarily to all [=pseudo-element=] types,
	since pseudo-elements often have their own specific rendering models
	or other restrictions.
	The ''::before'' and ''::after'' pseudo-elements, however,
	are defined to generate boxes almost exactly like normal elements
	and are therefore defined accept all properties that apply to “all elements”.
	See [[CSS-PSEUDO-4]]
	for more information about [=pseudo-elements=].

<h3 id="actual">
Actual Values</h3>

	A <a>used value</a> is in principle ready to be used,
	but a user agent may not be able to make use of the value in a given environment.
	<span class=ex>For example, a user agent may only be able to render borders with integer pixel widths
	and may therefore have to approximate the <a lt="used value">used</a> width.
	Also, the font size of an element may need adjustment based on the availability of fonts
	or the value of the 'font-size-adjust' property.</span>
	The <dfn export>actual value</dfn> is the used value after any such adjustments have been made.

	Note: By probing the actual values of elements,
	much can be learned about how the document is laid out.
	However, not all information is recorded in the actual values.
	For example, the actual value of the 'page-break-after' property
	does not reflect whether there is a page break or not after the element.
	Similarly, the actual value of 'orphans'
	does not reflect how many orphan lines there is in a certain element.
	See examples (j) and (k) in the <a href="#stages-examples">table below</a>.

<h3 id="stages-examples">
Examples</h3>

	<table class="data non-normative">
		<caption>Examples of CSS Value Computation</caption>
		<thead>
			<tr>
				<th>
				<th>Property
				<th>Winning declaration
				<th>Cascaded value
				<th>Specified value
				<th>Computed value
				<th>Used value
				<th>Actual value
		<tbody>
			<tr>
				<td>(a)
				<th>'text-align'
				<td><code class="declaration">text-align: left</code>
				<td><css>left</css>
				<td><css>left</css>
				<td><css>left</css>
				<td><css>left</css>
				<td><css>left</css>
			<tr>
				<td>(b)
				<th>'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width'
				<td><code class="declaration">border-width: inherit</code>
				<td><css>inherit</css>
				<td class="say"><css>4.2px</css>
				<td><css>4.2px</css>
				<td><css>4.2px</css>
				<td><css>4px</css>
			<tr>
				<td>(c)
				<th>'width'
				<td><small>(none)</small>
				<td><small>(none)</small>
				<td><css>auto</css> <small>(initial&nbsp;value)</small>
				<td><css>auto</css>
				<td><css>120px</css>
				<td><css>120px</css>
			<tr>
				<td>(d)
				<th>'list-style-position'
				<td><code class="declaration">list-style-position: inherit</code>
				<td><css>inherit</css>
				<td class="say"><css>inside</css>
				<td><css>inside</css>
				<td><css>inside</css>
				<td><css>inside</css>
			<tr>
				<td>(e)
				<th>'list-style-position'
				<td><code class="declaration">list-style-position: initial</code>
				<td><css>initial</css>
				<td><css>outside</css> <small>(initial&nbsp;value)</small>
				<td><css>outside</css>
				<td><css>outside</css>
				<td><css>outside</css>
			<tr>
				<td>(f)
				<th>'font-size'
				<td><code class="declaration">font-size: 1.2em</code>
				<td><css>1.2em</css>
				<td><css>1.2em</css>
				<td class="say"><css>14.1px</css>
				<td><css>14.1px</css>
				<td><css>14px</css>
			<tr>
				<td>(g)
				<th>'width'
				<td><code class="declaration">width: 80%</code>
				<td><css>80%</css>
				<td><css>80%</css>
				<td><css>80%</css>
				<td class="say"><css>354.2px</css>
				<td><css>354px</css>
			<tr>
				<td>(h)
				<th>'width'
				<td><code class="declaration">width: auto</code>
				<td><css>auto</css>
				<td><css>auto</css>
				<td><css>auto</css>
				<td class="say"><css>134px</css>
				<td><css>134px</css>
			<tr>
				<td>(i)
				<th>'height'
				<td><code class="declaration">height: auto</code>
				<td><css>auto</css>
				<td><css>auto</css>
				<td><css>auto</css>
				<td class="say"><css>176px</css>
				<td><css>176px</css>
			<tr>
				<td>(j)
				<th>'page-break-after'
				<td><small>(none)</small>
				<td><small>(none)</small>
				<td><css>auto</css> <small>(initial&nbsp;value)</small>
				<td><css>auto</css>
				<td><css>auto</css>
				<td><css>auto</css>
			<tr>
				<td>(k)
				<th>'orphans'
				<td><code class="declaration">orphans: 3</code>
				<td><css>3</css>
				<td><css>3</css>
				<td><css>3</css>
				<td><css>3</css>
				<td><css>3</css>
	</table>


<!--
████████ ████ ██       ████████ ████████ ████████  ████ ██    ██  ██████
██        ██  ██          ██    ██       ██     ██  ██  ███   ██ ██    ██
██        ██  ██          ██    ██       ██     ██  ██  ████  ██ ██
██████    ██  ██          ██    ██████   ████████   ██  ██ ██ ██ ██   ████
██        ██  ██          ██    ██       ██   ██    ██  ██  ████ ██    ██
██        ██  ██          ██    ██       ██    ██   ██  ██   ███ ██    ██
██       ████ ████████    ██    ████████ ██     ██ ████ ██    ██  ██████
-->

<h2 id='filtering'>
Filtering</h2>

	In order to find the <a>declared values</a>,
	implementations must first identify all declarations that apply to each element.
	A declaration applies to an element if:

	<ul>
		<li>
			It belongs to a style sheet that currently applies to this document.

		<li>
			It is not qualified by a conditional rule [[!CSS-CONDITIONAL-3]] with a false condition.

		<li>
			It belongs to a style rule whose selector matches the element. [[!SELECT]]

		<li>
			It is syntactically valid:
			the declaration's property is a known property name,
			and the declaration's value matches the syntax for that property.
	</ul>

	The values of the declarations that apply form,
	for each property on each element,
	a list of <a>declared values</a>.
	The next section,
	the <a>cascade</a>,
	prioritizes these lists.


<!--
 ██████     ███     ██████   ██████     ███    ████████  ████████
██    ██   ██ ██   ██    ██ ██    ██   ██ ██   ██     ██ ██
██        ██   ██  ██       ██        ██   ██  ██     ██ ██
██       ██     ██  ██████  ██       ██     ██ ██     ██ ██████
██       █████████       ██ ██       █████████ ██     ██ ██
██    ██ ██     ██ ██    ██ ██    ██ ██     ██ ██     ██ ██
 ██████  ██     ██  ██████   ██████  ██     ██ ████████  ████████
-->

<h2 id='cascading'>
Cascading</h2>

	The <dfn export>cascade</dfn>
	takes an unordered list of <a>declared values</a>
	for a given property on a given element,
	sorts them by their declaration’s precedence as determined below,
	and outputs a single <a>cascaded value</a>.

<h3 id="cascade-sort">
Cascade Sorting Order</h3>

	The cascade sorts declarations according to the following criteria,
	in descending order of priority:

	<dl>
		<dt id='cascade-origin'>Origin and Importance
		<dd>
			The <a>origin</a> of a declaration is based on where it comes from
			and its <a lt="important">importance</a> is
			whether or not it is declared with ''!important''
			(see [[#importance|below]]).
			The precedence of the various <a>origins</a> is, in descending order:

			<ol>
				<li>Transition declarations [[!css-transitions-1]]
				<li>[=Important=] [=user-agent origin|user agent=] declarations
				<li>[=Important=] [=user origin|user=] declarations
				<li>[=Important=] [=author origin|author=] declarations
				<li>Animation declarations [[!css-animations-1]]
				<li>[=Normal=] [=author origin|author=] declarations
				<li>[=Normal=] [=user origin|user=] declarations
				<li>[=Normal=] [=user-agent origin|user agent=] declarations
			</ol>

			Declarations from <a>origins</a> earlier in this list win over declarations from later <a>origins</a>.

		<dt id='cascade-context'>Context
		<dd>
			A document language can provide for blending declarations sourced
			from different <dfn>encapsulation contexts</dfn>,
			such as the nested [=tree contexts=] of [=shadow trees=] in the [[!DOM]].

			When comparing two declarations
			that are sourced from different [=encapsulation contexts=],
			then for [=normal=] rules
			the declaration from the outer context wins,
			and for [=important=] rules
			the declaration from the inner context wins.
			For this purpose,
			[[DOM]] [=tree contexts=] are considered to be nested
			in [=shadow-including tree order=].

			Note: This effectively means that
			[=normal=] declarations belonging to an [=encapsulation context=]
			can set defaults that are easily overridden by the outer context,
			while [=important=] declarations belonging to an [=encapsulation context=]
			can enforce requirements that cannot be overridden by the outer context.

<!--
		<dt id='cascade-scope'>Scope
		<dd>
			A declaration can be <dfn export>scoped</dfn> to a subtree of the document
			so that it only affects its <dfn export>scoping element</dfn> and that element's descendants.
			For example, [[HTML]] defines scoped <code>&lt;style&gt;</code> elements,
			whose style sheets are scoped to the element's parent.

			If the <a>scoping elements</a> of two declarations
			have an ancestor/descendant relationship,
			then for [=normal=] rules the declaration whose <a>scoping element</a> is the descendant wins,
			and for [=important=] rules the declaration whose <a>scoping element</a> is the ancestor wins.

			Note: In other words, for [=normal=] declarations the inner scope's declarations override,
			but for ''!important'' rules <em>outer</em> scope's override.

			For the purpose of this step,
			all unscoped declarations are considered to be <a>scoped</a> to the root element.
			[=Normal=] declarations from style attributes
			are considered to be <a>scoped</a> to the element with the attribute,
			whereas important declarations from style attributes
			are considered to be <a>scoped</a> to the root element.
			[[!CSSSTYLEATTR]]

			Note: This odd handling of ''!important'' style attribute declarations
			is to match the behavior defined in CSS Levels 1 and 2,
			where style attributes simply have higher specificity than any other author rules. [[CSS2]]
-->

		<dt id='style-attr'>The Style Attribute
		<dd>
			Separately for [=normal=] and [=important=] declarations,
			declarations that are attached directly to an element
			(such as the <a href="https://www.w3.org/TR/css-style-attr/#interpret">contents of a style attribute</a>)
			rather than indirectly mapped by means of a style rule selector
			take precedence over declarations the same [=importance=]
			that are mapped via style rule.

		<dt id='cascade-layering'>Layers
		<dd>
			Declarations within each [=origin=] and [=context=]
			can be explicitly assigned to a [=cascade layer=].
			For the purpose of this step,
			any declaration not assigned to an explicit layer is added to an implicit final layer.

			Cascade layers (like declarations) are ordered by order of appearance.
			When comparing declarations that belong to different layers,
			then for [=normal=] rules the declaration whose [=cascade layer=] is last wins,
			and for [=important=] rules the declaration whose [=cascade layer=] is first wins.

			Note: This follows the same logic used for layering [=normal=] and [=important=] [=origins=],
			so that the ''!important'' flag maintains the same “override” purpose in both settings.

		<dt id='cascade-specificity'>Specificity
		<dd>
			The <a href="https://www.w3.org/TR/selectors/#specificity">Selectors module</a> [[!SELECT]] describes how to compute the specificity of a selector.
			Each declaration has the same specificity as the style rule it appears in.
			The declaration with the highest specificity wins.

		<dt id='cascade-order'>Order of Appearance
		<dd>
			The last declaration in document order wins.
			For this purpose:

			<ul>
				<li>Declarations from <a at-rule lt="@import">imported style sheets</a>
					are ordered as if their style sheets were substituted in place of the ''@import'' rule.
				<li>Declarations from style sheets independently linked by the originating document
					are treated as if they were concatenated in linking order,
					as determined by the host document language.
				<li>Declarations from style attributes
					are ordered according to the document order of the element the style attribute appears on,
					and are all placed after any style sheets.
			</ul>
	</dl>

	The <dfn export>output of the cascade</dfn>
	is a (potentially empty) sorted list of <a>declared values</a> for each property on each element.


<h3 id='cascading-origins'>
Cascading Origins</h3>

	Each style rule has a <dfn id=origin export local-lt="origin">cascade origin</dfn>,
	which determines where it enters the cascade.
	CSS defines three core <a>origins</a>:

	<dl>
		<dt><dfn export id='cascade-origin-author' lt="author origin|author style sheet|author-origin">Author Origin</dfn>
		<dd>
			The author specifies style sheets for a source document
			according to the conventions of the document language.
			For instance, in HTML,
			style sheets may be included in the document or linked externally.

		<dt><dfn export id='cascade-origin-user' lt="user origin|user style sheet|user-origin">User Origin</dfn>
		<dd>
			The user may be able to specify style information for a particular document.
			For example, the user may specify a file that contains a style sheet
			or the user agent may provide an interface that generates a user style sheet
			(or behaves as if it did).

		<dt><dfn export id='cascade-origin-ua' lt="user-agent origin|UA origin|user-agent style sheet|UA style sheet|UA-origin">User-Agent Origin</dfn>
		<dd>
			Conforming user agents must apply a default style sheet
			(or behave as if they did).
			A user agent's default style sheet should present the elements of the document language
			in ways that satisfy general presentation expectations for the document language
			(e.g., for visual browsers, the EM element in HTML is presented using an italic font).
			See e.g. the <a href="https://html.spec.whatwg.org/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints">HTML user agent style sheet</a>. [[HTML]]
	</dl>

	Extensions to CSS define the following additional <a>origins</a>:

	<dl>
		<dt><dfn export id='cascade-origin-animation'>Animation Origin</dfn>
		<dd>
			CSS Animations [[css-animations-1]] generate “virtual” rules representing their effects when running.

		<dt><dfn export id='cascade-origin-transition'>Transition Origin</dfn>
		<dd>
			Like CSS Animations, CSS Transitions [[css-transitions-1]] generate “virtual” rules representing their effects when running.
	</dl>

<h3 id='importance'>
Important Declarations: the ''!important'' annotation</h3>

	CSS attempts to create a balance of power between author and user style sheets.
	By default, rules in an author's style sheet override those in a user's style sheet,
	which override those in the user-agent's default style sheet.
	To balance this, a declaration can be marked [=important=],
	which increases its weight in the cascade and inverts the order of precedence.

	A declaration is <dfn export>important</dfn> if it has a ''!important'' annotation
	as defined by [[css-syntax-3]],
	i.e. if the last two (non-whitespace, non-comment) tokens
	in its value are the delimiter token ''!'' followed by the identifier token ''important''.
	All other declarations are <dfn>normal</dfn> (non-[=important=]).

	<div class='example'>
		<pre class='lang-css'>[hidden] { display: none !important; }</pre>
	</div>

	An <a>important</a> declaration takes precedence over a [=normal=] declaration.
	Author and user style sheets may contain [=important=] declarations,
	with [=user-origin=] [=important=] declarations
	overriding [=author-origin=] [=important=] declarations.
	This CSS feature improves accessibility of documents
	by giving users with special requirements
	(large fonts, color combinations, etc.)
	control over presentation.

	[=Important=] declarations from all origins take precedence over animations.
	This allows authors to override animated values in important cases.
	(Animated values normally override all other rules.)
	[[css-animations-1]]

	[=User-agent style sheets=] may also contain [=important=] declarations.
	These override all [=author origin|author=] and [=user origin|user=] declarations.

	<div class='example'>
		The first rule in the user's style sheet in the following example contains an ''!important'' declaration,
		which overrides the corresponding declaration in the author's style sheet.
		The declaration in the second rule will also win due to being marked ''!important''.
		However, the third declaration in the user's style sheet is not ''!important''
		and will therefore lose to the second rule in the author's style sheet
		(which happens to set style on a <a>shorthand</a> property).
		Also, the third author rule will lose to the second author rule since the second declaration is ''!important''.
		This shows that ''!important'' declarations have a function also within author style sheets.

		<pre class='lang-css'>
		/* From the user's style sheet */
		p { text-indent: 1em !important }
		p { font-style: italic !important }
		p { font-size: 18pt }

		/* From the author's style sheet */
		p { text-indent: 1.5em !important }
		p { font: normal 12pt sans-serif !important }
		p { font-size: 24pt }
		</pre>

		<table class="data">
			<thead>
				<tr>
					<th>Property
					<th>Winning value
			<tbody>
				<tr>
					<th>'text-indent'
					<td>''1em''
				<tr>
					<th>'font-style'
					<td>''font-style/italic''
				<tr>
					<th>'font-size'
					<td>''12pt''
				<tr>
					<th>'font-family'
					<td>''sans-serif''
		</table>
	</div>

<h3 id='layering'>
Cascade Layers</h3>

	In the same way that [=cascade origins=] provide a balance of power
	between user and author styles,
	<dfn export>cascade layers</dfn> provide a structured way
	to organize and balance concerns within a single origin.
	Authors can create layers to represent element defaults,
	third-party libraries, themes, components,
	overrides, and other styling concerns--
	and are able to re-order the cascade of layers in an explicit way,
	without altering selectors or specificity within each layer,
	or relying on source-order to resolve conflicts across layers.

	<div class="example">
		For example, the following generates an explicit ''defaults'' layer,
		with lower cascade weight than any un-layered styles:

		<pre class='lang-css'>
			audio {
			  /* specificity of 0,0,1 - implicit (final) layer */
			  display: flex;
			}

			@layer defaults {
			  audio[controls] {
			    /* specificity of 0,1,1 - explicit "defaults" layer */
			    display: block;
			  }
			}
		</pre>

		The un-layered declarations on the <{audio}> element take precedence
		over the explicitly layered declarations on ''audio[controls]'' --
		even though the un-layered styles have a lower specificity,
		and come first in the source order.
	</div>

	Issue(w3c/csswg-drafts#5793): Do we need a keyword similar to `revert`, but for cascade layers?

<h4 id="at-layer">
Declaring Cascade Layers: the ''@layer'' rule</h4>

	The <dfn at-rule id="at-ruledef-layer">@layer</dfn> rule
	defines an explicit [=cascade layer=],
	with the option to assign style rules as either a block or an import.

	The import syntax is:

	<pre class='prod'>
		@layer <<layer-ident>>? <<url>>;
	</pre>

	Such ''@layer'' import rules have the same restrictions and processing
	as ''@import'' (see [[#at-import]]),
	except that the imported rules are assigned to the indicated layer.

	Issue(w3c/csswg-drafts#5681): Is ''@layer'' the proper way to handle layered url imports?

	The block syntax is:

	<pre class='prod'>
		@layer <<layer-ident>>? {
		  <<stylesheet>>
		}
	</pre>

	Such ''@layer'' block rules have the same restrictions and processing
	as a [=conditional rule=] [[CSS-CONDITIONAL-3]]
	with a true condition.

	In both cases the optional <dfn for='@layer'><<layer-ident>></dfn>
	is a [=CSS identifier=] (<<ident>>)
	that represents its <dfn>layer name</dfn>.
	If the [=layer name=] matches that of a [=cascade layer=]
	already defined within this [=origin=] and [=context=]
	(and same [=layer=] scope, see [[#nested-layers]]),
	then its style rules are assigned to that same [=cascade layer=].
	Otherwise, or if no <<layer-ident>> is provided,
	a new [=cascade layer=] is created.

	Note: Layer name matching does not cross the shadow DOM boundary,
	so the ordering of layers in the light DOM has no impact
	on the order of identically-named layers in the shadow DOM.

	The ''@layer'' rule can also be used to define new layers
	without assigning any style rules, by providing only a [=layer name=]:

	<pre class='prod'>
		@layer <<layer-ident>>#;
	</pre>

	Such empty ''@layer'' are allowed
	anywhere either import ''@layer'' or block ''@layer'' rules are allowed.

	Issue(w3c/csswg-drafts#5853): Provide an attribute for assigning link or style elements to cascade layers

	<div class="example">
		Layer identifiers are optional,
		but provide a way to apply multiple style blocks
		to a single layer.
		In the following example,
		the contents of <code>headings.css</code> and <code>links.css</code>
		are cascaded within the same layer as the <code>audio[controls]</code> rule:

		<pre class='lang-css'>
			@layer default url(headings.css);
			@layer default url(links.css);

			@layer default {
			  audio[controls] {
			    display: block;
			  }
			}
		</pre>
	</div>

	<div class="example">
		The identifier-only syntax
		allows establishing a layer order in advance,
		regardless of the order in which style rules are added to each layer.

		In this example,
		the imported <code>theme.css</code> style rules will override
		any rules added in the later <css>default</css> block
		since the order of layers has already been established.

		<pre class='lang-css'>
			@layer default;
			@layer theme;
			@layer components;

			@layer theme url(theme.css);

			@layer default {
			  audio[controls] {
			    display: block;
			  }
			}
		</pre>

		It can also be written with the comma-separated syntax as:

		<pre class='lang-css'>
			@layer default, theme, components;

			@layer theme url(theme.css);

			@layer default {
			  audio[controls] {
			    display: block;
			  }
			}
		</pre>
	</div>

<h5 id="nested-layers" class="no-toc">
Nested Layers</h5>

	When ''@layer'' rules are nested,
	[=layer names=] are scoped to their parent layer.

	<div class="example">
		In this example,
		the nested ''framework default'' layer is distinct
		from the top-level ''default'' layer:

		<pre class='lang-css'>
			@layer default {
			  p { max-width: 70ch; }
			}

			@layer framework {
			  @layer default {
			    p { margin-block: 0.75em; }
			  }

			  @layer theme {
			    p { color: #222; }
			  }
			}
		</pre>

		The resulting layers can be represented as a tree:

		1. default
		2. framework
			1. default
			2. theme

		or as a flat list with nested identifiers:

		1. default
		2. framework default
		3. framework theme

	</div>

	It is not possible for nested layers
	to reference a [=layer name=] in an outer layer’s scope,
	but it is possible to reference nested layers
	from an outer scope,
	by combining identifiers with a full stop (. U+002E) character.

	<div class="example">
		<pre class='lang-css'>
			@layer framework {
			  @layer default {
			     p { margin-block: 0.75em; }
			  }

			  @layer theme {
			    p { color: #222; }
			  }
			}

			@layer framework.theme {
			  /* These styles will be added to the theme layer inside the framework layer */
			  blockquote { color: rebeccapurple; }
			}
		</pre>
	</div>

	This syntax is provided as a shorthand for defining nested layers,
	and has the same effect as declaring each [=layer name=]
	inside nested ''@layer'' rules.

	<div class="example">
		That means the shorthand syntax can also be used in defining new layers,
		and establishing layer order.

		The following example defines <css>framework.theme</css> before <css>framework.default</css>:

		<pre class='lang-css'>
			@layer framework.theme {
			  blockquote { color: rebeccapurple; }
			}

			@layer framework {
			  @layer default {
			     p { margin-block: 0.75em; }
			  }

			  @layer theme {
			    p { color: #222; }
			  }
			}
		</pre>

		The <css>framework.theme</css> shorthand is purely syntax sugar for the following longhand:

		<pre class='lang-css'>
			@layer framework {
			  @layer theme {
			    blockquote { color: rebeccapurple; }
			  }
			}
		</pre>
	</div>

	Issue(w3c/csswg-drafts#5791): What is the appropriate syntax for appending to nested layers?

<h5 id="unnamed-layers" class="no-toc">
Un-Named Layers</h5>

	<div class="example">
		A layer declared without a [=layer name=]
		does not provide any external hook for re-arranging or adding styles.

		In most use-cases this would only be syntax-sugar for brevity --
		relying on well-organized source-order rather than any explicit names.
		However, it could be used by teams as a way to "force" an organizing convention
		(all layer code must be defined in one place),
		or by libraries wanting to merge & hide a set of internal "private" layers
		that they don't want exposed to author manipulation:

		<pre class='lang-css'>
			/* bootstrap-base.css */
			/* unnamed wrapper layers around each sub-file */
			@layer url(base-forms.css);
			@layer url(base-links.css);
			@layer url(base-headings.css);

			/* bootstrap.css */
			/* the internal names are hidden from access, subsumed in "base" */
			@layer base url(bootstrap-base.css);

			/* author.css */
			/* author has access to bootstrap.base layer, but not into unnamed layers */
			@layer bootstrap url(bootstrap.css);
		</pre>
	</div>

<h3 id="preshint">
Precedence of Non-CSS Presentational Hints</h3>

	The UA may choose to honor presentational hints in a source document's markup,
	for example the <code>bgcolor</code> attribute or <{s}> element in [[HTML]].
	All document language-based styling must be translated to corresponding CSS rules
	and either enter the cascade as [=UA-origin=] rules or
	be treated as [=author-origin=] rules with a specificity of zero
	placed at the start of the [=author style sheet=].
	A document language may define whether such a presentational hint
	enters the [=cascade=] as [=UA-origin=] or [=author-origin=];
	if so, the UA must behave accordingly.
	For example, [[SVG11]] maps its presentation attributes into the author level.

	Note: Presentational hints entering the [=cascade=] as [=UA-origin=] rules
	can be overridden by [=author-origin=] or [=user-origin=] styles.
	Presentational hints entering the cascade as [=author-origin=] rules
	can be overridden by [=author-origin=] styles,
	but not by non-important [=user-origin=] styles.
	Host languages should choose the appropriate origin for presentational hints
	with these considerations in mind.


<!--
████████  ████████ ████████    ███    ██     ██ ██       ████████
██     ██ ██       ██         ██ ██   ██     ██ ██          ██
██     ██ ██       ██        ██   ██  ██     ██ ██          ██
██     ██ ██████   ██████   ██     ██ ██     ██ ██          ██
██     ██ ██       ██       █████████ ██     ██ ██          ██
██     ██ ██       ██       ██     ██ ██     ██ ██          ██
████████  ████████ ██       ██     ██  ███████  ████████    ██
-->

<h2 id="defaulting">
Defaulting</h2>

	When the <a>cascade</a> does not result in a value,
	the <a>specified value</a> must be found some other way.
	<a>Inherited properties</a> draw their defaults from their parent element through <a>inheritance</a>;
	all other properties take their <a>initial value</a>.
	Authors can explicitly request inheritance or initialization
	via the ''inherit'' and ''initial'' keywords.

<h3 id="initial-values">
Initial Values</h3>

	Each property has an <dfn export>initial value</dfn>,
	defined in the property's definition table.
	If the property is not an <a>inherited property</a>,
	and the <a>cascade</a> does not result in a value,
	then the <a>specified value</a> of the property is its <a>initial value</a>.

<h3 id="inheriting">
Inheritance</h3>

	<dfn export lt="inheritance|inherit">Inheritance</dfn> propagates property values from parent elements to their children.
	The <dfn export>inherited value</dfn> of a property on an element
	is the <a>computed value</a> of the property on the element's parent element.
	For the root element,
	which has no parent element,
	the <a>inherited value</a> is the <a>initial value</a> of the property.

	For a [[DOM]] tree with shadows,
	inheritance operates on the [=flattened element tree=].
	<span class="note">This means that slotted elements inherit from the <{slot}> they're assigned to,
	rather than directly from their [=light tree=] parent.</span>
	[=Pseudo-elements=] inherit according to the fictional tag sequence
	described for each [=pseudo-element=]. [[!CSS-PSEUDO-4]]

	Some properties are <dfn export lt="inherited property">inherited properties</dfn>,
	as defined in their property definition table.
	This means that,
	unless the [=cascade=] results in a value,
	the value will be determined by [=inheritance=].

	A property can also be explicitly inherited. See the ''inherit'' keyword.

	Note: Inheritance follows the document tree and is not intercepted by <a href="https://www.w3.org/TR/CSS2/visuren.html#box-gen">anonymous boxes</a>,
	or otherwise affected by manipulations of the box tree.

<h3 id="defaulting-keywords">
Explicit Defaulting</h3>

	Several CSS-wide property values are defined below;
	declaring a property to have these values explicitly specifies a particular defaulting behavior.
	As specified in <a href="https://www.w3.org/TR/css-values-3/#common-keywords">CSS Values and Units Level 3</a> [[!css-values-3]],
	all CSS properties can accept these values.

<h4 id="initial">
Resetting a Property: the ''initial'' keyword</h4>

	If the <a>cascaded value</a> of a property is the <dfn for=all caniuse="css-initial-value">''initial''</dfn> keyword,
	the property's <a>specified value</a> is its <a>initial value</a>.

<h4 id="inherit">
Explicit Inheritance: the ''inherit'' keyword</h4>

	If the <a>cascaded value</a> of a property is the <dfn for=all>''inherit''</dfn> keyword,
	the property's <a lt="specified value">specified</a> and <a>computed values</a> are the <a>inherited value</a>.

<h4 id="inherit-initial">
Erasing All Declarations: the ''unset'' keyword</h4>

	If the <a>cascaded value</a> of a property is the <dfn for=all caniuse="css-unset-value">''unset''</dfn> keyword,
	then if it is an inherited property, this is treated as ''inherit'',
	and if it is not, this is treated as ''initial''.
	This keyword effectively erases all <a>declared values</a> occurring earlier in the <a>cascade</a>,
	correctly inheriting or not as appropriate for the property
	(or all longhands of a <a>shorthand</a>).

<h4 id="default">
Rolling Back The Cascade: the ''revert'' keyword</h4>

	If the <a>cascaded value</a> of a property is the <dfn for=all caniuse="css-revert-value">''revert''</dfn> keyword,
	the behavior depends on the [=cascade origin=] to which the declaration belongs:

	<dl>
		<dt>[=user-agent origin=]
		<dd>
			Equivalent to ''unset''.

		<dt>[=user origin=]
		<dd>
			Rolls back the <a>cascaded value</a> to the user-agent level,
			so that the <a>specified value</a> is calculated
			as if no [=author-origin=] or [=user-origin=] rules were specified
			for this property on this element.

		<dt>[=author origin=]
		<dd>
			Rolls back the <a>cascaded value</a> to the user level,
			so that the <a>specified value</a> is calculated
			as if no [=author-origin=] rules were specified
			for this property on this element.
			For the purpose of ''revert'', this origin includes the Animation <a>origin</a>.
	</dl>


<!--
████████ ████████  ██████
██          ██    ██    ██
██          ██    ██
██████      ██    ██
██          ██    ██
██          ██    ██    ██
████████    ██     ██████
-->

<h2 id="changes">
Changes</h2>

<h3 id="additions-l4">
Additions Since Level 4</h3>

	The following features have been added since
	<a href="https://www.w3.org/TR/css-cascade-4/">Level 4</a>:

	* Added [=cascade layers=] to the [=cascade=] sort criteria.
	* Defined style attributes as a distinct step of the [=cascade=] sort criteria.
	* Introduced the ''@layer'' rule for defining cascade layers
	* Introduced the ''@layers'' rule for defining and re-ordering multiple layers

<h3 id="additions-l3">
Additions Since Level 3</h3>

	The following features have been added since
	<a href="https://www.w3.org/TR/css-cascade-3/">Level 3</a>:

	* Introduced ''revert'' keyword, for rolling back the cascade.
	* Introduced ''supports()'' syntax for supports-conditional ''@import'' rules.
	* Added [=encapsulation context=] to the [=cascade=] sort criteria
		to accommodate Shadow DOM. [[DOM]]
	* Defined the property two aliasing mechanisms CSS uses to support legacy syntaxes. See [[#aliasing]].
<!--
	* Added definition of how scoped styles would cascade
		(deferred from Level 3)
-->

<h3 id="changes-2">
Additions Since Level 2</h3>

	The following features have been added since
	<a href="http://www.w3.org/TR/CSS2/cascade.html">Level 2</a>:

	<ul>
		<li>The 'all' shorthand
		<li>The ''initial'' keyword
		<li>The ''unset'' keyword
		<li>Incorporation of animations and transitions into the <a>cascade</a>.
	</ul>

<h2 class="no-num" id="acknowledgments">Acknowledgments</h2>

	David Baron, Tantek Çelik, Florian Rivoal, Simon Sapin, Jen Simmons,
	and Boris Zbarsky contributed to this specification.

<h2 class=no-num id=priv-sec>
Privacy and Security Considerations</h2>

	* The cascade process does not distinguish between same-origin and cross-origin stylesheets,
		enabling the content of cross-origin stylesheets to be inferred
		from the computed styles they apply to a document.

	* User preferences and UA defaults expressed via application of style rules
		are exposed by the cascade process,
		and can be inferred from the computed styles they apply to a document.

	* The ''@import'' rule does not apply the [=CORS protocol=] to loading cross-origin stylesheets,
		instead allowing them to be freely imported and applied.

	* The ''@import'' rule assumes that resources without <a href="https://html.spec.whatwg.org/multipage/urls-and-fetching.html#content-type"><code>Content-Type</code> metadata</a>
		(or any same-origin file if the host document is in quirks mode)
		are <code>text/css</code>,
		potentially allowing arbitrary files to be imported into the page
		and interpreted as CSS,
		potentially allowing sensitive data to be inferred from the computed styles they apply to a document.
