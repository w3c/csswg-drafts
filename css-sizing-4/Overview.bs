<pre class='metadata'>
Title: CSS Intrinsic &amp; Extrinsic Sizing Module Level 4
Shortname: css-sizing
Level: 4
Status: ED
Warning: not ready
Work Status: Exploring
Group: csswg
ED: https://drafts.csswg.org/css-sizing
TR: https://www.w3.org/TR/css-sizing/
Editor: Tab Atkins, Google, http://xanthir.com/contact/
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Previous version: https://www.w3.org/TR/2012/WD-css3-sizing-20120927/
Abstract: This is a delta spec over CSS Sizing Level 3.
Ignored Terms: block-level box
</pre>

<pre class='link-defaults'>
spec:css-display-3; type:dfn; text:box
spec:css21; type: property
	text: min-width
	text: min-height
	text: max-width
	text: max-height
</pre>


<!-- Notes on stuff to do... [copy/pasted from etherpad, probably out-of-date, evaluate later]
  Swap definition of preferred size in for max-content.
  Define current max-content as super-max-content.
  Mark an isssue about whether it's a necessary concept;
  I'm unsure, but I think it will show up in orthogonal flow sizing.
-->

<h2 id="intro">
Introduction</h2>

	<p><em>This section is not normative.</em>

	<p>
		CSS layout has several different concepts of automatic sizing that are used in various layout calculations.
		This section defines some more precise terminology
		to help connect the layout behaviors of this spec to the calculations used in other modules,
		and some new keywords for the 'width' and 'height' properties
		to allow authors to assign elements the dimensions resulting from these size calculations.

<h3 id="placement">
Module interactions</h3>

	<p>This module extends the 'width', 'height', 'min-width', 'min-height', 'max-width', 'max-height', and 'column-width'
	features defined in [[!CSS2]] chapter 10 and in [[!CSS3COL]]

<h3 id="values">
Values</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]].
	Value types not defined in this specification are defined in CSS Values & Units [[!CSS-VALUES-3]].
	Other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> keywords as their property value.
	For readability they have not been repeated explicitly.

<h2 id="terms">
Terminology</h2>

	…

<h3 id='auto-box-sizes'>
Auto Box Sizes</h3>

	…

<h3 id='contributions' dfn export lt="intrinsic size contribution">
Intrinsic Size Contributions</h3>

	…

<h3 id='constraints' dfn export lt="intrinsic size constraint">
Intrinsic Size Constraints</h3>

	…

<h2 id='size-keywords'>
New Sizing Keywords</h2>

<h3 id='width-height-keywords'>
New Keywords for 'width' and 'height'</h3>

	…

<h3 id='the-contain-floats-value'>
Containing Floats</h3>

	…

<h3 id='column-sizing'>
Column Sizing Keywords</h3>

	…

<h2 id='intrinsic'>
Intrinsic Size Determination</h2>

	<p>
		<dfn export>Intrinsic sizing</dfn> determines sizes based on the contents of an element,
		without regard for its context.


<h3 id='replaced-intrinsic'>
Intrinsic Sizes of Replaced Elements</h3>

	<p>
		For replaced elements,
		the <a>min-content size</a> and <a>max-content size</a> are equivalent
		and correspond to the appropriate dimension of the concrete object size returned by
		the <a href="https://www.w3.org/TR/css3-images/#default-sizing">default sizing algorithm</a> [[!CSS3-IMAGES]]
		of the element,
		calculated with an unconstrained specified size.

	The <a>min-content contribution</a> and <a>max-content contribution</a> in each axis
	is the element's specified outer size in that axis, if definite;
	otherwise, they are the <a>min-content size</a>, as specified above,
	plus the element's margin/border/padding in that axis,
	clamped by the element's min and max size properties in that axis.

<h3 id='inline-intrinsic'>
Intrinsic Sizes of Non-Replaced Inlines</h3>

	<p>
		The <a>min-content inline size</a> of an inline box
		is the length of the largest unbreakable sequence of inline content.
		The <a>min-content inline-size contribution</a> of an inline box
		is its <a>min-content inline size</a>,
		plus any <a>inline-axis</a> margin, border, and padding
		adjacent to that sequence.

	<p>
		The <a>max-content inline size</a> of an inline box
		is the length of the largest sequence of inline content
		on a single line
		when only forced line breaks are taken.
		The <a>max-content inline-size contribution</a> of an inline box
		is its <a>max-content inline size</a>,
		plus any <a>inline-axis</a> margin, border, and padding
		adjacent to that sequence.

	<p>
		The <a>min-content block size</a>, <a>max-content block size</a>, <a>min-content block-size contribution</a>, and <a>max-content block-size contribution</a> of an inline box
		are the distance from the head edge of the first line box
		to the foot edge of the last line box
		on which the inline appears.

<h3 id='block-intrinsic'>
Intrinsic Sizes of Non-Replaced Blocks</h3>

	<p>
		The <a>min-content inline size</a> of a <a>block container box</a>
		is the largest <a>min-content inline-size contribution</a>
		of its in-flow or floated children.

	<p>
		The <a>max-content inline size</a> of a <a>block container box</a>
		is the inline-size of the box after layout,
		if all children are sized under a <a>max-content constraint</a>.
	<p>
		If the computed inline-size of a <a>block-level box</a>
		is ''width/min-content'', ''width/max-content'', or a <a>definite size</a>,
		its <a>min-content inline-size contribution</a>
		is that size
		plus any <a>inline-axis</a> margin, border, and padding.
		Otherwise, if the computed inline-size of the block is ''width/fit-content'', ''width/auto'', or ''width/stretch'',
		its <a>min-content inline-size contribution</a>
		is its <a>min-content inline size</a>
		plus any <a>inline-axis</a> margin, border, and padding.

	<p>
		If the computed inline-size of a <a>block-level box</a>
		is ''width/min-content'', ''width/max-content'', or a <a>definite size</a>,
		its <a>max-content inline-size contribution</a>
		is that size
		plus any <a>inline-axis</a> margin, border, and padding.
		Otherwise, if the computed inline-size of the block is ''width/fit-content'', ''width/auto'', or ''width/stretch'',
		its <a>max-content inline-size contribution</a>
		is its <a>max-content inline size</a>
		plus any <a>inline-axis</a> margin, border, and padding.

	<p>
		The <a>min-content block size</a> and <a>max-content block size</a> of a <a>block container box</a>
		is the content block-size as defined
		(for horizontal writing modes)
		in <a href="https://www.w3.org/TR/CSS2/visudet.html#normal-block">CSS2.1§10.6.3</a>
		and <a href="https://www.w3.org/TR/CSS2/tables.html#height-layout">CSS2.1§17.5.3</a>
		for elements with ''height: auto'',
		and analogously for vertical writing modes.

	<p>
		The <a>min-content block-size contribution</a> and <a>max-content block-size contribution</a> of a <a>block-level box</a>
		is the block-size of the block after layout,
		plus any <a>block-axis</a> margin, border, and padding.

	Issue: Need to handle floats.
	See <a href="https://lists.w3.org/Archives/Public/www-style/2014Oct/0061.html">Greg's issue</a>
	and <a href="https://lists.w3.org/Archives/Public/www-style/2014Nov/0085.html">dbaron's response</a>.

<h3 id='table-intrinsic'>
Intrinsic Sizes in Table Layout</h3>

	<p class='issue'>
		¯\_(ツ)_/¯



<h3 id="multicol-intrinsic">
Intrinsic Sizes in Multi-column Layout</h3>


<h4 id="multicol-min-content">
Min-content Sizes in Multi-column Layout</h3>

	<p>
		The <a>min-content inline size</a> of a multi-column element
		with a computed 'column-width' not ''column-width/auto''
		is the smaller of
		its 'column-width'
		and the largest <a>min-content inline-size contribution</a> of its contents.

	<p>
		The <a>min-content inline size</a> of a multi-column element
		with a computed 'column-width' of ''column-width/auto''
		is the largest <a>min-content inline-size contribution</a> of its contents
		multiplied by its 'column-count'
		(treating ''column-count/auto'' as ''1''),
		plus its 'column-gap' multiplied by 'column-count' minus 1.

<h4 id="multicol-max-content">
Max-content Sizes in Unconstrained-height Multi-column Layout</h3>

	<p>
		The <a>max-content inline size</a> of a multi-column element
		with unrestrained column heights
		and a computed 'column-count' not ''column-count/auto''
		is its 'column-count'
		multiplied by the larger of
		its 'column-width' (treating ''column-width/auto'' as zero)
		and the largest <a>min-content inline-size contribution</a> of its contents,
		plus its 'column-gap' multiplied by 'column-count' minus 1.

	<p class="note">
		Note that the contents of the multi-column element
		can still grow to be wider and shorter
		if the resulting column width is still smaller
		than the largest <a>max-content inline-size contribution</a> of its contents.

	<p>
		The <a>max-content inline size</a> of a multi-column element
		with unrestrained column heights
		and a computed 'column-count' of ''column-count/auto''
		is its 'column-width'
		multiplied by the number of columns obtained by taking all allowed column breaks [[CSS3-BREAK]],
		plus its 'column-gap' multiplied by that same number of columns minus 1.

	<!--
	The above was decided based on dholbert's example in http://lists.w3.org/Archives/Public/www-style/2012Oct/0017.html .
	These definitions make multicols work well in flexbox,
	both in ''stretch'' and non-''stretch'' cases,
	without wasted space or needless overflow.
	-->

<h4 id="multicol-max-content-restrained">
Max-content Sizes in Constrained-height Multi-column Layout</h3>

	<p>
		The <a>max-content inline size</a> of a multi-column element
		with restrained-height columns (i.e. a specified 'height' or 'max-height', or whichever properties map to the <a>block size</a> of the element)
		is the <a>inline size</a> that would exactly include all of its columns.
		It may be approximated by:

	<ul>
		<li>
			Laying out the element with column-spanning elements given ''display: none'',
			and taking a inline-size that includes all the columns.

		<li>
			Laying out all of the column-spanning elements into that resulting inline-size,
			and taking the resulting block-size.

		<li>
			Subtracting that resulting block-size from the specified restraint,
			laying out the element without column-spanning elements again into this adjusted block-size,
			and taking the inline-size of all its columns as its <a>max-content inline size</a>.
	</ul>

	<p>
		or by some more accurate method.

	<p class='note'>
		This approximation can result in some slack,
		but avoids overflow in the most common cases,
		where the balanced height of the columns above spanning elements are approximately equal.

	<p class='note'>
		In the common case of no column-spanning elements,
		this approximation collapses to simply doing a layout,
		and measuring the resulting columns.

<h2 id='extrinsic'>
Extrinsic Size Determination</h2>

	…

<h3 id="stretch-fit-sizing">
Stretch-fit Sizing</h3>

	…

<h3 id="contain-fit-sizing">
Contain-fit Sizing: stretching while maintaining an aspect ratio</h3>

	Contain-fit sizing essentially applies stretch-fit sizing,
	but reduces the size of the box in one axis
	to maintain the box’s intrinsic aspect ratio,
	similar to the ''contain'' keyword of the 'object-fit' and 'background-size' properties.

	First, a target rectangle is determined:

	<ol>
		<li>
			The initial target rectangle is the size of the box’s containing block,
			with any indefinite size assumed as infinity.
			If both dimensions are indefinite,
			the initial target rectangle is set
			to match the outer edges of the box were it <a>stretch-fit sized</a>.

		<li>
			Next, if the box has a non-''max-width/none'' 'max-width' or 'max-height',
			the target rectangle is clamped in the affected dimension
			to less than or equal to the “maximum size” of the box’s margin box,
			i.e. the size its margin box would be
			if the box was sized at its max-width/height.
			(Note that, consistent with normal <a href="http://www.w3.org/TR/CSS2/visuren.html">box-sizing rules</a>,
			this “maximum size” is floored by the effects of the box’s 'min-width'/'min-height'.)

		<li>
			Last, the target rectangle is reduced in one dimension
			by the minimum necessary for it to match the box's intrinsic aspect ratio.
	</ol>

	The contain-fit size in each dimension is
	the size that would result from stretch-fitting into the target rectangle.

	Issue: Copy whatever stretch-fit ends up doing wrt margin collapsing.

	Issue: If there is a minimum size in one dimension
	that would cause overflow of the target rectangle if the aspect ratio were honored,
	do we honor the aspect ratio or skew the image?
	If the former, we need a step similar to #2 that applies the relevant minimums.

<h3 id="percentage-sizing">
Percentage Sizing</h3>

	…

<h2 class=no-num id="changes">
Changes</h2>

	<p>
		Changes since the <a href="https://www.w3.org/TR/2012/WD-css3-sizing-20120927/">September 2012 Working Draft</a> include:

	<ul>
		<li>Changed <code>fill</code> keyword to <code>stretch-fit</code>.
		<li>Hooked up intrinsic sizes of replaced elements to the <a>default sizing algorithm</a> in [[!CSS3-IMAGES]].
		<li>Specified that <a>extrinsic sizing</a> treates ''margin/auto'' margins as zero.
		<li>Clarified definition of <a>available space</a>.
		<li>Specified that percentages resolved against an intrinsic size of the parent computes falls back to auto sizing.
		<li>Fixed bad wording wrt containing blocks in <a>stretch-fit inline size</a> definition,
		    and specified that it is calculated <em>after</em> margin collapsing.
		<li>Specified that an absolutely-positioned box's containing block is always considered definite.
		<li>Improved section on intrinsic sizing of multi-column elements.
		<li>Cleaned up some terminology (“min-size” to “min-content size”, “measure” to “inline-size, “extent” to “block-size”).
	</ul>

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	<p>Special thanks go to Aaron Gustafson, L. David Baron
	for their contributions to this module.

<h2 class=no-num id=priv-sec>
Privacy and Security Considerations</h2>

This specification introduces no new privacy or security considerations.
