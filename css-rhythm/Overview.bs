<style>
.example .figure img {
  background-color: white;
  padding: 20px;
  margin: 20px;
}
</style>
<pre class=metadata>
Title: CSS Rhythmic Sizing
Shortname: css-rhythm
Level: 1
Group: CSSWG
Status: ED
Work Status: exploring
Editor: Koji Ishii, Google, kojiishi@gmail.com
ED: https://drafts.csswg.org/css-rhythm/
Abstract: This module contains CSS features for aligning content size
  to multiple of unit size.
</pre>
<pre class=link-defaults>
spec:css21; type:property; text:max-height
spec:css21; type:property; text:max-width
spec:css21; type:property; text:min-width
</pre>

Introduction {#intro}
=====================

This specification provides features to control sizes of CSS objects
according to the rules desired by use cases.

Controlling sizes of CSS objects to be multiple of a unit
is desired in many cases.
This level of the specification focuses on following cases.

* Adjust heights of line boxes to the multiple of the specified unit.

By controlling heights of line boxes,
lines of text in different fonts can create consistent visuals
to help readability.

Also by stacking such line boxes,
authors can align lines across columns,
pages, scroll-snapped blocks, or multiple blocks placed absolutely,
to produce vertical rhythm.

<div class="figure">
<a href="examples/snap-height.html">
<img src="images/snap-height-sample.png"></a>
<p class="caption">Vertical rhythm kept through pictures and different size of text in a multi-column document.
</div>

Adjusting Line Box Heights: the 'line-height-step' property {#line-height-step}
===============================================================================

<pre class='propdef'>
  Name: line-height-step
  Value: <<length>>
  Initial: 0
  Applies to: block containers
  Inherited: yes
  Animatable: no
  Percentages: N/A
  Media: visual
  Computed Value: the absolute length
</pre>

This property defines the <dfn>step unit</dfn> for line box heights.
When the <a>step unit</a> is set to a positive <<length>>,
the line box heights are rounded <i>up</i> to
the closest multiple of the unit.
Non-negative <<length>>s are valid.

[[!CSS21]] <a href="https://drafts.csswg.org/css2/visudet.html#line-height">&#xA7;10.8 Line height calculations</a>
defines how to compute the height of a line box from its inline-level content.
The rounding is applied to the resulting height of the line box,
and the additional space is distributed to
<a>over</a>-side and <a>under</a>-side of the line box equally,
so that the original line box appears at the center of the
multiple of <a>step unit</a>.
This adjustment is done
by assuming that there is an inline-level box that has adjusted A' and D'
in the line box.

<div class="figure">
  <img src="images/adjust-line-height.svg">
  <p class="caption">Rounding up the computed line box height.
</div>

<div class="issue">Should this be animatable?
  There doesn't seem to be use cases but needed for consistency?</div>

<div class="example">
  <div class="figure" style="float:right">
    <img src="images/line-grid-center.svg"
      style="height: 300px"
      >
  </div>

  In the following example,
  the height of line box in each paragraph is rounded up to the <a>step unit</a>.

  <pre class="lang-css">
  :root {
    font-size: 12pt;
    --my-grid: 18pt;
    line-height-step: var(--my-grid);
  }
  h1 {
    font-size: 20pt;
    margin-top: calc(2 * var(--my-grid));
  }
  p {
    margin: 0;
  }
  </pre>

  The line box in <code>&lt;h1&gt;</code> does not fit into one <a>step unit</a>
  and thus occupies two,
  but it is still centered within the two <a>step unit</a>.
</div>

<div class="example">
  Authors can keep margins or other properties to be multiple of <a>step unit</a>
  using ''var()'' and ''calc()'' as in the example above.

  If author prefers,
  tools like Sass can make such declarations shorter.

  <pre class="lang-css">
    $gu: 18px;

    @function gu($n) {
      @return $n * $gu;
    }

    h1 {
      font-size: 20pt;
      margin: gu(1.2) auto gu(1.8);
    }
  </pre>
</div>

<div class="note">
It is usually recommended to set the 'line-height' lower than
the <a>step unit</a>.
The used line height can increase due to several factors such as
the use of 'vertical-align' or font fallback.
</div>

Notes on Block-level Boxes {#block-height}
------------------------------------------

<i>This section is not normative.</i>

This level of the specification does not provide features
to adjust heights of block-level boxes.

<div class="example">
  The following CSS turns <code>&lt;h2&gt;</code> to inline-blocks,
  so that the 'line-height-step' property can control its height.

  <pre class="lang-css">
  :root {
    line-height-step: 18pt;
  }
  h2 {
    display: inline-block;
    width: 100%;
    line-height-step: 0;
    line-height: 1.2;
  }
  </pre>

  When an <code>&lt;h2&gt;</code> is long enough to wrap,
  text inside the <code>&lt;h2&gt;</code> uses ''line-height: 1.2'', while
  the height of the <code>&lt;h2&gt;</code> block is rounded up
  to the multiple of ''18pt''.
  See <a href="examples/snap-height.html">a sample in action</a>.
</div>

Privacy and Security Considerations {#priv-sec}
===============================================

This specification introduces no new privacy leaks,
or security considerations beyond "implement it correctly".

Acknowledgments {#acks}
=======================
This specification would not have been possible without the help from:
Takao Baba,
Chris Eppstein,
Shinyu Murakami,
Tsutomu Nanjo,
Charlie Neely,
Florian Rivoal,
Hiroshi Sakakibara,
Alan Stearns,
and the CSS Working Group members.
