<pre class='metadata'>
Title: Scroll-linked Animations
Group: CSSWG
Status: ED
Work Status: exploring
Level: 1
Group: CSSWG
URL: https://drafts.csswg.org/scroll-animations-1/
ED: https://drafts.csswg.org/scroll-animations-1/
Shortname: scroll-animations-1
Abstract: Defines an API and markup for creating animations that are tied to
		the scroll offset of a scroll container.
Editor: Brian Birtles, Invited Expert, brian@birchill.co.jp, w3cid 43194
Editor: Botond Ballo, Mozilla, botond@mozilla.com
Editor: Antoine Quint, Apple, graouts@apple.com, w3cid 51377
Editor: Olga Gerchikov, Microsoft, gerchiko@microsoft.com
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Robert Flack, Google

Former Editor: Majid Valipour, Google, majidvp@google.com, w3cid 81464
Former editor: Mantaroh Yoshinaga
Former editor: Stephen McGruer, Google, smcgruer@google.com
Markup Shorthands: markdown yes
</pre>
<pre class=anchors>
urlPrefix: https://html.spec.whatwg.org/multipage/browsers.html#concept-document-window; type: dfn; spec: html
	text: document associated with a window; url: concept-document-window
</pre>
<pre class=link-defaults>
spec:html;
	type:dfn; for:/; text:browsing context
	type:method; text:requestAnimationFrame()
spec: cssom-view-1; type: dfn;
	text: overflow direction;
	text: css layout box
</pre>

<link href='web-animations.css' rel='stylesheet' type='text/css'>

# Introduction # {#intro}

	This specification defines mechanisms for
	driving the progress of an animation
	based on the scroll progress of a scroll container.
	These <dfn>scroll-driven animations</dfn>
	use a timeline based on scroll position,
	rather than one based on clock time.
	Animations are linked to such a timeline
	using the CSS 'animation-timeline' property
	or the Web Animations API.
	<!-- [[!CSS-ANIMATIONS-2]] bikeshed chokes on this -->
	[[!WEB-ANIMATIONS-1]]

	There are two types of scroll-driven timelines:
	* [=scroll progress timelines=]
	* [=view progress timelines=]

## Relationship to other specifications ## {#other-specs}

	Web Animations [[WEB-ANIMATIONS-1]] defines
	an abstract conceptual model for animations on the Web platform,
	with elements of the model including [=animations=] and their [=timelines=],
	and associated programming interfaces.

	This specification extends this model by defining
	a new type of animation [=timeline=]:
	a [=scroll progress timeline=].

	This specification defines both
	programming interfaces for interacting with these concepts,
	as well as CSS properties which apply these concepts
	to CSS Animations [[CSS-ANIMATIONS-1]].

	The behavior of the CSS properties is described
	in terms of the programming interfaces.
	User agents that do not support scripting
	may still conform to this specification
	by implementing the CSS features to behave
	as if the underlying programming interfaces were in place.

## Relationship to asynchronous scrolling ## {#async-scrolling}

	Some user agents support scrolling that is asynchronous
	with respect to layout or script.
	This specification is intended to be compatible with such an architecture.

	Specifically, this specification allows expressing scroll-linked effects
	in a way that does not require script to run each time the effect is sampled.
	User agents that support asynchronous scrolling are allowed (but not required)
	to sample such effects asynchronously as well.

## Value Definitions ## {#values}

	This specification follows the
	<a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a>
	from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a>
	from [[!CSS-VALUES-3]].
	Value types not defined in this specification
	are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

# Scroll Progress Timelines # {#scroll-timelines}

	<dfn export>Scroll progress timelines</dfn>
	are timelines linked to progress
	in the scroll position of a [=scroll container=]
	along a particular axis.
	The startmost scroll position represents 0% progress
	and the endmost scroll position represents 100% progress.
	If the 0% position and 100% position coincide
	(i.e. the [=scroll container=] has no overflow to scroll),
	the timeline is [=inactive timeline|inactive=].

	[=Scroll progress timelines=] can be referenced in 'animation-timeline'
	anonymously using the ''scroll()'' [=functional notation=]
	or by name (see [[#timeline-scope]])
	after declaring them using the 'scroll-timeline' properties.
	In the Web Animations API,
	they can be represented anonymously by a {{ScrollTimeline}} object.

## Anonymous Scroll Progress Timelines ## {#scroll-timelines-anonymous}

### The ''scroll()'' notation ### {#scroll-notation}

	The ''scroll()'' functional notation
	can be used as a value of 'animation-timeline'
	and specifies a [=scroll progress timeline=].
	Its syntax is

	<pre class="prod">
		<dfn>scroll()</dfn> = scroll( <<axis>>? <<scroller>>? )
		<dfn noexport><<axis>></dfn> = block | inline | vertical | horizontal
		<dfn noexport><<scroller>></dfn> = root | nearest
	</pre>

	By default,
	''scroll()'' references the [=block axis=] of the nearest ancestor [=scroll container=].
	Its arguments modify this lookup as follows:

	<dl dfn-type=value dfn-for="scroll(),scroll-timeline-axis,view-timeline-axis">
		<dt><dfn>block</dfn>
		<dd>
			Specifies to use the measure of progress along the
			[=block axis=] of the [=scroll container=].
			(Default.)

		<dt><dfn>inline</dfn>
		<dd>
			Specifies to use the measure of progress along the
			[=inline axis=] of the [=scroll container=].

		<dt><dfn>vertical</dfn>
		<dd>
			Specifies to use the measure of progress along the
			[=vertical axis=] of the [=scroll container=].

		<dt><dfn>horizontal</dfn>
		<dd>
			Specifies to use the measure of progress along the
			[=horizontal axis=] of the [=scroll container=].

		<dt><dfn>nearest</dfn>
		<dd>
			Specifies to use the nearest ancestor [=scroll container=].
			(Default.)

		<dt><dfn>root</dfn>
		<dd>
			Specifies to use the document viewport as the [=scroll container=].
	</dl>

### The {{ScrollTimeline}} Interface ### {#scrolltimeline-interface}

	<pre class="idl">
		enum ScrollAxis {
		  "block",
		  "inline",
		  "horizontal",
		  "vertical"
		};

		dictionary ScrollTimelineOptions {
		  Element? source;
		  ScrollAxis axis = "block";
		};

		[Exposed=Window]
		interface ScrollTimeline : AnimationTimeline {
		  constructor(optional ScrollTimelineOptions options = {});
		  readonly attribute Element? source;
		  readonly attribute ScrollAxis axis;
		};
	</pre>

	A {{ScrollTimeline}} is an {{AnimationTimeline}}
	that represents a [=scroll progress timeline=].
	It can be passed to
	the {{Animation}} constructor or the {{Animatable/animate()}} method
	to link the animation to a [=scroll progress timeline=].

	<dl class="attributes" dfn-type=attribute dfn-for=ScrollTimeline>
		:   <dfn>source</dfn>
		::  The [=scroll container=] element
			whose scroll position drives the progress of the timeline.

		:   <dfn>axis</dfn>
		::  The axis of scrolling
			that drives the progress of the timeline.
			See value definitions for <<axis>>, above.
	</dl>

	Inherited attributes:
	<dl>
		:   {{AnimationTimeline/currentTime}} (inherited from {{AnimationTimeline}})
		::  Represents the scroll progress of the [=scroll container=]
			as a percentage CSSUnitValue,
			with 0% representing its startmost scroll position
			(in the [=writing mode=] of the [=scroll container=]).
			Null when the timeline is [=inactive timeline|inactive=].
	</dl>

	ISSUE: While 0% will usually represent the [=scroll container=]’s initial scroll position,
	it might not depending on its [=content distribution=].
	See [[css-align-3#overflow-scroll-position]].
	Is this what we want?
	<!-- turn this into a note instead of a question once resolved -->

	ISSUE: Add a note about whether {{AnimationTimeline/currentTime}}
	can be negative or > 100%.

	<dl class="constructors">
		:   <dfn constructor for=ScrollTimeline lt="ScrollTimeline(options)">ScrollTimeline(options)</dfn>
		::  Creates a new {{ScrollTimeline}} object using the following procedure:

			1.  Let |timeline| be the new {{ScrollTimeline}} object.

			1.  Set the {{ScrollTimeline/source}} of |timeline| to:

				<dl class="switch">
					:   If the `source` member of |options| is present and not null,
					::  The `source` member of |options|.

					:   Otherwise,
					::  The {{Document/scrollingElement}}
						of the {{Document}} <a lt="document	associated with a window">associated</a>
						with the {{Window}} that is the <a>current global object</a>.
				</dl>

			1.  Set the {{ScrollTimeline/axis}} property of |timeline|
				to the corresponding value from |options|.
	</dl>

	If the {{ScrollTimeline/source}} of a {{ScrollTimeline}}
	is an element whose [=principal box=] does not exist
	or is not a [=scroll container=],
	or if there is no [=scrollable overflow=],
	then the {{ScrollTimeline}} is [=inactive timeline|inactive=].

	A {{ScrollTimeline}}’s {{EffectTiming/duration}} is 100%.

## Named Scroll Progress Timelines ## {#scroll-timelines-named}

	Scroll timelines can also be defined on the scroll container itself,
	and then referenced by name.
	See [[#timeline-scope]].

### Naming a Scroll Progress Timeline: the 'scroll-timeline-name' property ### {#scroll-timeline-name}

	<pre class='propdef'>
	Name: scroll-timeline-name
	Value: none | <<custom-ident>>
	Initial: none
	Applies to: [=scroll containers=]
	Inherited: no
	Computed value: the specified keyword
	Animation type: not animatable
	</pre>

	Specifies a name for the [=scroll progress timeline=]
	associated with this [=scroll container=].
	The axis for this timeline is given by 'scroll-timeline-axis'.

### Axis of a Scroll Progress Timeline: the 'scroll-timeline-axis' property ### {#scroll-timeline-axis}

	<pre class='propdef'>
	Name: scroll-timeline-axis
	Value: block | inline | vertical | horizontal
	Initial: block
	Applies to: [=scroll containers=]
	Inherited: no
	Computed value: the specified keyword
	Animation type: not animatable
	</pre>

	Specifies an axis for the [=scroll progress timeline=]
	associated with this [=scroll container=].
	The name for this timeline is given by 'scroll-timeline-name'.

	Values are as defined for ''scroll()''.

### Scroll Timeline Shorthand: the 'scroll-timeline' shorthand ### {#scroll-timeline-shorthand}

	<pre class='propdef shorthand'>
	Name: scroll-timeline
	Value: <<'scroll-timeline-name'>> || <<'scroll-timeline-axis'>>
	Applies to: [=scroll containers=]
	Inherited: no
	Animation type: not animatable
	</pre>

	This property is a [=shorthand=] for setting
	'scroll-timeline-name' and 'scroll-timeline-axis'
	in a single declaration.

# View Progress Timelines # {#view-timelines}

	Often animations are desired to start and end
	during the portion of the [=scroll progress timeline=]
	that a particular element
	(the <dfn>view progress subject</dfn> element)
	is in view within the [=scrollport=].
	<dfn export>View progress timelines</dfn>
	are segments of a [=scroll progress timeline=]
	that are scoped to the scroll positions
	in which any part of the associated element’s [=principal box=]
	intersects its nearest ancestor [=scrollport=]
	(or more precisely, the relevant [=view progress visibility range=]
	of that [=scrollport=]).
	The startmost such scroll position represents 0% progress
	and the endmost such scroll position represents 100% progress.

	Note: The 0% and 100% scroll positions are not always reachable,
	e.g. if the box is positioned
	at the start edge of the [=scrollable overflow rectangle=],
	it might not be possible to scroll to < 32% progress.

	[=View progress timelines=] can be referenced in 'animation-timeline' by name
	(see [[#timeline-scope]])
	after declaring them using the 'view-timeline' properties
	on the view progress subject.
	In the Web Animations API,
	they can be represented anonymously by a {{ViewTimeline}} object.

## View Progress Timeline Ranges ## {#view-timelines-ranges}

	[=View progress timelines=] define the following [=named timeline ranges=]:

	<dl dfn-for="animation-timeline-range" dfn-type="value">
		<dt><dfn>cover</dfn>
		<dd>
			Represents the full range of the [=view progress timeline=]:
			* 0% progress represents the position at which
				the [=start=] [=border edge=] of the element’s [=principal box=]
				coincides with the [=end=] edge of its [=view progress visibility range=].
			* 100% progress represents the position at which
				the [=end=] [=border edge=] of the element’s [=principal box=]
				coincides with the [=start=] edge of its [=view progress visibility range=].

		<dt><dfn>contain</dfn>
		<dd>
			Represents the range during which the [=principal box=]
			is either fully contained by, or fully covers,
			its [=view progress visibility range=] within the [=scrollport=].
			* 0% progress represents the earlier position at which:
				* the [=start=] [=border edge=] of the element’s [=principal box=]
					coincides with the [=start=] edge of its [=view progress visibility range=].
				* the [=end=] [=border edge=] of the element’s [=principal box=]
					coincides with the [=end=] edge of its [=view progress visibility range=].
			* 100% progress represents the later position at which:
				* the [=start=] [=border edge=] of the element’s [=principal box=]
					coincides with the [=start=] edge of its [=view progress visibility range=].
				* the [=end=] [=border edge=] of the element’s [=principal box=]
					coincides with the [=end=] edge of its [=view progress visibility range=].

		<dt><dfn>entry</dfn>
		<dd>
			Represents the range during which the [=principal box=]
			is entering the [=view progress visibility range=].
			* 0% is equivalent to 0% of the ''animation-timeline-range/cover'' range.
			* 100% is equivalent to 0% of the ''animation-timeline-range/contain'' range.

			ISSUE: Should this be ''entry'' or ''enter''?

		<dt><dfn>exit</dfn>
		<dd>
			Represents the range during which the [=principal box=]
			is exiting the [=view progress visibility range=].
			* 0% is equivalent to 100% of the ''animation-timeline-range/contain'' range.
			* 100% is equivalent to 100% of the ''animation-timeline-range/cover'' range.
	</dl>

	ISSUE: Insert diagrams.

	In all cases, the [=writing mode=] used to resolve the [=start=] and [=end=] sides
	is the [=writing mode=] of the relevant [=scroll container=].

## Anonymous View Progress Timelines ## {#view-timelines-anonymous}

### The {{ViewTimeline}} Interface ### {#viewtimeline-interface}

	<pre class="idl">
		dictionary ViewTimelineOptions {
		  Element subject;
		  ScrollAxis axis = "block";
		};

		[Exposed=Window]
		interface ViewTimeline : ScrollTimeline {
		  constructor(optional ViewTimelineOptions options = {});
		  readonly attribute Element subject;
		  readonly attribute CSSNumericValue startOffset;
		  readonly attribute CSSNumericValue endOffset;
		};
	</pre>

	A {{ViewTimeline}} is an {{AnimationTimeline}}
	that specifies a [=view progress timeline=].
	It can be passed to
	the {{Animation}} constructor or the {{Animatable/animate()}} method
	to link the animation to a [=view progress timeline=].

	<dl class="attributes" dfn-type=attribute dfn-for=ViewTimeline>
		:   <dfn>subject</dfn>
		::  The element whose [=principal box=]’s visibility in the [=scrollport=]
			defines the progress of the timeline.

		:   <dfn>startOffset</dfn>
		::  Represents the starting (0% progress) scroll position
			of the [=view progress timeline=]
			as a length offset (in ''px'') from the scroll origin.
			Null when the timeline is [=inactive timeline|inactive=].

		:   <dfn>endOffset</dfn>
		::  Represents the ending (100% progress) scroll position
			of the [=view progress timeline=]
			as a length offset (in ''px'') from the scroll origin.
			Null when the timeline is [=inactive timeline|inactive=].
	</dl>

	Note: The value of {{ViewTimeline/startOffset}} can be greater than {{ViewTimeline/endOffset}},
	for example in the [=horizontal axis=] in a right-to-left (''rtl'') [=writing mode=].

	ISSUE: This makes the offsets compatible with the way scrollLeft and scrollTop work,
	which go negative from zero in RTL scroll containers,
	is this how we want it to work here?

	Inherited attributes:

	<dl>
		:   {{ScrollTimeline/source}} (inherited from {{ScrollTimeline}})
		::  The nearest ancestor of the {{ViewTimeline/subject}}
			whose [=principal box=] establishes a [=scroll container=],
			whose scroll position drives the progress of the timeline.

		:   {{ScrollTimeline/axis}} (inherited from {{ScrollTimeline}})
		::  Specifies the axis of scrolling
			that drives the progress of the timeline.
			See <<axis>>, above.

		:   {{AnimationTimeline/currentTime}} (inherited from {{AnimationTimeline}})
		::  Represents the current progress
			of the [=view progress timeline=]
			as a percentage {{CSSUnitValue}}
			representing its [=scroll container=]’s scroll progress at that position.
			Null when the timeline is [=inactive timeline|inactive=].
	</dl>

	<dl class="constructors">
		:   <dfn constructor for=ViewTimeline lt="ViewTimeline(options)">ViewTimeline(options)</dfn>
		::  Creates a new {{ViewTimeline}} object using the following procedure:

			1.  Let |timeline| be the new {{ViewTimeline}} object.

			1.  Set the {{ViewTimeline/subject}} and {{ScrollTimeline/axis}} properties of |timeline|
				to the corresponding values from |options|.

			1. Set the {{ScrollTimeline/source}} of |timeline|
				to the {{ViewTimeline/subject}}’s
				nearest ancestor [=scroll container=] element.
	</dl>

	If the {{ScrollTimeline/source}} or {{ViewTimeline/subject}} of a {{ViewTimeline}}
	is an element whose [=principal box=] does not exist,
	or if its nearest ancestor [=scroll container=] has no [=scrollable overflow=],
	then the {{ViewTimeline}} is [=inactive timeline|inactive=].

	ISSUE: Figure out how to incorporate fit/inset abilities.

## Named View Progress Timelines ## {#view-timelines-named}

	View timelines can also be defined declaratively
	and then referenced by name.
	See [[#timeline-scope]].

### Naming a View Progress Timeline: the 'view-timeline-name' property ### {#view-timeline-name}

	<pre class='propdef'>
	Name: view-timeline-name
	Value: none | <<custom-ident>>#
	Initial: none
	Applies to: all elements
	Inherited: no
	Computed value: the keyword ''view-timeline-name/none'' or a list of <<custom-ident>>s
	Animation type: not animatable
	</pre>

	Specifies names for any [=view progress timelines=]
	associated with this element’s [=principal box=].

	Note: The number of names listed here
	determines the number of [=view progress timelines=]
	associated with this element.

### Axis of a View Progress Timeline: the 'view-timeline-axis' property ### {#view-timeline-axis}

	<pre class='propdef'>
	Name: view-timeline-axis
	Value: [ block | inline | vertical | horizontal ]#
	Initial: block
	Applies to: all elements
	Inherited: no
	Computed value: a list of the keywords specified
	Animation type: not animatable
	</pre>

	Specifies an axis for each named [=view progress timeline=]
	associated with this [=scroll container=].

	If 'view-timeline-name' has more names than 'view-timeline-axis' has specified axes,
	the excess timelines use the last 'view-timeline-axis' value.
	If 'view-timeline-name' has fewer names than 'view-timeline-axis' has specified axes,
	the used 'view-timeline-axis' list is truncated.

### Inset of a View Progress Timeline: the 'view-timeline-inset' property ### {#view-timeline-inset}

	<pre class='propdef'>
	Name: view-timeline-inset
	Value: [ [ auto | <<length-percentage>> ]{1,2} ]#
	Initial: 0
	Applies to: all elements
	Inherited: no
	Percentages: relative to the corresponding dimension of the relevant scrollport
	Computed value: a list consisting of two-value pairs representing the start and end insets each as either the keyword ''view-timeline-inset/auto'' or a computed <<length-percentage>> value
	Animation type: by computed value type
	</pre>

	Specifies an inset (positive) or outset (negative) adjustment of the [=scrollport=]
	when determining whether the box is in view
	when setting the bounds of the corresponding [=view progress timeline=].
	The first value represents the [=start=] inset in the relevant axis;
	the second value represents the [=end=] inset.
	If the second value is omitted, it is set to the first.
	The resulting range of the [=scrollport=] is
	the <dfn>view progress visibility range</dfn>.

	<dl dfn-for=view-timeline-inset dfn-type=value>
		<dt><dfn>auto</dfn>
		<dd>
			Indicates to use the value of 'scroll-padding'.

		<dt><dfn><<length-percentage>></dfn>
		<dd>
			Like 'scroll-padding',
			defines an inward offset from the corresponding edge of the scrollport.
	</dl>

	If 'view-timeline-name' has more names than 'view-timeline-inset' has specified inset pairs,
	the excess timelines use the last 'view-timeline-inset' pair.
	If 'view-timeline-name' has fewer names than 'view-timeline-inset' has specified inset pairs
	the used 'view-timeline-inset' list is truncated.

### View Timeline Shorthand: the 'view-timeline' shorthand ### {#view-timeline-shorthand}

	<pre class='propdef shorthand'>
	Name: view-timeline
	Value: [ <<'view-timeline-name'>> || <<'view-timeline-axis'>> ]#
	Applies to: all elements
	</pre>

	This property is a [=shorthand=] for setting
	'view-timeline-name' and 'view-timeline-axis'
	in a single declaration.
	It does not set 'view-timeline-inset'.

	ISSUE: Should it reset 'view-timeline-inset' also?

# Named Timeline Scoping # {#timeline-scope}

	A named [=scroll progress timeline=] or [=view progress timeline=]
	is referenceable in 'animation-timeline' by:
	* the declaring element itself
	* that element’s descendants
	* that element’s following siblings and their descendants

	If multiple elements have declared the same timeline name,
	the matching timeline is the one declared
	on the nearest element in tree order,
	which considers siblings closer than parents.
	In case of a name conflict on the same element,
	[=scroll progress timelines=] take precedence over [=view progress timelines=].

	Note: Like most operations in CSS besides [=selector=] matching,
	timeline scoping occurs over the [=flattened element tree=].

	ISSUE: Do we want to expand this scope to preceding siblings and/or distant cousins?

# Avoiding cycles with layout # {#avoiding-cycles}

	The ability for scrolling to drive the progress of an animation,
	gives rise to the possibility of <dfn>layout cycles</dfn>,
	where a change to a scroll offset causes an animation's effect to update,
	which in turn causes a new change to the scroll offset.

	To avoid such [=layout cycles=],
	animations with a [=scroll progress timeline=] are sampled once per frame,
	after scrolling in response to input events has taken place,
	but before {{requestAnimationFrame()}} callbacks are run.
	If the sampling of such an animation causes a change to a scroll offset,
	the animation will not be re-sampled to reflect the new offset
	until the next frame.

	The implication of this is that in some situations, in a given frame,
	the rendered scroll offset of a scroll container might not be consistent
	with the state of an animation driven by scrolling that scroll container.
	However, this will only occur in situations where the animation's effect
	changes the scroll offset of that same scroll container
	(in other words, in situations where the animation's author is asking for trouble).
	In normal situations, including&mdash;importantly--
	when scrolling happens in response to input events,
	the rendered scroll offset and the state of scroll-driven animations
	will be consistent in each frame.

	User agents that composite frames asynchronously
	with respect to layout and/or script
	may, at their discretion, sample scroll-driven animations
	once per <em>composited</em> frame,
	rather than (or in addition to) once per full layout cycle.
	Again, if sampling such an animation causes a change to a scroll offset,
	the animation will not be re-sampled to reflect the new offset
	until the next frame.

	Nothing in this section is intended to require
	that scrolling block on layout or script.
	If a user agent normally composites frames where scrolling has occurred
	but the consequences of scrolling have not been fully propagated in layout or script
	(for example, `scroll` event listeners have not yet run),
	the user agent may likewise choose not to sample scroll-driven animations
	for that composited frame.
	In such cases, the rendered scroll offset
	and the state of a scroll-driven animation
	may be inconsistent in the composited frame.

# Appendix A: Named Timeline Ranges # {#timeline-ranges}

	ISSUE: This section should move to CSS-ANIMATIONS-2 and WEB-ANIMATIONS-2.

	This specification introduces the concept of [=named timeline ranges=]
	to <a href="https://www.w3.org/TR/css-animations/">CSS Animations</a>
	and <a href="https://www.w3.org/TR/web-animations/">Web Animations</a>.

	A <dfn export>named timeline range</dfn>
	is a named segment of an animation [=timeline=].
	The start of the segment is represented as 0% progress through the range;
	the end of the segment is represented as 100% progress through the range.
	Multiple [=named timeline ranges=] can be attached to a given [=timeline=],
	and multiple such ranges can overlap.
	For example, the ''animation-timeline/contain'' range of a [=view progress timeline=]
	overlaps with its ''animation-timeline/cover'' range.
	[=Named timeline ranges=] are represented by
	the <dfn><<timeline-range-name>></dfn> value type,
	which indicates a [=CSS identifier=] representing
	one of the predefined [=named timeline ranges=].

	Note: In this specification, [=named timeline ranges=]
	must be defined to exist by a specification
	such as [[SCROLL-ANIMATIONS-1]].
	A future level may introduce APIs for authors to declare
	their own custom [=named timeline ranges=].

## Named Timeline Range Keyframe Selectors ## {#named-range-keyframes}

	[=Named timeline range=] names and percentages
	can be used to attach keyframes
	to specific progress points within the [=named timeline range=].
	The CSS ''@keyframes'' rule is extended thus:

	<pre class="prod">
		<<keyframe-selector>> = from | to | <<percentage>> | <<timeline-range-name>> <<percentage>>
	</pre>

	where <<timeline-range-name> is the [=CSS identifier=]
	that represents a chosen predefined [=named timeline range=],
	and the <<percentage>> after it represents the percentage progress
	between the start and end of that [=named timeline range=].

	Keyframes are attached to the specified point in the timeline.
	If the timeline does not have a corresponding [=named timeline range=],
	then any keyframes attached to points on that [=named timeline range=]
	are ignored.

## Attaching Animations to Timeline Ranges ## {#named-range-animation-declaration}

	A set of animation keyframes can be attached
	in reference to [=named timeline ranges=]
	by adjusting the duration of the animation.

	<pre class="propdef shorthand">
		Name: animation-delay, animation-range
		Value: [ <<'animation-delay-start'>> <<'animation-delay-end'>>? | <<timeline-range-name>> ]#
	</pre>

	The 'animation-delay' and 'animation-range' properties
	are both [=shorthand property|shorthands=]
	that set 'animation-delay-start' and 'animation-delay-end'
	together in a single declaration.
	If the <<'animation-delay-end'>> value is omitted,
	it is set to zero.
	If a <<timeline-range-name>> alone is specified,
	'animation-delay-start' is set to that name plus ''0%''
	and 'animation-delay-end' is set to that name plus ''100%''.

	<pre class="propdef">
		Name: animation-delay-start
		Value: [ <<time>> | <<timeline-range-name>> <<percentage>>
		Initial: 0s
		Applies to: all elements
		Inherited: no
		Percentages: relative to the specified [=named timeline range=]
		Computed value: list, each item either a duration or a timeline range and progress percentage
		Animatable: no
	</pre>

	Defines a delay between the start of the animation
	and when it begins executing
	(i.e. when keyframes attached to 0% progress are mapped).

	<dl dfn-for="animation-delay-start, animation-delay-end" dfn-type=value>
		<dt><dfn><<time>></dfn>
		<dd>
			Defines the delay as a duration. See [[CSS-ANIMATIONS-1]].
		<dt><dfn><<timeline-range-name>> <<percentage>></dfn>
		<dd>
			Calculates the delay as the difference between
			the start of the animation
			and the specified point on the [=timeline=].
	</dl>

	<pre class="propdef">
		Name: animation-delay-end
		Value: [ <<time>> | <<timeline-range-name>> <<percentage>>
		Initial: 0s
		Applies to: all elements
		Inherited: no
		Percentages: relative to the specified [=named timeline range=]
		Computed value: list, each item either a duration or a timeline range and progress percentage
		Animatable: no
	</pre>

	Defines a delay between the end of the animation
	and when it ends executing
	(i.e. when keyframes attached to 100% progress are mapped).
	Values are as for 'animation-delay-start',
	but calculating backwards from the end,
	i.e. a ''2s'' delay effectively shortens the animation duration,
	whereas ''-2s'' lengthens it.

## Reporting Timeline Range Progress: the ''getTime()'' method ## {#named-range-getTime}

	Progress through named ranges is exposed on the {{AnimationTimeline}} object
	by the {{AnimationTimeline/getCurrentTime()}} method:

	<pre class="idl">
		[Exposed=Window]
		interface AnimationTimeline {
		  readonly attribute CSSNumberish? currentTime;
		  CSSNumericValue? getCurrentTime(optional CSSOMString rangeName);
		};
	</pre>

	<div algorithm="AnimationTimeline.getCurrentTime()">
		The <code><dfn method for=AnimationTimeline>getCurrentTime(optional |rangeName|)</dfn></code> [=method steps=] are:

		1. If [=this=] is an [=inactive timeline=],
			return [=null=].

		1. If |rangeName| is provided:

			1. If |rangeName| is a valid [=named timeline range=] on [=this=],
				let |progress| be the current progress through that range,
				expressed as a percentage value between 0 and 100.

				Create a [=new unit value=] from (|progress|, "percent")
				and return it.

			2. Otherwise, return [=null=].

		2. Let |current time| 
			be the value of [=this's=] {{AnimationTimeline/currentTime}} internal slot.

			Create a [=new unit value=] from (|current time|, "ms")
			and return it.
	</div>
