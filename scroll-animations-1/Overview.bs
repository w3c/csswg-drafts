<link href='web-animations.css' rel='stylesheet' type='text/css'>
<pre class='metadata'>
Title: Scroll-linked Animations
Group: CSSWG
Status: ED
Work Status: exploring
Level: 1
Group: CSSWG
URL: https://drafts.csswg.org/scroll-animations-1/
ED: https://drafts.csswg.org/scroll-animations-1/
Shortname: scroll-animations-1
Abstract: Defines an API and markup for creating animations that are tied to 
          the scroll offset of a scroll container.
Editor: Brian Birtles, Invited Expert, brian@birchill.co.jp, w3cid 43194
Editor: Botond Ballo, Mozilla, botond@mozilla.com
Editor: Antoine Quint, Apple, graouts@apple.com, w3cid 51377
Editor: Majid Valipour, Google, majidvp@google.com, w3cid 81464
Editor: Olga Gerchikov, Microsoft, gerchiko@microsoft.com

Former editor: Mantaroh Yoshinaga
Former editor: Stephen McGruer, Google, smcgruer@google.com
</pre>
<pre class=anchors>
urlPrefix: https://w3c.github.io/web-animations/; type: dfn; spec: web-animations
    text: animation; url: concept-animation
    text: current time
    text: default document timeline
    text: duration
    text: inactive timeline
    text: start delay
    text: target effect end
    text: timeline
urlPrefix: https://drafts.csswg.org/cssom-view/; type: dfn; spec: cssom-view-1
    text: CSS layout box
urlPrefix: https://html.spec.whatwg.org/multipage/browsers.html; type: dfn; spec: html
    text: document associated with a window; url: concept-document-window
</pre>
<pre class=link-defaults>
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:method; text:requestAnimationFrame()
</pre>

# Introduction # {#intro}

This specification defines mechanisms for
[[#scroll-driven-animations|driving the progress of an animation]] based
on the scroll progress of a scroll container.

## Relationship to other specifications ## {#other-specs}

Web Animations [[WEB-ANIMATIONS-1]] defines an abstract conceptual model for
animations on the Web platform, with elements of the model including
[=animations=] and their [=timelines=],
and associated programming interfaces.

This specification extends this model by defining a new type of animation [=timeline=]:
a [=scroll timeline=].

This specification defines both programming interfaces for interacting with these
concepts, as well as CSS markup which applies these concepts to CSS Animations
[[CSS3-ANIMATIONS]].

The behavior of the CSS markup is described in terms of the programming interfaces.
User agents that do not support script may still implement the CSS markup
provided it behaves as if the underlying programming interfaces were in place.

## Relationship to asynchronous scrolling ## {#async-scrolling}

Some user agents support scrolling that's asynchronous with respect to layout
or script. This specification is intended to be compatible with such an
architecture.

Specifically, this specification allows expressing scroll-linked effects in a
way that does not require script to run each time the effect is sampled. User
agents that support asynchronous scrolling are allowed (but not required) to
sample such effects asynchronously as well.

## Value Definitions ## {#values}

This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
Combination with other CSS modules may expand the definitions of these value types.

In addition to the property-specific values listed in their definitions,
all properties defined in this specification
also accept the <a>CSS-wide keywords</a> keywords as their property value.
For readability they have not been repeated explicitly.

# Use cases # {#use-cases}

<em>This section is non-normative</em>

Note: Based on this <a
href="https://github.com/WICG/scroll-animations/blob/master/Use%20cases.md">curated
list of use cases</a>.


## Scrollable picture-story show ## {#scrollable-animation-usecase}

Another pattern is an animation that tells a story where the user
controls the progress of the animation by scrolling or some other
gesture. This may be because the animation contains a lot of textual
information which the user may wish to peruse more slowly, it may be for
accessibility considerations to accommodate users who are uncomfortable
with rapid animation, or it may simply be to allow the user to easily
return to previous parts of the story such as a story that introduces
a product where the user wishes to review previous information.

The following (simplified) example shows two balls colliding. The
animation is controlled by scroll position allowing the user to easily
rewind and replay the interaction.

<figure>
<img src="img/usecase3-1.svg" width="600"
alt="Use case: The picture-story show.">
 <figcaption>
  A scrollable movie.<br>
  The left figure shows the initial position of the balls<br>
  The right figure shows them after they have collided.
 </figcaption>
</figure>

Using the CSS markup:

<pre class='lang-css'>
@media (prefers-reduced-motion: no-preference) {
  div.circle {
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-timeline: collision-timeline;
  }
  #left-circle {
    animation-name: left-circle;
  }
  #right-circle {
    animation-name: right-circle;
  }
  #union-circle {
    animation-name: union-circle;
    animation-fill-mode: forwards;
    animation-timeline: union-timeline;
  }

  @scroll-timeline collision-timeline {
    source: selector(#container);
    orientation: block;
    start:  200px;
    end: 300px;
  }

  @scroll-timeline union-timeline {
    source: selector(#container);
    orientation: block;
    start:  250px;
    end: 300px;
  }

  @keyframes left-circle {
    to { transform: translate(300px) }
  }
  @keyframes right-circle {
    to { transform: translate(350px) }
  }
  @keyframes union-circle {
    to { opacity: 1 }
  }
}
</pre>

Using the programming interface, we might write this as:

<pre class='lang-javascript'>
if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
  const scrollableElement = document.querySelector('#container');

  const collisionTimeline = new ScrollTimeline({
    source: scrollableElement,
    start: '200px',
    end: '300px'
  });

  const left = leftCircle.animate({ transform: 'translate(300px)' }, 1000);
  left.timeline = collisionTimeline;

  const right = leftCircle.animate({ transform: 'translate(350px)' }, 1000);
  right.timeline = collisionTimeline;

  const union = unionCircle.animate({ opacity: 1 }, { duration: 1000, fill: "forwards" });
  union.timeline = new ScrollTimeline({
    source: scrollableElement,
    start: '250px',
    end: '300px'
  });
}
</pre>

## The content progress bar ## {#content-progress-bar-usecase}

Another common example of an animation that tracks scroll position is a
progress bar that is used to indicate the reader's position in a long
article.

<figure>
<img src="img/usecase3-2.svg" width="600"
alt="Use case: Scroll based styling">
 <figcaption>
  Content progress bar.<br>
  The left figure shows the initial state before scrolling.<br>
  The right figure shows the progress bar is half-filled in since the
  user has scrolled half way through the article.
 </figcaption>
</figure>

Typically, the scroll bar provides this visual indication but
applications may wish to hide the scroll bar for aesthetic or useability
reasons.

Using the updated 'animation' shorthand that includes 'animation-timeline', 
this example could be written as follows:

<pre class='lang-css'>
@media (prefers-reduced-motion: no-preference) {
  @scroll-timeline progress-timeline {
    source: selector(#body);
  }

  @keyframes progress {
    to { width: 100%; }
  }
  #progress {
    width: 0px;
    height: 30px;
    background: red;
    animation: 1s linear forwards progress progress-timeline;
  }
}
</pre>


If we use this API for this case, the example code will be as follow:

<pre class='lang-javascript'>
if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
  var animation = div.animate({ width: '100%' }, { duration: 1000, fill: "forwards" });
  animation.timeline = new ScrollTimeline(
    { start: '0px' }
  );
}
</pre>

## Combination scroll and time-base animations ## {#combination-scroll-and-time-base-animations-usecase}

### Photo viewer ### {#movie-show-case-usecase}

Advisement: We are currently reworking this use case

<!--
Maybe the developer will want to use the scroll based timeline and the time-based timeline.

Here's an example content which showing the photos.
If scroll position is out of specified range, the animation of the slideshow will start. The progress of this slideshow is related to scroll volume. And if scroll position is within the specified range, the animation of the slideshow will continue automatically.

<figure>
<img src="img/usecase4.svg" width="600"
alt="Use case 4: Scrollable slide show.">
 <figcaption>
  Use case 4: Scrollable slide show.<br>
  The left figure is before scroll, the slide show will start as scroll-linked animation.<br>
  The right figure is after scroll, the slide show will start as related to the time animation.
 </figcaption>
</figure>

This content can't build the CSS only.
<pre class='lang-javascript'>
if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
  var animation = slideTarget.getAnimation()[0];
  var scrollTimeline = new ScrollTimeline({
    source: scrollableElement,
    orientation: "vertical",
    scrollOffset: '0px',
    end: '200px'
  });
  animation.timeline = scrollTimeline;

  // We use scroll event in order to change the timeline.
  scrollableElement.addEventListener("scroll", function(evt) {
    if ((scrollableElement.scrollTop > 200) && animation.timeline != document.timeline) {
      animation.timeline = document.timeline;
    } else if ((scrollableElement.scrollTop < 200) && animation.timeline == document.timeline) {
      animation.timeline = scrollTimeline;
    }
  });
}
</pre>
-->

</div>

# Scroll-driven animations # {#scroll-driven-animations}

## Scroll timelines ## {#scroll-timelines}

### The {{ScrollDirection}} enumeration ### {#scrolldirection-enumeration}

<pre class="idl">
enum ScrollDirection {
  "block",
  "inline",
  "horizontal",
  "vertical"
};
</pre>

The {{ScrollDirection}} enumeration specifies a direction of scroll of a
scrollable element.

:   <code>block</code>
::  Selects the direction along the [=block axis=], conforming to writing mode
    and directionality.

:   <code>inline</code>
::  Selects the direction along the [=inline axis=], confirming to writing mode
    and directionality.

:   <code>horizontal</code>
::  Selects the physical horizontal direction (ignoring writing mode and
    directionality).

:   <code>vertical</code>
::  Selects the physical vertical direction (ignoring writing mode and
    directionality).

Note: Having both logical (block/inline) and physical (vertical/horizontal)
directions allows web developers to animate both logical (e.g.
margin-inline-start) and physical (e.g. transform) properties with good
behavior under different directionalities and writing modes.

### The {{ScrollTimeline}} interface ### {#scrolltimeline-interface}

<pre class="idl">
enum ScrollTimelineAutoKeyword { "auto" };

dictionary ScrollTimelineOptions {
  Element? source = null;
  ScrollDirection orientation = "block";
  DOMString start = "auto";
  DOMString end = "auto";
  (double or ScrollTimelineAutoKeyword) timeRange = "auto";
};

[Exposed=Window]
interface ScrollTimeline : AnimationTimeline {
  constructor(optional ScrollTimelineOptions options = {});
  readonly attribute Element source;
  readonly attribute ScrollDirection orientation;
  readonly attribute DOMString start;
  readonly attribute DOMString end;
  readonly attribute (double or ScrollTimelineAutoKeyword) timeRange;
};
</pre>

A <dfn>scroll timeline</dfn> is an {{AnimationTimeline}} whose time values are determined
not by wall-clock time, but by the progress of scrolling in a [=scroll container=].

<div link-for-hint="ScrollTimeline">

<div class="constructors">

:   <dfn constructor for=ScrollTimeline lt="ScrollTimeline(options)">ScrollTimeline(options)</dfn>
::  Creates a new {{ScrollTimeline}} object using the following procedure:

    1. Let |timeline| be a new {{ScrollTimeline}} object.

    1. Let |source| be the result corresponding to the first matching condition from below.

        : If the |source| value of |options| is non-null,
        :: Let |source| be |source|

        : Otherwise (|source| is null):
        :: Let |source| be the {{scrollingElement}} of the {{Document}} <a lt="document associated with a window">associated</a> with the {{Window}} that is the <a>current global object</a>.

        Note: |source| may still be null after this step, e.g. if the {{Document}} has no {{scrollingElement}}.

    1. Set the {{ScrollTimeline/source}} of |timeline| to |source|.

    1. Assign the {{ScrollTimeline/orientation}}, {{ScrollTimeline/start}}, {{ScrollTimeline/end}}, and {{ScrollTimeline/timeRange}} properties of |timeline| to the corresponding value from |options|.

</div>

<div class="attributes">

:   <dfn attribute for=ScrollTimeline>source</dfn>
::  The scrollable element whose scrolling triggers the activation and drives the
    progress of the timeline.

:   <dfn attribute for=ScrollTimeline>orientation</dfn>
::  Determines the direction of scrolling which triggers the activation and drives
    the progress of the timeline.

:   <dfn attribute for=ScrollTimeline>start</dfn>
::  A scroll offset, in the direction specified by {{orientation}}, which constitutes
    the beginning of the range in which the timeline is active.

    Recognized values are defined by the following grammar:

    <blockquote>
      <pre class="prod">auto | <<length>> | <<percentage>></pre>
    </blockquote>

    The meaning of each value is as follows:

    :   auto
    ::  The beginning of {{source}}'s scroll range in {{orientation}}.
    :   <<length>>
    ::  An absolute distance along {{source}}'s scroll range in {{orientation}}.
    :   <<percentage>>
    ::  A percentage distance along {{source}}'s scroll range in {{orientation}}.

:   <dfn attribute for=ScrollTimeline>end</dfn>
::  A scroll offset, in the direction specified by {{orientation}}, which constitutes
    the end of the range in which the timeline is activated.

    Recognized values are defined by the following grammar:

    <blockquote>
      <pre class="prod">auto | <<length>> | <<percentage>></pre>
    </blockquote>

    The meaning of each value is as follows:

    :   auto
    ::  The end of {{source}}'s scroll range in {{orientation}}.
    :   <<length>>
    ::  An absolute distance along {{source}}'s scroll range in {{orientation}}.
    :   <<percentage>>
    ::  A percentage distance along {{source}}'s scroll range in {{orientation}}.

:   <dfn attribute for=ScrollTimeline>timeRange</dfn>
::  A time duration that allows mapping between a distance scrolled, and
    quantities specified in time units, such as an animation's [=duration=] and
    [=start delay=].

    Conceptually, {{timeRange}} represents the number of milliseconds to map to the
    scroll range defined by {{start}} and {{end}}. As a
    result, this value does not have a correspondence to wall-clock time.

    This value is used to compute the timeline's [=effective time range=], and
    the mapping is then defined by mapping the scroll distance from
    {{start}} to {{end}}, to the [=effective time range=].

</div>

### The effective time range of a {{ScrollTimeline}} ### {#efffective-time-range-algorithm}

The <dfn>effective time range</dfn> of a {{ScrollTimeline}} is calculated as follows:

<div class="switch">

:   If the {{timeRange}} has the value <code>"auto"</code>,
::  The [=effective time range=] is the maximum value of the
    [=target effect end=] of all animations
    directly associated with this timeline.

    If any animation directly associated with the timeline has a
    [=target effect end=] of infinity, the [=effective time range=]
    is zero.

:   Otherwise,
::  The [=effective time range=] is the {{ScrollTimeline}}'s
    {{timeRange}}.

</div>

### The current time of a {{ScrollTimeline}} ### {#current-time-algorithm}

The [=current time=] of a {{ScrollTimeline}} is calculated
as follows:

1.  If {{source}} is null, does not currently have a [=CSS layout box=], or
    if its layout box is not a [=scroll container=], return an unresolved time value.

1.  Otherwise, let <var>current scroll offset</var> be the current scroll offset of {{source}}
    in the direction specified by {{orientation}}.

1.  If <var>current scroll offset</var> is less than {{start}}, return 0.

    Note: TODO(<a href="https://github.com/w3c/csswg-drafts/issues/4325#issuecomment-585295758">Issue 4325</a>): Define what the correct timeline state is based on scroll offset.

1.  If <var>current scroll offset</var> is greater than or equal to {{end}}, return [=effective time range=].

1.  Return the result of evaluating the following expression:

    <blockquote>
      <code>(<var>current scroll offset</var> - {{start}}) / ({{end}} - {{start}}) &times; [=effective time range=]</code>
    </blockquote>

## The 'animation-timeline' property ## {#animation-timeline}

A {{ScrollTimeline}} may be applied to a CSS Animation [[CSS3-ANIMATIONS]] using
either the 'animation-timeline' property or 'animation-name' property. With the
former taking precedent over the latter.

<pre class='propdef'>
Name: animation-timeline
Value: <<single-animation-timeline>>#
Initial: auto
Applies to: all elements, ::before and ::after pseudo-elements
Inherited: no
Animatable: no
Percentages: N/A
Media: interactive
Computed value: As specified
Canonical order: per grammar
</pre>

<pre>
<dfn>&lt;single-animation-timeline></dfn> = auto | none |  <<timeline-name>>
</pre>

The 'animation-timeline' property is similar to properties like
'animation-name' and 'animation-duration' in that it can have one or
more values, each one imparting additional behavior to a corresponding
[=animation=] on the element, with the timelines matched up with animations as
described [[css-animations-1#animation-name|here]].

Each value has type <<single-animation-timeline>>, whose possible values have
the following effects:

:   auto
::  The animation's [=timeline=] is a {{DocumentTimeline}}, more specifically
    the <a>default document timeline</a>.

:   none
::  The animation is not associated with a [=timeline=].


:   <<timeline-name>>
::  If ''@scroll-timeline'' rule with  the name specified by <<timeline-name>>, then
    the animation's [=timeline=] is a timeline whose property values are
    provided by that rule. Otherwise there is no [=timeline=] associated with
    the animation.


If 'animation-timeline' property is not specified but 'animation-name' is
specified then its value is used to select the scroll-timeline at-rule that
provides the property values for the animation's timeline.

Note: Allowing animation-name to be used for selecting timeline enables most
common animations to have to use a single name for both their keyframes and
timeline which is simple and ergonomics. The 'animation-timeline' property gives
additional control to authors to independently select keyframes and timeline if
necessary.


In this case, each possible value of type <<keyframes-name>> from
'animation-name' has the following effects:

:   none
::  No timelines and keyframes are specified at all, so there will be no
    animation. Any other animations properties specified for this animation have no
    effect.


:   <<keyframes-name>>
::  If ''@scroll-timeline'' rule with  the name specified by <<keyframes-name>>, then
    the animation's [=timeline=] is a timeline whose property values are
    provided by that rule. Otherwise the animation's [=timeline=] is a
    {{DocumentTimeline}}, more specifically the <a>default document
    timeline</a>.

Note: Notice that the behavior for the case where no timeline with the given
name is found is different for these two properties. This ensures backward
compatibility because all existing time-based animations with 'animation-name'
specified expect to use <a>default document timeline</a>.

### Changes to the 'animation' shorthand property ### {#animation-shorthand}

The 'animation' shorthand property syntax is updated to accept an additional
optional <<timeline-name>>.

	<dfn>&lt;single-animation></dfn> = <<time>> || <<easing-function>> || <<time>> || <<single-animation-iteration-count>> || <<single-animation-direction>> || <<single-animation-fill-mode>> || <<single-animation-play-state>> || [ none | <<keyframes-name>> ] || [ none | <<timeline-name>> ]

Issue: Update css-animations spec instead of monkey-patching it here.

## The '@scroll-timeline' at-rule ## {#scroll-timeline-at-rule}

[=Scroll Timelines=] are specified in CSS using the <dfn>@scroll-timeline</dfn>
at-rule, defined as follows:

<pre>
  @scroll-timeline = @scroll-timeline <<timeline-name>> { <<declaration-list>> }


  <dfn>&lt;timeline-name></dfn> = <<custom-ident>> | <<string>>
</pre>


An ''@scroll-timeline'' rule has a name given by the <<custom-ident>> or <<string>> in
its prelude. The two syntaxes are equivalent in functionality; the name is the
value of the ident or string. As normal for <<custom-ident>>s and <<string>>s,
the names are fully case-sensitive; two names are equal only if they are
codepoint-by-codepoint equal. The <<custom-ident>> additionally excludes the
none keyword.


The <<declaration-list>> inside of ''@scroll-timeline'' rule can only contain the
descriptors defined in this section.

### Scroll Timeline descriptors ### {#scroll-timeline-descriptors}


<pre class='descdef'>
  Name: source
  For: @scroll-timeline
  Value: selector(<<id-selector>>) | none
  Initial: none
</pre>

'source' descriptor determines the scroll timeline's {{source}}. If specified as
a 'selector()' the scroll timeline's {{source}} is the [=scroll container=]
identified by the <<id-selector>>, otherwise if not specified or none then it is
the the {{scrollingElement}} of the {{Document}} <a lt="document associated with
a window">associated</a> with the {{Window}} that is the <a>current global
object</a>.

Issue(4338): consider choosing animation target's nearest scrollable ancestor
instead of document's scrolling Element

<pre class='descdef'>
  Name: orientation
  For: @scroll-timeline
  Value: auto | block | inline | horizontal | vertical
  Initial: auto
</pre>

'orientation' descriptor determines the scroll timeline's {{orientation}}.


<pre class='descdef'>
  Name: start
  For: @scroll-timeline
  Value: auto | <<length>> | <<percentage>>
  Initial: auto
</pre>

'start' descriptor determines the scroll timeline's {{start}}.


<pre class='descdef'>
  Name: end
  For: @scroll-timeline
  Value: auto | <<length>> | <<percentage>>
  Initial: auto
</pre>

'end' descriptor determines the scroll timeline's {{end}}.


<pre class='descdef'>
  Name: scroll-time-range
  For: @scroll-timeline
  Value: auto | <<time>>
  Initial: auto
</pre>

'scroll-time-range' descriptor determines the scroll timeline's {{timeRange}}.

</div>  <!-- link-for-hint="ScrollTimeline" -->

## Examples ## {#timeline-examples}

<div class="example">
  Draw a reading progress bar along the top of the page as the user scrolls
  <pre class="lang-css">
    #progress {
      position: fixed;
      top: 0;
      width: 0;
      height: 2px;
      background-color: red;
    }
  </pre>
  <pre class="lang-javascript">
    if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
      let progress = document.getElementById("progress");
      let effect = new KeyframeEffect(
        progress,
        [
          { width: "0vw" },
          { width: "100vw" }
        ],
        {
          duration: 1000,
          easing: "linear",
          fill: "forwards"
        });
      let timeline = new ScrollTimeline({
        scrollSource: document.documentElement,
        orientation: "vertical",
      });
      let animation = new Animation(effect, timeline);
      animation.play();
    }
  </pre>
</div>

<div class="example">
  The same thing with CSS, using 'animation-timeline'
  <pre class="lang-css">
    @media (prefers-reduced-motion: no-preference) {

      @scroll-timeline progress {
        /* Assume the HTML element has id 'root' */
        source: selector(#root);
        orientation: vertical;
      }

      @keyframes progress {
        from {
          width: 0vw;
        }
        to {
          width: 100vw;
        }
      }

      #progress {
        position: fixed;
        top: 0;
        width: 0;
        height: 2px;
        background-color: red;
        /* This name is used to select both the keyframes and the
           scroll-timeline at-rules. */
        animation-name: progress;
        animation-duration: 1s;
        animation-fill-mode: forwards;
        animation-timing-function: linear;
      }

    }
  </pre>
</div>

# Avoiding cycles with layout # {#avoiding-cycles}

The ability for scrolling to drive the progress of an animation, gives rise to
the possibility of <dfn>layout cycles</dfn>, where a change to a scroll offset
causes an animation's effect to update, which in turn causes a new change to the
scroll offset.

To avoid such [=layout cycles=], animations with a {{ScrollTimeline}} are
sampled once per frame, after scrolling in response to input events has taken
place, but before {{requestAnimationFrame()}} callbacks are run. If the sampling
of such an animation causes a change to a scroll offset, the animation will not
be re-sampled to reflect the new offset until the next frame.

The implication of this is that in some situations, in a given frame, the
rendered scroll offset of a scroll container may not be consistent with the state
of an animation driven by scrolling that scroll container. However, this will
only occur in situations where the animation's effect changes the scroll offset
of that same scroll container (in other words, in situations where the animation's
author is asking for trouble). In normal situations, including - importantly -
when scrolling happens in response to input events, the rendered scroll offset
and the state of scroll-driven animations will be consistent in each frame.

User agents that composite frames asynchronously with respect to layout and/or
script may, at their discretion, sample scroll-driven animations once per
<em>composited</em> frame, rather than (or in addition to) once per full layout
cycle. Again, if sampling such an animation causes a change to a scroll offset,
the animation will not be re-sampled to reflect the new offset until the next
frame.

Nothing in this section is intended to require that scrolling block on layout
or script. If a user agent normally composites frames where scrolling has
occurred but the consequences of scrolling have not been fully propagated in
layout or script (for example, <code>scroll</code> event listeners have not yet
run), the user agent may likewise choose not to sample scroll-driven animations
for that composited frame. In such cases, the rendered scroll offset and the
state of a scroll-driven animation may be inconsistent in the composited frame.


<h2 id="appendix-a-considerations-for-security-and-privacy">Appendix A. Considerations for Security and Privacy</h2>

This appendix is <em>informative</em>.

There are no known security or privacy impacts of this feature.

The W3C TAG is developing a
<a href="https://www.w3.org/TR/security-privacy-questionnaire/">Self-Review Questionnaire: Security and Privacy</a>
for editors of specifications to informatively answer.

Per the <a href="https://www.w3.org/TR/security-privacy-questionnaire/#questions">Questions to Consider</a>

<ol>
<li>Does this specification deal with personally-identifiable information?
<p>No.</p>
</li>

<li>Does this specification deal with high-value data?
<p>No.</p>
</li>

<li>Does this specification introduce new state for an origin that persists across browsing sessions?
<p>No.</p>
</li>

<li>Does this specification expose persistent, cross-origin state to the web?
<p>No.</p>
</li>

<li>Does this specification expose any other data to an origin that it doesn’t currently have access to?
<p>No.</p>
</li>

<li>Does this specification enable new script execution/loading mechanisms?
<p>No.</p>
</li>

<li>Does this specification allow an origin access to a user’s location?
<p>No.</p>
</li>

<li>Does this specification allow an origin access to sensors on a user’s device?
<p>No.</p>
</li>

<li>Does this specification allow an origin access to aspects of a user’s local computing environment?
<p>No.</p>
</li>

<li>Does this specification allow an origin access to other devices?
<p>No.</p>
</li>

<li>Does this specification allow an origin some measure of control over a user agent’s native UI?
<p>No.</p>
</li>

<li>Does this specification expose temporary identifiers to the web?
<p>No.</p>
</li>

<li>Does this specification distinguish between behavior in first-party and third-party contexts?
<p>No.</p>
</li>

<li>How should this specification work in the context of a user agent’s "incognito" mode?
<p>No differently. The website should not be able to determine that the user is
in an "incognito" mode using scroll-linked animations.</p>
</li>

<li>Does this specification persist data to a user’s local device?
<p>No.</p>
</li>

<li>Does this specification have a "Security Considerations" and "Privacy Considerations" section?
<p>Yes.</p>
</li>

<li>Does this specification allow downgrading default security characteristics?
<p>No.</p>
</li>
</ol>

