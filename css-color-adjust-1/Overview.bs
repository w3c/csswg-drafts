<pre class='metadata'>
Title: CSS Color Adjustment Module Level 1
Shortname: css-color-adjust
Level: 1
Status: ED
Work Status: refining
Group: CSSWG
TR: https://www.w3.org/TR/css-color-adjust-1/
ED: https://drafts.csswg.org/css-color-adjust-1/
Previous Version: https://www.w3.org/TR/2020/WD-css-color-adjust-1-20201109/
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Rossen Atanassov, Microsoft, ratan@microsoft.com, w3cid 49885
Editor: Rune Lillesveen, Google, futhark@google.com, w3cid 45291
Editor: Tab Atkins Jr., Google, http://www.xanthir.com/contact/, w3cid 42199
Abstract: This module introduces a model and controls over automatic color adjustment by the user agent to handle user preferences, such as "Dark Mode", contrast adjustment, or specific desired color schemes.
Ignored Terms: -webkit-tap-highlight-color, name, the head element
</pre>
<pre class='link-defaults'>
spec:css2; type:dfn; text:canvas
spec:css-color-4; type:property; text:color
spec:fill-stroke-3; type:property;
	text:fill
	text:stroke
</pre>

Introduction {#intro}
=====================

Value Definitions {#values}
---------------------------

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

Preferred Color Schemes {#preferred}
=======================

	Operating systems and user agents often give users
	the ability to choose their preferred <dfn>color schemes</dfn>
	for user interface elements.
	These are typically reflected in the user agent's rendering
	of its navigation interface as well as in-page interface elements
	such as form controls and scrollbars,
	and are expected to also be reflected
	in the values of the CSS system colors.

	A UA can also allow the user to indicate a preference
	for the [=color scheme=] of the pages they view,
	requesting that the author adapt the page to those color preferences.
	(It is not required to express a preference;
	users can have preferences for operating system interface colors
	that they do not want imposed on pages.)

	The most common preferences
	are a choice of “Light” vs “Dark” (or “Day Mode” vs “Night Mode”) color schemes,
	rendering things as mostly light- or dark-colored backgrounds,
	and with dark- or light-colored foregrounds (text, icons).
	This module,
	together with <a href="https://www.w3.org/TR/mediaqueries-5/">Media Queries Level 5</a>,
	defines controls to enable [=color scheme=] negotiation
	for “Light” and “Dark” [=color schemes=] (and no preference).

	Note: <strong>The “Light” and “Dark” color schemes
	don't represent an exact color palette (such as black-and-white),
	but a range of possible palettes.
	To guarantee specific colors, authors must specify those colors themselves.</strong>
	Note also that, consequently,
	pairing default or <<system-color>> colors with author-specified colors
	cannot guarantee any particular contrast level;
	it might be necessary to set both foreground and background colors together
	to ensure legibility [[WCAG21]].

	To enable pages to adapt to the user's preferred [=color scheme=],
	user agents will match the '@media/prefers-color-scheme' media query
	to the user's preferred [=color schemes=].
	See [[MEDIAQUERIES-5]].

	Additionally, if the author has indicated that the page can support this [=color scheme=]
	(see 'color-scheme'),
	the user agent must match the following to the user's preferred [=color scheme=]:

	* the color of the [=canvas=] surface
	    <span class=issue>find what we name this in other specs</span>,
		the initial value of the '/color' property,
		and the [[css-color-4#css-system-colors|system colors]]
	* the default colors of scrollbars and other interaction UI
	* the default colors of form controls and other "specially-rendered" elements
	* the default colors of other browser-provided UI, such as "spellcheck" underlines

	User agents <em>may</em> support additional [=color schemes=],
	however CSS does not support negotiation of additional [=color schemes=]:
	user agents should pursue standardization of these schemes,
	so that '@media/prefers-color-scheme' and 'color-scheme' can reflect the additional values.

	Note: Aside from the small list of adjustments given above,
	user agents generally do not further adjust a page
	to match the user's preferred [=color scheme=],
	because the chance of accidentally ruining a page is too high.
	However, when particular color choices are required by the user
	(for accessibility reasons, for example),
	more invasive changes might be applied;
	see [[#forced]].

Opting Into a Preferred Color Scheme: the 'color-scheme' property {#color-scheme-prop}
-----------------------------------------------------------------

	<pre class=propdef>
	Name: color-scheme
	Value: normal | [ light | dark | <<custom-ident>> ]+
	Initial: normal
	Applies to: all elements and text
	Inherited: yes
	Computed Value: the keyword ''normal'', or an ordered list of specified color scheme keywords
	</pre>

	The 'color-scheme' property allows an element to indicate
	which [=color schemes=] it is comfortable being rendered with.
	These values are negotiated with the user's preferences,
	resulting in a <dfn>used color scheme</dfn>
	that affects UI things such as
	the default colors of form controls and scrollbars
	as well as the used values of the CSS system colors.

	Values are defined as follows:

	<dl dfn-type=value dfn-for=color-scheme>
		: <dfn>normal</dfn>
		::
			Indicates that the element isn't aware of [=color schemes=] at all,
			and so the element should be rendered with the browser's default [=color scheme=].

		: <dfn lt="light | dark">[ light | dark | <<custom-ident>> ]+</dfn>
		::
			Indicates that the element is okay with being rendered with any of the listed [=color schemes=].

			If the user's preferred color scheme,
			as indicated by the 'prefers-color-scheme' media feature,
			is present among the listed [=color schemes=],
			and is supported by the user agent,
			that's the element's [=used color scheme=].

			Otherwise,
			if the user agent supports at least one of the listed [=color schemes=],
			the [=used color scheme=] is
			the first supported [=color scheme=] in the list.

			Otherwise,
			the [=used color scheme=] is the browser default.
			(Same as ''color-scheme/normal''.)

			''light'' represents a “light” [=color scheme=],
			with light background colors and dark foreground colors.
			''dark'' represents the opposite,
			with dark background colors and light foreground colors.

			Note: User agents are <strong>not required</strong>
			to support any particular [=color scheme=],
			so only using a single keyword,
			such as ''color-scheme: dark'',
			to indicate a required [=color scheme=]
			is still not guaranteed to have any effect on the rendering of the element.

			<<custom-ident>> values are meaningless,
			and exist only for future compatibility,
			so that future added color schemes do not invalidate the 'color-scheme' declaration
			in legacy user agents.
			User agents <em>must not</em> interpret any <<custom-ident>> values as having a meaning;
			any additional recognized color schemes
			must be explicitly added to this property’s grammar.
			To avoid confusion,
			authoring tutorials and references
			should omit <<custom-ident>> from their materials.

			''color-scheme/normal'', ''light'', and ''dark'' are not valid <<custom-ident>>s in this property.

			Note: Repeating a keyword, such as ''color-scheme: light light'',
			is valid but has no additional effect
			beyond what the first instance of the keyword provides.
	</dl>

	<div class=example>
		A well-written page--
		one that responds to user preferences for light or dark display
		by using the 'prefers-color-scheme' media feature
		to alter the colors it uses--
		can easily opt the browser-controlled UI
		(scrollbars, inputs, etc)
		into the user's preferred color scheme as well
		with a simple global declaration:

		<pre highlight=css>
		:root {
			color-scheme: light dark;
		}
		</pre>
	</div>

	<div class=example>
		If a page limits itself to using <em>only</em> the <<system-color>>s,
		it can support the user's preferred color scheme
		without needing to use ''@media'' at all,
		simply by using the 'color-scheme' property:

		<pre highlight=css>
		:root {
			color-scheme: light dark;
		}
		</pre>

		because the [=used color scheme=]
		affects what <<system-color>>s resolve to.
	</div>

	Note: “Light” and “dark” color schemes are not specific color palettes.
	For example,
	both a stark black-on-white scheme and a sepia dark-on-tan scheme
	would both be considered “Light” color schemes.
	To ensure particular foreground or background colors,
	they need to be specified explicitly.

	Note: [[HTML]] specifies a
	<a href="https://html.spec.whatwg.org/multipage/semantics.html#meta-color-scheme">color-scheme</a>
	<{meta}> tag which can be used to set the color-scheme on the root element as
	a [[css-cascade-4#preshint|non-CSS presentational hint]].

	Note: Earlier versions of this property also defined an <css>only</css> keyword
	to be specified alongside a preferred color scheme,
	indicating a stronger author preference.
	It ended up being unnecessary,
	and was removed.


Effects of the Used Color Scheme {#color-scheme-effect}
--------------------------------

	For all elements,
	rendering with a [=color scheme=] should cause the colors used in all browser-provided UI for the element--
	e.g. scrollbars, spellcheck underlines, form controls, etc.--
	to match with the intent of the [=color scheme=].

	On the root element,
	rendering with a [=color scheme=] additionally must affect
	the surface color of the [=canvas=],
	the initial value of the '/color' property,
	and the used values of the [[css-color-4#css-system-colors|system colors]],
	and should also affect the viewport's scrollbars.

	In order to preserve expected color contrasts,
	in the case of embedded documents typically rendered over a transparent [=canvas=]
	(such as provided via an HTML <{iframe}> element),
	if the used 'color-scheme' of the element
	and the used 'color-scheme' of the embedded document’s root element
	do not match,
	then the UA must use an opaque [=canvas=] of the ''Canvas'' color
	appropriate to the embedded document’s 'color-scheme'
	instead of a transparent canvas.
	This rule does not apply to documents embedded
	via elements intended for graphics
	(such as <{img}> elements embedding an SVG document).


Forced Color Schemes {#forced}
====================

	<dfn export>Forced colors mode</dfn> is an accessibility feature
	intended to increase the readability of text through color contrast.
	Individuals with limited vision
	often find it more comfortable to read content
	when there is a particular type of contrast
	between foreground and background colors.

	Operating systems can provide built-in color themes,
	such as Windows’ high contrast black-on-white
	and high-contrast white-on-black themes.
	Users can also customize their own themes,
	for example to provide low contrast or hue contrast.

	In <a>forced colors mode</a>,
	the user agent enforces the user’s preferred color palette on the page,
	overriding the author’s chosen colors for specific properties,
	see [[#forced-colors-properties]].
	It may also enforce a “backplate” underneath text
	(similar to the way backgrounds are painted on the ''::selection'' pseudo-element)
	to ensure adequate contrast for readability.

	To enable pages to adapt to <a>forced colors mode</a>
	user agents will match the '@media/forced-colors' media query
	<!-- (see [[MEDIAQUERIES-5]]) -->
	and must provide the required color palette
	through the CSS system colors
	(see [[CSS-COLOR-4]]).
	Additionally,
	if the UA determines, based on Lab lightness,
	that the ''Canvas'' color
	is clearly either dark (L < 33%) or light (L > 67%),
	then it must match the appropriate value
	of the '@media/prefers-color-scheme' media query
	and express a corresponding user preference for 'color-scheme'.
	This will allow pages that support light/dark color schemes
	to automatically adjust to more closely match
	the forced color scheme.
	Behavior between the above dark vs. light thresholds
	is UA-defined,
	and may result in assuming either
	''prefers-color-scheme/light'' or ''prefers-color-scheme/dark''
	as the user’s preferred color scheme.

<!--THOUGHTS
	This advice (below) maybe makes sense for (prefers-contrast),
	but is it really applicable to forced-colors as well?
	If so, should forced-colors be instead a 'forced' value on 'prefers-contrast',
	so that a (prefers-contrast) query will catch all of these cases at once?

	Authors are encouraged to simplify the contrast in their pages
	when '@media/forced-colors' is ''active'',
	reducing effects such as shadows, fades, blurs, filters, gradients,
	and image or pattern fills
	that add complexity to discerning shape outline
-->

Properties Affected by Forced Colors Mode {#forced-colors-properties}
-----------------------------------------

	When <a>forced colors mode</a> is active
	and 'forced-color-adjust' is ''forced-color-adjust/auto'' (see below) on an element,
	colors on the element are force-adjusted to the user’s preferred color palette.

	Specifically, for each of the following properties:

	<ul>
		<li>'color'
		<li>'fill'
		<li>'stroke'
		<li>'text-decoration-color'
		<li>'text-emphasis-color'
		<li>'border-color'
		<li>'outline-color'
		<li>'column-rule-color'
		<li>'scrollbar-color'
		<li>'-webkit-tap-highlight-color'
		<li>'background-color'
	</ul>

	if its [=computed value=] is a color other than a [=system color=],
	its [=used value=] is forced to a [=system color=] as follows:

	* If the color value indicates a “fallback” color
		(as in the ''color()'' function in [[CSS-COLOR-5]])
		and that fallback color is a [=system color=],
		then the color is forced to that [=system color=].
	* Else for 'background-color' in particular,
		it is forced to
		the color opposite the 'color' property’s [=system color=] value
		in the [=system color pairings=],
		using ''CanvasText'' as the opposite of ''Canvas''.
		However, its alpha channel is taken from
		the original 'background-color' value
		so that transparent backgrounds remain transparent.
	* In all other cases, the UA determines
		the appropriate forced [=system color=]--
		which should match the color that would result
		from an empty [=author style sheet=]
		whenever all of the element’s affected properties
		are likewise UA-determined.

		<div class="note">
			UAs need to be careful about inheritance when forcing colors.
			For example,
			suppose the UA’s button 'color' and 'background-color'
			are the opposite of its canvas 'color' and 'background-color'.
			Given markup such as

			<xmp highlight=html>
				<button>Push <em>this</em> button</button>
			</xmp>

			Normally, <{em}> will inherit from <{button}>,
			ensuring its readability.
			However in [=forced colors mode=],
			the 'color' of both <{button}> and <{em}> will need to be forced.
			It's easy to see that <{button}>’s color should be forced to the button color,
			but <{em}> also needs to be forced to the button color;
			if it were forced to the canvas 'color' like it is everywhere else in the document,
			its text will be unreadable.
		</div>

	Additionally:
	* 'box-shadow' and 'text-shadow' compute to ''box-shadow/none''
	* 'background-image' computes to ''background-image/none''
		unless the original value contains a ''url()'' function
	* 'color-scheme' computes to ''light dark''
	* 'scrollbar-color' computes to ''scrollbar-color/auto''

	UAs may further tweak these <a>forced colors mode</a> heuristics
	to provide better user experience.

Opting Out of a Forced Color Scheme: the 'forced-color-adjust' property {#forced-color-adjust-prop}
-----------------------------------------------------------------

	<pre class=propdef>
	Name: forced-color-adjust
	Value: auto | none
	Initial: auto
	Applies to: all elements and text
	Inherited: yes
	Animatable: not animatable
	</pre>

	The 'forced-color-adjust' property
	allows authors to opt particular elements
	out of <a>forced colors mode</a>,
	restoring full control over the colors to CSS.
	Values have the following meanings:

	<dl dfn-type=value dfn-for=forced-color-adjust>
		: <dfn>auto</dfn>
		:: The element’s colors are automatically adjusted by the UA
			in <a>forced colors mode</a>.

		: <dfn>none</dfn>
		:: The element’s colors are not automatically adjusted by the UA
			in <a>forced colors mode</a>.

			Advisement: Authors should only use this value
			when they are themselves adjusting the colors
			to support the user’s color and contrast needs
			and need to make changes to the UA’s default adjustments
			to provide a more appropriate user experience
			for those elements.
	</dl>

	ISSUE: Should this property be merged with 'color-adjust' somehow?

	In order to not break SVG content,
	UAs are expected to add the following rules to their UA style sheet:

	<pre>
		@namespace "http://www.w3.org/2000/svg";
		svg|svg { forced-color-adjust: none; }
		svg|foreignObject { forced-color-adjust: auto; }
	</pre>

Performance-based Color Schemes: the 'color-adjust' property {#perf}
===============================

	On most monitors,
	the color choices that authors make have no significant difference
	in terms of how the device performs;
	displaying a document with a white background or a black background is approximately equally easy.

	However, some devices have limitations and other qualities that make this assumption untrue.
	For example,
	printers tend to print on white paper;
	a document with a white background thus has to spend no ink on drawing that background,
	while a document with a black background will have to expend a large amount of ink filling in the background color.
	This tends to look fairly bad,
	and sometimes has deleterious physical effects on the paper,
	not to mention the vastly increased printing cost from expending the extra ink.
	Even fairly small differences,
	such as coloring text black versus dark gray,
	can be quite different when printing,
	as it switches from using a single black ink
	to a mixture of cyan, magenta, and yellow ink,
	resulting in higher ink usage and lower resolution.

	As a result, in some circumstances user agents will alter the styles an author specifies in some particular context,
	adjusting them to be more appropriate for the output device
	and to accommodate what they assume the user would prefer.
	However, in some cases the document may be using colors in important, well-thought-out ways that the user would appreciate,
	and so the document would like some way to hint to the user agent that it might want to respect the page's color choices.
	The 'color-adjust' property controls this.

	<pre class='propdef'>
	Name: color-adjust
	Value: economy | exact
	Initial: economy
	Applies to: all elements
	Percentages: N/A
	Inherited: yes
	Computed value: specified keyword
	Animation type: discrete
	</pre>

	The 'color-adjust' property provides a hint to the user-agent about how it should treat color and style choices
	that might be expensive or generally unwise on a given device,
	such as using light text on a dark background in a printed document.
	If user agents allow users to control this aspect of the document's display,
	the user preference <strong>must</strong> be respected more strongly
	than the hint provided by 'color-adjust'.
	It has the following values:

	<dl dfn-type=value dfn-for=color-adjust>
		<dt><dfn>economy</dfn>
		<dd>
			The user agent should make adjustments to the page's styling
			as it deems necessary and prudent for the output device.

			For example, if the document is being printed,
			a user agent might ignore any backgrounds
			and adjust text color to be sufficiently dark,
			to minimize ink usage.

		<dt><dfn>exact</dfn>
		<dd>
			This value indicates that the page is using color and styling on the specified element
			in a way which is important and significant,
			and which should not be tweaked or changed except at the user's request.

			For example,
			a mapping website offering printed directions
			might "zebra-stripe" the steps in the directions,
			alternating between white and light gray backgrounds.
			Losing this zebra-striping and having a pure-white background
			would make the directions harder to read with a quick glance
			when distracted in a car.
	</dl>

Privacy and Security Considerations {#priv-sec}
===================================

	Applying user color preferences via [=color schemes=] or [=forced colors mode=]
	exposes the user's color preferences to the page
	via {{getComputedStyle()}},
	which can increase fingerprinting surface.

	Additionally, it may be possible for an embedded document
	to use timing attacks to determine whether its own 'color-scheme'
	matches that of its embedding <{iframe}> or not.

Acknowledgements {#acknowledgements}
================

	This specification would not be possible
	without the development efforts
	of various color adjustment features
	at Apple, Google, and Microsoft
	as well as discussions about print adjustments on www-style.
	In particular, the CSS Working Group would like to thank:
	Alison Maher,
	François Remy,
	イアンフェッティ

	ISSUE: List additional MSFT / Apple / Google people here.

Changes {#changes}
=======

	Changes since the <a href="https://www.w3.org/TR/2020/WD-css-color-adjust-1-20201109/">9 NOvember 2020 Working Draft</a>:

	<ul>
		<li>Added 'scrollbar-color' reset to [=forced colors mode=].
			(<a href="https://github.com/w3c/csswg-drafts/issues/5778">Issue 5778</a>)
	</ul>


	Changes since the <a href="https://www.w3.org/TR/2020/WD-css-color-adjust-1-20200402/">2 April 2020 Working Draft</a>:

	<ul>
		<li>Removed the <css>only</css> keyword.
		(<a href="https://github.com/w3c/csswg-drafts/issues/3881">Issue 3881</a>)
		<li>Moved the definition of the <code>color-scheme</code> <{meta}> value to the [[HTML]] specification.
		<li>Added 'color-scheme' to list of properties affected by [=forced colors mode=].
		(<a href="https://github.com/w3c/csswg-drafts/issues/3885">Issue 3885</a>)
		<li>Exempted properties already set as system colors from color forcing.
		(<a href="https://github.com/w3c/csswg-drafts/issues/4178">Issue 4178</a>)
		<li>Switched color forcing to a [=used value=] rather than [=computed value=] operation.
		(<a href="https://github.com/w3c/csswg-drafts/issues/4915">Issue 4915</a>)
	</ul>

	Changes since the <a href="https://www.w3.org/TR/2019/WD-css-color-adjust-1-20190523/">23 May 2019 Working Draft</a>:

	<ul>
		<li>Forced background colors don't revert, they force all color channels other than alpha (to preserve author’s transparency).
			<a href="https://github.com/w3c/csswg-drafts/issues/4175">Issue 4175</a>.
		<li>Other properties revert by rewriting author-level rules to specify ''revert'',
			not by injecting ''revert !important'' rules into the cascade.
			<a href="https://github.com/w3c/csswg-drafts/issues/4020">Issue 4020</a>.
		<li>Force opaque background if color-adjust mismatches between <{iframe}> and embedded document.
			<a href="https://github.com/w3c/csswg-drafts/issues/4472">Issue 4472</a>.
		<li>Don't force colors on SVG text.
		<li>Rename ''color-scheme: auto'' to ''color-scheme: normal''.
			<a href="https://github.com/w3c/csswg-drafts/issues/3849">Issue 3849</a>.
		<li>Miscellaneous clarifications.
	</ul>
