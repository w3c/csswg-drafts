<h1>CSS Basic User Interface Module Level 3 (CSS3 UI)</h1>
<style>#awesome-table td {padding:5px}</style>

<pre class='metadata'>
ED: http://dev.w3.org/csswg/css-ui/
TR: http://www.w3.org/TR/css3-ui/
Previous Version: http://www.w3.org/TR/2012/WD-css3-ui-20120117/
Shortname: css-ui
Level: 3
Group: csswg
!Issue Tracking: http://wiki.csswg.org/spec/css3-ui
Status: ED
Editor: Tantek &Ccedil;elik, Mozilla http://www.mozilla.org, tantek@cs.stanford.edu, http://tantek.com

Abstract: This specification describes user interface related selectors,
          properties and values that are proposed for CSS level&nbsp;3
          to style HTML and XML (including XHTML).
          It includes and extends user interface related features from the selectors,
          properties and values of CSS level&nbsp;2 revision 1 and Selectors specifications.
          It uses various selectors,
          properties and values to style basic user interface elements in a document.
Deadline: 2012-02-14
Link Defaults: css-color-3 (property) color
Link Defaults: selectors-4 (selector) :indeterminate
Ignored Terms: outline-top
Ignored Terms: outline-left
Ignored Terms: nav-index
Ignored Terms: ime-mode
Ignored Terms: icon
At Risk: 'box-sizing' property value: padding-box
At Risk: 'caret-color' property
At Risk: 'text-overflow' property value: <<string>>
At Risk: 'text-overflow' property 2-value syntax and definition
At Risk: 'outline-offset' property negative values
</pre>

<!--
At risk due to only one implementation:

<li>box-sizing: padding-box - only FF supports in prefixed version

Not at risk:
<li>box-sizing implemented by IE5/Mac, Opera
	-moz-box-sizing implemented by Mozilla

<li>outline, outline-width, outline-color, outline-style all in CSS 2.1
<li>outline-offset property
	implemented by Safari 1.2

<li>cursor property:
	CSS2.1: auto | default | help | pointer | wait | crosshair | text |
e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize
	IE5/Mac implements: none | progress | cell
	IE6/Windows implements: <uri> | progress | not-allowed | no-drop | vertical-text | all-scroll | col-resize | row-resize | move |
	Mozilla implements: progress | cell(as -moz-cell) | alias(as -moz-alias) | copy(as -moz-copy) | context-menu(as -moz-context-menu) |
	freedesktop.org copied all the cursors from the CSS3-UI LC Working Draft
		by FredrikHoeglund - 14 Oct 2003
		http://freedesktop.org/Standards/cursor-spec

<li>'cursor' property values: ew-resize | ns-resize | nesw-resize | nwse-resize
implemented by Firefox and Safari

<li>'resize' property
implemented by Firefox 4 and Safari
<li>nav-up, nav-down, nav-right, nav-left properties
implemented by Opera/Presto desktop with "shift+arrow", and Blink, as well as Samsung in webkit http://www.w3.org/2013/11/27-css-irc

-->


<h2 id="intro">Introduction</h2>

This module describes CSS properties which enable authors
to style user interface related properties and values.

<a href="http://www.w3.org/TR/REC-CSS1#anchor-pseudo-classes">Section 2.1 of CSS1</a> [[CSS1]]
and <a href="http://www.w3.org/TR/CSS2/ui.html">Chapter 18 of CSS2</a> [[CSS2]]
introduced several user interface related properties and values.
<a href="http://www.w3.org/TR/2000/WD-css3-userint-20000216">User Interface for CSS3 (16 February 2000)</a> introduced several new user interface related features.

This Working Draft incorporates, extends, and supersedes them.

<h3 id="purpose">Purpose</h3>

The purpose of this specification is to achieve the following objectives:
<ul>
<li>Extend the user interface features in CSS2.1.
<li>Provide additional CSS mechanisms to augment or replace other
dynamic presentation related features in HTML.
<li>Introduce directional navigation properties to assist in the construction of
user interfaces which make use of a directional navigation model.
</ul>


<h2 id="interaction">Module Interactions</h2>

This document defines new features not present in earlier specifications.
In addition, it replaces and supersedes the following:

<ul>
<li><a href="http://www.w3.org/TR/CSS21/ui.html#cursor-props">Section 18.1</a>
and
<a href="http://www.w3.org/TR/CSS21/ui.html#dynamic-outlines">section 18.4</a>
of Cascading Style Sheets, level 2, revision 1 [[CSS21]]
<li><a href="http://www.w3.org/TR/2000/WD-css3-userint-20000216">User Interface for CSS3 (16 February 2000)</a> [[CSSUI]]
</ul>

<h2 id="box-model">Box Model addition</h2>

<h3 id="box-sizing">'box-sizing' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>box-sizing</dfn></td></tr>
<tr><th>Value:</th><td>
content-box |
padding-box |
border-box
</td></tr>
<tr><th>Initial:</th><td>content-box</td></tr>
<tr><th>Applies to:</th><td>all elements that accept width or height</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>content-box</dt>
<dd>This is the behavior of width and height as specified by CSS2.1.
The specified width and height (and respective min/max properties)
apply to the width and height respectively of the content box of the element.
The padding and border of the element are laid out
and drawn outside the specified width and height.</dd>
<dt>padding-box</dt>
<dd>
The specified width and height (and respective min/max properties)
on this element determine the padding box of the element.
That is, any padding specified on the element is laid out
and drawn inside this specified width and height.
The content width and height are calculated by
subtracting the padding widths of the respective sides
from the specified 'width' and
'height' properties.
As the content width and height
<a href="http://www.w3.org/TR/CSS21/visudet.html#the-width-property">
cannot be negative</a> ([[!CSS21]], section 10.2),
this computation is floored at 0.
</dd>
<dt>border-box</dt>
<dd>The specified width and height (and respective min/max properties) on this element
determine the border box of the element.
That is, any padding or border specified on the element
is laid out and drawn inside this specified width and height.
The content width and height are calculated
by subtracting the border and padding widths of the respective sides
from the specified 'width' 
and 'height' properties.
As the content width and height
<a href="http://www.w3.org/TR/CSS21/visudet.html#the-width-property">cannot be negative</a> ([[!CSS21]], section 10.2),
this computation is floored at 0.

Note: This is the behavior of width and height as commonly implemented
by legacy HTML user agents for replaced elements and input elements.
</dd>
</dl>


<div class="example"><p style="display:none">Example(s):
<h4 id="box-sizing-example" class="no-num no-toc">Using box-sizing to evenly share space</h4>

This example uses box-sizing to evenly horizontally split
two divs with fixed size borders inside a div container,
which would otherwise require additional markup.

sample CSS:
<pre><code class="lang-css">
div.container {
	width:38em;
	border:1em solid black;
}

div.split {
	box-sizing:border-box;
	width:50%;
	border:1em silver ridge;
	float:left;
}
</code></pre>

sample HTML fragment:
<pre><code class="lang-markup">
&lt;div class="container"&gt;
&lt;div class="split"&gt;This div occupies the left half.&lt;/div&gt;
&lt;div class="split"&gt;This div occupies the right half.&lt;/div&gt;
&lt;/div&gt;
</code></pre>

demonstration of sample CSS and HTML:
<div style="width:38em; border:1em solid black"><div style="box-sizing:border-box; width:50%; border:1em silver ridge; float:left">This div should occupy the left half.</div><div style="box-sizing:border-box; width:50%; border:1em silver ridge; float:left">This div should occupy the right half.</div>The two divs above should appear side by side, each (including borders) 50% of the content width of their container. If instead they are stacked one on top of the other then your browser does not support 'box-sizing'.
</div>
</div>

Note: The ''padding-box'' value is at risk.

Issue: <a href="https://wiki.csswg.org/spec/css3-ui#issue-69">69</a> box-sizing insufficiently specified for replaced elements.

<h2 id="outline-props">Outline properties</h2>

At times, style sheet authors may want to create outlines around
visual objects such as buttons, active form fields, image maps, etc.,
to make them stand out. Outlines differ from borders in the following
ways:

<ol>
<li>Outlines do not take up space.
<li>Outlines may be non-rectangular.
<li>UAs often render outlines on elements in the :focus state.
</ol>

The outline properties control the style of these dynamic outlines.

The stacking of the rendering of these outlines is explicitly left up to implementations to provide a better user experience per platform. This supersedes the stacking of outlines as defined in CSS 2.1.

Keyboard users depend on outline on elements in the :focus state for interaction with the page, thus authors must not make the outline invisible on such elements without making sure an alternative highlighting mechanism is provided.

The rendering of applying transforms to outlines is left explicitly undefined in CSS3-UI.


<h3 id="outline">'outline' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline</dfn></td></tr>
<tr><th>Value:</th><td>
[ &lt;'outline-color'&gt; || &lt;'outline-style'&gt; ||
&lt;'outline-width'&gt; ]
</td></tr>
<tr><th>Initial:</th><td>see individual properties</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>see individual properties</td></tr>
<tr><th>Animatable:</th><td>see individual properties</td></tr>
</tbody></table>

<h3 id="outline-width">'outline-width' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-width</dfn></td></tr>
<tr><th>Value:</th><td><<'border-width'>></td></tr>
<tr><th>Initial:</th><td>medium</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>absolute length; ''0'' if the outline style is ''none''.</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-length">length</a></td></tr>
</tbody></table>

<h3 id="outline-style">'outline-style' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-style</dfn></td></tr>
<tr><th>Value:</th><td>auto | <<'border-style'>></td></tr>
<tr><th>Initial:</th><td>none</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<h3 id="outline-color">'outline-color' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-color</dfn></td></tr>
<tr><th>Value:</th><td><<color>> | invert</td></tr>
<tr><th>Initial:</th><td>invert</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>The computed value for ''invert'' is ''invert''. For <<color>> values, the computed value is as defined for the [[!CSS3COLOR]] 'color' property.</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-color">color</a></td></tr>
</tbody></table>

The outline created with the outline properties is drawn "over" a box,
i.e., the outline is always on top,
and doesn't influence the position or size of the box,
or of any other boxes.
Therefore, displaying or suppressing outlines does not cause reflow.

Outlines may be non-rectangular.
For example, if the element is broken across several lines,
the outline should be an outline or minimum set of outlines
that encloses all the element's boxes.

Each part of the outline should be fully connected
rather than open on some sides
(as borders on inline elements are when lines are broken).

The parts of the outline are not required to be rectangular.
To the extent that the outline follows the border edge,
it should follow the 'border-radius' curve.

The position of the outline may be affected by descendant boxes.

User agents should use an algorithm for determining
the outline that encloses a region appropriate
for conveying the concept of focus to the user.

Note: This specification does not define the exact position or shape of the outline, but it is typically drawn immediately outside the border box.


The 'outline-width' property accepts
the same values as
          'border-width'
([[!CSS3BG]],
<a href="http://www.w3.org/TR/css3-background/#the-border-width">Section 4.3</a>).

The 'outline-style' property accepts
the same values as
          'border-style'
([[!CSS3BG]],
<a href="http://www.w3.org/TR/css3-background/#the-border-style">Section 4.2</a>),
except that
''hidden'' is not a legal outline style.
In addition, in CSS3,
'outline-style'
accepts the value ''auto''.
The ''auto'' value permits the user agent
to render a custom outline style,
typically a style which is either a user interface default for the platform,
or perhaps a style that is richer
than can be described in detail in CSS,
e.g. a rounded edge outline with semi-translucent outer pixels
that appears to glow.
As such, this specification does not define how the
'outline-color'
is incorporated or used (if at all) when rendering
''auto'' style outlines.
User agents may treat ''auto'' as
''solid''.

The 'outline-color' property
accepts all colors, as well as the keyword <dfn>invert</dfn>.
''Invert'' is expected to perform a color inversion on the pixels on the screen.
This is a common trick to ensure the focus border is visible,
regardless of color background.

Conformant UAs may ignore the ''invert'' value
on platforms that do not support color inversion of the pixels on the screen.

If the UA does not support the ''invert'' value
then it must reject that value at parse-time, and
the initial value of the 'outline-color' property
is the ''currentColor'' [[!CSS3COLOR]] keyword.

The 'outline' property is a shorthand property,
and sets all three of 'outline-style',
'outline-width',
and 'outline-color'.

Note: The outline is the same on all sides.
In contrast to borders,
there are no 'outline-top' or 'outline-left' etc. properties.

This specification does not define how multiple overlapping outlines are drawn,
or how outlines are drawn for boxes that are partially obscured behind other elements.

<div class="example"><p style="display:none">Example(s):

Here's an example of drawing a thick outline around a BUTTON element:
<pre><code class="lang-css">
button { outline: thick solid }
</code></pre>
</div>

Graphical user interfaces may use outlines around elements
to tell the user which element on the page has the focus.
These outlines are in addition to any borders,
and switching outlines on and off should not cause the document to reflow.
The focus is the subject of user interaction in a document
(e.g., for entering text, selecting a button, etc.).

<div class="example"><p style="display:none">Example(s):

For example, to draw a thick black line around an element when it has the focus,
and a thick red line when it is active,
the following rules can be used:
<pre><code class="lang-css">
:focus  { outline: thick solid black }
:active { outline: thick solid red }
</code></pre>
</div>

Note: Since the outline does not affect formatting
(i.e., no space is left for it in the box model),
it may well overlap other elements on the page.

<h3 id="outline-offset">'outline-offset' property</h3>

By default, the outline is drawn starting just outside the border edge.
However, it is possible to offset the outline and draw it beyond the border edge.

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-offset</dfn></td></tr>
<tr><th>Value:</th><td><<length>></td></tr>
<tr><th>Initial:</th><td>0</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td><<length>> value in absolute units (px or physical).</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-length">length</a></td></tr>
</tbody></table>

If the computed value of 'outline-offset'
is anything other than 0,
then the outline is outset from the border edge by that amount.

<div class="example"><p style="display:none">Example(s):

For example,
to leave 2 pixels of space between a focus outline
and the element that has the focus or is active,
the following rule can be used:
<pre><code class="lang-css">
:focus,:active  { outline-offset: 2px }
</code></pre>
</div>

Negative values must cause the outline
to shrink into the border box.
Both the height and the width of outside of the shape
drawn by the outline must not become smaller
than twice the computed value of the outline-width property,
to make sure that an outline can be rendered
even with large negative values. 
User Agents must apply this constraint 
independently in each dimension.
If the outline is drawn as multiple disconnected shapes,
this constraint applies to each shape separately.
Negative value constraints are an at risk feature due to
<a href="https://lists.w3.org/Archives/Public/www-style/2014Dec/0033.html">interoperability problems</a>, and thus might be dropped from a must to a should.


<h2 id="resizing-and-overflow">Resizing &amp; Overflow</h2>

CSS2.1 provides a mechanism for controlling the appearance of a scrolling mechanism
(e.g. scrollbars)
on block container elements.
This specification adds to that a mechanism for controlling
user resizability of elements as well as the ability to specify text overflow behavior.

<h3 id="resize">'resize' property</h3>

The 'resize' property allows the author
to specify whether or not an element is resizable by the user,
and if so, along which axis/axes.

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>resize</dfn></td></tr>
<tr><th>Value: </th><td>none | both | horizontal | vertical</td></tr>
<tr><th>Initial:</th><td>none</td></tr>
<tr><th>Applies to:</th><td>elements with 'overflow' other than visible</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value.</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>none</dt>
<dd>The UA does not present a resizing mechanism on the element,
and the user is given no direct manipulation mechanism to resize the element.</dd>
<dt>both</dt>
<dd>The UA presents a bidirectional resizing mechanism
to allow the user to adjust both the height and the width of the element.</dd>
<dt>horizontal</dt>
<dd>The UA presents a unidirectional horizontal resizing mechanism
to allow the user to adjust only the width of the element.</dd>
<dt>vertical</dt>
<dd>The UA presents a unidirectional vertical resizing mechanism
to allow the user to adjust only the height of the element.</dd>
</dl>

Currently it is possible to control the appearance of the scrolling mechanism (if any)
on an element using the 'overflow' property
(e.g. '<code class="lang-css">overflow: scroll</code>' vs. '<code class="lang-css">overflow: hidden</code>' etc.).
The purpose of the 'resize' property
is to also allow control over the appearance and function of the resizing mechanism
(e.g. a resize box or widget) on the element.

Note: The resizing mechanism is NOT the same as the scrolling mechanism.
The scrolling mechanism allows the user
to determine which portion of the contents of an element is shown.
The resizing mechanism allows the user
to determine the size of the element.

The 'resize' property applies to elements
whose computed 'overflow' value
is something other than ''visible''.

The effect of the 'resize' property on generated content is undefined. Implementation should not apply the 'resize' property to generated content.

Note: the 'resize' property may apply to generated content in the future if there is implementation of <a href="http://dev.w3.org/csswg/css-pseudo/#CSSPseudoElement-interface">Interface CSSPseudoElement</a>.

When an element is resized by the user,
the user agent sets 
the 'width' and 'height' properties 
to px unit length values of the size indicated by the user, 
in the element’s <a spec="css-style-attr">style attribute</a> DOM,
replacing existing property declaration(s) if any, 
without ''!important'' if any.

If an element is resized in only one dimension,
only the corresponding property is set, not both.

The precise direction of resizing
(i.e. altering the top left of the element or altering the bottom right)
may depend on a number of factors
including whether the element is absolutely positioned,
whether it is positioned using the 'right'
and 'bottom' properties,
whether the language of the element is right-to-left etc.
The precise direction of resizing is left to the UA to properly determine for the platform.

The user agent must allow the user to resize the element 
with no other constraints than what is imposed by 
'min-width', 'max-width', 'min-height', and 'max-height'.
(The "must" is <a href="https://wiki.csswg.org/spec/css3-ui#issue-53">at risk</a> 
since 
<a href="http://lists.w3.org/Archives/Public/www-style/2014Dec/0063.html">only Firefox currently supports this</a>, and may be downgraded to a "should").

Note: There may be situations where user attempts to resize an element 
to appear to be overriden or ignored, e.g. because of ''!important'' cascading declarations that supersede 
that element’s <a spec="css-style-attr">style attribute</a>
'width' and 'height' properties in the DOM.

Changes to the computed value of an element's 'resize' property 
do not reset changes to the <a spec="css-style-attr">style attribute</a> made due to 
user resizing of that element.

<div class="example"><p style="display:none">Example(s):

For example,
to make iframes scrollable <em>and</em> resizable,
the following rule can be used:
<pre><code class="lang-css">
iframe,object[type^="text/"],
object[type$="+xml"],object[type="application/xml"]
{
  overflow:auto;
  resize:both;
}
</code></pre>
</div>

<!--
too bad we don't have @viewport yet. otherwise this would be cool:
<pre><code class="lang-css">
@viewport {
       width: 100px;
       height: 100px;
       overflow: hidden;
       resize: none
     } /* display content in a non-resizable 100px by 100px window */
</code></pre>
-->


<h3 id="text-overflow">
    Overflow Ellipsis: the 'text-overflow' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th>
    <td><dfn>text-overflow</dfn></td></tr>
<tr><th>Value:</th>
    <td> [
clip |
ellipsis |
<<string>>
]{1,2}
</td></tr>
<tr><th>Initial:</th>
    <td>clip</td></tr>
<tr><th>Applies to:</th>
    <td>block containers</td></tr>
<tr><th>Inherited:</th>
    <td>no</td></tr>
<tr><th>Percentages:</th>
    <td>N/A</td></tr>
<tr><th>Media:</th>
    <td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th>
    <td>as specified</td></tr>
<tr><th>Animatable:</th>
    <td>no</td></tr>
</tbody></table>

This property specifies rendering when inline content overflows
its line box edge
in the inline progression direction of its block container element ("the block")
that has 'overflow'
other than ''visible''.

Text can overflow for example when it is prevented from wrapping
(e.g. due to '<code class="lang-css">white-space: nowrap</code>'
or a single word is too long to fit).
Values have the following meanings:

<dl data-dfn-for="overflow" class="valuedef">
  <dt><dfn>clip</dfn></dt>
    <dd>Clip inline content that overflows its block container element. Characters may be only partially rendered.</dd>

  <dt><dfn>ellipsis</dfn></dt>
    <dd>
Render an ellipsis character (U+2026)
to represent clipped inline content.
Implementations may substitute a more language/script-appropriate
ellipsis character,
or three dots "..." if the ellipsis character is unavailable.
</dd>
<dt><<string>></dt>
   <dd>
Render the given string to represent clipped inline content.
The given string is treated as an independent paragraph
for bidi purposes.
</dd>
</dl>

Note: The <<string>> value, and the 2-value syntax "{1,2}"
and functionality are all at risk.

The term "character" is used in this property definition
for better readability and means "grapheme cluster" [[!UAX29]]
for implementation purposes.

If there is one value,
it applies only to the <a>end</a> line box edge.
If there are two values,
the first value applies to the <a>line-left</a> edge,
and the second value applies to the <a>line-right</a> edge.
The terms <a>end</a>, <a>line-left</a> and <a>line-right</a> are defined in [[!CSS3-WRITING-MODES]].

Note: the use of <a>line-left</a> and <a>line-right</a>
rather than <a>start</a> and <a>end</a>
when there are two values is intentional,
to facilitate the use of directional characters such as arrows.

For the ellipsis
and string values,
implementations must hide characters and
<a href="http://www.w3.org/TR/CSS21/visuren.html#inline-boxes">
atomic inline-level elements</a>
at the applicable edge(s) of the line as necessary to fit the ellipsis/string.
Place the ellipsis/string immediately adjacent
to the applicable edge(s) of the remaining inline content.
The first character or
<a href="http://www.w3.org/TR/CSS21/visuren.html#inline-boxes">
atomic inline-level element</a>
on a line
must be clipped rather than ellipsed.

<h4 id="ellipsing-details" class="no-num no-toc">ellipsing details</h4>
<ul>
<li>
Ellipsing only affects rendering and must not affect layout
nor dispatching of pointer events.
<li>
The ellipsis is styled and baseline-aligned according to
the block.
<li>
Ellipsing occurs after relative positioning and other graphical transformations.
<li>
If there is insufficient space for the ellipsis,
then clip the rendering of the ellipsis itself
(on the same side that neutral characters on the line
would have otherwise been clipped with the ''clip'' value).
</ul>

<h4 id="ellipsis-interaction" class="no-num no-toc">user interaction with ellipsis</h4>
<ul>
<li>When the user is interacting with content
(e.g. editing, selecting, scrolling),
the user agent may treat text-overflow ''ellipsis'' or string values as ''clip''.

<li>Selecting the ellipsis should select the ellipsed text.
If all of the ellipsed text is selected,
UAs should show selection of the ellipsis.
Behavior of partially-selected ellipsed text is up to the UA.

</ul>

<div class="example"><p style="display:none">Example(s):
<h4 id="text-overflow-examples" class="no-num no-toc">text-overflow examples</h4>

These examples demonstrate setting the text-overflow of a block container element
that has text which overflows its dimensions:

sample CSS for a div:
<pre><code class="lang-css">div {
  font-family:Helvetica,sans-serif; line-height:1.1;
  width:3.1em; padding:.2em; border:solid .1em black; margin:1em 0;
}</code></pre>

sample HTML fragments, renderings, and your browser:
<table style="color:#000;background:#fff" id="awesome-table"><tbody>
<tr><th>HTML</th><th>sample rendering</th><th>your browser</th></tr>
<tr>
<td><pre><code class="lang-markup">&lt;div&gt;
CSS IS AWESOME, YES
&lt;/div&gt;
</code></pre></td>


<td>
<object type="image/png" data="cssisawesome.png">
First, a box with text drawing outside of it.
</object>
</td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1;">CSS IS AWESOME, YES</div>
</td>
</tr>

<tr>
<td><pre><code class="lang-markup">&lt;div style="<strong>text-overflow:clip;</strong> overflow:hidden"&gt;
CSS IS AWESOME, YES
&lt;/div&gt;
</code></pre></td>

<td>
<object type="image/png" data="cssisaweso.png">
Second, a similar box with the text clipped outside the box.
</object></td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:clip;">CSS IS AWESOME, YES</div>
</td>
</tr>

<tr>
<td><pre><code class="lang-markup">&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
CSS IS AWESOME, YES
&lt;/div&gt;
</code></pre></td>

<td>
<object type="image/png" data="cssisaw.png">
Third, a similar box with an ellipsis representing the clipped text.
</object>
</td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">CSS IS AWESOME, YES</div>
</td>
</tr>


<tr>
<td><pre><code class="lang-markup">&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
NESTED
 &lt;p&gt;PARAGRAPH&lt;/p&gt;
WON'T ELLIPSE.
&lt;/div&gt;
</code></pre></td>

<td>
<object type="image/png" data="nes.png">
Fourth, a box with a nested paragraph demonstrating anonymous block boxes equivalency and non-inheritance into a nested element.
</object>
</td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">NESTED
 <p>PARAGRAPH
WON'T ELLIPSE.</div>
</td>

</tr>
</tbody></table>

</div>

Note: the side of the line that the ellipsis is placed depends on the 'direction' of the block.
E.g. an overflow hidden right-to-left
(<code class="lang-css">direction: rtl</code>)
block clips inline content on the <a>left</a> side,
thus would place a text-overflow ellipsis on the <a>left</a>
to represent that clipped content.

<!-- insert RTL example diagram here to illustrate note. -->

<h4 id="ellipsis-scrolling" class="no-num no-toc">ellipsis interaction with scrolling interfaces</h4>

This section applies to elements with text-overflow other than ''clip''
(non-clip text-overflow)
and overflow:scroll.

When an element with non-clip text-overflow has overflow of scroll
in the inline progression dimension of the text,
and the browser provides a mechanism for scrolling
(e.g. a scrollbar on the element,
or a touch interface to swipe-scroll, etc.),
there are additional implementation details that provide a better user experience:

When an element is scrolled (e.g. by the user, DOM manipulation),
more of the element's content is shown.
The value of text-overflow should not affect
whether more of the element's content is shown or not.
If a non-clip text-overflow is set,
then as more content is scrolled into view,
implementations should show whatever additional content fits,
only truncating content which would otherwise be clipped
(or is necessary to make room for the ellipsis/string),
until the element is scrolled far enough
to display the edge of the content
at which point that content should be displayed
rather than an ellipsis/string.

<div class="example"><p style="display:none">Example(s):

This example uses text-overflow on an element with overflow scroll
to demonstrate the above described behavior.

sample CSS:
<pre><code class="lang-css">
div.crawlbar {
	text-overflow: ellipsis;
	height: 2em;
	overflow: scroll;
	white-space: nowrap;
	width: 15em;
	border:1em solid black;
}
</code></pre>

sample HTML fragment:
<pre><code class="lang-markup">
&lt;div class="crawlbar"&gt;
CSS is awesome, especially when you can scroll
to see extra text instead of just
having it overlap other text by default.
&lt;/div&gt;
</code></pre>

demonstration of sample CSS and HTML:
<div style="text-overflow: ellipsis; height: 2em; overflow: scroll; white-space: nowrap; width: 15em; border:1em solid black;">
CSS is awesome, especially when you can scroll
to see extra text instead of just
having it overlap other text by default.
</div>
</div> <!-- example -->

As some content is scrolled into view,
it is likely that other content may scroll out of view on the other side.
If that content's block container element is the same
that's doing the scrolling,
and the computed value of 'text-overflow' has two values, with
the first a non-clip value,
then implementations must render an ellipsis/string in place of
the clipped content,
with the same details as described in the value definition above,
except that the ellipsis/string is drawn in the <a>start</a>
(rather than <a>end</a>) of
the block's direction (per the direction property).

While the content is being scrolled,
implementations may adjust their rendering of ellipses/strings
(e.g. align to the box edges rather than line edges).

<div class="example"><p style="display:none">Example(s):

Same as previous example except with <code>text-overflow: ellipsis ellipsis</code>, demonstrated:

<div style="text-overflow: ellipsis ellipsis; height: 2em; overflow: scroll; white-space: nowrap; width: 15em; border:1em solid black;">
CSS is awesome, especially when you can scroll
to see extra text instead of just
having it overlap other text by default.
</div>
</div><!-- example -->

If there is insufficient space for both start
and end ellipses/strings,
then only the end ellipsis/string should be rendered.

<h2 id="pointing-keyboard">Pointing Devices and Keyboards</h2>

<h3 id="pointer-interaction">Pointer interaction</h3>

<h4 id="cursor">'cursor' property</h4>
<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>cursor</dfn></td></tr>
<tr><th>Value:</th><td>
[ [<<url>> [&lt;x&gt; &lt;y&gt;]?,]* <br>
[ auto | default | none |<br>
 context-menu | help | pointer | progress | wait | <br>
 cell | crosshair | text | vertical-text | <br>
 alias | copy | move | no-drop | not-allowed | grab | grabbing | <br>
 e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize |
 ew-resize | ns-resize | nesw-resize | nwse-resize |
 col-resize | row-resize |
 all-scroll
| zoom-in | zoom-out
<br>
] ] </td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>yes</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual, interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>as specified, except with any relative URLs converted to absolute</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<!-- got this far reformatting lines -->
This property specifies the type of cursor to be displayed for the pointing device
when within the element's border-box.

User agents may ignore the cursor property over native user-agent controls such as scrollbars, resizers, or other native UI widgets e.g. those that may be used inside some user agent specific implementations of form elements.

Values have the following meanings:

image cursors
<dl>
<dt><<url>></dt>
<dd>The user agent retrieves the cursor from the resource designated by the URI.
If the user agent cannot handle the first cursor of a list of cursors,
it must attempt to handle the second, etc.
If the user agent cannot handle any user-defined cursor,
it must use the cursor keyword at the end of the list.
Conforming User Agents may, instead of <<url>>, support <<image>> which is a superset.

The <a>default object size</a> for cursor images is
a UA-defined size that should be based on
the size of a typical cursor on the UA's operating system.

The <a>concrete object size</a> is determined using 
the <a>default sizing algorithm</a>. 
If an operating system is 
<strong>incapable</strong> of rendering a cursor above a given size, 
cursors larger than that size must be shrunk to within
the OS-supported size bounds, 
while maintaining the cursor image's intrinsic ratio, if any.

The optional &lt;x&gt; and &lt;y&gt; coordinates
identify the exact position within the image which is the pointer position (i.e., the hotspot).
</dd>
<dt>&lt;x&gt;</dt>
<dt>&lt;y&gt;</dt>
<dd>
Each is a <<number>>.
The x-coordinate and y-coordinate of the position
in the cursor's coordinate system (left/top relative)
which represents the precise position that is being pointed to.

If the values are unspecified,
then the intrinsic hotspot defined inside the image resource itself is used.
If both the values are unspecific and the referenced cursor has no defined hotspot,
the effect is as if a value of "0 0" were specified.

If the coordinates of the hotspot,
as specified either inside the image resource or
by &lt;x&gt; and &lt;y&gt; values,
fall outside of the cursor image,
they must be clamped (independently) to fit.
</dd>
</dl>

general purpose cursors

<dl>
<dt style="cursor:auto">auto</dt>
<dd>The UA determines the cursor to display based on the current
context, specifically: auto behaves as ''cursor/text'' over text, and ''cursor/default'' otherwise.

<div>
Issue: <a href="https://wiki.csswg.org/spec/css3-ui#issue-48">48</a> There are reports that this description of cursor: auto is insufficient and not interoperable. Current plan: restrict the auto value to handling things that cannot be described by the UA stylesheet, pending detailed proposal, likely based on <a href="https://lists.w3.org/Archives/Public/www-style/2013Jan/0275.html">David Baron's proposal</a>.
</div>

</dd>

<dt style="cursor:default">default</dt>
<dd>The platform-dependent default cursor. Often rendered as an arrow.
</dd>
<dt style="cursor:none">none</dt>
<dd>No cursor is rendered for the element.</dd>
</dl>

links and status cursors
<dl>
<dt style="cursor:context-menu">context-menu</dt>
<dd>A context menu is available for the object under the cursor.
Often rendered as an arrow with a small menu-like graphic next to it.</dd>
<dt style="cursor:help">help</dt>
<dd>Help is available for the object under the cursor.
Often rendered as a question mark or a balloon.
</dd>
<dt style="cursor:pointer">pointer</dt>
<dd>The cursor is a pointer that indicates a link.
</dd>
<dt style="cursor:progress">progress</dt>
<dd>A progress indicator.  The program is performing some processing,
but is different from ''wait'' in that the user may still interact
with the program. Often rendered as a spinning beach ball,
or an arrow with a watch or hourglass.</dd>
<dt style="cursor:wait">wait</dt>
<dd>Indicates that the program is busy and the user should wait.
Often rendered as a watch or hourglass.
</dd>
</dl>

selection cursors
<dl>
<dt style="cursor:cell">cell</dt>
<dd>Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.</dd>
<dt style="cursor:crosshair">crosshair</dt>
<dd>A simple crosshair (e.g., short line segments resembling a "+" sign).
Often used to indicate a two dimensional bitmap selection mode.
</dd>
<dt style="cursor:text">text</dt>
<dd>Indicates text that may be selected. Often rendered as a vertical I-beam.
User agents may automatically display a horizontal I-beam/cursor
(e.g. same as the ''vertical-text'' keyword)
for vertical text, or for that matter,
any angle of I-beam/cursor for text that is rendered at any particular angle.
</dd>
<dt style="cursor:vertical-text">vertical-text</dt>
<dd>Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.</dd>
</dl>

drag and drop cursors
<dl>
<dt style="cursor:alias">alias</dt>
<dd>Indicates an alias of/shortcut to something is to be created.
Often rendered as an arrow with a small curved arrow next to it.</dd>

<dt style="cursor:copy">copy</dt>
<dd>Indicates something is to be copied.
Often rendered as an arrow with a small plus sign next to it.</dd>

<dt style="cursor:move">move</dt>
<dd>Indicates something is to be moved.
</dd>
<dt style="cursor:no-drop">no-drop</dt>
<dd>Indicates that the dragged item cannot be dropped at the current cursor location.
Often rendered as a hand or pointer with a small circle with a line through it.
</dd>
<dt style="cursor:not-allowed">not-allowed</dt>
<dd>Indicates that the requested action will not be carried out.
Often rendered as a circle with a line through it.
</dd>
<dt style="cursor:grab">grab</dt>
<dd>Indicates that something can be grabbed (dragged to be moved). Often rendered as the backside of an open hand.</dd>
<dt style="cursor:grabbing">grabbing</dt>
<dd>Indicates that something is being grabbed (dragged to be moved). Often rendered as the backside of a hand with fingers closed mostly out of view.</dd>
</dl>

resizing and scrolling cursors
<dl>
<dt>
<span style="cursor:e-resize">e-resize</span>,
<span style="cursor:n-resize">n-resize</span>,
<span style="cursor:ne-resize">ne-resize</span>,
<span style="cursor:nw-resize">nw-resize</span>,
<span style="cursor:s-resize">s-resize</span>,
<span style="cursor:se-resize">se-resize</span>,
<span style="cursor:sw-resize">sw-resize</span>,
<span style="cursor:w-resize">w-resize</span>
</dt>
<dd>Indicates that some edge is to be moved. For example, the
''se-resize'' cursor is used when the movement starts from the
south-east corner of the box.
</dd>
<dt>
<span style="cursor:ew-resize">ew-resize</span>,
<span style="cursor:ns-resize">ns-resize</span>,
<span style="cursor:nesw-resize">nesw-resize</span>,
<span style="cursor:nwse-resize">nwse-resize</span>
</dt>
<dd>Indicates a bidirectional resize cursor.</dd>
<dt style="cursor:col-resize">col-resize</dt>
<dd>Indicates that the item/column can be resized horizontally.
Often rendered as arrows pointing left and right with a vertical bar separating them.</dd>
<dt style="cursor:row-resize">row-resize</dt>
<dd>Indicates that the item/row can be resized vertically.
Often rendered as arrows pointing up and down with a horizontal bar separating them.
</dd>
<dt style="cursor:all-scroll">all-scroll</dt>
<dd>Indicates that the something can be scrolled in any direction.
Often rendered as arrows pointing up, down, left, and right with a dot in the middle.
</dd>
</dl>

zooming cursors
<dl>
<dt>
<span style="cursor:zoom-in"> zoom-in</span>,
<span style="cursor:zoom-out"> zoom-out</span>
</dt>
<dd>
Indicates that something can be zoomed (magnified) in or out, and
often rendered as a magnifying glass with a "+" or "-" in the center of the glass, for ''zoom-in'' and ''zoom-out'' respectively.
</dd>
</dl>

The UA may treat unsupported values as ''auto''.
E.g. on platforms that do not have a concept of a ''context-menu'' cursor,
the UA may render ''default'' or whatever is appropriate.

<div class="example">

Example: cursor fallback

Here is an example of using several cursor values.
<pre><code class="lang-css">
:link,:visited {
    cursor: url(example.svg#linkcursor),
            url(hyper.cur),
            url(hyper.png) 2 3,
            pointer
}
</code></pre>

This example sets the cursor on all hyperlinks (whether visited or not)
to an external <a href="http://www.w3.org/TR/SVG/interact.html#CursorElement">SVG cursor</a> ([[SVG10]], section 16.8.3).
User agents that don't support SVG cursors would simply skip
to the next value and attempt to use the "hyper.cur" cursor.
If that cursor format was also not supported,
the UA could attempt to use the "hyper.png" cursor with the explicit hot spot.
Finally if the UA does not support any of those image cursor formats, the UA would skip to the last value
and render the ''pointer'' cursor.
</div>

<h5 id="canvas_cursor">Cursor of the canvas</h5>

The document <a href="http://www.w3.org/TR/CSS21/intro.html#the-canvas">canvas</a>
is the infinite surface over which the document is rendered [[!CSS21]].
Since no element corresponds to the canvas,
in order to allow styling of the cursor when not over any element,
the canvas cursor re-uses the root element's cursor.
However, if no boxes are generated for the root element
(for example, if the root element has ''display: none''),
then the canvas cursor is the platform-dependent default cursor.

Note: An element might be invisible,
but still generate boxes. For example,
if the element has ''visibility: hidden'' but not ''display: none'',
boxes are generated for it and its cursor is used for the canvas.


<h3 id="insertion-caret">Insertion caret</h3>

<h4 id="caret-color">Coloring the insertion caret: caret-color</h4>
<table class="propdef"><tbody>
<tr><th>Name: </th><td><dfn>caret-color</dfn></td></tr>
<tr><th>Value: </th><td>auto | <<color>></td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>elements that accept input</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>The computed value for ''auto'' is ''currentColor''. For <<color>> values, the computed value is as defined for the [[!CSS3COLOR]] 'color' property.</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>auto</dt>
<dd>the color of the element.</dd>
<dt><<color>></dt>
<dd>the insertion caret is colored with the specified color.</dd>
</dl>

The caret is a visible indicator of the insertion point in an element where text (and potentially other content) is inserted by the user. This property controls the color of that visible indicator.

Note: caret shape and blinking is outside the scope of this feature and thus unspecified.

<div class="example">
Example: a textarea with
<code class="lang-css">caret-color:#00aacc;</code>

<textarea style="caret-color:#00aacc;">
caret-color:#00aacc
</textarea>

</div><!-- example -->

Note: The caret-color property is at risk.


<h3 id="keyboard">Keyboard control</h3>

<h4 id="nav-dir">Directional focus navigation: the 'nav-up', 'nav-right', 'nav-down', 'nav-left' properties</h4>
<table class="propdef"><tbody>
<tr><th>Name: </th><td><dfn>nav-up</dfn>, <dfn>nav-right</dfn>, <dfn>nav-down</dfn>, <dfn>nav-left</dfn></td></tr>
<tr><th>Value: </th><td>auto | &lt;id&gt; [ current | root | &lt;target-name&gt; ]? </td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>all enabled elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>as specified</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>auto</dt>
<dd>The user agent automatically determines which element to navigate the focus to in response to directional navigational input.</dd>
<dt>&lt;id&gt;</dt>
<dd><p>The &lt;id&gt; value is an ID selector [[SELECT]].
In response to directional navigation input corresponding to the property,
the focus is navigated to the first element in tree order matching the selector.

If this refers to the currently focused element,
the directional navigation input respective to the nav- property is ignored &mdash;
there is no need to refocus the same element.

If no element matches the selector,
the user agent automatically determines which element to navigate the focus to.

If the focus is navigated to an element 
that was not otherwise focusable, 
it becomes focusable 
only as the result of this directional navigation, 
and the <css>:focus</css> pseudo-class matches the element 
while it is focused as such.

Note: there were other options under consideration for such "not otherwise focusable" elements, including focus to the next otherwise focusable element in the document tree (including descendants of such a not otherwise focusable element). Input on such other options is welcome and explicitly solicited, especially from implementation experiences and author experience using the directional navigation properties in their content.

</dd>
<dt>&lt;target-name&gt;</dt>
<dd>
The &lt;target-name&gt; parameter indicates the target frame for the focus navigation.
It is a <<string>> and it cannot start with the underscore "_" character.
If the specified target frame does not exist,
the parameter will be treated as the keyword ''current'',
which means to simply use the frame that the element is in.
The keyword ''root'' indicates that the user agent should target the full window.
</dd>
</dl>

User agents for devices with directional navigation keys
respond by navigating the focus according to four respective nav-* directional navigation properties
(nav-up, nav-right, nav-down, nav-left).
This specification does not define which keys of a device are directional navigational keys.

Note: Typical personal computers have keyboards with four arrow keys.
One possible implementation would be to use those four arrow keys for directional navigation.
For accessibility and user convenience,
user agents should allow configuration of which keys on a keyboard are used for directional navigation.

<div class="example">
<h5>Example: positioned buttons</h5>

Here is an example of buttons positioned in a diamond shape
whose directional focus navigation is set in such a way
to navigate the focus clockwise (or counter-clockwise) around the diamond shape
when the user chooses to navigate directionally.
<pre><code class="lang-css">
button { position:absolute }

button#b1 {
	top:0; left:50%;
	nav-right:#b2; nav-left:#b4;
	nav-down:#b2; nav-up:#b4;
}

button#b2 {
	top:50%; left:100%;
	nav-right:#b3; nav-left:#b1;
	nav-down:#b3; nav-up:#b1;
}

button#b3 {
	top:100%; left:50%;
	nav-right:#b4; nav-left:#b2;
	nav-down:#b4; nav-up:#b2;
}

button#b4 {
	top:50%; left:0;
	nav-right:#b1; nav-left:#b3;
	nav-down:#b1; nav-up:#b3;
}
</code></pre>

Whatever markup sequence the buttons may have
(which is not specified in this example)
is irrelevant in this case because they are positioned, and yet,
it is still important to ensure focus navigation behaviors which relate reasonably to the specified layout.
</div>

<div class="example">
<h5>Example: moving focus to inside a frame</h5>

Moving the focus to an element in a specific frame requires both the element's id and the frame's name.

This example shows how to make navigating left from the button with id "foo" move the focus to the element with id "bar" within the frame named "sidebar".

<pre><code class="lang-css">
button#foo { nav-left: #bar "sidebar"; }
</code></pre>
</div>


<h4 id="input-method-editor">Obsolete: the ime-mode property</h4>

"ime-mode" is a property somewhat implemented in some browsers, that is problematic and officially obsoleted by this specification.

There is documentation of
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ime-mode">non-interoperability of these implementations.
</a>

User agents should not support the <css>ime-mode</css> property.

Authors must not use the ime-mode property.

Users may use the ime-mode property only for repair use-cases where they have to work around bad sites and legacy implementations, e.g. with a user style sheet rule like:
<div class="example">
<p>Example: user preference
<pre><code class="lang-css">input[type=password] {
    ime-mode: auto&nbsp;!important;
}
</code></pre>
</div>

This example CSS may be placed into a user style sheet file to force password input fields to behave in a default manner.

This specification deliberately does not attempt to document the functionality of legacy ime-mode implementations nor what they specifically support because it does not make sense to pursue or recommend any such path.

<div class="note">
Note: there are several [[HTML5]] features which authors should use to provide information to user agents that allow them to provide a better input user experience:

<ul>
<li>The global <code>lang</code> attribute
<li>The <code>inputmode</code>, <code>pattern</code>, 
and <code>type</code> attributes of the input element
</ul>
</div>


<hr title="Separator from footer">


<h2 class="no-num" id="acknowledgments">Appendix A. Acknowledgments</h2>

This appendix is <em>informative</em>.

Thanks to feedback and contributions from
<span class="h-card">Rossen Atanassov</span>,
<span class="h-card">Tab Atkins</span>,
<span class="h-card">L. David Baron</span>,
<span class="h-card">Bert Bos</span>,
<span class="h-card">Matthew Brealey</span>,
<span class="h-card">Rick Byers</span>,
<span class="h-card">Ada Chan</span>,
<span class="h-card">James Craig</span>,
<span class="h-card">Michael Cooper</span>,
<span class="h-card">Axel Dahmen</span>,
<span class="h-card">Michael Day</span>,
<span class="h-card">Micah Dubinko</span>,
<span class="h-card">Elika E.</span>,
<span class="h-card">Steve Falkenburg</span>,
<span class="h-card">Andrew Fedoniouk</span>,
<span class="h-card">Al Gilman</span>,
<span class="h-card">Ian Hickson</span>,
<span class="h-card">Bjoern Hoehrmann</span>,
<span class="h-card">Alan Hogan</span>,
<span class="h-card">David Hyatt</span>,
<span class="h-card">Richard Ishida</span>,
<span class="h-card">Sho Kuwamoto</span>,
<span class="h-card">Yves Lafon</span>,
<span class="h-card">Stuart Langridge</span>,
<span class="h-card">Susan Lesch</span>,
<span class="h-card">Peter Linss</span>,
<span class="h-card">Kang-Hao Lu</span>,
<span class="h-card">Masayuki Nakano</span>,
<span class="h-card">Mats Palmgren</span>, 
<span class="h-card">Brad Pettit</span>,
<span class="h-card">François Remy</span>,
<span class="h-card">Florian Rivoal</span>,
<span class="h-card">Andrey Rybka</span>,
<span class="h-card">Simon Sapin</span>,
<span class="h-card">Alexander Savenkov</span>,
<span class="h-card">Sebastian Schnitzenbaumer</span>,
<span class="h-card">Lea Verou</span>,
<span class="h-card">Etan Wexler</span>,
<span class="h-card">David Woolley</span>,
<span class="h-card">Frank Yan</span>,
<span class="h-card">Boris Zbarsky</span>,
and 
<span class="h-card">Domel</span>.

Thanks in particular to Florian Rivoal for his work during 2014Q4 and 2015Q1 documenting issues from www-style emails, and proposing some resolutions &amp; changes.

<h2 class="no-num" id="changes">Appendix B. Changes</h2>

This appendix is <em>informative</em>.

In general this draft contains 
editorial/grammatical/spelling corrections,
and a few new informative examples.
This appendix describes functional changes from the
<a href="http://www.w3.org/TR/2012/WD-css3-ui-20120117/"
   >Working Draft (WD) of 17 Jan 2012</a>
that were made to reflect implementer adoption (or lack thereof), as well as implementer innovations.
In particular, changes since the previous draft fall into one of
three categories:

<ul>
<li>Minor refinements to features based on implementation experience.
 <!-- e.g. cursor applying to border, padding, content areas -->

<li>Dropping features that were not implemented,
or were insufficiently implemented to exit CR.
 <!-- e.g. System Appearance -->
<li>Adding a small number of new but already interoperably
implemented features.
 <!-- e.g. text-overflow -->
</ul>

<h3 class="no-num" id="changes-list">List of substantial changes</h3>

<ul>
<li><css>::value</css> and <css>::choices</css> pseudo-elements have been dropped due to insufficient implementer interest. As they were published in a previous CR draft, they may be re-added in a future level if implementers show interest and intent to implement.

</ul>



<h2 class="no-num" id="default-style-sheet">Appendix C. Default style sheet additions for HTML</h2>

This appendix is <em>informative</em>.

Potential additions to the base style sheet to express HTML form controls, and a few dynamic presentation attributes:

<pre class="lang-css">

:enabled:focus {
 outline: 2px inset;
}

button,
input[type=button],
input[type=reset],
input[type=submit],
input[type=checkbox],
input[type=radio],
textarea,
input,
input[type=text],
input[type=hidden],
input[type=password],
input[type=image]
{
 display: inline-block;
 white-space: nowrap;
}

button
{
/* white space handling of BUTTON tags in particular */
 white-space:normal;
}

input[type=reset]:lang(en)
{
/* default content of HTML input type=reset button, per language */
 content: "Reset";
}

input[type=submit]:lang(en)
{
/* default content of HTML input type=submit button, per language */
 content: "Submit";
}

/* UAs should use language-specific Reset/Submit rules for others. */

input[type=button],
input[type=reset][value],
input[type=submit][value]
{
/* text content/labels of HTML "input" buttons */
 content: attr(value);
}

textarea
{
/* white space handling of TEXTAREA tags in particular */
 white-space:pre-wrap;
}

input[type=hidden]
{
/* appearance of the HTML hidden text field in particular */
 display: none;
}

input[type=image]
{
 display: inline-block;
 content: attr(src,url);
 border: none;
}

select[size]
{
/* HTML4/XHTML1 &lt;select&gt; w/ size more than 1 - appearance of list */
 display: inline-block;
 height: attr(size,em);
}

select,select[size=1]
{
/* HTML4/XHTML1 &lt;select&gt; without size, or size=1 - popup-menu */
 display: inline-block;
 height: 1em;
 overflow: hidden;
}

select[size]:active
{
/* active HTML &lt;select&gt; w/ size more than 1 - appearance of active list */
 display: inline-block;
}

optgroup,option
{
 display: block;
 white-space: nowrap;
}

optgroup[label],option[label]
{
 content: attr(label);
}

option[selected]::before
{
 display: inline;
 content: check;
}

/* Though FRAME resizing is not directly addressed by this specification,
   the following rules may provide an approximation of reasonable behavior. */

/*

frame { resize:both }
frame[noresize] { resize:none }

*/

</pre>


<h2 class="no-num" id="test-suite">Appendix D: Test Suite</h2>

This appendix is <em>informative</em>.

There is a partial test suite
written according to the <a href="http://www.w3.org/Style/CSS/Test/testsuitedocumentation">CSS Test Suite Documentation</a>
and following the <a href="http://www.w3.org/Style/CSS/Test/guidelines.html">CSS2.1 Test Case Authoring Guidelines</a>.
The test suite shall allow user agents to verify their basic conformance to the specification.
This test suite does not pretend to be exhaustive and does not cover all possible combinations of user interface related features.
These tests will be made available from the <a href="http://www.w3.org/Style/CSS/Test/">CSS Test Suites</a> home page.
