<pre class='metadata'>
Title: CSS Nesting Module
Shortname: css-nesting
Level: 1
Status: ED
Work Status: Exploring
Group: CSSWG
ED: https://drafts.csswg.org/css-nesting/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/, w3cid 42199
Editor: Adam Argyle, Google, https://nerdy.dev, w3cid 112669
Abstract: This module introduces the ability to nest one style rule inside another, with the selector of the child rule relative to the selector of the parent rule.  This increases the modularity and maintainability of CSS stylesheets.
</pre>

<pre class=link-defaults>
spec:css-color-4; type:property; text:color
spec:cssom-1; type:dfn;
	text:child css rules
	text:specified order
</pre>

<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	This module describes support for nesting a style rule within another style rule,
	allowing the inner rule's selector to reference the elements matched by the outer rule.
	This feature allows related styles to be aggregated into a single structure within the CSS document,
	improving readability and maintainability.

<h3 id="placement">
Module Interactions</h3>

	This module introduces new parser rules that extend the [[!CSS21]] parser model.
	This module introduces selectors that extend the [[SELECTORS4]] module.

<h3 id="values">
Values</h3>

	This specification does not define any new properties or values.

<h3 id="motivation">
Motivation</h3>

	CSS Rules for even moderately complicated web pages include lots of duplication for the purpose of styling related content.
	For example, here is a portion of the CSS markup for one version of the [[CSS3COLOR]] module:

	<div class='example'>
		<pre class=lang-css>
			table.colortable td {
				text-align:center;
			}
			table.colortable td.c {
				text-transform:uppercase;
			}
			table.colortable td:first-child, table.colortable td:first-child+td {
				border:1px solid black;
			}
			table.colortable th {
				text-align:center;
				background:black;
				color:white;
			}
		</pre>
	</div>

	Nesting allows the grouping of related style rules, like this:

	<div class='example'>
		<pre class=lang-css>
			table.colortable {
				& td {
					text-align:center;
					&.c { text-transform:uppercase }
					&:first-child, &:first-child + td { border:1px solid black }
				}
				& th {
					text-align:center;
					background:black;
					color:white;
				}
			}
		</pre>
	</div>

	Besides removing duplication,
	the grouping of related rules improves the readability and maintainability of the resulting CSS.

Nesting Selector: the ''&'' selector {#nest-selector}
=====================================================

	When using a <a>nested style rule</a>,
	one must be able to refer to the elements matched by the parent rule;
	that is, after all, <em>the entire point of nesting</em>.
	To accomplish that,
	this specification defines a new selector,
	the <dfn>nesting selector</dfn>,
	written as an ASCII ampersand <dfn selector>&</dfn>.

	When used in the selector of a <a>nested style rule</a>,
	the <a>nesting selector</a> represents the elements matched by the parent rule.
	When used in any other context,
	it represents nothing.
	(That is, it's valid, but matches no elements.)

	<div class="note">
		The <a>nesting selector</a> can be desugared
		by replacing it with the parent style rule's selector,
		wrapped in a '':is()'' selector.
		For example,

		<pre class=lang-css>
		a, b {
			& c { color: blue; }
		}
		</pre>

		is equivalent to

		<pre class=lang-css>
		:is(a, b) c { color: blue; }
		</pre>
	</div>

	The <a>specificity</a> of the <a>nesting selector</a>
	is equal to the largest specificity among the parent style rule's selector
	that match the given element.

	<div class="example">
		For example, given the following style rules:

		<pre class=lang-css>
		#a, .b {
			& c { color: blue; }
		}
		</pre>

		Then in a DOM structure like

		<pre class="lang-html">
			&lt;div id=a>
				&lt;c>foo&lt;/c>
			&lt;/div>
		</pre>

		the ''&'' selector has specificity [1,0,0]
		because it matches due to the ''#a'' selector,
		giving the entire ''color: blue'' rule a specificity of [1,0,1].
	</div>

	Note: This specificity is intentionally equivalent to that of the desugaring described above.

	The <a>nesting selector</a> is allowed anywhere in a <a>compound selector</a>,
	even before a <a>type selector</a>,
	violating the normal restrictions on ordering within a <a>compound selector</a>.

	Note: This is required to allow direct nesting.
	Also, the "type selectors must come first" has no <em>intrinsic</em> reason behind it;
	it exists because we need to be able to tell simple selectors apart unambiguously
	when they're directly appended together in a <a>compound selector</a>,
	and it's not clear from ''.foodiv'' that it should mean the same as ''div.foo''.
	An ampersand is unambiguously separable from an ident, tho,
	so there is no problem with it preceding a type selector,
	like ''&div''.

Nesting Style Rules {#nesting}
==============================

	Nesting style rules naively inside of other style rules is, unfortunately, problematic--
	the syntax of a selector is ambiguous with the syntax of a declaration,
	so an implementation requires unbounded lookahead
	to tell whether a given bit of text is a declaration or the start of a style rule.
	As CSS to date requires only a single token of lookahead in its parsing,
	this drawback is generally considered unacceptable among popular implementations of CSS.

	To get around this limitation,
	this specification defines two methods of <dfn lt="nested style rule|nesting style rule">nesting style rules</dfn> inside of other style rules,
	both designed to be immediately unambiguous with the surrounding declarations.
	The first, <a>direct nesting</a>,
	has a somewhat restricted syntax,
	but imposes minimal additional "weight" in the form of disambiguating syntax,
	and is suitable for most purposes.
	The second, the ''@nest'' rule,
	imposes a small syntactic weight to disambiguate it from surrounding declarations,
	but has no restrictions on the makeup of the selector.
	The two are otherwise equivalent,
	and either can be used as desired by the stylesheet author.

Direct Nesting {#direct}
------------------------

	A style rule can be <dfn lt="direct nesting|directly nested">directly nested</dfn>
	within another style rule if its selector is <a>nest-prefixed</a>.

	To be <dfn>nest-prefixed</dfn>,
	a <a>nesting selector</a> must be the first <a>simple selector</a>
	in the first <a>compound selector</a>
	of the selector.
	If the selector is a list of selectors,
	every <a>complex selector</a> in the list must be <a>nest-prefixed</a>
	for the selector as a whole to <a>nest-prefixed</a>.

	<div class="example">
		For example, the following nestings are valid:

		<pre class=lang-css>
		.foo {
			color: blue;
			& > .bar { color: red; }
		}
		/* equivalent to
			 .foo { color: blue; }
			 .foo > .bar { color: red; }
		 */

		.foo {
			color: blue;
			&.bar { color: red; }
		}
		/* equivalent to
			 .foo { color: blue; }
			 .foo.bar { color: red; }
		 */

		.foo, .bar {
			color: blue;
			& + .baz, &.qux { color: red; }
		}
		/* equivalent to
			 .foo, .bar { color: blue; }
			 :is(.foo, .bar) + .baz,
			 :is(.foo, .bar).qux { color: red; }
		 */

		.foo {
			color: blue;
			& .bar & .baz & .qux { color: red; }
		}
		/* equivalent to
			 .foo { color: blue; }
			 .foo .bar .foo .baz .foo .qux { color: red; }
		 */

		.foo {
			color: blue;
			& { padding: 2ch; }
		}
		/* equivalent to
			 .foo { color: blue; }
			 .foo { padding: 2ch; }

			 // and

			 .foo {
				 color: blue;
				 padding: 2ch;
			 }
		 */

		.error, #404 {
			&:not(.foo,.bar) > .baz { color: red; }
		}
		/* equivalent to
			 :is(.error, #404):not(.foo,.bar) > .baz { color: red; }
		 */

		.foo {
			&:is(.bar, &.baz) { color: red; }
		}
		/* equivalent to
			 .foo:is(.bar, .foo.baz) { color: red; }
		 */

		figure {
			margin: 0;

			& > figcaption {
				background: hsl(0 0% 0% / 50%);

				& > p {
					font-size: .9rem;
				}
			}
		}
		/* equivalent to
			 figure { margin: 0; }
			 figure > figcaption { background: hsl(0 0% 0% / 50%); }
			 figure > figcaption > p { font-size: .9rem; }
		 */

		main {
			& > section,
			& > article {
				background: white;

				& > header {
					font-size: 1.25rem;
				}
			}
		}
		/* equivalent to
			 main > :is(section, article) { background: white; }
			 main > :is(section, article) > header { font-size: 1.25rem; }
		 */
		</pre>

		Note: 
		<a href="https://en.wikipedia.org/wiki/CSS#:~:text=bem%20(block%2C%20element%2C%20modifier)">BEM</a> authors often use preprocessors to 
		stay <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">dry</a> 
		within a file and selector context,
		and preprocessors would concatenate the selectors like strings.
		This however is not how it works in browsers. Authors may still practice BEM, 
		but the nested selector string building technique will need to stay a feature 
		of preprocessors.

		For example:

		<pre class=lang-css>
		.foo {
			color: blue;
			&__bar { padding: 2ch; }
		}
		/* equivalent to
			 .foo { color: blue; }
			 __bar.foo { padding: 2ch; }
		 */
		</pre>

		''__bar'' is a valid potential <a href="https://html.spec.whatwg.org/multipage/custom-elements.html">custom element</a>.

		But the following are invalid:

		<pre class=lang-css>
		.foo {
			color: red;
			.bar { color: blue; }
		}
		/* Invalid because there's no nesting selector */

		.foo {
			color: red;
			.bar & { color:blue; }
		}
		/* Invalid because & isn't in the first compound selector */

		.foo {
			color: red;
			&&.bar { color: blue; }
		}
		/* Invalid because the second & is no longer
			 at the start of a compound selector */

		.foo {
			color: red;
			&.bar, .baz { color: blue; }
		}
		/* Invalid because the second selector in the list doesn't
			 contain a nesting selector. */
		</pre>
	</div>

	Note: The last invalid example is technically not ambiguous,
	but it's still invalid because allowing it would be an editing hazard.
	Later edits to the stylesheet might remove the first selector in the list,
	making the other one the new "first selector",
	and making the rule invalid.
	Turning an otherwise-innocuous action
	(like removing a selector from a list)
	into a possible error
	makes editing more complicated,
	and is author-hostile,
	so we disallow it as a possibility.

The Nesting At-Rule: ''@nest'' {#at-nest}
-----------------------------------------

	While <a>direct nesting</a> looks nice,
	it is somewhat fragile.
	Some valid nesting selectors,
	like ''.foo &'',
	are disallowed,
	and editing the selector in certain ways can make the rule invalid unexpectedly.
	As well,
	some people find the nesting challenging to distinguish visually
	from the surrounding declarations.

	To aid in all these issues,
	this specification defines the ''@nest'' rule,
	which imposes fewer restrictions on how to validly nest style rules.
	Its syntax is:

	<pre class=prod>
		<dfn>@nest</dfn> = @nest <<selector>> { <<declaration-list>> }
	</pre>

	The ''@nest'' rule functions identically to a style rule:
	it starts with a selector,
	and contains declarations that apply to the elements the selector matches.
	The only difference is that the selector used in a ''@nest'' rule
	must be <dfn>nest-containing</dfn>,
	which means it contains a <a>nesting selector</a> in it somewhere.
	A list of selectors is <a>nest-containing</a> if all of its individual <a>complex selectors</a>
	are <a>nest-containing</a>.

	<div class="example">
		For example, the following nestings are valid:

		<pre class="lang-css">
		.foo {
			color: red;
			@nest & > .bar {
				color: blue;
			}
		}
		/* equivalent to
			 .foo { color: red; }
			 .foo > .bar { color: blue; }
		 */

		.foo {
			color: red;
			@nest .parent & {
				color: blue;
			}
		}
		/* equivalent to
			 .foo { color: red; }
			 .parent .foo { color: blue; }
		 */

		.foo {
			color: red;
			@nest :not(&) {
				color: blue;
			}
		}
		/* equivalent to
			 .foo { color: red; }
			 :not(.foo) { color: blue; }
		 */
		</pre>

		But the following are invalid:

		<pre class=lang-css>
		.foo {
			color: red;
			@nest .bar {
				color: blue;
			}
		}
		/* Invalid because there's no nesting selector */

		.foo {
			color: red;
			@nest & .bar, .baz {
				color: blue;
			}
		}
		/* Invalid because not all selectors in the list
			 contain a nesting selector */
		</pre>
	</div>

Nesting Conditional Rules {#conditionals}
-----------------------------------------------

	A style rule can have any number of <a>conditional rules</a> inside of it, of any type,
	with rules required to come after declarations (see <a href="#mixing">Mixing Nesting Rules and Declarations</a>).

	If there are only declarations in the nested conditional, the nesting context is adopted.

	In the presence of a <a>nesting selector</a>, the same
	rules as outlined in <a href="#direct">direct nesting</a> should be used.

	<div class="example">
		For example, the following conditional nestings are valid:

		<pre class="lang-css">
		.foo {
			display: grid;

			@media (orientation: landscape) {
				grid-auto-flow: column;
			}
		}
		/* equivalent to
			 .foo { display: grid; }

			 @media (orientation: landscape) {
				 & {
					 grid-auto-flow: column;
				 }
			 }
		 */

		/* finally equivalent to
			 .foo { display: grid; }

			 @media (orientation: landscape) {
				 .foo {
					 grid-auto-flow: column;
				 }
			 }
		 */

		.foo {
			display: grid;

			@media (orientation: landscape) {
				grid-auto-flow: column;

				@media (min-inline-size > 1024px) {
					max-inline-size: 1024px;
				}
			}
		}

		/* equivalent to
			 .foo { display: grid; }

			 @media (orientation: landscape) {
				 .foo {
					 grid-auto-flow: column;
				 }
			 }

			 @media (orientation: landscape) and (min-inline-size > 1024px) {
				 .foo {
					 max-inline-size: 1024px;
				 }
			 }
		 */

		.foo {
			color: red;

			@media (min-width: 480px) {
				& > .bar,
				& > .baz {
					color: blue;
				}
			}
		}
		/* equivalent to
			 .foo { color: red; }

			 @media (min-width: 480px) {
				 .foo > :is(.bar, .baz) {
					 color: blue;
				 }
			 }
		 */
		</pre>

		But the following are invalid:

		<pre class=lang-css>
		.foo {
			color: red;

			@media (min-width: 480px) {
				& h1, h2 { color: blue; }
			}
		}
		/* Invalid because not all selectors in the list
			 contain a nesting selector */

		.foo {
			color: red;

			@nest @media (min-width: 480px) {
				& { color: blue; }
			}
		}
		/* Invalid because @nest expects a selector prelude,
			 instead a conditional rule was provided */
		</pre>
	</div>

Mixing Nesting Rules and Declarations {#mixing}
-----------------------------------------------

	A style rule can have any number of declarations inside of it,
	followed by any number of rules.
	Declarations occuring <em>after</em> a nested rule
	are invalid.

	<div class=example>
		For example,
		in the following code:

		<pre highlight=css>
		article {
			color: green;
			& { color: blue; }
			color: red;
		}
		</pre>

		The ''color: red'' declaration is invalid and ignored,
		since it occurs after the [=nested style rule=].

		However, further nested rules are still valid,
		as in this example:

		<pre highlight=css>
		article {
			color: green;
			& { color: blue; }
			color: red;
			&.foo { color: yellow; } /* valid! */
		}
		</pre>
	</div>

	The relative ordering of <a>nested style rules</a> and <a>nested conditional rules</a>
	<strong>is</strong> important;
	it's possible for a given style rule and a <a>nested style rule</a> within it to match the same element,
	and if the specificity of the two rules is otherwise equivalent,
	the relative order in the stylesheet of the applicable declarations
	determines which declaration "wins" the <a>cascade</a>.
	For this purpose,
	a nested rule is considered to come <em>after</em> its parent rule.

	<div class="example">
		For example, consider the following where the specificity is the same and the
		cascade is used for value resolution:

		<xmp class="lang-css">
			article {
				& .blue { color: blue; } /* (0,1,1) */
				& .red  { color: red; }  /* (0,1,1) */
			}

			/* equivalent to
			 article .blue { color: blue; }
			 article .red  { color: red; }
			*/
		</xmp>

		<xmp class="lang-html">
			<article>
				<div class="red blue"></div>
			</article>

			<!-- div text color is red -->
		</xmp>

		The specificity of ''article .blue'' and ''article .red'' are both (0,1,1).
	</div>

	<div>
		In this example:

		<xmp highlight=css>
			article {
				color: blue;
				& { color: red; }
			}
		</xmp>

		Both declarations have the same specificity (0,0,1),
		but the nested rule is considered to come <em>after</em> its parent rule,
		so the ''color: red'' declarations wins.

		On the other hand, in this example:

		<xmp highlight=css>
			article {
				color: blue;
				@nest :where(&) { color: red; }
			}
		</xmp>

		The '':where()'' pseudoclass reduces the specificity of the [=nesting selector=] to 0,
		so the ''color: red'' declaration now has a specificity of (0,0,0),
		and loses to the ''color: blue'' declaration.
	</div>


<!--
 ██████   ██████   ██████   ███████  ██     ██
██    ██ ██    ██ ██    ██ ██     ██ ███   ███
██       ██       ██       ██     ██ ████ ████
██        ██████   ██████  ██     ██ ██ ███ ██
██             ██       ██ ██     ██ ██     ██
██    ██ ██    ██ ██    ██ ██     ██ ██     ██
 ██████   ██████   ██████   ███████  ██     ██
-->

CSSOM {#cssom}
==============

Modifications to {{CSSStyleRule}} {#cssom-style}
---------------------------------------------

CSS style rules gain the ability to have nested rules:

<pre class=idl>
partial interface CSSStyleRule {
	[SameObject] readonly attribute CSSRuleList cssRules;
	unsigned long insertRule(CSSOMString rule, optional unsigned long index = 0);
	undefined deleteRule(unsigned long index);
};
</pre>

The <dfn attribute for=CSSStyleRule>cssRules</dfn> attribute
must return a {{CSSRuleList}} object for the [=CSSRule/child CSS rules=].

The <dfn method for=CSSStyleRule>insertRule(<var>rule</var>, <var>index</var>)</dfn> method
must return the result of
invoking [=insert a CSS rule=] <var>rule</var>
into the [=CSSRule/child CSS rules=] at <var>index</var>.

The <dfn method for=CSSStyleRule>deleteRule(<var>index</var>)</dfn> method
must [=remove a CSS rule=] from the [=CSSRule/child CSS rules=] at <var>index</var>.


The {{CSSNestingRule}} Interface {#cssom-nesting}
-------------------------------------------------

The {{CSSNestingRule}} interfaces represents a ''@nest'' rule:

<pre class=idl>
[Exposed=Window]
interface CSSNestingRule : CSSRule {
	attribute CSSOMString selectorText;
	[SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;
	[SameObject] readonly attribute CSSRuleList cssRules;
	unsigned long insertRule(CSSOMString rule, optional unsigned long index = 0);
	undefined deleteRule(unsigned long index);
};
</pre>

The <dfn attribute for=CSSNestingRule>selectorText</dfn> attribute,
on getting,
must return the result of [=serialize a group of selectors|serializing=]
the associated [=selector list=].
On setting the {{CSSStyleRule/selectorText}} attribute these steps must be run:

1. Run the <a>parse a group of selectors</a> algorithm on the given value.
2. If the algorithm returns a non-null value replace the associated [=selector list=] with the returned value.
3. Otherwise, if the algorithm returns a null value, do nothing.

The <dfn attribute for=CSSNestingRule>style</dfn> attribute
must return a {{CSSStyleDeclaration}} object for the style rule,
with the following properties:

<dl>
	: [=CSSStyleDeclaration/computed flag=]
	:: Unset.
	: [=CSSStyleDeclaration/declarations=]
	:: The declared declarations in the rule, in <a>specified order</a>.
	: [=CSSStyleDeclaration/parent CSS rule=]
	:: The <a>context object</a>.
	: [=CSSStyleDeclaration/owner node=]
	:: Null.
</dl>

The <dfn attribute for=CSSNestingRule>cssRules</dfn> attribute
must return a {{CSSRuleList}} object for the [=CSSRule/child CSS rules=].

The <dfn method for=CSSNestingRule>insertRule(<var>rule</var>, <var>index</var>)</dfn> method
must return the result of
invoking [=insert a CSS rule=] <var>rule</var>
into the [=CSSRule/child CSS rules=] at <var>index</var>.

The <dfn method for=CSSNestingRule>deleteRule(<var>index</var>)</dfn> method
must [=remove a CSS rule=] from the [=CSSRule/child CSS rules=] at <var>index</var>.

To serialize a {{CSSNestingRule}}:
return the result of the following steps:

<ol>
	<li>Let |s| initially be the string "<code>@nest</code>" followed by a single SPACE (U+0020).
	<li>Append to |s| the result of performing <a>serialize a group of selectors</a> on the rule's associated selectors,
		followed by the string "<code> {</code>", i.e., a single SPACE (U+0020), followed by LEFT CURLY BRACKET (U+007B).
	<li>Let |decls| be the result of performing <a>serialize a CSS declaration block</a> on the rule's associated declarations, or null if there are no such declarations.
	<li>Let |rules| be the result of performing [=serialize a CSS rule=] on each rule in the rule's {{CSSStyleRule/cssRules}} list, or null if there are no such rules.
	<li>If |decls| and |rules| are both null, append " }" to |s| (i.e. a single SPACE (U+0020) followed by RIGHT CURLY BRACKET (U+007D)) and return |s|.
	<li>If |rules| is null:
		<ol>
			<li>Append a single SPACE (U+0020) to |s|
			<li>Append |decls| to |s|
			<li>Append " }" to |s| (i.e. a single SPACE (U+0020) followed by RIGHT CURLY BRACKET (U+007D)).
			<li>Return |s|.
		</ol>
	<li>Otherwise:
		<ol>
			<li>If |decls| is not null, prepend it to |rules|.
			<li>For each |rule| in |rules|:
				<ol>
					<li>Append a newline followed by two spaces to |s|.
					<li>Append |rule| to |s|.
				</ol>
			<li>Append a newline followed by RIGHT CURLY BRACKET (U+007D) to |s|.
			<li>Return |s|.
</ol>
