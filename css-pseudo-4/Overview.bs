<pre class='metadata'>
Title: CSS Pseudo-Elements Module Level 4
Shortname: css-pseudo
Level: 4
Status: ED
Work Status: Refining
Group: csswg
ED: https://drafts.csswg.org/css-pseudo-4/
TR: https://www.w3.org/TR/css-pseudo-4/
Previous Version: https://www.w3.org/TR/2020/WD-css-pseudo-4-20201231/
Previous Version: https://www.w3.org/TR/2019/WD-css-pseudo-4-20190225/
Previous Version: https://www.w3.org/TR/2016/WD-css-pseudo-4-20160607/
Previous Version: https://www.w3.org/TR/2015/WD-css-pseudo-4-20150115/
!Issues List: <a href="https://drafts.csswg.org/css-pseudo/#issues-index">Tracked in Editor's Draft</a>
Editor: Daniel Glazman, Disruptive Innovations, w3cid 13329
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Alan Stearns, Adobe Systems Inc., stearns@adobe.com, w3cid 46659
Abstract: This CSS module defines pseudo-elements, abstract elements that represent portions of the CSS render tree that can be selected and styled.
Ignored Terms: initial-letter, PseudoElement, pseudo(), selectors
Default Highlight: css
Indent: 2
</pre>
<pre class="link-defaults">
spec:css-color-3; type:value; text:currentcolor
spec:css-color-3; type:property; text:color
spec:fill-stroke-3; type:property; text:stroke-width
</pre>

<h2 id="intro">Introduction</h2>

  <em>This section is informative.</em>

  <a>Pseudo-elements</a> represent abstract elements of the document
  beyond those elements explicitly created by the document language.
  Since they are not restricted to fitting into the document tree,
  they can be used to select and style portions of the document
  that do not necessarily map to the document's tree structure.
  For instance, the ''::first-line'' pseudo-element can
  select content on the first formatted line of an element
  <em>after</em> text wrapping,
  allowing just that line to be styled differently
  from the rest of the paragraph.

  Each pseudo-element is associated with an <a>originating element</a>
  and has syntax of the form ''::name-of-pseudo''.
  This module defines the pseudo-elements that exist in CSS
  and how they can be styled.
  For more information on pseudo-elements in general,
  and on their syntax and interaction with other <a>selectors</a>,
  see [[!SELECTORS-4]].

<h2 id="typographic-pseudos">
Typographic Pseudo-elements</h2>

<h3 id="first-line-pseudo">
The ::first-line pseudo-element</h3>

  The <dfn>::first-line</dfn> [=pseudo-element=] represents
  the contents of the [=first formatted line=]
  of its [=originating element=].

  <div class="example">
    The rule below means
    “change the letters of the first line of every <code>p</code> element to uppercase”:

    <pre class="lang-css">p::first-line { text-transform: uppercase }</pre>

    The selector ''p::first-line''
    does not match any real document element.
    It instead matches a pseudo-element
    that the user agent will automatically insert
    at the beginning of every <code>p</code> element.
  </div>

  Note: Note that the length of the first line depends on a number of factors,
  including the width of the page, the font size, etc.

  <div class="example" id="first-line-example">
    For example, given an ordinary HTML [[HTML5]] paragraph such as:

    <pre class="lang-markup">
      &lt;P&gt;This is a somewhat long HTML paragraph
      that will be broken into several lines.
      The first line will be styled
      by the ‘::first-line’ pseudo-element.
      The other lines will be treated
      as ordinary lines in the paragraph.&lt;/P&gt;
    </pre>

    Depending on the width of the element,
    its lines might be broken as follows:

    <pre class="figure">
      THIS IS A SOMEWHAT LONG HTML PARAGRAPH THAT
      will be broken into several lines. The
      first line will be by the ‘::first-line’
      pseudo-element. The other lines will be
      treated as ordinary lines in the paragraph.
    </pre>

    or alternately as follows:

    <pre class="figure">
      THIS IS A SOMEWHAT LONG
      HTML paragraph that will
      be broken into several
      lines. The first line will
      be by the ‘::first-line’
      pseudo-element. The other
      lines will be treated as
      ordinary lines in the
      paragraph.
    </pre>
  </div>

<h4 id="first-text-line">
Finding the First Formatted Line</h4>

  In CSS, the ''::first-line'' pseudo-element
  can only have an effect when attached to a <a>block container</a>:

  * The <dfn export>first formatted line</dfn> of
    a [=block container=] that establishes an [=inline formatting context=]
    contains the [=inline-level=] content of its first [=line box=].
  * The [=first formatted line=] of
    a [=block container=] or [=multi-column container=]
    that contains [=block-level=] content
    (and is not a [=table wrapper box=])
    is the [=first formatted line=] of
    its first [=in-flow=] [=block-level=] child.
    If no such line exists,
    it has no [=first formatted line=].

  Note: The [=first formatted line=] can be an empty line.
  For example, the first line of the <code>p</code> in
  <code class="lang-markup">&lt;p&gt;&lt;br&gt;First&hellip;</code>
  doesn't contain any letters.
  Thus the word “First” is not on the first formatted line,
  and will not be affected by ''p::first-line''.

  Note: The first line of a [=block container=]
  that does not participate in a [=block formatting context=]
  cannot be the first formatted line of an ancestor element.
  Thus, in <code class="lang-markup">&lt;DIV&gt;&lt;P STYLE="display: inline-block"&gt;Hello&lt;BR&gt;Goodbye&lt;/P&gt; etcetera&lt;/DIV&gt;</code>
  the first formatted line of the <code>DIV</code> is not the line “Hello”,
  but rather the (otherwise empty) line that contains that entire inline block.

  When a [=first formatted line=] is represented
  by multiple ''::first-line'' pseudo-elements,
  they are nested in the same order as their [=originating elements=].

  <div class="example">
    Consider the following markup:
    <pre class="lang-markup">
      &lt;DIV&gt;
        &lt;P&gt;First paragraph&lt;/P&gt;
        &lt;P&gt;Second paragraph&lt;/P&gt;
      &lt;/DIV&gt;
    </pre>

    If we assume a [=fictional tag sequence=] to represent
    the elements’ ''::first-line'' pseudo elements,
    it would be something like:

    <pre class="lang-markup">
      &lt;DIV&gt;
        &lt;P&gt;&lt;DIV::first-line&gt;&lt;P::first-line&gt;First paragraph&lt;/P::first-line&gt;&lt;/DIV::first-line&gt;&lt;/P&gt;
        &lt;P&gt;&lt;P::first-line&gt;Second paragraph&lt;/P::first-line&gt;&lt;/P&gt;
      &lt;/DIV&gt;
    </pre>
  </div>

<h4 id="first-line-styling">
Styling the First Line Pseudo-element</h4>

  The ''::first-line'' pseudo-element’s generated box
  behaves similar to that of an inline-level element, but with certain restrictions.
  The following CSS properties apply to a ''::first-line'' pseudo-element:
  <ul>
    <li>all font properties (see [[CSS-FONTS-3]])
    <li>the 'color' and 'opacity' properties (see [[CSS-COLOR-3]])
    <li>all background properties (see [[CSS-BACKGROUNDS-3]])
    <li>any typesetting properties that apply to inline elements (see [[CSS-TEXT-3]])
    <li>all text decoration properties (see [[CSS-TEXT-DECOR-3]])
    <li>the 'ruby-position' property (see [[CSS-RUBY-1]])
    <li>any inline layout properties that apply to inline elements (see [[CSS-INLINE-3]])
    <li>any other properties defined to apply to ''::first-line''
        by their respective specifications
  </ul>

  User agents may apply other properties as well except for
  the following excluded properties:
  <ul>
    <li>'writing-mode'
    <li>'direction'
    <li>'text-orientation'
  </ul>

<h4 id="first-line-inheritance">
Inheritance and the ''::first-line'' Pseudo-element</h4>

  During CSS [=inheritance=],
  the [=box fragment|fragment=] of a child that occurs on the first line
  inherits any standard [=inherited properties=]--
  except the properties excluded above--
  from the ''::first-line'' pseudo-element.
  For all other properties,
  including all [=custom properties=] [[!CSS-VARIABLES-1]],
  inheritance is
  from the non-pseudo parent.
  (The portion of a child element that does not occur on the first line
  always inherits from the non-pseudo parent.)


  <div class="example">
    In the common case (of standard inherited CSS properties),
    [=inheritance=] into and from a ''::first-line'' pseudo-element
    can be understood by writing out a <dfn>fictional tag sequence</dfn>
    to represent ''::first-line''.
    Consider the <a href="#first-line-example">earlier example</a>;
    in case of the first rendering, the fictional tag sequence would be:

    <pre class="lang-markup">
      &lt;P&gt;<strong>&lt;p::first-line></strong>This is a somewhat long HTML paragraph
      that<strong>&lt;/p::first-line></strong> will be broken into several lines.
      The first line will be styled
      by the ‘::first-line’ pseudo-element.
      The other lines will be treated
      as ordinary lines in the paragraph.&lt;/P&gt;
    </pre>

    And in the case of the second rendering:

    <pre class="lang-markup">
      &lt;P&gt;<strong>&lt;p::first-line></strong>This is a somewhat long<strong>&lt;/p::first-line></strong> HTML paragraph
      that will be broken into several lines.
      The first line will be styled
      by the ‘::first-line’ pseudo-element.
      The other lines will be treated
      as ordinary lines in the paragraph.&lt;/P&gt;
    </pre>
  </div>


  <div class="example">
    If a pseudo-element breaks up a real element,
    the effect can often be described
    by a <a>fictional tag sequence</a>
    that closes and then re-opens the element.
    Suppose we mark up the earlier example
    with a <code>span</code> element encompassing the first sentence:

    <pre class="lang-markup">
      &lt;P&gt;<strong>&lt;span></strong>This is a somewhat long HTML paragraph
      that will be broken into several lines.<strong>&lt;/span></strong>
      The first line will be styled
      by the ‘::first-line’ pseudo-element.
      The other lines will be treated
      as ordinary lines in the paragraph.&lt;/P&gt;
    </pre>

    The effect of the first rendering
    would be similar to the following [=fictional tag sequence=]:

    <pre class="lang-markup">
      &lt;P&lt;P&gt;<strong>&lt;p::first-line>&lt;span></strong>This is a somewhat long HTML paragraph
      that<strong>&lt;/span>&lt;/P&gt;&lt;p::first-line>&lt;span></strong> will be broken into several lines.<strong>&lt;/span></strong>
      The first line will be styled
      by the ‘::first-line’ pseudo-element.
      The other lines will be treated
      as ordinary lines in the paragraph.&lt;/P&gt;
    </pre>
  </div>


<h3 id="first-letter-pseudo">
The ::first-letter pseudo-element</h3>

  The <dfn>::first-letter</dfn> pseudo-element represents
  the first <a>typographic letter unit</a> [[!CSS-TEXT-3]]
  on the <a>first formatted line</a> of its <a>originating element</a>,
  its <dfn>first-letter text</dfn>.
  The ''::first-letter'' pseudo-element can be used
  to create “initial caps” and “drop caps”,
  which are common typographic effects.

  <div class="example">
    For example, the following rule creates a 2-line drop-letter
    on every paragraph following a level-2 header,
    using the 'initial-letter' property defined in [[CSS-INLINE-3]]:

    <pre class="lang-css">h2 + p::first-letter { initial-letter: 2; }</pre>
  </div>

  As explained in [[!CSS-TEXT-3]],
  a <a>typographic letter unit</a> can include more than one Unicode codepoint.
  For example, combining characters must be kept with their base character.
  Also, languages may have additional rules
  about how to treat certain letter combinations.
  In Dutch, for example, if the letter combination "ij" appears at the beginning of an element,
  both letters should be considered within the ''::first-letter'' pseudo-element. [[UAX29]]
  When selecting the [=first-letter text=],
  the UA should tailor its definition of <a>typographic letter unit</a>
  to reflect the first-letter traditions of the ''::first-letter'' pseudo-element’s <em>containing block</em>’s content language.

  Note: Note that the first <a>typographic letter unit</a> may in fact
  be a digit, e.g., the “6” in “67 million dollars is a lot of money.”

  Punctuation (i.e, characters that belong to the Punctuation (<code>P*</code>) <a>Unicode general category</a> [[!UAX44]])
  that precedes or follows the first <a>typographic letter unit</a>
  and any intervening space separators
  (characters that belong to the <code>Zs</code> Unicode general category [[!UAX44]])
  must also be included as part of the [=first-letter text=]
  in the ''::first-letter'' pseudo-element.

  <div class="figure">
      <img alt="Quotes that precede the first letter should be included." src="images/first-letter2.gif">
  </div>

<h4 id="first-letter-application">
Finding the First Letter Text</h4>

  As with ''::first-line'',
  the ''::first-letter'' pseudo-element
  can only have an effect when attached to a [=block container=].
  Its [=first-letter text=] is the first such [=inline-level content=]
  participating in the [=inline formatting context=]
  of its [=originating element=]’s [=first formatted line=],
  if it is not preceded by any other in-flow content
  (such as images or inline tables) on its line.

  For this purpose, any [=marker boxes=] are ignored,
  as if they were out-of-flow.
  However, if an element has in-flow ''::before'' or ''::after'' content,
  the [=first-letter text=] is selected from the content of the element
  <em>including</em> that generated content.

  <div class="example">
    Example:
    After the rule <code class="lang-css">p::before {content: "Note: "}</code>, the
    selector ''p::first-letter'' matches the "N" of "Note".
  </div>

  If no such text exists,
  then there is no [=first-letter text=]
  and no ''::first-letter'' pseudo-element.

  Note: When the [=first formatted line=] is empty,
  ''::first-letter'' will not match anything.
  For example, in this HTML fragment:
  <code class="lang-markup">&lt;p&gt;&lt;br&gt;First...</code>
  the first line doesn't contain any letters,
  so ''::first-letter'' doesn't match anything.
  In particular, it does not match the “F” of “First”,
  which is on the second line.

  Note: As with ''::first-line'',
  the [=first-letter text=] of a [=block container=]
  that does not participate in a [=block formatting context=]
  cannot be the [=first-letter text=] of an ancestor element.
  Thus, in <code class="lang-markup">&lt;DIV&gt;&lt;P STYLE="display: inline-block"&gt;Hello&lt;BR&gt;Goodbye&lt;/P&gt; etcetera&lt;/DIV&gt;</code>
  the first letter of the <code>DIV</code> is not the letter “H”.
  In fact, the <code>DIV</code> doesn't have a first letter,
  as its [=first formatted line=] contains no content besides the inline block.

<h4 id="first-letter-tree">
Inheritance and Box Tree Structure of the ''::first-letter'' Pseudo-element</h4>

  The ''::first-letter'' pseudo-element is wrapped
  immediately around the [=first-letter text=] it represents,
  even if that text is in a descendant.
  When a [=first-letter text=] is represented by multiple ''::first-letter'' pseudo-elements,
  they are nested in the same order as their [=originating elements=].
  [=Inheritance=] behaves accordingly.

  <div class="example">
    Consider the following markup:

    <pre class="lang-markup">
      &lt;div&gt;
        &lt;p&gt;&lt;span&gt;The first few words&lt;/span>
        and the rest of the paragraph.
      &lt;/div&gt;
    </pre>

    If we assume a [=fictional tag sequence=]
    to represent the elements’ ''::first-letter'' pseudo-elements,
    it would be something like:

    <pre class="lang-markup">
      &lt;div&gt;
        &lt;p&gt;&lt;span&gt;<strong>&lt;div::first-letter&gt;&lt;p::first-letter&gt;</strong>T<strong>&lt;/&hellip;&gt;&lt;/&hellip;&gt;</strong>he first few words&lt;/span>
        and the rest of the paragraph.
      &lt;/div&gt;
    </pre>
  </div>

  If the characters that would form the [=first-letter text=]
  are not all in the same element
  (as the <code>‘T</code> in <code class="lang-css">&lt;p&gt;‘&lt;em&gt;T...</code>),
  the user agent may create a ''::first-letter'' pseudo-element
  from one of the elements, or all elements,
  or simply not create a pseudo-element.
  Additionally, if the [=first-letter text=]
  is not at the start of the line
  (for example due to bidirectional reordering,
  or due to a [=list item=] [=marker=] with ''list-style-position: inside''),
  then the user agent is not required to create the pseudo-element(s).

  A ''::first-letter'' pseudo-element is contained within
  any ''::first-line'' pseudo-elements,
  and thus inherits (potentially indirectly) from ''::first-line'',
  the same as any [=inline box=] on the same line.

<h4 id="first-letter-styling">
Styling the ''::first-letter'' Pseudo-element</h4>

  In CSS a ::first-letter pseudo-element is similar to an [=inline box=].
  The following properties that apply to ''::first-letter'' pseudo-elements:

  <ul>
    <li>all font properties (see [[CSS-FONTS-3]])
    <li>the 'color' and 'opacity' properties (see [[CSS-COLOR-3]])
    <li>all background properties (see [[CSS-BACKGROUNDS-3]])
    <li>any typesetting properties that apply to inline elements (see [[CSS-TEXT-3]])
    <li>all text decoration properties (see [[CSS-TEXT-DECOR-3]])
    <li>any inline layout properties that apply to inline elements (see [[CSS-INLINE-3]])
    <li>margin and padding properties (see [[CSS2]])
    <li>border properties and 'box-shadow' (see [[CSS-BACKGROUNDS-3]])
    <li>any other properties defined to apply to ''::first-letter''
        by their respective specifications
  </ul>

  User agents may apply other properties as well.
  However,
  in no case may the application of such unlisted properties to ''::first-letter'' change
  what [=first-letter text=] is represented by that ''::first-letter''.

  Note: In previous levels of CSS,
  User Agents were allowed to choose a line height, width, and height
  based on the shape of the letter,
  to approximate font sizes;
  and to take the glyph outline into account when performing layout.
  The possibility of such loosely-defined magic has been intentionally removed,
  as it proved to be a poor solution for the intended use case (drop caps and raised caps),
  yet caused interoperability problems.
  See 'initial-letter' in [[CSS-INLINE-3]]
  for explicitly handling drop caps and raised caps.

<h2 id="highlight-pseudos">
Highlight Pseudo-elements</h2>

<h3 id="highlight-selectors">
Selecting Highlighted Content: the ''::selection'',  ''::target-text'', ''::spelling-error'', and ''::grammar-error'' pseudo-elements</h3>

  The <dfn export lt="highlight pseudo-element">highlight pseudo-elements</dfn>
  represent portions of a document that have been given a particular status
  and are typically styled differently to indicate that status to the user.
  For example,
  selected portions of the document are typically highlighted
  (given alternate background and foreground colors, or a color wash)
  to indicate their selected status.
  The following <a>highlight pseudo-elements</a> are defined:

  <dl export>
    <dt><dfn>::selection</dfn>
    <wpt>
    css/css-pseudo/active-selection-001-manual.html
    css/css-pseudo/active-selection-002-manual.html
    css/css-pseudo/active-selection-004-manual.html
    css/css-pseudo/active-selection-011.html
    css/css-pseudo/active-selection-012.html
    css/css-pseudo/active-selection-014.html
    css/css-pseudo/active-selection-016.html
    css/css-pseudo/active-selection-018.html
    css/css-pseudo/active-selection-025.html
    css/css-pseudo/active-selection-027.html
    css/css-pseudo/active-selection-056.html
    css/css-pseudo/active-selection-057.html
    css/css-pseudo/active-selection-063.html
    css/css-pseudo/selection-contenteditable-011.html
    css/css-pseudo/selection-input-011.html
    css/css-pseudo/selection-textarea-011.html
    css/css-pseudo/textpath-selection-011.html
    </wpt>
    <dd>
      The ''::selection'' pseudo-element represents
      the portion of a document that has been selected
      as the target or object of some possible future user-agent operation(s).
      It applies, for example, to selected text within an editable text field,
      which would be copied by a copy operation or replaced by a paste operation.

    <dt><dfn>::target-text</dfn>
    <dd>
      The ''::target-text'' pseudo-element represents text
      directly targeted by the document URL’s [=url/fragment=], if any.

      Note: When a [=url/fragment|URL fragment=] targets an element,
      the '':target'' pseudo-element can be used to select it,
      but ''::target-text'' does not match anything.
      It only matches text that is itself targeted by the [[=url/fragment=]].

    <dt><dfn>::spelling-error</dfn>
    <dd>
      The ''::spelling-error'' pseudo-element represents
      a portion of text that has been flagged by the user agent as misspelled.
      <wpt>
      css/css-pseudo/spelling-error-001.html
      css/css-pseudo/spelling-error-002-manual.html
      css/css-pseudo/spelling-error-003-manual.html
      </wpt>

    <dt><dfn>::grammar-error</dfn>
    <dd>
      The ''::grammar-error'' pseudo-element represents
      a portion of text that has been flagged by the user agent as grammatically incorrect.
      <wpt>
      css/css-pseudo/grammar-error-001.html
      css/css-pseudo/grammar-error-002-manual.html
      css/css-pseudo/grammar-error-003-manual.html
      </wpt>
  </dl>

  The <a>highlight pseudo-elements</a>
  do not necessarily fit into the element tree,
  and can arbitrarily cross element boundaries without honoring its nesting structure.

  Note: A future level of CSS may introduce ways to create
  custom highlight pseudo-elements.

<h3 id="highlight-styling">
Styling Highlights</h3>

  The <a>highlight pseudo-elements</a> can only be styled
  by a limited set of properties that do not affect layout
  and can be applied performantly in a highly dynamic environment--
  and additionally (to ensure interoperability)
  whose rendering within the [[#highlight-bounds|required area]]
  is not dependent on the exact (UA-determined) bounds
  of the [=highlight overlay=].
  The following properties apply to the <a>highlight pseudo-elements</a>:

  <ul>
    <li>'color'
    <wpt>
    css/css-pseudo/active-selection-001-manual.html
    css/css-pseudo/active-selection-011.html
    css/css-pseudo/active-selection-016.html
    css/css-pseudo/active-selection-018.html
    </wpt>
    <li>'background-color'
    <wpt>
    css/css-pseudo/active-selection-002-manual.html
    css/css-pseudo/active-selection-012.html
    css/css-pseudo/active-selection-031.html
    </wpt>
    <li>'text-decoration' and its associated properties
    <wpt>
    css/css-pseudo/active-selection-004-manual.html
    css/css-pseudo/active-selection-014.html
    css/css-pseudo/active-selection-021.html
    css/css-pseudo/grammar-error-001.html
    css/css-pseudo/grammar-error-002-manual.html
    css/css-pseudo/grammar-error-003-manual.html
    css/css-pseudo/spelling-error-001.html
    css/css-pseudo/spelling-error-002-manual.html
    css/css-pseudo/spelling-error-003-manual.html
    </wpt>
    <li>'text-shadow'
    <li>'stroke-color', 'fill-color', and 'stroke-width'
    <wpt>
    css/css-pseudo/textpath-selection-011.html
    </wpt>
  </ul>

  Issue: Are there any other properties that should be included here?

  The 'color' property specifies the color of both the text
  and all line decorations (underline, overline, line-through)
  and emphasis marks ('text-emphasis')
  applied to the text
  by the <a>originating element</a> and its ancestors and descendants.

<!-- Add this back if for some reason someone wants to implement 'outline'?
  The outline, if supported, must be drawn
  around the union of the active portions of the <a>highlight overlay</a>
  precisely along the boundaries of those portions
  and not between congruent parts.
  The UA may use the outline styling of the nearest common ancestor
  of any continuous or discontinuous range
  rather than piecing together varying styles of outline
  into a single shape.
-->

  Note: Historically (and at the time of writing)
  only 'color' and 'background-color' have been interoperably supported.

<h3 id=highlight-ua-styles>
Default UA Styles</h3>

  The following additions are recommended for the default UA stylesheet:
  <pre class="lang-css">
    /* Represent default spelling/grammar error styling in an adjustable way */
    :root::spelling-error { text-decoration-line: spelling-error; }
    :root::grammar-error  { text-decoration-line: grammar-error; }
    /* Highlight targeted text */
    :root::target-text    { color: MarkText; background: Mark; }
  </pre>

  UAs may apply additional effects to enhance the presentation
  of highlighted content,
  for example dimming content other than the highlighted text
  or transitioning out a highlight style based on user interactions or timing.
  These are not controlled by CSS.

<h3 id=highlight-bounds>
Area of a Highlight</h3>

  <p>For each type of highlighting (see [[#highlight-selectors]])
  there exists a single <dfn>highlight overlay</dfn> for the entire document,
  the active portions of which are represented
  by the corresponding <a>highlight pseudo-element</a>.
  Each box owns the piece of the overlay corresponding to any text or replaced content
  directly contained by the box.

  <ul>
    <li>
      For text, the corresponding overlay must cover at least the entire em box
      and may extend further above/below the em box to the line box edges.
      Spacing between two characters may also be part of the overlay area,
      in which case it belongs to the innermost element that contains both characters
      and is selected when both characters are selected.
      <wpt>
      css/css-pseudo/selection-intercharacter-011.html
      css/css-pseudo/selection-intercharacter-012.html
      </wpt>
    <li>
      For replaced content, the associated overlay must cover at least the entire replaced object,
      and may extend outward to include the element's entire content box.
      <wpt>
      css/css-pseudo/active-selection-043.html
      </wpt>
    <li>
      The overlay may also include other areas within the border-box of an element;
      in this case, those areas belong to the innermost such element that contains the area.
    <li>
      For an [=inline-level box=], the overlay may extend outside its border edges
      in the [=block axis=] as far as the edges of its [=line box=].
  </ul>

  Issue: See
  <a href="http://lists.w3.org/Archives/Public/www-style/2008Nov/0022.html">F2F minutes</a>,
  <a href="http://lists.w3.org/Archives/Public/www-style/2008Oct/0268.html">dbaron's message</a>,
  <a href="http://lists.w3.org/Archives/Public/www-style/2010May/0247.html">Daniel's thread</a>,
  <a href="http://lists.w3.org/Archives/Public/www-style/2010May/0261.html">Gecko notes</a>,
  <a href="http://lists.w3.org/Archives/Public/www-style/2010May/0366.html">Opera notes</a>,
  <a href="http://lists.w3.org/Archives/Public/www-style/2010May/0280.html">Webkit notes</a>

  Issue: Not sure if this is the correct way of describing the way things work.

<h3 id=highlight-cascade>
Cascading and Per-Element Highlight Styles</h3>

  Each element draws its own active portions of the <a>highlight overlays</a>,
  which receives the styles specified by
  the corresponding <a>highlight pseudo-element</a> styles
  for which that element is the <a>originating element</a>.
  When multiple styles conflict,
  the winning style is determined by the cascade.
  When any supported property is not given a value by the cascade,
  it's value is determined by inheritance from
  the corresponding <a>highlight pseudo-element</a>
  of its <a>originating element</a>'s parent element
  (regardless of whether that property is an <a>inherited property</a>).

    <wpt>
    css/css-pseudo/active-selection-051.html
    css/css-pseudo/active-selection-052.html
    css/css-pseudo/active-selection-053.html
    css/css-pseudo/active-selection-054.html
    css/css-pseudo/cascade-highlight-004.html
    </wpt>

  <div class="example">
    For example, if the following rules were applied:
    <pre class="lang-css">
      p::selection      { color: yellow; background: green; }
      p > em::selection { color: orange; }
      em::selection     { color:    red; }
    </pre>
    to the following markup:
    <pre class="lang-markup">
      &lt;p>Highlight this &lt;em>and this&lt;/em>.&lt;/p>
    </pre>
    The selection highlight would be green throughout,
    with yellow text outside the <code>&lt;em></code> element
    and orange text inside it.
  </div>

    <wpt>
    css/css-pseudo/cascade-highlight-001.html
    </wpt>

  <p class="advisement">
  Authors wanting multiple selections styles should use
  <strong>'':root::selection''</strong>
  for their document-wide selection style,
  since this will allow clean overriding in descendants.
  ''::selection'' alone applies to every element in the tree,
  overriding the more specific styles of any ancestors.

  <div class="example">
    For example, if an author specified
    <pre class="lang-css">
      ::selection          { background: blue; }
      p.warning::selection { background:  red; }
    </pre>
    and the document included
    <pre class="lang-markup">
      &lt;p class="warning">Some &lt;strong>very important information&lt;/strong>&lt;/p>
    </pre>
    The highlight would be blue over “very important information”
    because the <code>&lt;strong></code> element´s ''::selection''
    also matches the ''::selection { background: blue; }'' rule.
    (Remember that ''*'' is implied when a tag selector is missing.)
    The style rules that would give the intended behavior
    (red highlight within <code>p.warning</code>, blue elsewhere) are
    <pre class="lang-css">
      :root::selection     { background: blue; }
      p.warning::selection { background:  red; }
    </pre>
  </div>

    <wpt>
    css/css-pseudo/cascade-highlight-002.html
    </wpt>


  The UA must use its own highlight colors for ''::selection'' only
  when neither 'color' nor 'background-color' has been specified by the author.

  Note: This paired-cascading behavior
  does not allow using the normal cascade
  (i.g. '':root::selection'' rules in the <a>UA style sheet</a>)
  to represent the OS default selection colors.
  However it has been interoperably implemented in browsers
  and is thus probably a Web-compatibility requirement.

<h3 id="highlight-painting">
Painting the Highlight</h3>

    <wpt>
    css/css-pseudo/active-selection-014.html
    css/css-pseudo/active-selection-041.html
    css/css-pseudo/active-selection-045.html
    css/css-pseudo/highlight-painting-001.html
    css/css-pseudo/highlight-painting-002.html
    css/css-pseudo/highlight-painting-003.html
    </wpt>

<h4 id="highlight-backgrounds">
Backgrounds</h4>

  Each <a>highlight pseudo-element</a> draws its background
  over the corresponding portion of the <a>highlight overlay</a>,
  painting it
  immediately below any positioned descendants
  (i.e. just before step 8 in <a href="https://www.w3.org/TR/CSS22/zindex.html#painting-order">CSS2.2&sect;E.2</a>).
  <!-- Its outline, if any, is painted immediately over its background. -->
  The ''::selection'' overlay is drawn
  over the ''::target-text'' overlay which is drawn
  over the ''::spelling-error'' overlay
  which is drawn over the ''::grammar-error'' overlay.

  <wpt>
  css/css-pseudo/selection-overlay-and-grammar-001.html
  css/css-pseudo/selection-overlay-and-spelling-001.html
  css/css-pseudo/highlight-z-index-001.html
  css/css-pseudo/highlight-z-index-002.html
  </wpt>

<h4 id="highlight-shadows">
Shadows</h4>

  Any 'text-shadow' applying to a [=highlight pseudo-element=]
  is drawn over its corresponding [=highlight overlay=] background.
  Such text shadows also stack over each other
  (and over any original 'text-shadow' applied to the text and its decorations,
  which continues to apply).

  Note: Since each [=highlight overlay=] background
  is drawn over any shadows belonging to the layer(s) below,
  a [=highlight overlay=] background can obscure lower-level shadows.

<h4 id="highlight-text">
Text and Text Decorations</h4>

  A <a>highlight pseudo-element</a>
  suppresses the normal drawing of any associated text
  (and any text decorations applied to that text).
  Instead the topmost active <a>highlight overlay</a>
  redraws that text
  (and its decorations)
  over the <a>highlight overlay</a> backgrounds
  <!-- (and outlines, if any) -->
  using its own 'color'.

  For this purpose,
  ''currentColor'' on a [=highlight pseudo-element=]’s 'color' property represents
  the 'color' of the next <a>highlight pseudo-element</a> layer below,
  falling back finally to the colors that would otherwise have been used
  (those applied by the [=originating element=] or
  an intervening [=pseudo-element=] such as ''::first-line'' or ''::first-letter'').

  Any text decorations introduced by each <a>highlight pseudo-element</a>
  are stacked in the same order as their backgrounds
  over the text’s original decorations
  and are all drawn, in their own colors.

  Note: The element’s own text decorations
  (both <a href="https://www.w3.org/TR/css-text-decor/#line-decoration">line decorations</a>
  and <a href="https://www.w3.org/TR/css-text-decor/#emphasis-marks">emphasis marks</a>)
  are thus drawn in the pseudo-element’s own 'color'
  when that is not ''currentColor'',
  regardless of their original color or fill specifications.

<h4 id="highlight-replaced">
Replaced Elements</h4>

  For non-replaced content, the UA must honor the 'color' and 'background-color'
  (including their alpha channels) as specified.
  However, for replaced content, the UA should create a semi-transparent wash
  to coat the content so that it can show through the selection.
  This wash should be of the specified 'background-color' if that is not ''transparent'',
  else of the specified 'color';
  however the UA may adjust the alpha channel.
  <wpt>
  css/css-pseudo/selection-paint-image.html
  </wpt>

<h3 id="highlight-security">
Security and Privacy Considerations</h3>

  Because the styling of spelling and grammar errors
  can leak information about the contents of a user's dictionary
  (which can include the user's name and even includes the contents of his/her address book!)
  UAs that implement ''::spelling-error'' and ''::grammar-error''
  must prevent pages from being able to read
  the styling of such highlighted segments.

<h2 id="treelike">
Tree-Abiding Pseudo-elements</h2>

  <dfn export lt="tree-abiding|tree-abiding pseudo-element">Tree-abiding pseudo-elements</dfn> always fit within the box tree.
  They <a lt="inheritance">inherit</a> any inheritable properties from their <a>originating element</a>;
  non-inheritable properties take their <a>initial values</a> as usual.
  [[CSS-CASCADE-4]]

<h3 id="generated-content">
Generated Content Pseudo-elements: ''::before'' and ''::after''</h3>

  When their computed 'content' value is not ''content/none'',
  these pseudo-elements generate boxes
  as if they were immediate children of their <a>originating element</a>,
  with content as specified by 'content'.

  <dl>
    <dt><dfn>::before</dfn>
    <dd>Represents a styleable child pseudo-element
    immediately before the <a>originating element</a>'s actual content.

    <dt><dfn>::after</dfn>
    <dd>Represents a styleable child pseudo-element
    immediately after the <a>originating element</a>'s actual content.
  </dl>

  These pseudo-elements can be styled
  exactly like any normal document-sourced element in the document tree;
  all properties that apply to a normal element
  likewise apply to ''::before'' and ''::after''.

  <div class="example">
    For example, the following rule inserts the string “Note: ”
    before the content of every <code>&lt;p></code> element
    whose <code>class</code> attribute has the value <code>note</code>:

    <pre class="lang-css">p.note::before { content: "Note: " }</pre>

    Since the initial value of 'display' is ''display/inline'',
    this will generate an inline box.
    Like other inline children of <code>&lt;p></code>,
    it will participate in <code>&lt;p></code>’s inline formatting context,
    potentially sharing a line with other content.
  </div>

  As with the content of regular elements,
  the generated content of ''::before'' and '':after'' pseudo-elements
  can form part of any ''::first-line'' and ''::first-letter'' pseudo-elements
  applied to its <a>originating element</a>.

<h3 id="marker-pseudo">
List Markers: the ''::marker'' pseudo-element</h3>

  The <dfn>::marker</dfn> pseudo-element represents
  the automatically generated [=marker box=] of a [=list item=].
  (See [[CSS-DISPLAY-3]] and [[CSS-LISTS-3]].)

  <!-- under discussion in https://github.com/w3c/csswg-drafts/issues/1442 and https://github.com/w3c/csswg-drafts/issues/4506
  Inheritance for a ''::marker'' pseudo-element ignores any ''::first-line'' styles -->
  The contents of a ''::marker'' are ignored (not selected) by ''::first-letter''.

  ISSUE: Interaction of ''::marker'' and ''::first-line'' is currently under discussion in <a href='https://github.com/w3c/csswg-drafts/issues/4506'>Issue 4506</a>.

  Only a limited set of properties can be used on the ''::marker'' pseudo-element.
  This list is defined in [[css-lists-3#marker-properties]].

  The  ''::before::marker'' or ''::after::marker'' selectors
  are valid and
  can be used to represent the [=marker boxes=]
  of ''::before'' or ''::after'' pseudo-elements that happen to be [=list items=].
  However ''::marker::marker'' is invalid,
  and the computed value of 'display' on ''::marker''
  loses its ''display/list-item'' aspect.

<h3 id="placeholder-pseudo">
Placeholder Input: the ''::placeholder'' pseudo-element</h3>

  The <dfn>::placeholder</dfn> pseudo-element represents
  placeholder text in an input field:
  text that represents the input
  and provides a hint to the user on how to fill out the form.
  For example, a date-input field
  might have the placeholder text “YYYY/MM/DD”
  to clarify that numeric dates are to be entered in year-month-day order.

  Note: There also exists a '':placeholder-shown'' pseudo-<em>class</em>,
  which applies to (real) elements while they are showing placeholder text,
  and can be used to style such elements specially.
  ''::placeholder'' specifically selects
  a pseudo-element representing the placeholder <em>text</em>,
  and is thus relatively limited in its abilities.

  All properties that apply to the ''::first-line'' pseudo-element
  also apply to the ''::placeholder'' pseudo-element.

  In interactive media, placeholder text is often hidden once the user has entered input;
  however this is not a requirement, and both the input value and the placeholder text may be visible simultaneously.
  The exact behavior is UA-defined.
  Note that in static media (such as print)
  placeholder text will be present even after the user has entered input.

  Issue: Authors seem to want 'text-align' on the list of supported properties.
  See e.g. <a href="http://css-tricks.com/almanac/selectors/p/placeholder/">comments here</a>.

  Note: It's been requested that ''::placeholder'' also refer to
  a placeholder which has a corresponding element in the element tree.
  It's not clear how this should work, but it may be worth doing.
  See <a href="https://github.com/w3c/csswg-drafts/issues/2517">Issue 2417</a>.

<h3 id="file-selector-button-pseudo">
File Selector Button: the ''::file-selector-button'' pseudo-element</h3>

  The <dfn>::file-selector-button</dfn> pseudo-element targets the ''&lt;button>''
  inside an ''&lt;input>'' element with <code>type=file</code>, if the UA
  renders such a button.

  There is no restriction on which properties apply to the
  ''::file-selector-button'' pseudo-element.

  <div class="example" id="file-selector-button-example">
    For example, the following example should show a green border around the
    file selector button:

    <pre class="lang-css">::file-selector-button { border: 3px solid green }</pre>
  </div>

<h2 id="interactions">
Overlapping Pseudo-element Interactions</h2>

  <div class="example" id="overlapping-example">
    Recall that
    <ul>
      <li>
        the contents of ''::before'' and ''::after'' are selected
        exactly as if they were normal elements in the document source tree
      <li>
        the ''::first-letter'' boundaries are tightly wrapped around the first letter text,
        and ''::first-letter'' is constrained to exist solely on the first formatted line.
      <li>
        the ''::first-line'' start is inserted just inside the containing block's element boundary,
        and its end after the close of all content on the line
    </ul>

    The following CSS and HTML example
    illustrates how overlapping pseudo-elements interact:

    <xmp class="lang-html">
      <style>
      p { color: red; font-size: 12pt }
      p::first-letter { color: green; font-size: 200% }
      p::first-line { color: blue }
      </style>

      <p>Some text that ends up on two lines</p>
    </xmp>

    The first letter of each P element will be green with a font size of ’24pt'.
    The rest of the first formatted line will be blue
    while the rest of the paragraph will be red.

    Assuming that a line break will occur before the word "ends",
    the <a>fictional tag sequence</a> for this fragment might be:
    <xmp class="lang-html">
      <p>
        <p::first-line>
          <p::first-letter>
            S
          </p::first-letter>
          ome text that
        </p::first-line>
        ends up on two lines
      </p>
    </xmp>
  </div>

<h2 id="cssom">
Additions to the CSS Object Model</h2>

<h3 id="CSSPseudoElement-interface">
{{CSSPseudoElement}} Interface</h3>

  The {{CSSPseudoElement}} interface
  allows pseudo-elements to be event targets.

  <pre class="idl">
    [Exposed=Window]
    interface CSSPseudoElement : EventTarget {
        readonly attribute CSSOMString type;
        readonly attribute Element element;
    };
  </pre>

  The <dfn attribute for=CSSPseudoElement>type</dfn> attribute
  is a string representing the type of the pseudo-element.
  This can be one of the following values:

  <dl>
    <dt><code>"::before"</code>
    <dd>Represents the ''::before'' pseudo-element.
    <dt><code>"::after"</code>
    <dd>Represents the ''::after'' pseudo-element.
    <dt><code>"::marker"</code>
    <dd>Represents the ''::marker'' pseudo-element.
  </dl>

  The <dfn attribute for=CSSPseudoElement>element</dfn> attribute is the
  [=originating element=] of the pseudo-element.

  Note: This interface may be extended in the future
  to other pseudo-element types
  and/or to allow setting style information
  through a {{CSSStyleDeclaration}} <code>style</code> attribute.
  The current functionality is limited
  to that which is needed to support [[web-animations-1]].

<h3 id="window-interface">
{{pseudo()}} method of the {{Element}} interface</h3>

  A new method is added to the {{Element}} interface to retrieve
  pseudo-elements created by a given element for a given type:
  <pre class="idl">
    partial interface Element {
      CSSPseudoElement? pseudo(CSSOMString type);
    };
  </pre>

  <div algorithm>
    The <dfn method for=Element title="pseudo(type)" id="dom-element-pseudo">pseudo(CSSOMString type)</dfn> method
    is used to retrieve the {{CSSPseudoElement}} instance
    of the type matching {{type!!argument}}
    associated with the element.
    When it is called,
    execute the following steps:

    1. [=CSS/Parse=] the {{type!!argument}} argument as a <<pseudo-element-selector>>,
      and let |type| be the result.

    2. If |type| is failure,
      return null.

    3. Otherwise, return the {{CSSPseudoElement}} object
      representing the pseudo-element
      that would match the selector |type|
      with [=this=] as its [=originating element=].
  </div>

  Return values that represent the same [=pseudo-element=]
  on the same [=originating element=]
  must be, insofar as observable,
  always the same {{CSSPseudoElement}} object.
  (The UA may drop or regenerate the object for convenience or performance
  if this is not observable.)

  ISSUE: The identity, lifetime, and nullness of the return value
  (and potential error cases)
  of the {{pseudo()}} method is still under discussion.
  See <a href="https://github.com/w3c/csswg-drafts/issues/3607">Issue 3607</a>
  and <a href="https://github.com/w3c/csswg-drafts/issues/3603">Issue 3603</a>.

<h2 id="css2-compat">
Compatibility Syntax</h2>

  <p>For compatibility with existing style sheets written against CSS Level 2 [[CSS2]],
  user agents must also accept the previous one-colon notation
  (<code>:before</code>, <code>:after</code>, <code>:first-letter</code>, <code>:first-line</code>)
  for the ''::before'', ''::after'', ''::first-letter'', and ''::first-line'' pseudo-elements.

<h2 class="no-num" id="changes">
Changes</h2>

  Significant changes since the <a href="https://www.w3.org/TR/2019/WD-css-pseudo-4-20190225/">25 February 2019 Working Draft</a> include:

  <ul>
    <li>Added ''::target-text'' pseudo-element.
    (<a href="https://github.com/w3c/csswg-drafts/issues/5522">Issue 5522</a>)
    <li>Removed ''::inactive-selection''.
    (<a href="https://github.com/w3c/csswg-drafts/issues/4579">Issue 4579</a>)
    <li>Added ''::file-selectors-button'' pseudo-element.
    (<a href="https://github.com/w3c/csswg-drafts/issues/5049">Issue 5049</a>)
    <li>Adjusted rules for inheritance of properties from ''::first-line''
    to handle inheritable vs non-inheritable properties differently,
    specifically excluded applicability of properties that control [=writing mode=] because they affect the cascade,
    and defined interaction with custom properties.
    (<a href="https://github.com/w3c/csswg-drafts/issues/1097">Issue 1097</a>)
    <li>Added 'ruby-position' to properties allowed on ''::first-line'',
    analogous with 'text-emphasis-position'.
    (<a href="https://github.com/w3c/csswg-drafts/issues/2998">Issue 2998</a>)
    <li>Included spaces between the first letter and its surrounding punctuation in ''::first-letter''.
    (<a href="https://github.com/w3c/csswg-drafts/issues/5154">Issue 5154</a>)
    <li>Defined interaction of ''::marker'' and ''::first-letter''.
    <li>Made ''::before::marker'' and ''::after::marker'' valid.
    (<a href="https://github.com/w3c/csswg-drafts/issues/1793">Issue 1793</a>)
    <li>Moved the <a href="https://www.w3.org/TR/css-lists-3/#marker-properties">list of properties</a> applying to ''::marker'' to [[CSS-LISTS-3]]
    (also adding 'content', 'unicode-bidi', and 'direction').
    <li>Added ''::marker'' to types allowed for {{CSSPseudoElement}} interface.
    (<a href="https://github.com/w3c/csswg-drafts/issues/3763">Issue 3763</a>)
    <li>Clarified return value of {{pseudo()}}.
    (Issues <a href="https://github.com/w3c/csswg-drafts/issues/3603">3603</a> and <a href="https://github.com/w3c/csswg-drafts/issues/3607">3607</a>)
    <li>Allowed highlight overlay of inline-level boxes to extend to the line box edges.
    (Issues <a href="https://github.com/w3c/csswg-drafts/issues/5395">5395</a> and <a href="https://github.com/w3c/csswg-drafts/issues/4624">4624</a>)
    <li>Clarified that ''currentColor'' on a [=highlight pseudo-element=]
    uses the color that would be used if the text were not “highlighted”,
    even if that color was provided by a pseudo-element like ''::first-line''.
    (<a href="https://github.com/w3c/csswg-drafts/issues/4625">Issue 4625</a>)
    <li>Defined how 'text-shadow' interacts with [=highlight pseudo-elements=].
    (<a href="https://github.com/w3c/csswg-drafts/issues/3932">Issue 3932</a>)
    <li>Improved the [[#highlight-ua-styles|default UA style sheet]] rules applying to highlight pseudo-elements.
  </ul>

  Changes since the <a href="https://www.w3.org/TR/2016/WD-css-pseudo-4-20160607/">7 June 2016 Working Draft</a> include:

  <ul>
    <li>Specified ''spelling-error'' and ''grammar-error'' with ''::spelling-error'' and ''::grammar-error'' in the UA stylesheet.
    <li>Redefined value propagation between parent/child highlight pseudo-elements to use inheritance rather than cascading. See discussion in and linked from <a href="https://github.com/w3c/csswg-drafts/issues/2474">Issue 2474</a>.
    <li>Refined list of supported properties for highlight pseudo-elements, e.g. adding 'stroke-color'/'fill-color', removing 'outline', etc.
    <li>Clarified how text and text decoration colors are painted for highlight pseudo-elements.
    <li>Added the {{CSSPseudoElement/element}} attribute to the {{CSSPseudoElement}} interface.
    <li>Changed the values of the {{CSSPseudoElement/type}} attribute on the {{CSSPseudoElement}} interface to match the corresponding pseudo-elements.
    <li>Reduced supported types of {{CSSPseudoElement}} and removed unimplemented <code>style</code> attribute.
    <li>Changed <code>window.getPseudoElements(elem,type)</code> to <code>Element.pseudo(type)</code>.
    <li>Miscellaneous minor clarifications and fixes.
  </ul>

<h2 class="no-num" id="acknowledgements">
Acknowledgements</h2>

  The editors would like to specifically thank the following individuals for their
  contributions to this specification:
  Tab Atkins,
  David Baron,
  Oriol Brufau,
  Razvan Caliman,
  Chris Coyier,
  Anders Grimsrud,
  Vincent Hardy,
  François Remy.
