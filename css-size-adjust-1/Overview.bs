<pre class="metadata">
Title: CSS Text Size Adjustment Module Level 1
Status: ED
Work Status: Revising
Shortname: css-size-adjust
Group: csswg
Level: 1
TR: https://www.w3.org/TR/css-size-adjust/
ED: https://drafts.csswg.org/css-size-adjust/
Editor: L. David Baron, Mozilla https://www.mozilla.org/, https://dbaron.org/, w3cid 15393
Editor: Tantek &Ccedil;elik, Mozilla https://www.mozilla.org/, http://tantek.com/, w3cid 1464
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Abstract: This module contains features of CSS relating to one possible mechanism for adapting pages designed for desktop computer displays for display on smaller screens such as those of mobile phones.  This mechanism involves displaying a scaled down display of the Web page and allowing the user to pan and zoom within that display, but within that scaled down display making certain text and similar elements larger than specified by the page author in order to ensure that when a block of wrapped text is zoomed to the width of the device (so it can be read without side-to-side scrolling for each line), the text is large enough to be readable.
Status Text: <p>The following features are at risk:</p> <ul> <li>the reference to [[!CSS-TEXT-4]]&apos;s 'text-wrap' property</li> </ul>
</pre>

<pre class="link-defaults">
spec: css-text-4; type: property; text: text-wrap
</pre>

Introduction {#intro}
=====================

  A common mechanism for displaying Web pages that were designed for
  large desktop displays on much smaller displays such as those of
  mobile phones involves allowing the user to pan and zoom around within
  a view of the Web page drawn as though it were drawn into the width of
  a typical desktop Web browser display.  The ability to pan and zoom
  the page lets the user both see an overview of the page and zoom in to
  specific parts to read or interact with them.

  One common problem with this type of interaction occurs when the
  user wants to read a large block of text.  It might be that a block of
  text within this desktop-formatted page might be laid out so that when
  the user zooms in so that the text is large enough to read, each line
  of text is wider than the display on the small device.  This means the
  user needs to scroll side to side to read <em>each line of text</em>,
  which is a serious inconvenience to the user.

  One way for software that displays Web pages or other CSS-formatted
  content on a mobile device is to make some of the text larger so that
  this problem does not occur.  The goal of this enlargement is to make
  the text big enough so that when the block it is in is scaled to the
  width of the display, the text is large enough to read.  At the same
  time, this needs to be done with minimal disruption to the overall
  design of the page.

  Even on a display which is large enough to prevent horizontal scrolling,
  when a user does not zoom into the page, text size adjustment may still
  be desirable. For example, if the viewport rules [[!CSS-DEVICE-ADAPT]]
  describe a default zoom, text may need to be adjusted in order to be
  readable at that default zoom level.

  While implementations of CSS are not required to use this
  technique, this module describes how implementations of CSS that do
  use this technique must do so.
  In other words, while implementations of CSS are not required to
  implement this module, this module nonetheless places requirements on
  implementations of this module.

  This module describes how this size adjustment works and describes a
  new CSS property that authors of CSS can use to provide hints to the
  implementation about which text or other elements should or should not
  be enlarged.

Module interactions {#placement}
--------------------------------

  This module adds additional features that are not defined in
  [[CSS21]].  These features may lead to a different size being computed
  than would be computed when following [[CSS21]] alone.

Values {#values}
----------------

  This specification follows the <a href="https://www.w3.org/TR/CSS21/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]].
  Value types not defined in this specification are defined in CSS Values & Units [[!CSS-VALUES-3]].
  Other CSS modules may expand the definitions of these value types.

  In addition to the property-specific values listed in their definitions,
  all properties defined in this specification
  also accept the <a>CSS-wide keywords</a> keywords as their property value.
  For readability they have not been repeated explicitly.

Size adjustment {#default-adjustment}
=====================================

This section defines the default size adjustment rules.  These rules
are then referenced by the definition of the 'text-size-adjust' property
in the following section.

The result of the adjustment must be a computed value of the 'font-size'
property and/or the 'line-height' property.

Note: Therefore, this adjustment is polyfill-able.

Different User Agents are quite free to make different decisions about viewing conditions,
which therefore means that the same page may be adjusted differently in different User Agents.
In general, the User Agent is better able to make these decisions than the page author.
Page authors are recommended to test a variety of User Agents, devices, and viewing conditions
when authoring their pages. Text size adjustment can be observed, controlled, and disabled by
page authors.

Types of boxes adjusted {#default-adjustment-types}
---------------------------------------------------

The default size adjustment affects text and form controls, whether
those form controls contain text (e.g., text inputs, selects) or do not
(e.g., radio buttons, checkboxes).

Adjustment Conditions {#default-adjustment-conditions}
------------------------------------------------------

A User Agent may consider any information when determining which elements
get adjusted.

Note: In general, User Agents are trying to determine which elements are
integral to the structure of the page, and thus shouldn't be adjusted,
and which elements are allowed to flow freely and thus can be adjusted
without undesirable rendering artifacts.

Here are some criteria which User Agents may consider when making this
determination:
<ul>
  <li>When the total amount of text in the block formatting context (see
  [[!CSS21]]) (excluding text inside descendant block formatting
  contexts) is approximately smaller than the amount that would require
  wrapping to more than one or two lines within that context's
  width. This is a signal that text doesn't need to be autosized.</li>

  <li>When the objects to be adjusted are inside a block-level or
  ''display: inline-block'' element with a 'height' other than
  ''height/auto'' (see [[!CSS21]]). This is a signal that the elements
  are structural to the page content.</li>

  <li>When the objects to be adjusted are inside a
  ''display: inline-block'' element
  with a 'width' other than ''width/auto'' (see
  [[!CSS21]]). This is a signal that the elements
  are structural to the page content.</li>

  <li>When the objects to be adjusted have 'white-space' of ''white-space/pre'' or
  ''white-space/nowrap'' (see [[!CSS21]]) or a 'text-wrap' of ''text-wrap/nowrap'' (see
  [[!CSS-TEXT-4]]).</li>

  <li>Editability of an element, either because it's a form element or because it is ''contenteditable''</li>

  <li>Element contents; empty elements might not benefit from being autosized</li>

  <li>Elements which have compute styles that are fairly unique among the page. These are often structural
  and might provide more broken layout than they benefit from size adjustment</li>

  <li>Elements lay out to be extremely wide compared to the viewport. These would cause horizontal scrolling
  even on a desktop machine</li>

  <li>Elements which are extremely narrow. These are usually structural</li>

  <li>Elements which only contain whitespace</li>
</ul>

Calculation of adjustment {#default-adjustment-calculation}
-----------------------------------------------------------

A User Agent may consider any information when determining the magnitude
of adjustment.

Note: In general, User Agents are trying to determine how big to make an
element so that it is readable, and how small it has to be to not overflow
or get clipped by other nearby elements.

Here are some criteria which User Agents may consider when making this
determination:
<ul>
  <li>Preferences of the renderer or the renderer's user indicating the desired
  <dfn>minimum readable text size</dfn></li>

  <li>Preferences of the page author indicating the author's desired font size,
  as specified by the 'font-size' property</li>

  <li>Viewport rules and default zoom level [[!CSS-DEVICE-ADAPT]]</li>

  <li>Any style information, such as the specified or computed value of the
  'line-height' property</li>

  <li>Layout size compared to viewport size</li>

  <li>Layout information and styles of other, similar elements on the page</li>

  <li>A maximum adjustment that no element should surpass</li>

  <li>Device size and weight; whether or not devices are usually held or placed on a desk</li>

  <li>Usual reading distance to device</li>
</ul>

Size adjustment control: the 'text-size-adjust' property {#adjustment-control}
==============================================================================

  <pre class=propdef>
      Name: text-size-adjust
      Value: auto | none | &lt;percentage&gt;
      Initial: auto
      Applies to: all elements
      Inherited: yes
      Percentages: see below
      Computed value: specfied keyword or percentage
      Animation type: by computed value
      Canonical order: N/A
  </pre>

  <dl dfn-for="text-size-adjust" dfn-type="value">
    <dt><dfn>auto</dfn></dt>
      <dd>Renderers must use the <a href="#default-adjustment">default size adjustment</a> that is best tailored to the individual user's and device's viewing conditions.</dd>
      <p class="note">Note: On most desktop machines, the best adjustment is no adjustment.</p></dd>
    <dt><dfn>none</dfn></dt>
      <dd>Renderers must not adjust sizes.</dd>
    <dt><dfn>&lt;percentage&gt;</dfn></dt>
      <dd>Provided as a hint to the User Agent about a suggested adjustment amount. User agents may consider this percentage value when computing an adjusted text size.</dd>
      <p class="note">Note: Therefore, if a User Agent naively applies the percentage to the specified text size, 'text-size-adjust: 100%;' is equivalent to 'text-size-adjust: none;'.</p></dd>
  </dl>

Determining and Reacting to Adjustment Effects {#adjustment-reaction}
=====================================================================

This section is non-normative

Different User Agents are quite free to make different decisions about viewing conditions,
which therefore means that the same page may be adjusted differently in different User Agents.
In general, the User Agent is better able to make these decisions than the page author; however,
there are some situations where the page author needs to at least know how the User Agent
has adjusted the page. Because the result of the adjustment must be a new computed value of the
'font-size' or 'line-height' properties, the result of the adjustment may be discovered in
JavaScript by using the 'getComputedStyle()' function.

    <div class="example">
        The 'getComputedStyle()' function can be used to determine the effects of the adjustment.
        <pre>
        var target = document.getElementById("target");
        var adjustedFontSize = window.getComputedStyle(target).getPropertyValue("font-size");
        </pre>
    </div>

    <div class="example">
        Not only can a page determine the User Agent's adjustment, but it can react to such adjustment.
        <pre>
        var target = document.getElementById("target");
        var adjustedFontSize = window.getComputedStyle(target).getPropertyValue("font-size");
        if (canComputeOtherFontSize(target, adjustedFontSize)) {
            var otherFontSize = computeOtherFontSize(target);
            target.style.setProperty("text-size-adjust", "none");
            target.style.setProperty("font-size", otherFontSize);
        }
        </pre>
    </div>

Acknowledgments {#acknowledgments}
==================================

  The editors would like to thank:
  Wenson Hsieh.

