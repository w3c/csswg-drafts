<style type="text/css">
  table.event-state-transitions {
    width: 100%;
    border-spacing: 0px;
    border-collapse: collapse;
  }
  table.event-state-transitions th:first-child {
    width: 30%;
  }
  table.event-state-transitions th {
    text-align: center;
  }
  table.event-state-transitions td {
    padding: 0.2em 1em;
    border: 1px solid black;
  }
</style>

<pre class='metadata'>
Title: CSS Animations Level 2
Status: ED
Work Status: Exploring
Shortname: css-animations-2
Level: 2
Group: csswg
ED: https://drafts.csswg.org/css-animations-2/
Editor: L. David Baron, Mozilla https://www.mozilla.org/, https://dbaron.org/, w3cid 15393
Editor: Brian Birtles, Mozilla https://www.mozilla.org/, bbirtles@mozilla.com, w3cid 43194
!Issues List: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?component=Animations&list_id=36653&product=CSS&query_format=advanced&resolution=---">In Bugzilla</a>

Abstract: This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.
Ignored Vars: auto-rewind
</pre>
<pre class="anchors">
urlPrefix: https://drafts.csswg.org/web-animations-1/; type: dfn; spec: web-animations
    text: active duration
    text: active phase
    text: active time
    text: after phase
    text: animation
    text: animation class
    text: animation effect
    text: animation playback rate
    text: before phase
    text: composite operation
    text: current iteration
    text: current time
    text: fill mode
    text: global animation list
    text: idle play state
    text: idle phase
    text: iteration count
    text: iteration duration
    text: iteration start
    text: keyframe
    text: pause an animation
    text: paused play state
    text: pending play state
    text: playback direction
    text: play an animation
    text: play state
    text: sampling
    text: start delay
    text: target element
    text: target effect
    text: target effect end
    text: unresolved
urlPrefix: https://drafts.csswg.org/css-writing-modes-4/; type: dfn; spec: css-writing-modes-4
    text: equivalent physical property; url: logical-to-physical
</pre>

<h2 id="delta">Delta specification</h2>

<p>This is a delta specification, meaning that it currently contains
only the differences from CSS Animations Level 1 [[!CSS3-ANIMATIONS]].
Once the Level 1 specification is closer to complete, it will be merged
with the additions here into a complete level 2 specification.</p>

# Animations # {#animations}

Changes to any of the animation properties defined in this specification
cause the corresponding {{CSSAnimation}} object and its associated objects
to be updated according to the correspondance between these properties
and Web Animations concepts defined in [[#keyframes]].

However, if the author modifies the animation
using the Web Animations programming interface,
the changes from the programming interface take precedence as follows:

*   After a successful call to {{KeyframeEffect/setKeyframes()}}
    on the {{KeyframeEffect}} associated with a {{CSSAnimation}},
    any subsequent change to matching ''@keyframes'' rules or the resolved value
    of the 'animation-timing-function' property for the target element
    will not be reflected in that animation.

    However, if the last matching ''@keyframes'' rule is removed
    the animation must still be canceled.

*   After a successful call to {{AnimationEffect/updateTiming()}}
    on the {{KeyframeEffect}} associated with a {{CSSAnimation}},
    for each property included in the
    {{AnimationEffect/updateTiming(timing)/timing}} parameter,
    any subsequent change to a corresponding animation property
    will not be reflected in that animation.

    For example, calling
    <code>cssAnimation.effect.updateTiming({ duration: 1000 })</code>
    would cause subsequent changes to 'animation-duration' to be ignored
    whilst changes to 'animation-delay' would still be reflected
    in the {{KeyframeEffect}}'s timing.

*   After a successful call to {{Animation/play()}} or {{Animation/pause()}}
    on a {{CSSAnimation}},
    any subsequent change to the 'animation-play-state' will no longer
    cause the {{CSSAnimation}} to be played or paused
    as defined in [[#animation-play-state]].

*   After a successful call to {{Animation/reverse()}} on a {{CSSAnimation}}
    or after successfully setting the {{Animation/startTime}}
    on a {{CSSAnimation}},
    if, as a result of that call the [=play state=] of the
    {{CSSAnimation}} changes to or from the [=paused play state=],
    any subsequent change to the 'animation-play-state' will no longer
    cause the {{CSSAnimation}} to be played or paused
    as defined in [[#animation-play-state]].

    The requirement for a change to or from the [=paused play state=]
    ensures that even after calling
    {{Animation/reverse()}} or setting the {{Animation/startTime}}
    on a running animation,
    the animation continues to observe changes in 'animation-play-state'.

*   After successfully setting the {{Animation/effect}} of a {{CSSAnimation}}
    to <code>null</code>
    or some {{AnimationEffect}} other than the original {{KeyframeEffect}},
    all subsequent changes to animation properties other than
    'animation-name' or 'animation-play-state'
    will not be reflected in that animation.
    Similarly, any change to matching ''@keyframes'' rules will not be reflected
    in that animation.
    However, if the last matching ''@keyframes'' rule is removed
    the animation must still be canceled.

Note, the reference to a successful call in the above rules
is necessary to ensure that
when an exception is thrown by any of these methods,
the override behavior is <em>not</em> applied.

## Owning element ## {#owning-element-section}

The <dfn>owning element</dfn> of an animation refers to the element or
pseudo-element to which the 'animation-name' property was applied that generated
the animation.

If an animation generated using the markup defined in this specification is
later disassociated from that markup by an update to the computed value of the
'animation-name' property on the <a>owning element</a>, the animation is
disassociated from its <a>owning element</a> (that is, it has no <a>owning
element</a> from that point forwards).

<div class="note">

In the example below, <code>animation</code>'s initial <a>owning element</a>
is <code>elem</code>. <code>animation</code> is disassociated from
<code>element</code> through an update to the computed value of
<code>elem</code>'s 'animation-name' property.

<pre class="example lang-javascript">
elem.style.animation = 'spin 1s';
let animation = elem.getAnimations()[0]; // animation's owning element is elem
elem.style.animation = ''; // animation no longer has an owning element
</pre>

Note that although the <a>owning element</a> is often equal to the <a>target
element</a> of an animation's <a>target effect</a>, this is not always the case.
The following example demonstrates some of the situations where these two
elements may differ.

<pre class="example lang-javascript">
elem.style.animation = 'move 1s';
let animation = elem.getAnimations()[0];
// animation.effect.target == elem == animation's owning element

animation.effect.target = elem2;
// animation.effect.target == elem2 != animation's owning element

animation.effect = null;
// animation.effect?.target is undefined != animation's owning element
</pre>

</div>

## Animation composite order ## {#animation-composite-order}

<a spec='web-animations'>Animations</a> generated from the markup defined in
this specification have an <a>animation class</a> of &lsquo;CSS
Animation&rsquo;.

CSS Animations <em>with</em> an <a>owning element</a> have a <em>later</em>
composite order than CSS Transitions but an <em>earlier</em> composite order
than animations without a specific <a>animation class</a>.

Within the set of CSS Animations <em>with</em> an <a>owning element</a>, two
animations <var>A</var> and <var>B</var> are sorted in composite order (first to
last) as follows:

1.  If the <a>owning element</a> of <var>A</var> and <var>B</var>
    differs, sort <var>A</var> and <var>B</var> by <a>tree order</a>
    of their corresponding <a>owning elements</a>.
    With regard to pseudo-elements, the sort order is as follows:

    *   element
    *   ::marker
    *   ::before
    *   any other pseudo-elements not mentioned specifically in this list,
        sorted in ascending order by the Unicode codepoints that make up each selector
    *   ::after
    *   element children

1.  Otherwise, sort <var>A</var> and <var>B</var> based on their position in the
    computed value of the 'animation-name' property of the (common) <a>owning
    element</a>.

The composite order of CSS Animations <em>without</em> an <a>owning element</a>
is based on their position in the <a>global animation list</a>.

Issue: This differs from the behavior defined for transitions. We should
probably sort transitions first, then animation, then use the global animation
list. The reason being that when developer tools etc. hang on to orphaned
animations and transitions in order to replay them, they should maintain
roughly the same composite order.

CSS Animations generated using the markup defined in this specification are
<em>not</em> added to the <a>global animation list</a> when they are created.
Instead, these animations are appended to the <a>global animation list</a> at
the first moment when they transition out of the <a>idle play state</a> after
being disassociated from their <a>owning element</a>.
CSS Animations that have been disassociated from their <a>owning element</a>
but are still <a lt="idle play state">idle</a> do not have a defined
composite order.

Note, this behavior relies on the fact that disassociating an animation
from its <a>owning element</a> always causes it to enter (or remain) in the
<a>idle play state</a>.

# Keyframes # {#keyframes}

For a given target (pseudo-)element, |element|, an animation name, |name|,
and the position of the animation in |element|'s 'animation-name' list,
|position|,
[=keyframe=] objects are generated as follows:

1.   Let |default timing function| be
     the timing function at position |position|
     of the [=resolved value=] of the 'animation-timing-function' for |element|,
     repeating the list as necessary as described in
     [[CSS-ANIMATIONS-1#animation-name]].

1.   Find the last ''@keyframes'' at-rule in document order
     with <<keyframes-name>> matching |name|.

     If there is no ''@keyframes'' at-rule
     with <<keyframes-name>> matching |name|,
     abort this procedure.
     In this case no animation is generated,
     and any existing animation matching |name| is canceled.

1.   Let |keyframes| be an empty sequence of [=keyframe=] objects.

1.   Let |animated properties| be an empty set of longhand CSS property names.

1.   Perform a stable sort of the keyframe blocks in the ''@keyframes'' rule
     by the offset specified in the keyframe selector,
     and iterate over the result in reverse
     applying the following steps:

     1.   Let |keyframe offset| be the value of the keyframe selector
          converted to a value in the range 0 &le; |keyframe offset| &le; 1.

     1.   Let |keyframe timing function| be the value of
          the last valid declaration of 'animation-timing-function'
          specified on the keyframe block, or,
          if there is no such valid declaration, |default timing function|.

     1.   After converting |keyframe timing function| to its canonical form
          (e.g. such that ''step-end'' becomes ''steps(1, end)'')
          let |keyframe| refer to the existing keyframe in |keyframes| with
          matching keyframe offset and timing function, if any.

          If there is no such existing keyframe,
          let |keyframe| be a new empty keyframe with
          offset, |keyframe offset|,
          and timing function, |keyframe timing function|,
          and prepend it to |keyframes|.

     1.   Iterate over all declarations in the keyframe block and
          add them to |keyframe| such that:

          *     All variable references are resolved to their current values.

          *     Each shorthand property is expanded to its longhand
                subproperties.

          *     All logical properties are converted to their
                [=equivalent physical properties=].

          *     For any expanded physical longhand properties that appear more
                than once,
                only the last declaration in source order is added.

                Note, since multiple keyframe blocks may specify the same
                |keyframe offset|,
                and since this algorithm iterates over these blocks in reverse,
                this implies that if any properties are encountered that
                have already added at this same |keyframe offset|,
                they should be skipped.

           *    All property values are replaced with their computed values.

     1.   Add each physical longhand property name that was added to |keyframe|
          to |animated properties|.

1.   If there is no keyframe in |keyframes| with offset 0,
     or if amongst the keyframes in |keyframes| with offset 0
     not all of the properties in |animated properties| are present,

     1.   Let |initial keyframe| be the [=keyframe=] in |keyframes|
          with offset 0 and timing function |default timing function|.

          If there is no such keyframe,
          let |initial keyframe| be a new empty keyframe with offset 0,
          and timing function |default timing function|,
          and add it to |keyframes| after the last keyframe with offset 0.

     1.   For each property in |animated properties| that is not present
          in some other keyframe with offset 0,
          add the [=computed value=] of that property for |element|
          to the keyframe.

1.   Similarly, if there is no keyframe in |keyframes| with offset 1,
     or if amongst the keyframes in |keyframes| with offset 1
     not all of the properties in |animated properties| are present,

     1.   Let |final keyframe| be the [=keyframe=] in |keyframes|
          with offset 1 and timing function |default timing function|.

          If there is no such keyframe,
          let |final keyframe| be a new empty keyframe with offset 1,
          and timing function |default timing function|,
          and add it to |keyframes| after the last keyframe with offset 1.

     1.   For each property in |animated properties| that is not present
          in some other keyframe with offset 1,
          add the [=computed value=] of that property for |element|
          to the keyframe.

Issue: The above procedure requires iterating over keyframe blocks in reverse.
It could be rewritten so this is not required but that will likely change
the behavior for some edge cases.
We should verify what current implementations do and possible remove the
requirement to iterate in reverse.

Issue: In practice, implementations will likely maintain specified values and
variable references internally and only resolve them to computed values when
{{KeyframeEffect/getKeyframes()}} is called on a {{KeyframeEffect}}
associated with a {{CSSAnimation}}
(and, more specifically, a {{CSSAnimation}} whose effect has not been replaced
and whose keyframes have not been overridden
using {{KeyframeEffect/setKeyframes()}}).
It is not clear that soing so would produce an observable difference in
behavior, however.
If it does, the above procedure might need to be adjusted so that the
requirement to expand variables and convert to property values to computed
values is limited to the result of {{KeyframeEffect/getKeyframes()}} and
not the internal representation of keyframes.

## The 'animation-duration' property ## {#animation-duration}

The 'animation-duration' property specifies the [=iteration duration=]
of the animation's associated [=animation effect=].

## The 'animation-timing-function' property ## {#animation-timing-function}

The 'animation-timing-function' is used to determine the [=timing function=]
applied to each [=keyframe=] as defined in [[#keyframes]].

## The 'animation-iteration-count' property ## {#animation-iteration-count}

The 'animation-iteration-count' property specifies the [=iteration count=]
of the animation's associated [=animation effect=].

## The 'animation-direction' property ## {#animation-direction}

The 'animation-direction' property specifies the [=playback direction=]
of the animation's associated [=animation effect=].

## The 'animation-play-state' property ## {#animation-play-state}

The 'animation-play-state' is used to pause or play the animation.

If at any time,
including when the animation is first generated,
the resolved value of 'animation-play-state'
corresponding to an animation is newly ''running'',
the implementation must run the procedure to [=play an animation=]
for the given animation
with the <var ignore>auto-rewind flag</var> set to false.

If at any time,
including when the animation is first generated,
the resolved value of 'animation-play-state'
corresponding to an animation is newly ''paused'',
the implementation must run the procedure to [=pause an animation=]
for the given animation.

The above requirements do not apply
if the animation's play state is being overridden by the Web Animations API
as described in [[#animations]].

## The 'animation-delay' property ## {#animation-delay}

The 'animation-delay' property specifies the [=start delay=]
of the animation's associated [=animation effect=].

## The 'animation-fill-mode' property ## {#animation-fill-mode}

The 'animation-fill-mode' property specifies the [=fill mode=]
of the animation's associated [=animation effect=].

## The 'animation-composition' property ## {#animation-composition}

The 'animation-composition' property defines the <a>composite operation</a>
used when multiple animations affect the same property simultaneously.

<pre class='propdef'>
Name: animation-composition
Value: <<single-animation-composition>>#
Initial: replace
Applies to: all elements
Inherited: no
Percentages: N/A
Computed value: list, each item a keyword as specified
Animation type: not animatable
Canonical order: per grammar
</pre>

<dfn>&lt;single-animation-composition></dfn> = replace | add | accumulate

The values of 'animation-composition' have the meaning defined for the
corresponding values of the <a>composite operation</a> defined in Web
Animations [[!WEB-ANIMATIONS]].

When specified in a keyframe, 'animation-composition' defines the composite
operation to use for each property specified in that keyframe until the next
keyframe specifying each property.

<div class='example'>
  For example, the following stylesheet defines two different animations
  targetting the 'scale' property.

  <pre>
    @keyframes heartbeat {
      from {
        scale: 1;
        animation-timing-function: ease-out;
      }
      30% {
        scale: 1.3;
      }
    }
    .heartbeat {
      animation: heartbeat 0.3s 2s infinite;
    }

    @keyframes throb {
      50% {
        scale: 1.8;
      }
    }
    .icon:mouseover {
      animation: throb 0.4s add;
    }
  </pre>

  If these two animations are applied to the same element, normally only
  one animation would apply, but by specifying ''add'' as the
  'animation-composition' on the second animation, the result of the two
  animations will be combined.

  Since CSS Transitions [[CSS3-TRANSITIONS]] have a lower composite
  order, it is possible to use 'animation-composition' to combine CSS
  Animations with underlying transitions as in the following example.

  <pre>
    .icon {
      filter: blur(20px);
      transition: filter 0.5s;
    }
    .icon:hover {
      filter: blur(0px);
      animation: brightness-pulse 3s infinite add;
    }

    @keyframes pulse {
      0% {
        scale: 1.1;
        filter: brightness(130%);
      }
      10% {
        scale: 1;
        filter: brightness(100%);
      }
    }
  </pre>

  Issue: Create pictures of these examples and verify they make sense.
</div>

# Animation Events # {#events}

## Event dispatch ## {#event-dispatch}

Note, this is a more general description of event dispatch than that of CSS
Animations Level 1 [[CSS3-ANIMATIONS]] since it must account for the
possibility of animations being seeked or reversed using the Web Animations API
[[WEB-ANIMATIONS]].

For the purpose of determining which events to dispatch, the
[[web-animations#animation-effect-phases-and-states|phases]] defined in
the Web Animations model are used. These definitions apply to an <a>animation
effect</a>, however, for the purpose of dispatching events, we consider a
CSS Animation to have the same phase as its <a>target effect</a>. For example,
a CSS Animation is in the <a>before phase</a> if its <a>target effect</a>
is in the <a>before phase</a>.

A CSS Animation that does not have a <a>target effect</a> is considered to be in
the <a>idle phase</a> if its <a>current time</a> is <a>unresolved</a>, in the
<a>before phase</a> if its <a>current time</a> is less than zero, and in the
<a>after phase</a> otherwise.

Similarly, subsequent references to the <a>start delay</a>, <a>active
duration</a>, <a>current iteration</a>, <a>iteration start</a>, and
<a>iteration duration</a> of a CSS animation should be understood to refer
to the corresponding properties of the animation's <a>target effect</a>.

For calculating the {{AnimationEvent/elapsedTime}} of each event, the following
definitions are used:

*   <dfn>interval start</dfn> =
    <code>max(min(-<a>start delay</a>, <a>active duration</a>), 0)</code>
*   <dfn>interval end</dfn> =
    <code>max(min(<a>target effect end</a> - <a>start delay</a>,
                  <a>active duration</a>), 0)</code>

Each time an animation is <a lt="sampling">sampled</a> and is <em>not</em> <a
lt="pending play state">pending</a>, the events to dispatch are determined by
comparing the animation's phase before and after the sample as follows:

<table class="event-state-transitions">
  <thead>
    <tr>
      <th>Change</th>
      <th>Events dispatched</th>
      <th><dfn>Elapsed time</dfn> (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a lt="idle phase">idle</a> or <a lt="before phase">before</a> &rarr;
          <a lt="active phase">active</a></td>
      <td>{{animationstart}}</td>
      <td><a>interval start</a>
      </td>
    </tr>
    <tr>
      <td rowspan="2">
        <a lt="idle phase">idle</a> or <a lt="before phase">before</a> &rarr;
        <a lt="after phase">after</a> <a
        href="#multiple-events-note">&#x66d;</a></td>
      <td>{{animationstart}}</td>
      <td><a>interval start</a>
      </td>
    </tr>
    <tr>
      <td>{{animationend}}</td>
      <td><a>interval end</a>
      </td>
    </tr>
    <tr>
      <td><a lt="active phase">active</a> &rarr;
          <a lt="before phase">before</a></td>
      <td>{{animationend}}</td>
      <td><a>interval start</a></td>
    </tr>
    <tr>
      <td><a lt="active phase">active</a> &rarr;
          <a lt="active phase">active</a>
          <em>and</em>
          the <a>current iteration</a> of the animation's <a>target effect</a>
          has changed since the previous sample
      </td>
      <td>{{animationiteration}}</td>
      <td>(See below)
          <a href="#animation-iteration-elapsed-time">&dagger;</a></td>
    </tr>
    <tr>
      <td><a lt="active phase">active</a> &rarr;
          <a lt="after phase">after</a></td>
      <td>{{animationend}}</td>
      <td><a>interval end</a></td>
    </tr>
    <tr>
      <td><a lt="after phase">after</a> &rarr;
          <a lt="active phase">active</a></td>
      <td>{{animationstart}}</td>
      <td><a>interval end</a></td>
    </tr>
    <tr>
      <td rowspan="2"><a lt="after phase">after</a> &rarr;
                      <a lt="before phase">before</a> <a
                      href="#multiple-events-note">&#x66d;</a></td>
      <td>{{animationstart}}</td>
      <td><a>interval end</a></td>
    </tr>
    <tr>
      <td>{{animationend}}</td>
      <td><a>interval start</a></td>
    </tr>
    <tr>
      <td><em>not</em> <a lt="idle phase">idle</a> and <em>not</em>
          <a lt="after phase">after</a>&rarr;
          <a lt="idle phase">idle</a></td>
      <td>{{animationcancel}}</td>
      <td>The <a>active time</a> of the animation at the moment it was cancelled
          calculated using a <a>fill mode</a> of both.</td>
    </tr>
  </tbody>
</table>

<p id="multiple-events-note">&#x66d; Where multiple events are listed for
a state change, all events are dispatched in the order listed and in immediate
succession.</p>

<p id="animation-iteration-elapsed-time">&dagger; The <a>elapsed time</a> for
an {{animationiteration}} event is defined as follows:</p>

1.  Let <var>previous current iteration</var> be the <a>current iteration</a>
    from the previous sample.

1.  If <var>previous current iteration</var> is greater than <a>current
    iteration</a>, let <var>iteration boundary</var> be <code><a>current
    iteration</a> + 1</code>, otherwise let it be <a>current iteration</a>.

1.  The <a>elapsed time</a> is the result of evaluating
    <code>(<var>iteration boundary</var> - <a>iteration start</a>) &times;
    <a>iteration duration</a>)</code>.

Since the <a>elapsed time</a> defined in the table and procedure above is
expressed in milliseconds, it must be divided by 1,000 to produce a value in
seconds before being assigned to the {{AnimationEvent/elapsedTime}} member of
the {{AnimationEvent}}.

# DOM Interfaces # {#interface-dom}

## The CSSAnimation interface ## {#the-CSSAnimation-interface}

<pre class="idl">
[Exposed=Window]
interface CSSAnimation : Animation {
  readonly attribute CSSOMString animationName;
};
</pre>

:   <dfn attribute for=CSSAnimation>animationName</dfn>
::  The key used to find matching keyframes rules that define <a>target
    effect</a> at the point when the animation was created.
    This is the value of the 'animation-name' property that caused this
    object to be generated.

## Requirements on pending style changes ## {#requirements-on-pending-style-changes}

Various operations may affect the <a lt="computed value">computed values</a> of
properties on elements. User agents may, as an optimization, defer recomputing
these values until it becomes necessary.
However, all operations included in programming interface defined in this
specification, as well as those operations defined in Web Animations
[[!WEB-ANIMATIONS]] that may return objects or animation state defined by this
specification, must produce a result consistent with having fully processed
any such pending changes to computed values.

<div class="note">
As an example, in the following code fragment, when the specified style of
<code>elem</code> is initially updated, a user agent may defer recalculating
the computed value of the 'animation' property.

However, the {{Animatable/getAnimations()}} method called on <code>elem</code>
is specified by Web Animations and can return {{CSSAnimation}} objects as
defined in this specification.
Hence, as result of the requirements in this section, the user agent must
calculate the updated value of <code>elem</code>'s 'animation' property and
create the requested {{CSSAnimation}} object before returning its result.

<div><pre class="example lang-javascript">
elem.style.animation = 'fadeOut 1s';
elem.getAnimations()[0].pause();
</pre></div>

Similarly, reading {{Animation/playState}} may depend on pending style
changes.

<div><pre class="example lang-javascript">
elem.style.animation = 'fadeOut 1s paused';
const anim = elem.getAnimations()[0];
elem.style.animationPlayState = 'running';
console.log(anim.playState); // Should be 'running'.
</pre></div>

</div>



<h2 id="priv-sec">
Privacy and Security Considerations</h2>

This specification introduces no new privacy or security considerations.
