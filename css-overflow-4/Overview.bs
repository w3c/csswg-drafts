<pre class="metadata">
Title: CSS Overflow Module Level 4
Status: ED
Work Status: Exploring
ED: https://drafts.csswg.org/css-overflow-4/
Shortname: css-overflow
Group: csswg
Level: 4
TR: https://www.w3.org/TR/css-overflow-4/
Previous version: https://www.w3.org/TR/css-overflow-3/
Editor: L. David Baron, Mozilla https://www.mozilla.org/, https://dbaron.org/, w3cid 15393
Editor: Florian Rivoal, On behalf of Bloomberg, http://florian.rivoal.net/, w3cid 43241
Abstract: This module contains the features of CSS relating to new mechanisms of overflow handling in visual media (e.g., screen or paper).  In interactive media, it describes features that allow the overflow from a fixed size container to be handled by pagination (displaying one page at a time).  It also describes features, applying to all visual media, that allow the contents of an element to be spread across multiple fragments, allowing the contents to flow across multiple regions or to have different styles for different fragments.
Ignored Terms: scroll
</pre>
<pre class="link-defaults">
type: dfn; spec:css-multicol-1; text:overflow column
spec:css-pseudo-4; type:selector; text:::first-letter
spec:css-pseudo-4; type:selector; text:::first-line
spec:css-writing-modes-4; type:dfn; text:start
spec:css-writing-modes-4; type:dfn; text:end
</pre>
<pre class="anchors">
url: https://drafts.csswg.org/selectors-3/#subject; type: dfn; text: subject;
</pre>
	<style>
		table.source-demo-pair {
			width: 100%;
		}

		.in-cards-demo {
			width: 13em;
			height: 8em;

			padding: 4px;
			border: medium solid blue;
			margin: 6px;

			font: medium/1.3 Times New Roman, Times, serif;
			white-space: nowrap;
		}

		.bouncy-columns-demo {
			width: 6em;
			height: 10em;
			float: left;
			margin: 1em;
			font: medium/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.bouncy-columns-demo.one {
			background: aqua; color: black;
			transform: rotate(-3deg);
		}
		.bouncy-columns-demo.two {
			background: yellow; color: black;
			transform: rotate(3deg);
		}

		.article-font-inherit-demo {
			font: 1em/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.article-font-inherit-demo.one {
			width: 12em;
			font-size: 1.5em;
			margin-bottom: 1em;
			height: 4em;
		}
		.article-font-inherit-demo.two {
			width: 11em;
			margin-left: 5em;
			margin-right: 2em;
		}

		.dark-columns-demo {
			width: 6em;
			height: 10em;
			float: left;
			margin-right: 1em;
			font: medium/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.dark-columns-demo.one {
			background: aqua; color: black;
		}
		.dark-columns-demo.one :link {
			color: blue;
		}
		.dark-columns-demo.one :visited {
			color: purple;
		}
		.dark-columns-demo.two {
			background: navy; color: white;
		}
		.dark-columns-demo.two :link {
			color: aqua;
		}
		.dark-columns-demo.two :visited {
			color: fuchsia;
		}

		.article-max-lines-demo {
			font: 1em/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.article-max-lines-demo.one::first-letter {
			font-size: 2em;
			line-height: 0.9;
		}
		.article-max-lines-demo.one {
			font-size: 1.5em;
			width: 16em;
		}
		.article-max-lines-demo.two {
			width: 11.5em;
			float: left; margin-right: 1em;
		}
		.article-max-lines-demo.three {
			width: 11.5em;
			float: left;
		}
		.awesome-table td { padding: 5px; }
		.awesome-table {
			color: #000;
			background: #fff;
			margin: auto;
		}
	</style>

<h2 id="intro">
Introduction</h2>

Note: At the time of writing, [[CSS-OVERFLOW-3]] is not completely finalized yet.
To avoid accidental divergences and maintenance overhead,
This specification is written as a delta specification over css-overflow Level 3.
Once the level 3 specification is final,
its content will be integrated into this specification,
which will then replace it.
Until then, this specification only contains additions and extensions to level 3.

	<p>
		In CSS Level 1 [[CSS1]], placing more content than would fit
		inside an element with a specified size
		was generally an authoring error.
		Doing so caused the content to extend
		outside the bounds of the element,
		which would likely cause
		that content to overlap with other elements.
	</p>

	<p>
		CSS Level 2 [[CSS21]] introduced the 'overflow' property,
		which allows authors to have overflow be handled by scrolling,
		which means it is no longer an authoring error.
		It also allows authors to specify
		that overflow is handled by clipping,
		which makes sense when the author's intent
		is that the content not be shown.
		This was further refined in the CSS Overflow Module Level 3 [[CSS-OVERFLOW-3]].
	</p>

	<p>
		However, scrolling is not the only way
		to present large amounts of content,
		and may even not be the optimal way.
		After all, the codex replaced the scroll
		as the common format for large written works
		because of its advantages.
	</p>

	<p>
		This specification introduces
		a mechanism for Web pages to specify
		that an element of a page should handle overflow
		through pagination rather than through scrolling.
	</p>

	<p>
		This specification also extends the concept of overflow
		in another direction.
		Instead of requiring that authors specify a single area
		into which the content of an element must flow,
		this specification allows authors to specify multiple fragments,
		each with their own dimensions and styles,
		so that the content of the element can flow from one to the next,
		using as many as needed to place the content without overflowing.
	</p>

	<p>
		In both of these cases, implementations must
		break the content in the block-progression dimension.
		Implementations must do this is described
		in the CSS Fragmentation Module [[!CSS3-BREAK]].
	</p>

	<p>The definition of the 'text-overflow' property in this module supersedes the one in [[CSS-UI-3]] and [[CSS-OVERFLOW-3]].</p>

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> keywords as their property value.
	For readability they have not been repeated explicitly.

<h2 id="overflow-concepts">Types of overflow</h2>

	Issue: copy level 3 content when final


<h2 id="overflow-properties">Overflow properties</h2>

	Issue: copy level 3 content when final


<h2 id="scrollbar-gutter-property">
Reserving space for the scrollbar: the 'scrollbar-gutter' property</h2>

The space between the inner border edge and the outer padding edge
which user agents may reserve to display the scrollbar
is called the <dfn>scrollbar gutter</dfn>.

The 'scrollbar-gutter' property gives control to the author
over the presence of <a>scrollbar gutters</a>
separately from the ability to control the presence of scrollbars
provided by the 'overflow' property.

<pre class="propdef">
Name: scrollbar-gutter
Value: auto | [ stable | always ] && both? && force?
Initial: auto
Inherited: yes
Computed value: specified keyword(s)
Animation type: discrete
</pre>

This property affects the presence of <a>scrollbar gutters</a>
placed at the <a>inline start</a> edge or <a>inline end</a> edge of the box.

The presence of a <a>scrollbar gutter</a>
at the <a>block start</a> edge and <a>block end</a> edge of the box
cannot be controlled in this level,
and is determined the same way as the presence of <a>scrollbar gutters</a>
placed at the <a>inline start</a> edge or <a>inline end</a> edge of the box
when 'scrollbar-gutter' is ''scrollbar-gutter/auto''.

Scrollbars which by default are placed over the content box
and do not cause <a>scrollbar gutters</a> to be created
are called <dfn>overlay scrollbars</dfn>.
Such scrollbars are usually partially transparent, revealing the content behind them if any.
Their appearance and size may vary
based on whether and how the user is interacting with them.

Scrollbars which are always placed in a <a>scrollbar gutter</a>,
consuming space when present,
are called <dfn>classic scrollbars</dfn>.
Such scrollbars are usually opaque.

Whether <a>classic scrollbars</a> or <a>overlay scrollbars</a> are used is UA defined.

The appearance and size of the scrollbar is UA defined.

Whether scrollbars appear on the start or end edge of the box is UA defined.

For <a>classic scrollbars</a>,
the width of the <a>scrollbar gutter</a> is the same as the width of the scrollbar.
For <a>overlay scrollbars</a>,
the width of the <a>scrollbar gutter</a> is UA defined.
However, it must not be 0,
and it must not change based on user interactions with the page or the scrollbar
even if the scrollbar itself changes.
Also, it must be the same for all elements in the page.

The values of this property have the following meaning:

<dl dfn-for="scrollbar-gutter" dfn-type=value>
	<dt><dfn>auto</dfn>
	<dd><a>Classic scrollbars</a> consume space by creating a <a>scrollbar gutter</a>
	when 'overflow' is ''overflow/scroll'',
	or when 'overflow' is ''overflow/auto'' and the box is overflowing.
	<a>Overlay scrollbars</a> do not consume space.

	<dt><dfn>stable</dfn>
	<dd>The <a>scrollbar gutter</a> is present when
	'overflow' is ''overflow/scroll'' or ''overflow/auto''
	and the scrollbar is a <a>classic scrollbar</a>
	even if the box is not overflowing,
	but not when the scrollbar is an <a>overlay scrollbar</a>.

	<dt><dfn>always</dfn>
	<dd>The <a>scrollbar gutter</a> is always present when
	'overflow' is ''overflow/scroll'' or ''overflow/auto'',
	regardless of the type of scrollbar or
	of whether the box is overflowing.

	<dt><dfn>both</dfn>
	<dd>If a <a>scrollbar gutter</a> would be present
	on one of the inline start edge or the inline end edge of the box,
	another <a>scrollbar gutter</a> must be present on the opposite edge as well.

	<dt><dfn>force</dfn>
	<dd>When the ''scrollbar-gutter/force'' keyword is present
	''scrollbar-gutter/stable'' and ''scrollbar-gutter/always'' take effect
	when 'overflow' is ''overflow/visible'', ''overflow/hidden'' or ''overflow/clip''
	in addition ''overflow/auto'' or ''overflow/scroll''.
	This does not cause a scrollbar to be displayed, only a <a>scrollbar gutter</a>.
</dl>

When the <a>scrollbar gutter</a> is present but the scrollbar is not,
or the scrollbar is transparent or otherwise does not fully obscure the <a>scrollbar gutter</a>,
the background of the <a>scrollbar gutter</a> must be painted as an extension of the padding.

<div class=note>
Note: The following table summarizes the interaction of 'overflow' and 'scrollbar-gutter',
showing in which case space is reserved for the <a>scrollbar gutter</a>.
In this table, “G” represents cases where space is reserved for the <a>scrollbar gutter</a>,
“f?” cases where space is reserved for the <a>scrollbar gutter</a>
if ''scrollbar-gutter/force'' was specified,
and empty cells cases where the no space is reserved.

<table class=data>
	<thead>
	<tr>
		<td>
		<td>
		<th colspan=2>Classic scrollbars
		<th colspan=2>Overlay scrollbars
	<tr>
		<th>'overflow'
		<th>'scrollbar-gutter'
		<th>Overflowing
		<th>Not overflowing
		<th>Overflowing
		<th>Not overflowing
	</thead>
	<tr>
		<th rowspan=3>''overflow/scroll''
		<th>''scrollbar-gutter/auto''
		<td>G
		<td>G
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>G
		<td>G
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>G
		<td>G
		<td>G
		<td>G
	<tr>
		<th rowspan=3>''overflow/auto''
		<th>''scrollbar-gutter/auto''
		<td>G
		<td>
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>G
		<td>G
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>G
		<td>G
		<td>G
		<td>G
	<tr>
		<th rowspan=3>''overflow/visible'', ''overflow/hidden'', ''overflow/clip''
		<th>''scrollbar-gutter/auto''
		<td>
		<td>
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>f?
		<td>f?
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>f?
		<td>f?
		<td>f?
		<td>f?
</table>
</div>


<h2 id="text-overflow" caniuse="text-overflow">Overflow Ellipsis: the 'text-overflow' property</h2>

<pre class="propdef">
Name: text-overflow
Value: [ clip | ellipsis | <<string>> | fade | <<fade()>> ]{1,2}
Initial: clip
Applies to: block containers
Inherited: no
Percentages: refer to the width of the line box
Computed value: as specified, with lengths made absolute
Animation type: by computed value type
</pre>

This property specifies rendering when inline content overflows
its line box edge
in the inline progression direction of its block container element ("the block")
that has 'overflow'
other than ''visible''.

Even though this property is not inherited,
annonymous block container boxes generated to
establish the line box's <a>inline formatting context</a> (see [=block container=])
are ignored,
and the value of the property that applies is the one
on the non annomymous box.
<span class=note>This can be seen in the “nested paragraph” part of <a href="#example-44082941">example 7</a>:
even though the word “NESTED” is wrapped in an annoymous block container
whose 'text-overflow' property has the intial value,
it is ellipsed.</span>

Text can overflow for example when it is prevented from wrapping
(e.g. due to <code class="lang-css">white-space: nowrap</code>
or a single word is too long to fit).
Values have the following meanings:

<dl dfn-for="text-overflow" dfn-type=value>
	<dt><dfn id=overflow-clip>clip</dfn>
	<dd>
		Clip inline content that overflows its block container element.
		Characters may be only partially rendered.

	<dt><dfn id=overflow-ellipsis>ellipsis</dfn>
	<dd>
		Render an ellipsis character (U+2026)
		to represent clipped inline content.
		Implementations may substitute a more language, script, or writing-mode appropriate
		ellipsis character,
		or three dots "..." if the ellipsis character is unavailable.

	<dt id=overflow-string><<string>>
	<dd>
		Render the given string to represent clipped inline content.
		The given string is treated as an independent paragraph
		for bidi purposes.

	<dt dfn-type=function><dfn>fade( <<length>> | <<percentage>> )</dfn>
	<dd>
		Clip inline content that overflows its line box.
		Characters may be only partially rendered.
		In addition, the UA must apply a fade out effect
		near the edge of the line box,
		reaching complete transparency at the edge.

		Issue: Do we need to define the way
		the fade out is calculated
		so that the fading is identical across browsers?
		It should probably be something like
		''mask-image: linear-gradient(to right, rgba(0,0,0,1), rgba(0,0,0,0))'',
		except applied to the relevant portion of the line only.

		The argument determines the distance
		over which the fade effect is applied.
		The <<percentage>> is resolved against the width of the line box.
		Values lower than 0 are clipped to 0.
		Values greater than the width of the line box are clipped to the width of the line box.

		Issue: If the line box is too short
		to display the fade effect at the desired length,
		should we drop the effect,
		or shrink the distance it is applied over until it fits,
		or clip the end of the fade?

		Issue: How should we deal with
		things overflowing out of the line box,
		or overlapping onto it?
		Should fade apply to the logical content of the line,
		or to the physical area of the line box,
		or the intersection of both?

	<dt><dfn>fade</dfn>
	<dd>
		Same as ''fade()'',
		but the distance over which the fading effect is applied
		is determined by the UA.
		''1em'' is suggested as a reasonable value.
</dl>

The term "character" is used in this property definition
for better readability and means "grapheme cluster" [[!UAX29]]
for implementation purposes.

If there is one value,
it applies only to the <a>end</a> line box edge.
If there are two values,
the first value applies to the <a>line-left</a> edge,
and the second value applies to the <a>line-right</a> edge.
The terms <a>end</a>, <a>line-left</a> and <a>line-right</a> are defined in [[!CSS-WRITING-MODES-3]].

Note: the use of <a>line-left</a> and <a>line-right</a>
rather than <a>start</a> and <a>end</a>
when there are two values is intentional,
to facilitate the use of directional characters such as arrows.

For the ellipsis
and string values,
implementations must hide characters and
<a href="https://www.w3.org/TR/CSS21/visuren.html#inline-boxes">
atomic inline-level elements</a>
at the applicable edge(s) of the line as necessary to fit the ellipsis/string, and
place the ellipsis/string immediately adjacent
to the applicable edge(s) of the remaining inline content.
The first character or
<a href="https://www.w3.org/TR/CSS21/visuren.html#inline-boxes">
atomic inline-level element</a>
on a line
must be clipped rather than ellipsed.

<div class=example>
<h3 id="bidi-ellipsis" class="no-num no-toc">Bidi ellipsis examples</h3>
These examples demonstrate which characters get hidden
to make room for the ellipsis in a bidi situation:
those visually at the edge of the line.

Sample CSS:
<pre><code highlight=css>
div {
  font-family: monospace;
  white-space: pre;
  overflow: hidden;
  width: 9ch;
  text-overflow: ellipsis;
}
</code></pre>

Sample HTML fragments, renderings, and your browser:
<table class="awesome-table data">
<thead><th>HTML<th>Reference rendering<th>Your Browser</thead>
<tr>
<td><code highlight=html>&lt;div>שלום 123456&lt;/div></code><td><div style="font-family:monospace">123456 ם…</div><td><div style="font-family: monospace; white-space: pre; overflow: hidden; width: 9ch; text-overflow: ellipsis">שלום 123456</div>
<tr><td><code highlight=html>&lt;div dir=rtl>שלום 123456&lt;/div></code><td><div style="font-family:monospace">…456 שלום</div><td><div style="font-family: monospace; white-space: pre; overflow: hidden; width: 9ch; text-overflow: ellipsis" dir=rtl>שלום 123456</div>

</table>


</div>


<h3 id="ellipsing-details" class="no-num no-toc">ellipsing details</h3>

<ul>
	<li>
		Ellipsing only affects rendering and must not affect layout
		nor dispatching of pointer events:
		The UA should dispatch any pointer event on the ellipsis to the elided element,
		as if 'text-overflow' had been ''text-overflow/none''.

	<li>
		The ellipsis is styled and baseline-aligned according to the block.

	<li>
		Ellipsing occurs after relative positioning and other graphical transformations.

	<li>
		If there is insufficient space for the ellipsis,
		then clip the rendering of the ellipsis itself
		(on the same side that neutral characters on the line
		would have otherwise been clipped with the ''text-overflow:clip'' value).
</ul>


<h3 id="ellipsis-interaction" class="no-num no-toc">user interaction with ellipsis</h3>

<ul>
	<li>
		When the user is interacting with content
		(e.g. editing, selecting, scrolling),
		the user agent may treat ''text-overflow/ellipsis'', string values, ''overflow-text/fade'' or ''overflow-text/fade()'' as ''text-overflow:clip''.

	<li>
		Selecting the ellipsis should select the ellipsed text.
		If all of the ellipsed text is selected,
		UAs should show selection of the ellipsis.
		Behavior of partially-selected ellipsed text is up to the UA.
</ul>

<div class="example">
	<h3 id="text-overflow-examples" class="no-num no-toc">text-overflow examples</h3>

	These examples demonstrate setting the text-overflow of a block container element
	that has text which overflows its dimensions:

	sample CSS for a div:
	<pre><code class="lang-css">
	div {
		font-family: Helvetica, sans-serif;
		line-height: 1.1;
		width: 3.1em;
		border: solid .1em black;
		padding: 0.2em; margin:1em 0;
	}
	</code></pre>

	sample HTML fragments, renderings, and your browser:
	<table class="awesome-table"><tbody>
	<tr>
		<th>HTML
		<th>sample rendering
		<th>your browser

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisawesome.png">
			First, a box with text drawing outside of it.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1;">CSS IS AWESOME, YES</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:clip;</strong> overflow:hidden"&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisaweso.png">
			Second, a similar box with the text clipped outside the box.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:clip;">CSS IS AWESOME, YES</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisaw.png">
			Third, a similar box with an ellipsis representing the clipped text.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">CSS IS AWESOME, YES</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
			NESTED
			 &lt;p&gt;PARAGRAPH&lt;/p&gt;
			WON'T ELLIPSE.
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/nes.png">
			Fourth, a box with a nested paragraph demonstrating anonymous block boxes equivalency and non-inheritance into a nested element.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">NESTED
			 <p>PARAGRAPH</p>
			WON'T ELLIPSE.</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:fade;</strong> overflow:hidden"&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisfade.png">
			a box with the text fading out on overflow.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:clip;">CSS IS AWESOME, YES</div>
	</tbody></table>
</div>

Note: the side of the line that the ellipsis is placed depends on the 'direction' of the block.
E.g. an overflow hidden right-to-left
(<code class="lang-css">direction: rtl</code>)
block clips inline content on the <a spec=css-writing-modes-3>left</a> side,
thus would place a text-overflow ellipsis on the <a spec=css-writing-modes-3>left</a>
to represent that clipped content.

Issue: insert RTL example diagram here to illustrate note.


<h3 id="ellipsis-scrolling" class="no-num no-toc">ellipsis interaction with scrolling interfaces</h3>

This section applies to elements with text-overflow other than ''text-overflow:clip''
(non-clip text-overflow)
and overflow:scroll.

When an element with non-clip text-overflow has overflow of scroll
in the inline progression dimension of the text,
and the browser provides a mechanism for scrolling
(e.g. a scrollbar on the element,
or a touch interface to swipe-scroll, etc.),
there are additional implementation details that provide a better user experience:

When an element is scrolled (e.g. by the user, DOM manipulation),
more of the element's content is shown.
The value of text-overflow should not affect
whether more of the element's content is shown or not.
If a non-clip text-overflow is set,
then as more content is scrolled into view,
implementations should show whatever additional content fits,
only truncating content which would otherwise be clipped
(or is necessary to make room for the ellipsis/string),
until the element is scrolled far enough
to display the edge of the content
at which point that content should be displayed
rather than an ellipsis/string.

<div class="example">
	This example uses text-overflow on an element with overflow scroll
	to demonstrate the above described behavior.

	sample CSS:
	<pre><code class="lang-css">
	div.crawlbar {
		text-overflow: ellipsis;
		height: 2em;
		overflow: scroll;
		white-space: nowrap;
		width: 15em;
		border:1em solid black;
	}
	</code></pre>

	sample HTML fragment:
	<pre><code class="lang-markup">
	&lt;div class="crawlbar"&gt;
	CSS is awesome, especially when you can scroll
	to see extra text instead of just
	having it overlap other text by default.
	&lt;/div&gt;
	</code></pre>

	demonstration of sample CSS and HTML:
	<div style="text-overflow: ellipsis; height: 2em; overflow: scroll; white-space: nowrap; width: 15em; border:1em solid black;">
	CSS is awesome, especially when you can scroll
	to see extra text instead of just
	having it overlap other text by default.
	</div>
</div>

As some content is scrolled into view,
it is likely that other content may scroll out of view on the other side.
If that content's block container element is the same
that's doing the scrolling,
and the computed value of 'text-overflow' has two values, with
the value applying to the start edge being a non-clip value,
then implementations must render an ellipsis/string in place of
the clipped content,
with the same details as described in the value definition above,
except that the ellipsis/string is drawn in the <a>start</a>
(rather than <a>end</a>) of
the block's direction (per the direction property).

While the content is being scrolled,
implementations may adjust their rendering of ellipses/strings
(e.g. align to the box edges rather than line edges).

<div class="example">
	Same as previous example except with <code>text-overflow: ellipsis ellipsis</code>, demonstrated:

	<div style="text-overflow: ellipsis ellipsis; height: 2em; overflow: scroll; white-space: nowrap; width: 15em; border:1em solid black;">
	CSS is awesome, especially when you can scroll
	to see extra text instead of just
	having it overlap other text by default.
	</div>
</div>

If there is insufficient space for both start
and end ellipses/strings,
then only the end ellipsis/string should be rendered.

<h2 id="fragmentation">Fragmentation of overflow</h2>

The 'continue' property gives authors the ability
to request that content that does not fit inside an element
be fragmented (in the sense of [[!CSS3-BREAK]]),
and provides alternatives
for where the remaining content should continue.

Notably, this property explains traditional pagination,
and extends it further.

	<pre class=propdef>
		Name: continue
		Value: auto | overflow | paginate | fragments | discard
		Initial: auto
		Applies to: block containers [[!CSS21]], flex containers [[!CSS3-FLEXBOX]], and grid containers [[!CSS3-GRID-LAYOUT]]
		Inherited: no
		Percentages: N/A
		Computed value: see below
		Animation type: discrete
	</pre>

Issue: The naming of this property and its values is preliminary.
This was initially proposed as
"fragmentation: auto | none | break | clone | page"
in <a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html">https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html</a>,
and there is not yet wide agreement as to which naming is better.

Issue: This property is meant to generalize and replace 'region-fragment'.
Once it is sufficiently stable in this specification,
'region-fragment' should be removed from the regions specification in favor of this.

Note: ''continue: fragments'' replaces "overflow:fragments"
from earlier versions of this specification,
while ''continue: paginate'' replaces "overflow: paged-x | paged-y | paged-x-controls | paged-y-controls"

	<dl dfn-for="continue" dfn-type="value">
		<dt><dfn>auto</dfn>
		<dd>''continue/auto'' may only occur as a computed value
		if the element is a <a spec="css-regions">CSS Region</a>
		other than the last one in a <a spec="css-regions">region chain</a>.
		Content that doesn't fit is pushed to the next region of the chain.

		In all other cases, ''continue/auto'' computes to one of the other values.

		<dt><dfn>overflow</dfn>
		<dd>Content that doesn't fit overflows, according to the 'overflow' property

		<dt><dfn>discard</dfn>
		<dd>Content that doesn't fit is discarded at a fragmentation break

		Note: generalized from region-fragment: break; on the last region of a region chain

		Issue: When the element isn't a <a spec="css-break">fragmentation container</a> already,
		should this work by turning it directly into one,
		or by creating a <a>fragment box</a> inside it like ''continue/fragments'' does?

		<dt><dfn>paginate</dfn>
		<dd>Content that doesn't fit paginates.
		This creates a paginated view inside the element
		similar to the way that 'overflow: scroll' creates a scrollable view.

		See <a href="#paginated-overflow">paginated overflow</a>

		Note: Print is effectively "continue: paginate" on the root.
		<dt><dfn>fragments</dfn>
		<dd>content that doesn't fit causes the element to copy itself and continue laying out.

		See <a href="#fragment-overflow">fragment overflow</a>.
	</dl>

The computed value of the 'continue' for a given element or pseudo element is determined as follow:
<ol>
	<li>On elements or pseudo elements with <a>layout containment</a> (see [[!CSS-CONTAIN-1]]),
	if the specified value is ''continue/auto'' or ''continue/fragments''
	then the computed value is ''continue/overflow''.
	<li>Otherwise, if the specified value is ''continue/auto''
	<ol>
		<li>On a <a spec="css-regions">CSS Region</a> other than the last one in a <a spec="css-regions">region chain</a>,
		the computed value is ''continue/auto''
		<li>On a page
		the computed value is ''continue/paginate''
		<li>On a <a>fragment box</a>
		the computed value is ''continue/fragments''
		<li>Otherwise, the computed value is ''continue/overflow''
	</ol>
	<li>Otherwise, if the specified value is ''continue/fragments''
	<ol>
		<li>On a page
		the computed value is ''continue/paginate''
		<li>Otherwise, the computed value is the specified value
	</ol>
	<li>In all other cases, the computed value is the specified value
</ol>

Issue: If we introduce a pseudo element that can select columns in a multicol,
we would need to specify that auto computes to auto on it,
or introduce a new value and have auto compute to that
(but what would that value compute to on things that aren't columns?).

Note: For background discussions leading to this property, see these threads:
<a href="http://lists.w3.org/Archives/Public/www-style/2012May/1197.html">discussion of overflow, overflow-x, overflow-y and overflow-style</a> and
<a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html">proposal for a fragmentation property</a>

<h2 id="paginated-overflow">Paginated overflow</h2>

This section introduces and defines the meaning of the ''continue/paginate'' value of the 'continue' property.

Issue: Write this section

Issue: Pages should be possible to style with @page rules. How does that work for nested pages?

<div class="issue">
Should traditional pagination (e.g. when printing)
be expressed through some magic in the computed value of ''continue/auto'',
or by inserting this in the UA stylesheet:
<pre><code class="lang-css">
@media (overflow-block: paged), (overflow-block: optional-paged) {
	:root {
		continue: paginate;
	}
}
</code></pre>
</div>

Issue: Traditional pagination (e.g. when printing) assumes that
:root is contained in the page box,
rather than having the page box be a pseudo element child of :root.
Can we work around that using something similar to fragment boxes?
Or maybe by having a fragment box (reproducing :root) inside a page box inside :root?

Issue: How does the page box model work when it is a child of a regular css box?

Issue: The initial proposal in [[CSS3GCPM]] and implementation from Opera
used 4 values instead of ''continue/paginate'':
"paged-x | paged-y | paged-x-controls | paged-y-controls".
Should this property also include these values,
or are they better handled as separate properties?
(e.g.: "pagination-layout: auto | horizontal | vertical", "pagination-controls: auto | none")

Issue: Ability to display N pages at once
rather than just one page at once?
Could this be a value of "pagination-layout", such as:
"pagination-layout: horizontal 2;"

Issue: Brad Kemper has proposed a model for combining pagination and
fragment overflow, which also deals with displaying multiple pages.
<a href="http://www.w3.org/mid/FF1704C5-D5C1-4D6F-A99D-0DD094036685@gmail.com">http://www.w3.org/mid/FF1704C5-D5C1-4D6F-A99D-0DD094036685@gmail.com</a>

	<p class="issue">
		The current implementation of paginated overflow uses
		the overflow/overflow-x/overflow-y properties
		rather than the overflow-style property as proposed
		in the [[CSS3GCPM]] draft
		(which also matches the [[CSS3-MARQUEE]] proposal).
		or the 'continue' property as described here.
	</p>

<h2 id="fragment-overflow">Fragment overflow</h2>

This section introduces and defines the meaning of
the ''continue/fragments'' value of the 'continue' property.

	<p>
		When the computed value of 'continue' for an element is ''continue/fragments'',
		and implementations would otherwise have created a box for the element,
		then implementations must create a sequence of <dfn>fragment box</dfn>es
		for that element.
		(It is possible for an element with ''continue: fragments''
		to generate only one <a>fragment box</a>.
		However, if an element's computed 'continue' is not ''continue/fragments'',
		then its box is not a <a>fragment box</a>.)
		Every <a>fragment box</a> is a fragmentation container,
		and any overflow
		that would cause that fragmentation container to fragment
		causes another <a>fragment box</a> created as a next sibling
		of the previous one.
		<span class="issue">Or is it as though it's a next sibling of
		the element?  Need to figure out exactly how this interacts with
		other box-level fixup.</span>
		Additionally, if the <a>fragment box</a> is also
		a multi-column box (as defined in [[!CSS3COL]]
		<span class="issue">though it defines <i>multi-column container</i></span>)
		any content that would lead to the creation of <a>overflow columns</a> [[!CSS3COL]]
		instead is flown into an additional fragment box.
		However, fragment boxes may themselves be broken
		(due to fragmentation in a fragmentation context outside of them,
		such as pages, columns, or other fragment boxes);
		such breaking leads to fragments of the same fragment box
		rather than multiple fragment boxes.
		(This matters because fragment boxes may be styled by their index;
		such breaking leads to multiple fragments of a fragment box
		with a single index.
		This design choice is so that
		breaking a fragment box across pages does not break
		the association of indices to particular pieces of content.)
		<span class="issue">Should a forced break that breaks to
		an outer fragmentation context cause a new fragment of a single
		fragment box or a new fragment box?</span>
		<span class="issue">Should we find a term other than
		<a>fragment box</a> here to make this a little less confusing?</span>
	</p>

	<p class="issue">
		What if we want to be able to style the pieces of an element
		split within another type of fragmentation context?
		These rules prevent ever using ''::nth-fragment()'' for that,
		despite that the name seems the most logical name for such a feature.
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;title&gt;Breaking content into
  equal-sized cards&lt;/title&gt;
&lt;style&gt;
  .in-cards {
    continue: fragments;

    width: 13em;
    height: 8em;

    padding: 4px;
    border: medium solid blue;
    margin: 6px;

    font: medium/1.3 Times New
      Roman, Times, serif;
  }
&lt;/style&gt;
&lt;div class="in-cards"&gt;
  In this example, the text in the div
  is broken into a series of cards.
  These cards all have the same style.
  The presence of enough content to
  overflow one of the cards causes
  another one to be created.  The second
  card is created just like it's the
  next sibling of the first.
&lt;/div&gt;</code></pre></td><td>
			<div class="in-cards-demo">In this example, the text in the<br>div is broken into a series of<br>cards.  These cards all have the<br>same style. The presence of<br>enough content to overflow<br>one of the cards causes another</div>
			<div class="in-cards-demo">one to be created.  The second<br>card is created just like it's the<br>next sibling of the first.</div>
		</td></tr></table>
	</div>

	<p class="issue">
		We should specify that ''continue: fragments'' does not apply
		to at least some table parts,
		and perhaps other elements as well.
		We need to determine exactly which ones.
	</p>

	<p class="issue">
		This specification needs to say which type of
		fragmentation context is created
		so that it's clear which values of the 'break-*' properties
		cause breaks within this context.
		We probably want ''break-*: region'' to apply.
	</p>

	<p class="issue">
		This specification needs a processing model
		that will apply in cases where the layout containing the
		fragments has characteristics that use the intrinsic size of the fragments
		to change the amount of space available for them,
		such as [[CSS3-GRID-LAYOUT]].
		There has already been some work on such a processing model
		in [[CSS3-REGIONS]],
		and the work done on a model there,
		and the editors of that specification,
		should inform what happens in this specification.
	</p>

<h3 id="fragment-styling">Fragment styling</h3>

<h4 id="fragment-pseudo-element">The ''::nth-fragment()'' pseudo-element</h4>

	<p>
		The <dfn selector>::nth-fragment()</dfn> pseudo-element
		is a pseudo-element
		that describes some of the <a>fragment box</a>es generated by an element.
		The argument to the pseudo-element takes the same syntax
		as the argument to the :nth-child() pseudo-class
		defined in [[!SELECT]], and has the same meaning
		except that the number is relative to
		<a>fragment box</a>es generated by the element
		instead of siblings of the element.
	</p>

	<p class="note">
		Selectors that allow addressing fragments
		by counting from the end rather than the start
		are intentionally not provided.
		Such selectors would interfere with determining
		the number of fragments.
	</p>

	<p class="issue">
		Depending on future discussions,
		this ''::nth-fragment(<var>an+b</var>)'' syntax
		may be replaced with
		the new ''::fragment:nth(<var>an+b</var>)'' syntax.
	</p>

<h4 id="style-of-fragments">Styling of fragments</h4>

	<p class="issue">
		Should this apply to continue:fragments only,
		or also to continue:paginate?
		(If it applies,
		then stricter property restrictions would be needed
		for continue:paginate.)
	</p>

	<p>
		In the absence of rules with ''::nth-fragment()'' pseudo-elements,
		the computed style for each <a>fragment box</a>
		is the computed style for the element
		for which the <a>fragment box</a> was created.
		However, the style for a <a>fragment box</a> is also influenced
		by rules whose selector's <a>subject</a> [[!SELECT]]
		has an ''::nth-fragment()'' pseudo-element,
		if the 1-based number of the <a>fragment box</a> matches
		that ''::nth-fragment()'' pseudo-element
		and the selector (excluding the ''::nth-fragment()'' pseudo-element)
		matches the element generating the fragments.
	</p>

	<p>
		When determining the style of the <a>fragment box</a>,
		these rules that match the fragment pseudo-element
		cascade together with the rules that match the element,
		with the fragment pseudo-element adding the specificity
		of a pseudo-class to the specificity calculation.
		<span class="issue">Does this need to be specified in
		the cascading module as well?</span>
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .bouncy-columns {
    continue: fragments;
    width: 6em;
    height: 10em;
    float: left;
    margin: 1em;
    font: medium/1.25 Times New
      Roman, Times, serif;
  }
  .bouncy-columns::nth-fragment(1) {
    background: aqua; color: black;
    transform: rotate(-3deg);
  }
  .bouncy-columns::nth-fragment(2) {
    background: yellow; color: black;
    transform: rotate(3deg);
  }
&lt;/style&gt;
&lt;div class="bouncy-columns"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="bouncy-columns-demo one">In this<br>example, the<br>text in the div<br>is broken into<br>a series of<br>columns.  The<br>author<br>probably</div>
			<div class="bouncy-columns-demo two">intended the<br>text to fill two<br>columns.  But<br>if it happens to<br>fill three<br>columns, the<br>third column is<br>still created.  It</div>
			<div class="bouncy-columns-demo">just doesn't<br>have any<br>fragment-specific<br>styling because<br>the author<br>didn't give it<br>any.</div>
		</td></tr></table>
	</div>

	<p>
		Styling an ''::nth-fragment()'' pseudo-element with the 'continue'
		property does take effect;
		if a <a>fragment box</a> has a
		computed value of 'continue' other than ''fragments''
		then that fragment box is the last fragment.
		However, overriding 'continue' on the first fragment
		does not cause the <a>fragment box</a> not to exist;
		whether there are fragment boxes at all is determined by
		the computed value of overflow for the element.
	</p>

	<p>
		Styling an ''::nth-fragment()'' pseudo-element with the 'content'
		property has no effect;
		the computed value of 'content' for the fragment box
		remains the same as the computed value of content for the element.
	</p>

	<p>
		Specifying ''display: none'' for a <a>fragment box</a> causes
		the fragment box with that index not to be generated.
		However, in terms of the indices
		used for matching ''::nth-fragment()'' pseudo-elements
		of later fragment boxes,
		it still counts as though it was generated.
		However, since it is not generated, it does not contain any content.
	</p>

	<p>
		Specifying other values of 'display', 'position',
		or 'float' is permitted, but is not allowed to change
		the <a>inner display type</a>.
		(Since 'continue' only
		applies to block containers, flex containers, and grid containers).
		<span class="issue">Need to specify exactly how this works</span>
	</p>

	<p>
		To match the model for other pseudo-elements
		where the pseudo-elements live inside their corresponding element,
		declarations in ''::nth-fragment()'' pseudo-elements override
		declarations in rules without the pseudo-element.
		The relative priority within such declarations is determined
		by normal cascading order (see [[!CSS21]]).
	</p>

	<p>
		Styles specified on ''::nth-fragment()'' pseudo-elements
		do affect inheritance to content within the <a>fragment box</a>.
		In other words, the content within the <a>fragment box</a> must
		inherit from the fragment box's style (i.e., the pseudo-element style)
		rather than directly from the element.
		This means that elements split between fragment boxes may
		have different styles for different parts of the element.
	</p>

	<p class="issue">
		This inheritance rule allows specifying styles indirectly
		(by using explicit ''inherit'' or using default inheritance
		on properties that don't apply to ''::first-letter'')
		that can't be specified directly
		(based on the rules in the next section).
		This is a problem.
		The restrictions that apply to styling inside fragments
		should also apply to inheritance from fragments.
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .article {
    continue: fragments;
  }
  .article::nth-fragment(1) {
    font-size: 1.5em;
    margin-bottom: 1em;
    height: 4em;
  }
  .article::nth-fragment(2) {
    margin-left: 5em;
    margin-right: 2em;
  }
&lt;/style&gt;
&lt;div class="article"&gt;
  The &lt;code&gt;font-size&lt;/code&gt; property<i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="article-font-inherit-demo one">The <code>font-size</code> property<br>specified on the fragment<br>is inherited into the</div>
			<div class="article-font-inherit-demo two">descendants of the fragment.<br>This means that inherited<br>properties can be used<br>reliably on a fragment, as in<br>this example.</div>
		</td></tr></table>
	</div>

<h4 id="style-in-fragments">Styling inside fragments</h4>

	<p class="issue">
		Should this apply to continue:fragments only,
		or also to continue:paginate?
	</p>

	<p>
		The ''::nth-fragment()'' pseudo-element
		can also be used to style
		content inside of a <a>fragment box</a>.
		Unlike the ''::first-line'' and ''::first-letter'' pseudo-elements,
		the ''::nth-fragment()'' pseudo-element can be applied
		to parts of the selector other than the subject:
		in particular, it can match ancestors of the subject.
		However, the only CSS properties applied
		by rules with such selectors
		are those that apply
		to the ''::first-letter'' pseudo-element.
	</p>

	<p>
		To be more precise,
		when a rule's selector has ''::nth-fragment()'' pseudo-elements
		attached to parts of the selector other than the subject,
		the declarations in that rule apply to
		a fragment (or pseudo-element thereof) when:
	</p>
	<ol>
		<li>
			the declarations are for properties that apply to the
			''::first-letter'' pseudo-element,
		</li>
		<li>
			the declarations would apply to
			that fragment (or pseudo-element thereof)
			had those ''::nth-fragment()'' pseudo-elements been removed,
			with a particular association between
			each sequence of simple selectors and the element it matched,
			and
		</li>
		<li>
			for each removed ''::nth-fragment()'' pseudo-element,
			the fragment lives within a <a>fragment box</a>
			of the element associated in that association
			with the selector that the pseudo-element was attached to,
			and whose index matches the pseudo-element.
		</li>
	</ol>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .dark-columns {
    continue: fragments;
    width: 6em;
    height: 10em;
    float: left;
    margin-right: 1em;
    font: medium/1.25 Times New
      Roman, Times, serif;
  }
  .dark-columns::nth-fragment(1) {
    background: aqua; color: black;
  }
  .dark-columns::nth-fragment(1) :link {
    color: blue;
  }
  .dark-columns::nth-fragment(1) :visited {
    color: purple;
  }
  .dark-columns::nth-fragment(2) {
    background: navy; color: white;
  }
  .dark-columns::nth-fragment(2) :link {
    color: aqua;
  }
  .dark-columns::nth-fragment(2) :visited {
    color: fuchsia;
  }
&lt;/style&gt;
&lt;div class="dark-columns"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="dark-columns-demo one">In this<br><a href="http://en.wiktionary.org/wiki/example">example</a>, the<br>text flows<br>from one<br>light-colored<br>fragment into<br>another<br>dark-colored</div>
			<div class="dark-columns-demo two">fragment.  We<br>therefore want<br>different styles<br>for <a href="http://www.w3.org/Provider/Style/IntoContext.html">hyperlinks</a><br>in the different<br>fragments.</div>
		</td></tr></table>
	</div>


<h3 id="max-lines">The 'max-lines' property</h3>

	<p>
		Authors may wish to style the opening lines of an element
		with different styles
		by putting those opening lines in a separate fragment.
		However, since it may be difficult to predict the exact height
		occupied by those lines
		in order to restrict the first fragment to that height,
		this specification introduces a 'max-lines' property
		that forces a fragment to break
		after a specified number of lines.
		This forces a break after the given number of lines
		contained within the element or its descendants,
		as long as those lines are in the same block formatting context.
	</p>

	<pre class=propdef>
		Name: max-lines
		Value: none | <<integer>>
		Initial: none
		Applies to: fragment boxes
		Inherited: no
		Animatable: as <a href="https://www.w3.org/TR/css3-transitions/#animatable-types">integer</a>
		Percentages: N/A
		Computed value: the keyword ''max-lines/none'' or an integer
		Animation type: by computed value type
	</pre>

	<dl dfn-for="max-lines" dfn-type="value">
		<dt><dfn>none</dfn>
		<dd>
			<p>
				Breaks occur only as specified elsewhere.
			</p>
		</dd>

		<dt><dfn><<integer>></dfn>
		<dd>
			<p>
				In addition to any breaks specified elsewhere,
				a break is forced before any line that would exceed
				the given number of lines
				being placed inside the element
				(excluding lines that are in
				a different block formatting context from
				the block formatting context to which
				an unstyled child of the element would belong).
			</p>

			<p class="issue">
				If there are multiple boundaries between this line
				and the previous, where exactly (in terms of element
				boundaries) is the break forced?
			</p>

			<p>
				Only positive integers are accepted.
				Zero or negative integers are a parse error.
			</p>
		</dd>
	</dl>

<p class="issue">Should this apply to fragment overflow only, or also
to pagination?
Given what we're doing with the continue property,
it should actually apply to any fragmentainer.</p>

Issue: having max-lines do nothing on regular elements is not ideal.
When applied to non fragmentainers,
it should probably cause 'continue' to compute to ''continue/discard''
so that you only need to reach for one property rather than 2 to get
that effect.

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .article {
    continue: fragments;
  }
  .article::first-letter {
    font-size: 2em;
    line-height: 0.9;
  }
  .article::nth-fragment(1) {
    font-size: 1.5em;
    max-lines: 3;
  }
  .article::nth-fragment(2) {
    column-count: 2;
  }
&lt;/style&gt;
&lt;div class="article"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="article-max-lines-demo one">The max-lines property allows<br>authors to use a larger font for the first<br>few lines of an article.  Without the</div>
			<div class="article-max-lines-demo two">max-lines property, authors<br>might have to use the<br>'height' property instead, but<br>that would leave a slight gap<br>if the author miscalculated<br>how much height a given<br>number of lines would<br>occupy (which might be</div>
			<div class="article-max-lines-demo three">particularly hard if the author<br>didn't know what text would<br>be filling the space, exactly<br>what font would be used, or<br>exactly which platform's font<br>rendering would be used to<br>display the font).</div>
		</td></tr></table>
	</div>

Privacy and Security Considerations {#priv-sec}
===============================================

This specification introduces no new security considerations.

The <a href="http://www.w3.org/2001/tag/">TAG</a> has developed a <a href="https://www.w3.org/TR/security-privacy-questionnaire/">self-review questionnaire</a>
to help editors and Working Groups evaluate the risks introduced by their specifications.
Answers are provided below.

<dl>
<dt>Does this specification deal with personally-identifiable information?
<dd>No.

<dt>Does this specification deal with high-value data?
<dd>No.

<dt>Does this specification introduce new state for an origin that persists across browsing sessions?
<dd>No.

<dt>Does this specification expose persistent, cross-origin state to the web?
<dd>No.

<dt>Does this specification expose any other data to an origin that it doesn’t currently have access to?
<dd>No.

<dt>Does this specification enable new script execution/loading mechanisms?
<dd>No.

<dt>Does this specification allow an origin access to a user’s location?
<dd>No.

<dt>Does this specification allow an origin access to sensors on a user’s device?
<dd>No.

<dt>Does this specification allow an origin access to aspects of a user’s local computing environment?
<dd>No.

<dt>Does this specification allow an origin access to other devices?
<dd>No.

<dt>Does this specification allow an origin some measure of control over a user agent’s native UI?
<dd>No

<dt>Does this specification expose temporary identifiers to the web?
<dd>No.

<dt>Does this specification distinguish between behavior in first-party and third-party contexts?
<dd>No.

<dt>How should this specification work in the context of a user agent’s "incognito" mode?
<dd>No difference in behavior is needed.

<dt>Does this specification persist data to a user’s local device?
<dd>No.

<dt>Does this specification have a "Security Considerations" and "Privacy Considerations" section?
<dd>Yes, this is the section you are currently reading.

<dt>Does this specification allow downgrading default security characteristics?
<dd>No.
</dl>

<h2 id="changes" class="no-num">
Changes</h2>
<h3 id="changes-l3">
Changes Since Level 3</h3>

The following changes were made to this specification since the
<a href="https://drafts.csswg.org/css-overflow-3/">CSS Overflow Module Level 3</a>:

<ul>
	<li>The Fragmentation of overflow, Paginated overflow, and Fragment overflow sections and subsections have been removed form Level 3 and moved to Level 4.
	<li>The 'scrollbar-gutter' property has been added.
</ul>

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	<p>
		Thanks especially to the feedback from
		Rossen Atanassov,
		Bert Bos,
		Tantek Çelik,
		John Daggett,
		fantasai,
		Daniel Glazman,
		Vincent Hardy,
		H&aring;kon Wium Lie,
		Peter Linss,
		Robert O'Callahan,
		Florian Rivoal,
		Alan Stearns,
		Steve Zilles,
		and all the rest of the
		<a href="http://lists.w3.org/Archives/Public/www-style/">www-style</a> community.
