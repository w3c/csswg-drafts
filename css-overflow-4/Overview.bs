<pre class="metadata">
Title: CSS Overflow Module Level 4
Status: ED
Work Status: Revising
ED: https://drafts.csswg.org/css-overflow-4/
Shortname: css-overflow
Group: csswg
Level: 4
TR: https://www.w3.org/TR/css-overflow-4/
Editor: L. David Baron, Mozilla https://www.mozilla.org/, https://dbaron.org/, w3cid 15393
Editor: Florian Rivoal, On behalf of Bloomberg, http://florian.rivoal.net/, w3cid 43241
Editor: Elika J. Etemad / fantasai, Apple, http://fantasai.inkedblade.net/contact, w3cid 35400
Abstract: This module contains the features of CSS relating to scrollable overflow handling in visual media.
	It builds on the <a href="https://www.w3.org/TR/css-overflow-3/">CSS Overflow Module Level 3</a>,
	defining
	'line-clamp', its longhands, and its legacy pre-standard syntax;
	adding a 'block-ellipsis' property;
	and expanding 'overflow-clip-margin' with longhands.
	An appendix also contains a more experimental exploration
	of <a href="#fragmentation">redirecting overflow by fragmentation</a>.
</pre>
<pre class="link-defaults">
type: dfn; spec:css-multicol-1; text:overflow column
spec:css-pseudo-4; type:selector; text:::first-letter
spec:css-pseudo-4; type:selector; text:::first-line
spec:css-writing-modes-4; type:dfn; text:start
spec:css-writing-modes-4; type:dfn; text:end
</pre>
<pre class="anchors">
url: https://drafts.csswg.org/selectors-3/#subject; type: dfn; text: subject;
url: https://www.w3.org/TR/CSS21/visudet.html#strut; type: dfn; text: strut;
</pre>
	<style>
		table.source-demo-pair {
			width: 100%;
		}

		.in-cards-demo {
			width: 13em;
			height: 8em;

			padding: 4px;
			border: medium solid blue;
			margin: 6px;

			font: medium/1.3 Times New Roman, Times, serif;
			white-space: nowrap;
		}

		.bouncy-columns-demo {
			width: 6em;
			height: 10em;
			float: left;
			margin: 1em;
			font: medium/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.bouncy-columns-demo.one {
			background: aqua; color: black;
			transform: rotate(-3deg);
		}
		.bouncy-columns-demo.two {
			background: yellow; color: black;
			transform: rotate(3deg);
		}

		.article-font-inherit-demo {
			font: 1em/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.article-font-inherit-demo.one {
			width: 12em;
			font-size: 1.5em;
			margin-bottom: 1em;
			height: 4em;
		}
		.article-font-inherit-demo.two {
			width: 11em;
			margin-left: 5em;
			margin-right: 2em;
		}

		.dark-columns-demo {
			width: 6em;
			height: 10em;
			float: left;
			margin-right: 1em;
			font: medium/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.dark-columns-demo.one {
			background: aqua; color: black;
		}
		.dark-columns-demo.one :link {
			color: blue;
		}
		.dark-columns-demo.one :visited {
			color: purple;
		}
		.dark-columns-demo.two {
			background: navy; color: white;
		}
		.dark-columns-demo.two :link {
			color: aqua;
		}
		.dark-columns-demo.two :visited {
			color: fuchsia;
		}

		.article-max-lines-demo {
			font: 1em/1.25 Times New Roman, Times, serif;
			white-space: nowrap;
		}
		.article-max-lines-demo.one::first-letter {
			font-size: 2em;
			line-height: 0.9;
		}
		.article-max-lines-demo.one {
			font-size: 1.5em;
			width: 16em;
		}
		.article-max-lines-demo.two {
			width: 11.5em;
			float: left; margin-right: 1em;
		}
		.article-max-lines-demo.three {
			width: 11.5em;
			float: left;
		}
		.awesome-table td { padding: 5px; }
		.awesome-table {
			color: #000;
			background: #fff;
			margin: auto;
		}
	</style>

<h2 id="intro">
Introduction</h2>

	This specification extends [[!CSS-OVERFLOW-3]].
	It contains several primary sections:

	: [[#overflow-properties|Overflow Scrolling and Clipping Controls]]
	::
		This section defines relatively simple extensions to the 'overflow-*' properties [[css-overflow-3#overflow-properties|in Level 3]].

	: [[#auto-ellipsis|Automatic Ellipses]].
	::
		This section defines some experimental extensions to the '*-ellipsis' properties [[css-overflow-3#auto-ellipsis|in Level 3]].

	: [[#fragmentation|Redirection of Overflow]]
	::
		This section defines a highly experimental, exploratory new model
		for handling overflow by redirecting it into newly-generated [=fragmentation containers=].

Note: At the time of writing, [[CSS-OVERFLOW-3]] is not completely finalized yet.
To avoid accidental divergences and maintenance overhead,
This specification is written as a delta specification over css-overflow Level 3.
Once the level 3 specification is final,
its content will be integrated into this specification,
which will then replace it.
Until then, this specification only contains additions and extensions to level 3.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

<h3 id="placement">
Module Interactions</h3>

	This module extends features defined in [[!CSS-OVERFLOW-3]].

<h2 id="overflow-concepts">
Overflow Concepts and Terminology</h2>

	Issue: Copy [[css-overflow-3#overflow-concepts|Level 3 content]] when final.


<h2 id="overflow-properties">
Scrolling and Clipping Overflow</h2>

	Issue: Copy [[css-overflow-3#overflow-properties|Level 3 content]] when final.

<h3 id="overflow-control">
Managing Overflow: the 'overflow-x', 'overflow-y', and 'overflow' properties</h3>

	This level extends the 'overflow-x' and 'overflow-y' properties
	(and 'overflow' [=shorthand=])
	to apply to [=replaced elements=].

	On [=replaced elements=],
	the [=used values=]
	of all computed values other than ''overflow/visible''
	is ''overflow/clip''.
	Host languages should define [=UA style sheet=] rules
	that apply a default value of ''overflow/clip'' to such elements
	and set their 'overflow-clip-margin' to ''overflow-clip-margin/content-box''.

	Note: Application of 'overflow' to [=replaced elements=] was added
	to allow images to paint effects outside their effective layout box;
	the recommended UA style sheet rules are to effect their original behavior as a default.
	See discussion in <a href="https://github.com/w3c/csswg-drafts/issues/7058">Issue 7059</a>
	and <a href="https://github.com/w3c/csswg-drafts/issues/7144">Issue 7144</a>.
	This is a change from <a href="https://www.w3.org/TR/CSS2/">CSS2.1</a>
	and is at-risk.

	ISSUE(7144): Application of 'overflow' to [=replaced elements=]
	is still being worked out.

<h3 id="overflow-clip-margin">
Expanding Clipping Bounds: the 'overflow-clip-margin-*' properties</h3>

	<pre class="propdef shorthand">
	Name: overflow-clip-margin-top, overflow-clip-margin-right, overflow-clip-margin-bottom, overflow-clip-margin-left, overflow-clip-margin-block-start, overflow-clip-margin-inline-start, overflow-clip-margin-block-end, overflow-clip-margin-inline-end
	Value: <<visual-box>> || <<length [0,∞]>>
	Initial: ''0px''
	Inherited: no
	Logical property group: overflow-clip-margin
	Applies to: boxes to which 'overflow' applies
	Computed value: the computed <<length>> and a <<visual-box>> keyword
	Animation type: per computed value if the <<visual-box>> values match; otherwise discrete
	</pre>

	<pre class="propdef shorthand">
	Name: overflow-clip-margin, overflow-clip-margin-inline, overflow-clip-margin-block
	Value: <<visual-box>> || <<length [0,∞]>>
	Initial: ''0px''
	Inherited: no
	Applies to: boxes to which 'overflow' applies
	</pre>

	These properties and their shorthands
	define the <dfn export>overflow clip edge</dfn> of the box,
	i.e. precisely <em>how far</em> outside its bounds
	the box’s content is allowed to paint
	before being clipped
	by effects (such as ''overflow: clip'', above)
	that are defined to clip to the box’s [=overflow clip edge=].
	The [=shorthand=]/[=longhand=] relationships are as for 'margin',
	but note that the [=shorthands=] have a restricted syntax.

	Values are defined as follows:

	<dl dfn-type=value dfn-for=overflow-clip-margin>
		: <dfn><<visual-box>></dfn>
		::
			Specifies the box edge to use as the [=overflow clip edge=] origin,
			i.e. when the specified offset is zero.

			If omitted,
			defaults to ''overflow-clip-margin/padding-box'' on non-[=replaced=] elements,
			or ''overflow-clip/content-box'' on [=replaced=] elements.

			ISSUE(7144): Application of 'overflow-clip-margin' to [=replaced elements=]
			is still being worked out.

		: <dfn><<length [0,∞]>></dfn>
		::
			The specified offset dictates
			how much the [=overflow clip edge=] is expanded from
			the specified box edge
			Negative values are invalid.
			Defaults to zero if omitted.
	</dl>

	The [=overflow clip edge=] is shaped in the corners
	exactly the same way as an <a spec=css-backgrounds-3>outer box-shadow</a>
	with a spread radius of the same cumulative offset
	from the box’s [=border edge=].
	See [[css-backgrounds-3#corner-shaping]]
	and [[css-backgrounds-3#shadow-shape]],
	noting in particular the formula for outsets beyond the [=border edge=].

	Note: This property has no effect on boxes
	with ''overflow: hidden'' or ''overflow: scroll'',
	which are not defined to use the [=overflow clip edge=].


<h2 id="auto-ellipsis">
Automatic Ellipses</h2>

<h3 id="text-overflow" caniuse="text-overflow">
Inline Overflow Ellipsis: the 'text-overflow' property</h3>

<pre class="propdef">
Name: text-overflow
Value: [ clip | ellipsis | <<string>> | fade | <<fade()>> ]{1,2}
Initial: clip
Applies to: block containers
Inherited: no
Percentages: refer to the width of the line box
Computed value: as specified, with lengths made absolute
Animation type: by computed value type
</pre>

ISSUE: This section might need to be re-synced against [[CSS-OVERFLOW-3]].

This property specifies rendering when inline content overflows
its line box edge
in the inline progression direction of its block container element ("the block")
that has 'overflow'
other than ''overflow/visible''.

Even though this property is not inherited,
anonymous block container boxes generated to
establish the line box's <a>inline formatting context</a> (see [=block container=])
are ignored,
and the value of the property that applies is the one
on the non anonymous box.
<span class=note>This can be seen in the “nested paragraph” part of <a href="#example-44082941">example 7</a>:
even though the word “NESTED” is wrapped in an anonymous block container
whose 'text-overflow' property has the initial value,
it is ellipsed.</span>

Text can overflow for example when it is prevented from wrapping
(e.g. due to <code class="lang-css">white-space: nowrap</code>
or a single word is too long to fit).
Values have the following meanings:

<dl dfn-for="text-overflow" dfn-type=value>
	<dt><dfn id=overflow-clip>clip</dfn>
	<dd>
		Clip inline content that overflows its block container element.
		Characters may be only partially rendered.

	<dt><dfn id=overflow-ellipsis>ellipsis</dfn>
	<dd>
		Render an ellipsis character (U+2026)
		to represent clipped inline content.
		Implementations may substitute a more language, script, or writing-mode appropriate
		ellipsis character,
		or three dots "..." if the ellipsis character is unavailable.

	<dt id=overflow-string><<string>>
	<dd>
		Render the given string to represent clipped inline content.
		The given string is treated as an independent paragraph
		for bidi purposes.

	<dt dfn-type=function><dfn>fade( [ <<length>> | <<percentage>> ] )</dfn>
	<dd>
		Clip inline content that overflows its line box.
		Characters may be only partially rendered.
		In addition, the UA must apply a fade out effect
		near the edge of the line box,
		reaching complete transparency at the edge.

		Issue: Do we need to define the way
		the fade out is calculated
		so that the fading is identical across browsers?
		It should probably be something like
		''mask-image: linear-gradient(to right, rgba(0,0,0,1), rgba(0,0,0,0))'',
		except applied to the relevant portion of the line only.

		The argument determines the distance
		over which the fade effect is applied.
		The <<percentage>> is resolved against the width of the line box.
		Values lower than 0 are clipped to 0.
		Values greater than the width of the line box are clipped to the width of the line box.

		Issue: If the line box is too short
		to display the fade effect at the desired length,
		should we drop the effect,
		or shrink the distance it is applied over until it fits,
		or clip the end of the fade?

		Issue: How should we deal with
		things overflowing out of the line box,
		or overlapping onto it?
		Should fade apply to the logical content of the line,
		or to the physical area of the line box,
		or the intersection of both?

	<dt><dfn>fade</dfn>
	<dd>
		Same as ''fade()'',
		but the distance over which the fading effect is applied
		is determined by the UA.
		''1em'' is suggested as a reasonable value.
</dl>

The term "character" is used in this property definition
for better readability and means "grapheme cluster" [[!UAX29]]
for implementation purposes.

If there is one value,
it applies only to the <a>end</a> line box edge.
If there are two values,
the first value applies to the <a>line-left</a> edge,
and the second value applies to the <a>line-right</a> edge.
The terms <a>end</a>, <a>line-left</a> and <a>line-right</a> are defined in [[!CSS-WRITING-MODES-3]].

Note: the use of <a>line-left</a> and <a>line-right</a>
rather than <a>start</a> and <a>end</a>
when there are two values is intentional,
to facilitate the use of directional characters such as arrows.

For the ellipsis
and string values,
implementations must hide characters and
<a href="https://www.w3.org/TR/CSS2/visuren.html#inline-boxes">
atomic inline-level elements</a>
at the applicable edge(s) of the line as necessary to fit the ellipsis/string, and
place the ellipsis/string immediately adjacent
to the applicable edge(s) of the remaining inline content.
The first character or
<a href="https://www.w3.org/TR/CSS2/visuren.html#inline-boxes">
atomic inline-level element</a>
on a line
must be clipped rather than ellipsed.

<div class=example>
<h3 id="bidi-ellipsis" class="no-num no-toc">Bidi ellipsis examples</h3>
These examples demonstrate which characters get hidden
to make room for the ellipsis in a bidi situation:
those visually at the edge of the line.

Sample CSS:
<pre><code highlight=css>
div {
  font-family: monospace;
  white-space: pre;
  overflow: hidden;
  width: 9ch;
  text-overflow: ellipsis;
}
</code></pre>

Sample HTML fragments, renderings, and your browser:
<table class="awesome-table data">
<thead><th>HTML<th>Reference rendering<th>Your Browser</thead>
<tr>
<td><code highlight=html>&lt;div>שלום 123456&lt;/div></code><td><div style="font-family:monospace">123456 ם…</div><td><div style="font-family: monospace; white-space: pre; overflow: hidden; width: 9ch; text-overflow: ellipsis">שלום 123456</div>
<tr><td><code highlight=html>&lt;div dir=rtl>שלום 123456&lt;/div></code><td><div style="font-family:monospace">…456 שלום</div><td><div style="font-family: monospace; white-space: pre; overflow: hidden; width: 9ch; text-overflow: ellipsis" dir=rtl>שלום 123456</div>

</table>


</div>


<h3 id="ellipsing-details" class="no-num no-toc">ellipsing details</h3>

<ul>
	<li>
		Ellipsing only affects rendering and must not affect layout
		nor dispatching of pointer events:
		The UA should dispatch any pointer event on the ellipsis to the elided element,
		as if 'text-overflow' had been ''text-overflow/none''.

	<li>
		The ellipsis is styled and baseline-aligned according to the block.

	<li>
		Ellipsing occurs after relative positioning and other graphical transformations.

	<li>
		If there is insufficient space for the ellipsis,
		then clip the rendering of the ellipsis itself
		(on the same side that neutral characters on the line
		would have otherwise been clipped with the ''text-overflow:clip'' value).
</ul>


<h3 id="ellipsis-interaction" class="no-num no-toc">user interaction with ellipsis</h3>

<ul>
	<li>
		When the user is interacting with content
		(e.g. editing, selecting, scrolling),
		the user agent may treat ''text-overflow/ellipsis'', string values, ''overflow-text/fade'' or ''overflow-text/fade()'' as ''text-overflow:clip''.

	<li>
		Selecting the ellipsis should select the ellipsed text.
		If all of the ellipsed text is selected,
		UAs should show selection of the ellipsis.
		Behavior of partially-selected ellipsed text is up to the UA.
</ul>

<div class="example">
	<h3 id="text-overflow-examples" class="no-num no-toc">text-overflow examples</h3>

	These examples demonstrate setting the text-overflow of a block container element
	that has text which overflows its dimensions:

	sample CSS for a div:
	<pre><code class="lang-css">
	div {
		font-family: Helvetica, sans-serif;
		line-height: 1.1;
		width: 3.1em;
		border: solid .1em black;
		padding: 0.2em; margin:1em 0;
	}
	</code></pre>

	sample HTML fragments, renderings, and your browser:
	<table class="awesome-table"><tbody>
	<tr>
		<th>HTML
		<th>sample rendering
		<th>your browser

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisawesome.png">
			First, a box with text drawing outside of it.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1;">CSS IS AWESOME, YES</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:clip;</strong> overflow:hidden"&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisaweso.png">
			Second, a similar box with the text clipped outside the box.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:clip;">CSS IS AWESOME, YES</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisaw.png">
			Third, a similar box with an ellipsis representing the clipped text.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">CSS IS AWESOME, YES</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
			NESTED
			 &lt;p&gt;PARAGRAPH&lt;/p&gt;
			WON'T ELLIPSE.
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/nes.png">
			Fourth, a box with a nested paragraph demonstrating anonymous block boxes equivalency and non-inheritance into a nested element.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">NESTED
			 <p>PARAGRAPH</p>
			WON'T ELLIPSE.</div>

	<tr>
		<td>
			<pre><code class="lang-markup">
			&lt;div style="<strong>text-overflow:fade;</strong> overflow:hidden"&gt;
			CSS IS AWESOME, YES
			&lt;/div&gt;
			</code></pre>

		<td>
			<object type="image/png" data="images/cssisfade.png">
			a box with the text fading out on overflow.
			</object>

		<td>
			<div style="width:3.1em; border:solid .1em black; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:clip;">CSS IS AWESOME, YES</div>
	</tbody></table>
</div>

Note: the side of the line that the ellipsis is placed depends on the 'direction' of the block.
E.g. an overflow hidden right-to-left
(<code class="lang-css">direction: rtl</code>)
block clips inline content on the <a spec=css-writing-modes-3>left</a> side,
thus would place a text-overflow ellipsis on the <a spec=css-writing-modes-3>left</a>
to represent that clipped content.

Issue: insert RTL example diagram here to illustrate note.


<h3 id="ellipsis-scrolling" class="no-num no-toc">ellipsis interaction with scrolling interfaces</h3>

This section applies to elements with text-overflow other than ''text-overflow:clip''
(non-clip text-overflow)
and overflow:scroll.

When an element with non-clip text-overflow has overflow of scroll
in the inline progression dimension of the text,
and the browser provides a mechanism for scrolling
(e.g. a scrollbar on the element,
or a touch interface to swipe-scroll, etc.),
there are additional implementation details that provide a better user experience:

When an element is scrolled (e.g. by the user, DOM manipulation),
more of the element's content is shown.
The value of text-overflow should not affect
whether more of the element's content is shown or not.
If a non-clip text-overflow is set,
then as more content is scrolled into view,
implementations should show whatever additional content fits,
only truncating content which would otherwise be clipped
(or is necessary to make room for the ellipsis/string),
until the element is scrolled far enough
to display the edge of the content
at which point that content should be displayed
rather than an ellipsis/string.

<div class="example">
	This example uses text-overflow on an element with overflow scroll
	to demonstrate the above described behavior.

	sample CSS:
	<pre><code class="lang-css">
	div.crawlbar {
		text-overflow: ellipsis;
		height: 2em;
		overflow: scroll;
		white-space: nowrap;
		width: 15em;
		border:1em solid black;
	}
	</code></pre>

	sample HTML fragment:
	<pre><code class="lang-markup">
	&lt;div class="crawlbar"&gt;
	CSS is awesome, especially when you can scroll
	to see extra text instead of just
	having it overlap other text by default.
	&lt;/div&gt;
	</code></pre>

	demonstration of sample CSS and HTML:
	<div style="text-overflow: ellipsis; height: 2em; overflow: scroll; white-space: nowrap; width: 15em; border:1em solid black;">
	CSS is awesome, especially when you can scroll
	to see extra text instead of just
	having it overlap other text by default.
	</div>
</div>

As some content is scrolled into view,
it is likely that other content may scroll out of view on the other side.
If that content's block container element is the same
that's doing the scrolling,
and the computed value of 'text-overflow' has two values, with
the value applying to the start edge being a non-clip value,
then implementations must render an ellipsis/string in place of
the clipped content,
with the same details as described in the value definition above,
except that the ellipsis/string is drawn in the <a>start</a>
(rather than <a>end</a>) of
the block's direction (per the direction property).

While the content is being scrolled,
implementations may adjust their rendering of ellipses/strings
(e.g. align to the box edges rather than line edges).

<div class="example">
	Same as previous example except with <code>text-overflow: ellipsis ellipsis</code>, demonstrated:

	<div style="text-overflow: ellipsis ellipsis; height: 2em; overflow: scroll; white-space: nowrap; width: 15em; border:1em solid black;">
	CSS is awesome, especially when you can scroll
	to see extra text instead of just
	having it overlap other text by default.
	</div>
</div>

If there is insufficient space for both start
and end ellipses/strings,
then only the end ellipsis/string should be rendered.

<h3 id="block-ellipsis">
Indicating Block-Axis Overflow: the 'block-ellipsis' property</h3>

	<pre class=propdef>
		Name: block-ellipsis
		Value: none | auto | <<string>>
		Initial: none
		Applies to: [=block containers=]
		Inherited: yes
		Percentages: N/A
		Computed value: specified value
		Animation type: discrete
	</pre>

	This property allows inserting content into the last line box
	before a (forced <em>or</em> unforced) <a>region break</a>
	to indicate the continuity of truncated/interrupted content.
	It only affects line boxes contained directly by the <a>block container</a> itself,
	but as it inherits, will have an effect on descendants’ line boxes unless overridden.
	If the box contains no line box immediately preceding a <a>region break</a>,
	then this property has no effect.

	Note: See [[#fragmentation]] for a way to generate boxes with such a [=region break=].

	ISSUE: Should this apply to other types of fragmentation breaks (e.g. pages, columns)?

	The inserted content is called the <dfn>block overflow ellipsis</dfn>.
	Values have the following meanings:

	<dl dfn-for="block-ellipsis" dfn-type=value>
		<dt><dfn>none</dfn>
		<dd>
			The rendering is unaffected.

		<dt><dfn>auto</dfn>
		<dd>
			Render an ellipsis character (U+2026)--
			or a more typographically-appropriate equivalent--
			as the <a>block overflow ellipsis</a>
			at the end of the affected line box.
			UAs should use the conventions of the
			<a>content language</a>,
			writing system, and
			<a>writing mode</a>
			to determine the most appropriate ellipsis string.

		<dt><dfn><<string>></dfn>
		<dd>
			Render the specified string
			as the <a>block overflow ellipsis</a>
			at the end of the affected line box.
			The UA may truncate this string if it is absurdly long.
	</dl>

	When 'block-ellipsis' is not ''block-ellipsis/none'',
	the <a>block overflow ellipsis</a> string
	is wrapped in an anonymous inline
	and placed at the end of the line box
	as a direct child of the <a>block container</a>’s <a>root inline box</a>,
	reducing the space in the line box
	available to the other contents of the line.
	This inline is assigned ''unicode-bidi: plaintext''
	and ''line-height: 0''
	and is placed in the line box after the last
	<a>soft wrap opportunity</a> (see [[!CSS-TEXT-3]])
	that would still allow the entire <a>block overflow ellipsis</a> to fit on the line.
	For this purpose, <a>soft wrap opportunities</a> added by 'overflow-wrap' are ignored.
	If this results in the entire contents of the line box being displaced,
	the line box is considered to contain a [=strut=], as defined in [[CSS2/visudet#leading]].
	Text <a href="https://www.w3.org/TR/css-text-3/#justification">alignment and justification</a>
	occurs after placement,
	and measures the inserted <a>block overflow ellipsis</a>
	together with the rest of the line’s content.

	Note: Setting the [=block overflow ellipsis=]'s 'line-height' to ''0''
	makes sure that inserting it cannot cause the line's height to grow,
	which could cause further relayouts and potentially cycles.
	This is almost equivalent to inserting the [=block overflow ellipsis=]
	as a paint-time operation, except that it still participates in alignment and justification.
	The downside is that unusually tall / deep glyphs in the [=block overflow ellipsis=]
	may overflow.

	The [=block overflow ellipsis=] must not be included
	in either the ''::first-letter'' nor the ''::first-line'' pseudo-elements.

	If there is a subsequent <a>fragmentation container</a> in the [=fragmentation context=]
	that would receive subsequent content,
	then the content displaced by the <a>block overflow ellipsis</a>
	must be pushed to that <a>fragmentation container</a>.

	The UA must treat the <a>block overflow ellipsis</a> as an unbreakable string,
	If any part of the [=block overflow ellipsis=] overflows,
	it is treated as [=scrollable overflow=],
	and its rendering is affected by the 'text-overflow' property.

	The <a>block overflow ellipsis</a> does not capture events:
	pointer events are dispatched to whatever is underneath it.

	It also has no effect on the intrinsic size of the box:
	its <a lt="min-content size">min-content</a> and <a lt="max-content size">max-content</a> sizes
	are calculated exactly as if 'block-ellipsis' were ''block-ellipsis/none''.

	Note: Future specifications may extend this feature,
	for example by providing an ''::ellipsis'' pseudo-element
	to style the text,
	or by allowing the selection of a child element of the block
	to use as either an inline-level or block-level indicator
	(in which case, it can capture events).


<h2 id=fragmentating-overflow>
Fragmenting Overflow</h2>

<h3 id=line-clamp>
Limiting Visible Lines: the 'line-clamp' shorthand property</h3>

	<pre class="propdef shorthand">
		Name: line-clamp
		Value: none | <<integer [1,∞]>> || <<'block-ellipsis'>>
		Initial: none
		Percentages: N/A
	</pre>

	The 'line-clamp' property is a <a>shorthand</a>
	for the 'max-lines', 'block-ellipsis', and 'continue' properties.

	Issue: For the time being,
	experimental implementations are encouraged
	to follow the full behavior defined by this shorthand and its longhands,
	but to only expose the shorthand to authors.
	This is in order to facilitate further tweaking,
	and in particular potential renaming,
	of the longhand properties and their values.

	It allows limiting the contents of a block container
	to the specified number of lines;
	remaining content is fragmented away
	and neither rendered nor measured.
	Optionally, it also allows inserting content into the last line box
	to indicate the continuity of truncated/interrupted content.

	The values have the following meaning:

	<dl dfn-for=line-clamp dfn-type=value>
		<dt><dfn>none</dfn>
		<dd>Sets 'max-lines' to ''max-lines/none'',
			'continue' to ''continue/auto'',
			and 'block-ellipsis' to ''block-ellipsis/none''.

		<dt><dfn><<integer [1,∞]>></dfn>
		</dt><dfn><'block-ellipsis'></dfn>
		<dd>
			Sets 'continue' to ''discard''
			if either or both values ares specified.

			Sets 'max-lines' to the specified <<integer>>
			or to ''max-lines/none'' if omitted,
			and 'block-ellipsis' to other component of the value if specified
			or to ''block-ellipsis/auto'' if omitted.

	</dl>

	See the corresponding longhand properties for details
	about how this mechanism operates.

	<div class="example">
		In this example, the lead paragraph of each article
		is listed in a shortened menu,
		truncated to fit within 5 lines
		that end with “… (continued on next page)”:

		<xmp highlight=css>
			li {
				line-clamp: 5 "… (continued on next page)";
			}
			strong {
				display: block;
				text-transform: uppercase;
			}
		</xmp>

		<xmp highlight=markup>
			<li><a href="cheese-is-milk">
				<strong>Cheese is Actually Made of Milk!</strong>
				Investigative reporters at the World Wide Web Press Corps
				have discovered the secret of cheese.
				Tracing through byzantine layers of bureaucracy and shadow corporations,
				our crack team of journalists have traced the source of camembert.
			</a></li>
		</xmp>

		Sample rendering:

		<pre class="figure">
			+---------------------------------------+
			| CHEESE IS ACTUALLY MADE OF MILK!      |
			| Investigative reporters at the World  |
			| Wide Web Press Corps have discovered  |
			| the secret of cheese. Tracing through |
			| byzantine…  (continued on next page)  |
			+---------------------------------------+
		</pre>
	</div>

<h4 id=webkit-line-clamp>
Legacy compatibility</h4>

	For compatibility with legacy content,
	UAs that support 'line-clamp' must also support the '-webkit-line-clamp' property
	and the additional ''-webkit-discard'' value for the 'continue' property.

	<pre class="propdef shorthand">
		Name: -webkit-line-clamp
		Value: none | <<integer [1,∞]>>
		Initial: none
		Percentages: N/A
	</pre>

	<pre class="propdef partial">
		Name: continue
		New Values: -webkit-discard
	</pre>

	Like 'line-clamp', '-webkit-line-clamp' is a shorthand of 'max-lines', 'continue', and 'block-ellipsis',
	except that:

	* its syntax is ''line-clamp/none'' | <<integer [1,∞]>>
	* it sets 'continue' to ''-webkit-discard'' instead of ''discard''
	* it unconditionally sets 'block-ellipsis' to ''block-ellipsis/auto''

	Additionally, for children (including anonymous children)
	of boxes whose 'display' property computes to ''-webkit-box'' or ''-webkit-inline-box'',
	the used values of the 'max-lines', 'continue', and 'block-ellipsis' properties
	are taken from the computed values of the parent box;
	the computed values of these properties on the box itself are ignored.

	The <dfn value for=continue>-webkit-discard</dfn> value behaves identically to ''discard'',
	except that it only takes effect
	if the computed value of the 'display' property on the parent
	is ''-webkit-box'' or ''-webkit-inline-box''
	and the computed value of the '-webkit-box-orient' property on the parent
	is ''-webkit-box-orient/vertical''.

	Note: Implementations of the legacy '-webkit-line-clamp' property
	have not behaved identically to what is specified here.
	The historical behavior is quirky and less robust,
	as documented for example in <a href="https://medium.com/mofed/css-line-clamp-the-good-the-bad-and-the-straight-up-broken-865413f16e5">this blog post</a>.
	The current design learns from the mistakes of that early experiment,
	and is intended to be sufficiently compatible with existing content
	that implementations can eventually be changed to follow to the specified behavior.
	If further adjustments are found to be necessary,
	they will be incorporated to this specification.
	In the meanwhile, authors should be aware that there may be discrepancies.

<h3 id="max-lines">
Forcing a Break After a Set Number of Lines: the 'max-lines' property</h3>

	<pre class=propdef>
		Name: max-lines
		Value: ''none'' | <<integer [1,∞]>>
		Initial: ''none''
		Applies to: <a>block containers</a> which are also [=fragmentation containers=] that capture [=region breaks=]
		Inherited: no
		Percentages: N/A
		Computed value: the keyword ''max-lines/none'' or an integer
		Animation type: by computed value type
	</pre>

	This property only has an effect on boxes that are [=fragmentation containers=] that capture [=region breaks=].

	Also, if the value of 'max-lines' is not <dfn for=max-lines dfn-type=value>none</dfn>,
	a <a>region break</a>
	is forced after its <var>N</var>th
	descendant <a>in-flow</a> <a>line box</a>,
	where <var>N</var> is the specified value of 'max-lines'.
	Only lines boxes in the same <a>Block Formatting Context</a>
	are counted:
	the contents of descendants that establish <a>independent formatting contexts</a>
	are skipped over while counting line boxes.

	If fewer than <var>N</var> line boxes exist,
	then 'max-lines' introduces no <a>region break</a>.

	<div class=example>
		As ''continue: discard'' does not cause the element to [=establish an independent formatting context=],
		lines in a nested element with 'line-clamp' are counted,
		as can be seen in the examples below.
		<xmp highlight=markup>
			<div id=a>
				a: line 1<br>
				a: line 2<br>
				<div id=b>
					b: line 1<br>
					b: line 2<br>
					b: line 3<br>
					b: line 4<br>
				</div>
				a: line 3<br>
				a: line 4<br>
			</div>
		</xmp>
		Sample rendering given <code highlight=css>#a { line-clamp: 5; } #b { line-clamp: 2; }</code>:
		<pre>
			a: line 1
			a: line 2
			b: line 1
			b: line 2…
			a: line 3…
		</pre>

		Sample rendering given <code highlight=css>#a { line-clamp: 3; } #b { line-clamp: 2; }</code>:
		<pre>
			a: line 1
			a: line 2
			b: line 1…
		</pre>
		Note that in the second case,
		the maximum of 2 lines set on element ''#b'' does not take effect,
		since a forced break is introduced
		before the second line of this element.
	</div>

	Note: This implies that 'max-lines' has no effect when applied to [=multi-column containers=],
	since any line box they contain are nested into [=independent formatting contexts=].

	Only positive integers are accepted.
	Zero or negative integers are invalid
	and must cause the declaration to be <a>ignored</a>.

	Note: The 'widows', 'orphans', and 'break-inside' properties
	do not affect the position of the forced <a>region break</a>
	introduced by the 'max-lines' property.

	<div class=note>
		Note: Despite the “region break” name, this is not a dependency on [[CSS-REGIONS-1]].
		The word “region” is only used as a classifier for forced breaks:
		they can be “page breaks” (breaks across pages [[css-page-3]]),
		“column breaks” (breaks across multi-column layout columns [[css-multicol-1]]),
		or “region breaks” (breaks across any other kind of CSS-induced <a>fragmentation containers</a>).

		If an implementation supports neither [[CSS-REGIONS-1]] nor [[CSS-OVERFLOW-4#fragmentation]],
		then it will have had no occasion yet to run into that kind of breaks,
		and this will be an addition.
		However the addition does not involve bringing over any of the [[CSS-REGIONS-1]] functionality.
		All that is needed is:

		* be able to fragment
		* classify these fragmentation containers as “Category 3”
			(i.e. not pages nor columns)
			for the purpose of forced breaks.
	</div>

<h3 id="continue">
Fragmentation of Overflow: the 'continue' property</h3>

	<pre class=propdef>
		Name: continue
		Value: auto | discard
		Initial: ''continue/auto''
		Applies to: [=block containers=] and [=multicol containers=]
		Inherited: no
		Percentages: N/A
		Computed value: specified keyword
		Animation type: discrete
	</pre>

	The 'continue' property gives authors the ability
	to turn a box into a [=fragmentation container=] (see [[!CSS-BREAK-3]])
	and to specify that content after the [=fragmentation break=] must be discarded.

	Issue: This property is meant to generalize and replace the <code>region-fragment</code> property from [[CSS-REGIONS-1]].
	Once it is sufficiently stable in this specification,
	<code>region-fragment</code> should be removed from the regions specification in favor of this.

	<dl dfn-for="continue" dfn-type="value">
		<dt><dfn>auto</dfn>
		<dd>

			If the box has more content than can fit,
			the excess content is handled according to the usual rules.

		<dt><dfn>discard</dfn>
		<dd>
			The box becomes a [=fragmentation container=]
			that captures <a>region breaks</a>,
			if it is not already.
			[[!CSS-BREAK-3]]
			Content after the first [=region break=] is not rendered (see below).
			(If the box is a [=multi-column container=],
			any [=overflow columns=] are also not rendered.)


			Note: This [=region break=] might be <a lt="forced break">forced</a>
			(e.g. imposed by 'max-lines' or by another mechanism,
			such as the 'break-before'/'break-after' properties)
			or [=unforced break|unforced=]
			(e.g. if the content would otherwise overflow this [=fragmentation container=]
			due to its size constraints).
			Breaks applying to other [=fragmentation contexts=]
			(such as pagination of this box itself)
			do not cause any content to be discarded.
	</dl>

	Note: This property does <em>not</em> cause the box to [=establish an independent formatting context=].

	<div class=example>
		Given an article with one excessively long overflowing line,
		and four more lines than can fit in the [=fragmentation direction=] as in the illustration bellow,
		different renderings are possible based on the combination of the 'overflow' and 'continue' property.

		<figure>
		<img src="images/continue-flow.png" alt="article with one excessively long line and four more that can fit in the block direction">
		</figure>


		<table class=data>
			<tr>
				<th>
				<th>''continue: discard''
				<th>''continue: auto''

			<tr>
				<th>''overflow: visible''

				<td style=vertical-align:top><img src="images/continue-discard-visible.png" alt=
				"rendering with continue:discard and overflow:visible"></td>

				<td><img src="images/continue-auto-visible.png"
				alt="rendering with continue:auto and overflow:visible"></td>
			</tr>

			<tr>
				<th>''overflow: hidden''

				<td><img src="images/continue-discard-hidden.png" alt=
				"rendering with continue:discard and overflow:hidden"></td>

				<td><img src="images/continue-auto-hidden.png"
				alt="rendering with continue:auto and overflow:hidden"></td>
			</tr>
		</table>

	</figure>
	</div>

	Content that is “not rendered” due to ''continue: discard''
	is discarded, similar to ''display: none'':
		* It is not rendered.
		* It is also not made available for speech rendering.
		* It does not allow user interaction.
		* Issue(2970): Make sure effects on OM are well defined
		* Issue(2971): What about [=positioned=] elements whose static position is in the discarded content are not rendered?
			See also discussions in the <a href="https://lists.w3.org/Archives/Public/www-style/2018Jul/0030.html">Sydney F2F meeting</a>.

	However, since intrinsic sizes are calculated across <a>fragmentation containers</a>,
	this content <em>is</em> taken into account
	for the purpose of finding the box’s
	<a lt="min-content inline size">min-content</a> and <a>max-content</a> <a>inline sizes</a>
	(see [[css-break-3#varying-size-boxes]]).
	<a lt="min-content inline size">Min-content</a> and <a>max-content</a> <a>block sizes</a>
	are calculated based on the content
	from the start of the [=fragmented flow=]
	to the first [=forced break=] if any,
	or to the end of the [=fragmented flow=] if there is no forced break.

<!--
	Calculating intrinsic block sizes to the first forced <em>or unforced</em> break
	would cause intrinsic sizes to depend on layout, which would cause circularities.
-->

	Note: In the case of <a href="https://www.w3.org/TR/css-break-3/#parallel-flows">parallel fragmentation flows</a>,
	content occurring after the <a>fragmentation break</a> in the box tree
	could still be rendered,
	if it is laid out above the position
	representing the end of this <a>fragmentation container</a>.


<h2 id="fragmentation" class=no-num>
Appendix A: Redirection of Overflow</h2>

	<!-- Abstract: This module contains the features of CSS relating to new mechanisms of overflow handling in visual media (e.g., screen or paper).  In interactive media, it describes features that allow the overflow from a fixed size container to be handled by pagination (displaying one page at a time).  It also describes features, applying to all visual media, that allow the contents of an element to be spread across multiple fragments, allowing the contents to flow across multiple regions or to have different styles for different fragments. -->

	ISSUE: This section is highly experimental.
	It documents current attempts
	at extending the capabilities of the 'continue' property
	to solve additional use cases.
	However, it does not currently have consensus.
	It is presented here to encourage discussion,
	but non-experimental implementation is not recommended.

	<p>
		In CSS Level 1 [[CSS1]], placing more content than would fit
		inside an element with a specified size
		was generally an authoring error.
		Doing so caused the content to extend
		outside the bounds of the element,
		which would likely cause
		that content to overlap with other elements.
	</p>

	<p>
		CSS Level 2 [[CSS2]] introduced the 'overflow' property,
		which allows authors to have overflow be handled by scrolling,
		which means it is no longer an authoring error.
		It also allows authors to specify
		that overflow is handled by clipping,
		which makes sense when the author's intent
		is that the content not be shown.
		This was further refined in the CSS Overflow Module Level 3 [[CSS-OVERFLOW-3]].
	</p>

	<p>
		However, scrolling is not the only way
		to present large amounts of content,
		and may even not be the optimal way.
		After all, the codex replaced the scroll
		as the common format for large written works
		because of its advantages.
	</p>

	<p>
		This specification introduces
		a mechanism for Web pages to specify
		that an element of a page should handle overflow
		through pagination rather than through scrolling.
	</p>

	<p>
		This specification also extends the concept of overflow
		in another direction.
		Instead of requiring that authors specify a single area
		into which the content of an element must flow,
		this specification allows authors to specify multiple fragments,
		each with their own dimensions and styles,
		so that the content of the element can flow from one to the next,
		using as many as needed to place the content without overflowing.
	</p>

	<p>
		In both of these cases, implementations must
		break the content in the block-progression dimension.
		Implementations must do this is described
		in the CSS Fragmentation Module [[!CSS-BREAK-3]].
	</p>

<h3 id="channelling-overflow">
Channeling Overflow: the 'continue' property</h3>

The 'continue' property gives authors the ability
to request that content that does not fit inside an element
be fragmented (in the sense of [[!CSS-BREAK-3]]),
and provides alternatives
for where the remaining content should continue.

Notably, this property explains traditional pagination,
and extends it further.

	<pre class="propdef partial">
		Name: continue
		New Values: overflow | paginate | fragments
		Initial: auto
		Applies to: block containers [[!CSS2]], flex containers [[!CSS3-FLEXBOX]], and grid containers [[!CSS3-GRID-LAYOUT]]
		Inherited: no
		Percentages: N/A
		Computed value: see below
		Animation type: discrete
	</pre>

Issue: The naming of this property and its values is preliminary.
This was initially proposed as
"fragmentation: auto | none | break | clone | page"
in <a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html">https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html</a>,
and there is not yet wide agreement as to which naming is better.

Issue: This property is meant to generalize and replace 'region-fragment'.
Once it is sufficiently stable in this specification,
'region-fragment' should be removed from the regions specification in favor of this.

Note: ''continue: fragments'' replaces "overflow:fragments"
from earlier versions of this specification,
while ''continue: paginate'' replaces "overflow: paged-x | paged-y | paged-x-controls | paged-y-controls"

	<dl dfn-for="continue" dfn-type="value">
		<dt>auto
		<dd>''continue/auto'' may only occur as a computed value
		if the element is a <a spec="css-regions">CSS Region</a>
		other than the last one in a <a spec="css-regions">region chain</a>.
		Content that doesn't fit is pushed to the next region of the chain.

		In all other cases, ''continue/auto'' computes to one of the other values.

		Issue: this is different from the definition in [[#continue]],
		where the specified value is the computed value.
		Which is model better?

		<dt><dfn>overflow</dfn>
		<dd>Content that doesn't fit overflows, according to the 'overflow' property

		<dt><dfn>paginate</dfn>
		<dd>Content that doesn't fit paginates.
		This creates a paginated view inside the element
		similar to the way that 'overflow: scroll' creates a scrollable view.

		See <a href="#paginated-overflow">paginated overflow</a>

		Note: Print is effectively "continue: paginate" on the root.
		<dt><dfn>fragments</dfn>
		<dd>content that doesn't fit causes the element to copy itself and continue laying out.

		See <a href="#fragment-overflow">fragment overflow</a>.
	</dl>

The computed value of the 'continue' for a given element or pseudo element is determined as follow:
<ol>
	<li>On elements or pseudo elements with <a>layout containment</a> (see [[!CSS-CONTAIN-1]]),
	if the specified value is ''continue/auto'' or ''continue/fragments''
	then the computed value is ''continue/overflow''.
	<li>Otherwise, if the specified value is ''continue/auto''
	<ol>
		<li>On a <a spec="css-regions">CSS Region</a> other than the last one in a <a spec="css-regions">region chain</a>,
		the computed value is ''continue/auto''
		<li>On a page
		the computed value is ''continue/paginate''
		<li>On a <a>fragment box</a>
		the computed value is ''continue/fragments''
		<li>Otherwise, the computed value is ''continue/overflow''
	</ol>
	<li>Otherwise, if the specified value is ''continue/fragments''
	<ol>
		<li>On a page
		the computed value is ''continue/paginate''
		<li>Otherwise, the computed value is the specified value
	</ol>
	<li>In all other cases, the computed value is the specified value
</ol>

Issue: If we introduce a pseudo element that can select columns in a multicol,
we would need to specify that auto computes to auto on it,
or introduce a new value and have auto compute to that
(but what would that value compute to on things that aren't columns?).

Note: For background discussions leading to this property, see these threads:
<a href="http://lists.w3.org/Archives/Public/www-style/2012May/1197.html">discussion of overflow, overflow-x, overflow-y and overflow-style</a> and
<a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0357.html">proposal for a fragmentation property</a>

<h3 id="paginated-overflow">
Paginated overflow</h3>

This section introduces and defines the meaning of the ''continue/paginate'' value of the 'continue' property.

Issue: Write this section

Issue: Pages should be possible to style with @page rules. How does that work for nested pages?

<div class="issue">
Should traditional pagination (e.g. when printing)
be expressed through some magic in the computed value of ''continue/auto'',
or by inserting this in the UA stylesheet:
<pre><code class="lang-css">
@media (overflow-block: paged), (overflow-block: optional-paged) {
	:root {
		continue: paginate;
	}
}
</code></pre>
</div>

Issue: Traditional pagination (e.g. when printing) assumes that
:root is contained in the page box,
rather than having the page box be a pseudo element child of :root.
Can we work around that using something similar to fragment boxes?
Or maybe by having a fragment box (reproducing :root) inside a page box inside :root?

Issue: How does the page box model work when it is a child of a regular css box?

Issue: The initial proposal in [[CSS3GCPM]] and implementation from Opera
used 4 values instead of ''continue/paginate'':
"paged-x | paged-y | paged-x-controls | paged-y-controls".
Should this property also include these values,
or are they better handled as separate properties?
(e.g.: "pagination-layout: auto | horizontal | vertical", "pagination-controls: auto | none")

Issue: Ability to display N pages at once
rather than just one page at once?
Could this be a value of "pagination-layout", such as:
"pagination-layout: horizontal 2;"

Issue: Brad Kemper has proposed a model for combining pagination and
fragment overflow, which also deals with displaying multiple pages.
<a href="http://www.w3.org/mid/FF1704C5-D5C1-4D6F-A99D-0DD094036685@gmail.com">http://www.w3.org/mid/FF1704C5-D5C1-4D6F-A99D-0DD094036685@gmail.com</a>

	<p class="issue">
		The current implementation of paginated overflow uses
		the overflow/overflow-x/overflow-y properties
		rather than the overflow-style property as proposed
		in the [[CSS3GCPM]] draft
		(which also matches the [[CSS3-MARQUEE]] proposal).
		or the 'continue' property as described here.
	</p>

<h3 id="fragment-overflow">
Fragmented Overflow</h2>

This section introduces and defines the meaning of
the ''continue/fragments'' value of the 'continue' property.

	<p>
		When the computed value of 'continue' for an element is ''continue/fragments'',
		and implementations would otherwise have created a box for the element,
		then implementations must create a sequence of <dfn>fragment box</dfn>es
		for that element.
		(It is possible for an element with ''continue: fragments''
		to generate only one <a>fragment box</a>.
		However, if an element's computed 'continue' is not ''continue/fragments'',
		then its box is not a <a>fragment box</a>.)
		Every <a>fragment box</a> is a fragmentation container,
		and any overflow
		that would cause that fragmentation container to fragment
		causes another <a>fragment box</a> created as a next sibling
		of the previous one.
		<span class="issue">Or is it as though it's a next sibling of
		the element?  Need to figure out exactly how this interacts with
		other box-level fixup.</span>
		Additionally, if the <a>fragment box</a> is also
		a multi-column box (as defined in [[!css-multicol-1]]
		<span class="issue">though it defines <i>multi-column container</i></span>)
		any content that would lead to the creation of <a>overflow columns</a> [[!css-multicol-1]]
		instead is flown into an additional fragment box.
		However, fragment boxes may themselves be broken
		(due to fragmentation in a fragmentation context outside of them,
		such as pages, columns, or other fragment boxes);
		such breaking leads to fragments of the same fragment box
		rather than multiple fragment boxes.
		(This matters because fragment boxes may be styled by their index;
		such breaking leads to multiple fragments of a fragment box
		with a single index.
		This design choice is so that
		breaking a fragment box across pages does not break
		the association of indices to particular pieces of content.)
		<span class="issue">Should a forced break that breaks to
		an outer fragmentation context cause a new fragment of a single
		fragment box or a new fragment box?</span>
		<span class="issue">Should we find a term other than
		<a>fragment box</a> here to make this a little less confusing?</span>
	</p>

	<p class="issue">
		What if we want to be able to style the pieces of an element
		split within another type of fragmentation context?
		These rules prevent ever using ''::nth-fragment()'' for that,
		despite that the name seems the most logical name for such a feature.
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;title&gt;Breaking content into
  equal-sized cards&lt;/title&gt;
&lt;style&gt;
  .in-cards {
    continue: fragments;

    width: 13em;
    height: 8em;

    padding: 4px;
    border: medium solid blue;
    margin: 6px;

    font: medium/1.3 Times New
      Roman, Times, serif;
  }
&lt;/style&gt;
&lt;div class="in-cards"&gt;
  In this example, the text in the div
  is broken into a series of cards.
  These cards all have the same style.
  The presence of enough content to
  overflow one of the cards causes
  another one to be created.  The second
  card is created just like it's the
  next sibling of the first.
&lt;/div&gt;</code></pre></td><td>
			<div class="in-cards-demo">In this example, the text in the<br>div is broken into a series of<br>cards.  These cards all have the<br>same style. The presence of<br>enough content to overflow<br>one of the cards causes another</div>
			<div class="in-cards-demo">one to be created.  The second<br>card is created just like it's the<br>next sibling of the first.</div>
		</td></tr></table>
	</div>

	<div class="example">
		Authors may wish to style the opening lines of an element
		with different styles
		by putting those opening lines in a separate fragment.
		However, since it may be difficult to predict the exact height
		occupied by those lines
		in order to restrict the first fragment to that height,
		it is more convenient to use the 'max-lines' property,
		which forces a fragment to break
		after a specified number of lines.
		This forces a break after the given number of lines
		contained within the element or its descendants,
		as long as those lines are in the same block formatting context.

		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .article {
    continue: fragments;
  }
  .article::first-letter {
    font-size: 2em;
    line-height: 0.9;
  }
  .article::nth-fragment(1) {
    font-size: 1.5em;
    max-lines: 3;
  }
  .article::nth-fragment(2) {
    column-count: 2;
  }
&lt;/style&gt;
&lt;div class="article"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="article-max-lines-demo one">The max-lines property allows<br>authors to use a larger font for the first<br>few lines of an article.  Without the</div>
			<div class="article-max-lines-demo two">max-lines property, authors<br>might have to use the<br>'height' property instead, but<br>that would leave a slight gap<br>if the author miscalculated<br>how much height a given<br>number of lines would<br>occupy (which might be</div>
			<div class="article-max-lines-demo three">particularly hard if the author<br>didn't know what text would<br>be filling the space, exactly<br>what font would be used, or<br>exactly which platform's font<br>rendering would be used to<br>display the font).</div>
		</td></tr></table>
	</div>

	<p class="issue">
		We should specify that ''continue: fragments'' does not apply
		to at least some table parts,
		and perhaps other elements as well.
		We need to determine exactly which ones.
	</p>

	<p class="issue">
		This specification needs to say which type of
		fragmentation context is created
		so that it's clear which values of the 'break-*' properties
		cause breaks within this context.
		We probably want ''break-*: region'' to apply.
	</p>

	<p class="issue">
		This specification needs a processing model
		that will apply in cases where the layout containing the
		fragments has characteristics that use the intrinsic size of the fragments
		to change the amount of space available for them,
		such as [[CSS3-GRID-LAYOUT]].
		There has already been some work on such a processing model
		in [[CSS-REGIONS-1]],
		and the work done on a model there,
		and the editors of that specification,
		should inform what happens in this specification.
	</p>

<h3 id="fragment-styling">Fragment styling</h3>

<h4 id="fragment-pseudo-element">The ''::nth-fragment()'' pseudo-element</h4>

	<p>
		The <dfn selector>::nth-fragment()</dfn> pseudo-element
		is a pseudo-element
		that describes some of the <a>fragment box</a>es generated by an element.
		The argument to the pseudo-element takes the same syntax
		as the argument to the :nth-child() pseudo-class
		defined in [[!SELECT]], and has the same meaning
		except that the number is relative to
		<a>fragment box</a>es generated by the element
		instead of siblings of the element.
	</p>

	<p class="note">
		Selectors that allow addressing fragments
		by counting from the end rather than the start
		are intentionally not provided.
		Such selectors would interfere with determining
		the number of fragments.
	</p>

	<p class="issue">
		Depending on future discussions,
		this ''::nth-fragment(<var>an+b</var>)'' syntax
		may be replaced with
		the new ''::fragment:nth(<var>an+b</var>)'' syntax.
	</p>

<h4 id="style-of-fragments">Styling of fragments</h4>

	<p class="issue">
		Should this apply to continue:fragments only,
		or also to continue:paginate?
		(If it applies,
		then stricter property restrictions would be needed
		for continue:paginate.)
	</p>

	<p>
		In the absence of rules with ''::nth-fragment()'' pseudo-elements,
		the computed style for each <a>fragment box</a>
		is the computed style for the element
		for which the <a>fragment box</a> was created.
		However, the style for a <a>fragment box</a> is also influenced
		by rules whose selector's <a>subject</a> [[!SELECT]]
		has an ''::nth-fragment()'' pseudo-element,
		if the 1-based number of the <a>fragment box</a> matches
		that ''::nth-fragment()'' pseudo-element
		and the selector (excluding the ''::nth-fragment()'' pseudo-element)
		matches the element generating the fragments.
	</p>

	<p>
		When determining the style of the <a>fragment box</a>,
		these rules that match the fragment pseudo-element
		cascade together with the rules that match the element,
		with the fragment pseudo-element adding the specificity
		of a pseudo-class to the specificity calculation.
		<span class="issue">Does this need to be specified in
		the cascading module as well?</span>
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .bouncy-columns {
    continue: fragments;
    width: 6em;
    height: 10em;
    float: left;
    margin: 1em;
    font: medium/1.25 Times New
      Roman, Times, serif;
  }
  .bouncy-columns::nth-fragment(1) {
    background: aqua; color: black;
    transform: rotate(-3deg);
  }
  .bouncy-columns::nth-fragment(2) {
    background: yellow; color: black;
    transform: rotate(3deg);
  }
&lt;/style&gt;
&lt;div class="bouncy-columns"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="bouncy-columns-demo one">In this<br>example, the<br>text in the div<br>is broken into<br>a series of<br>columns.  The<br>author<br>probably</div>
			<div class="bouncy-columns-demo two">intended the<br>text to fill two<br>columns.  But<br>if it happens to<br>fill three<br>columns, the<br>third column is<br>still created.  It</div>
			<div class="bouncy-columns-demo">just doesn't<br>have any<br>fragment-specific<br>styling because<br>the author<br>didn't give it<br>any.</div>
		</td></tr></table>
	</div>

	<p>
		Styling an ''::nth-fragment()'' pseudo-element with the 'continue'
		property does take effect;
		if a <a>fragment box</a> has a
		computed value of 'continue' other than ''fragments''
		then that fragment box is the last fragment.
		However, overriding 'continue' on the first fragment
		does not cause the <a>fragment box</a> not to exist;
		whether there are fragment boxes at all is determined by
		the computed value of overflow for the element.
	</p>

	<p>
		Styling an ''::nth-fragment()'' pseudo-element with the 'content'
		property has no effect;
		the computed value of 'content' for the fragment box
		remains the same as the computed value of content for the element.
	</p>

	<p>
		Specifying ''display: none'' for a <a>fragment box</a> causes
		the fragment box with that index not to be generated.
		However, in terms of the indices
		used for matching ''::nth-fragment()'' pseudo-elements
		of later fragment boxes,
		it still counts as though it was generated.
		However, since it is not generated, it does not contain any content.
	</p>

	<p>
		Specifying other values of 'display', 'position',
		or 'float' is permitted, but is not allowed to change
		the <a>inner display type</a>.
		(Since 'continue' only
		applies to block containers, flex containers, and grid containers).
		<span class="issue">Need to specify exactly how this works</span>
	</p>

	<p>
		To match the model for other pseudo-elements
		where the pseudo-elements live inside their corresponding element,
		declarations in ''::nth-fragment()'' pseudo-elements override
		declarations in rules without the pseudo-element.
		The relative priority within such declarations is determined
		by normal cascading order (see [[!CSS2]]).
	</p>

	<p>
		Styles specified on ''::nth-fragment()'' pseudo-elements
		do affect inheritance to content within the <a>fragment box</a>.
		In other words, the content within the <a>fragment box</a> must
		inherit from the fragment box's style (i.e., the pseudo-element style)
		rather than directly from the element.
		This means that elements split between fragment boxes may
		have different styles for different parts of the element.
	</p>

	<p class="issue">
		This inheritance rule allows specifying styles indirectly
		(by using explicit ''inherit'' or using default inheritance
		on properties that don't apply to ''::first-letter'')
		that can't be specified directly
		(based on the rules in the next section).
		This is a problem.
		The restrictions that apply to styling inside fragments
		should also apply to inheritance from fragments.
	</p>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .article {
    continue: fragments;
  }
  .article::nth-fragment(1) {
    font-size: 1.5em;
    margin-bottom: 1em;
    height: 4em;
  }
  .article::nth-fragment(2) {
    margin-left: 5em;
    margin-right: 2em;
  }
&lt;/style&gt;
&lt;div class="article"&gt;
  The &lt;code&gt;font-size&lt;/code&gt; property<i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="article-font-inherit-demo one">The <code>font-size</code> property<br>specified on the fragment<br>is inherited into the</div>
			<div class="article-font-inherit-demo two">descendants of the fragment.<br>This means that inherited<br>properties can be used<br>reliably on a fragment, as in<br>this example.</div>
		</td></tr></table>
	</div>

<h4 id="style-in-fragments">Styling inside fragments</h4>

	<p class="issue">
		Should this apply to continue:fragments only,
		or also to continue:paginate?
	</p>

	<p>
		The ''::nth-fragment()'' pseudo-element
		can also be used to style
		content inside of a <a>fragment box</a>.
		Unlike the ''::first-line'' and ''::first-letter'' pseudo-elements,
		the ''::nth-fragment()'' pseudo-element can be applied
		to parts of the selector other than the subject:
		in particular, it can match ancestors of the subject.
		However, the only CSS properties applied
		by rules with such selectors
		are those that apply
		to the ''::first-letter'' pseudo-element.
	</p>

	<p>
		To be more precise,
		when a rule's selector has ''::nth-fragment()'' pseudo-elements
		attached to parts of the selector other than the subject,
		the declarations in that rule apply to
		a fragment (or pseudo-element thereof) when:
	</p>
	<ol>
		<li>
			the declarations are for properties that apply to the
			''::first-letter'' pseudo-element,
		</li>
		<li>
			the declarations would apply to
			that fragment (or pseudo-element thereof)
			had those ''::nth-fragment()'' pseudo-elements been removed,
			with a particular association between
			each sequence of simple selectors and the element it matched,
			and
		</li>
		<li>
			for each removed ''::nth-fragment()'' pseudo-element,
			the fragment lives within a <a>fragment box</a>
			of the element associated in that association
			with the selector that the pseudo-element was attached to,
			and whose index matches the pseudo-element.
		</li>
	</ol>

	<div class="example">
		<table class="source-demo-pair"><tr><td>
<pre><code highlight="html">&lt;!DOCTYPE HTML&gt;
&lt;style&gt;
  .dark-columns {
    continue: fragments;
    width: 6em;
    height: 10em;
    float: left;
    margin-right: 1em;
    font: medium/1.25 Times New
      Roman, Times, serif;
  }
  .dark-columns::nth-fragment(1) {
    background: aqua; color: black;
  }
  .dark-columns::nth-fragment(1) :link {
    color: blue;
  }
  .dark-columns::nth-fragment(1) :visited {
    color: purple;
  }
  .dark-columns::nth-fragment(2) {
    background: navy; color: white;
  }
  .dark-columns::nth-fragment(2) :link {
    color: aqua;
  }
  .dark-columns::nth-fragment(2) :visited {
    color: fuchsia;
  }
&lt;/style&gt;
&lt;div class="dark-columns"&gt;
  <i>...</i>
&lt;/div&gt;</code></pre></td><td>
			<div class="dark-columns-demo one">In this<br><a href="http://en.wiktionary.org/wiki/example">example</a>, the<br>text flows<br>from one<br>light-colored<br>fragment into<br>another<br>dark-colored</div>
			<div class="dark-columns-demo two">fragment.  We<br>therefore want<br>different styles<br>for <a href="http://www.w3.org/Provider/Style/IntoContext.html">hyperlinks</a><br>in the different<br>fragments.</div>
		</td></tr></table>
	</div>


<h2 id=sbg-ext class=nonum>
Appendix B: Possible extensions for ''scrollbar-gutter''</h2>

<i>This section is non-normative.</i>

<div class=non-normative>

Issue: This section documents current attempts
at extending the 'scrollbar-gutter' property
to solve additional use cases.
However, it does not currently have consensus.
It is presented here to encourage discussion,
but non-experimental implementation is not recommended.

	<div class=example>
		This example exercises all the additional values of the 'scrollbar-gutter' property:
		* ''scrollbar-gutter: always'' on the scroll container
		* ''scrollbar-gutter: match-parent'' on each row inside the scroll container

		<figure>
			<figcaption>With classic scrollbars</figcaption>
			<img srcset="images/scrollbar-gutter-complex-classic.png 2x">
		</figure>
		<figure>
			<figcaption>With overlay scrollbars</figcaption>
			<img srcset="images/scrollbar-gutter-complex-overlay.png 2x">
		</figure>
	</div>

<pre class="propdef partial">
Name: scrollbar-gutter
New Values: auto | [ [ stable | always ] && both-edges? ] || match-parent
Applies to: all elements
</pre>

For <a>overlay scrollbars</a>,
the precise width of the <a>scrollbar gutter</a>, if present, is UA defined.
However, it must not be 0,
and it must not change based on user interactions with the page or the scrollbar
even if the scrollbar itself changes,
with the expectation that it covers
the width of the overlay scrollbar in its widest form,
to the extent that this is well defined.

The new values of this property have the following meaning:

<dl dfn-for="scrollbar-gutter" dfn-type=value>
	<dt><dfn>always</dfn>
	<dd>
	The <a>scrollbar gutter</a> is always present when
	'overflow' is ''overflow/scroll'', ''overflow/hidden'', or ''overflow/auto'',
	regardless of the type of scrollbar or
	of whether the box is overflowing.

	<div class=example>
		''scrollbar-gutter: always'' can be bused to solve the problem
		of (small) interactive elements near the edge of the element
		getting covered by an appearing overlay scrollbar.
		A representative case would be a basic todo list,
		with each line starting with some text and ending with a right-aligned checkbox.
		With a classic scrollbar, everything is fine,
		but an overlay scrollbar could obscure the check boxes and make them hard to interact with.

		<figure>
			<figcaption>Checkboxes adjacent to a classic scrollbar</figcaption>
			<img
				src=images/todo-classic.png
				alt="
					A scrollable todo list with checkboxes on the right edge,
					adjacent to the scrollbar.
					This situation poses no particular problem.">
		</figure>
		<figure>
			<figcaption>Checkboxes and an overlay scrollbar</figcaption>
			<img
				src=images/todo-overlay.png
				alt="
					A scrollable todo list with checkboxes on the right edge.
					When the overlay scrollbar is hidden,
					the situation poses no particular problem,
					but when it pops in,
					it covers the checkboxes,
					getting in the way of interacting with them.">
		</figure>

		Overlay Scrollbar are typically transient and disappear when not interacted with,
		so the checkboxes they cover are not impossible to use.
		But when the scrollbar is shown it does get in the way,
		and that makes for an awkward interaction.
		The author might try and solve the problem by adding some right padding,
		but (1) how much?,
		and (2) that padding isn't needed in the case of classic scrollbars.
		''scrollbar-gutter: always'' solves this problem,
		yielding an identical result in first case of classic scrollbars,
		but adding the desired gutter with overlay scrollbars:

		<figure>
			<figcaption>Checkboxes and an overlay scrollbar and ''scrollbar-gutter: always''</figcaption>
			<img
				src=images/todo-overlay-always.png
				alt="
					A scrollable todo list with checkboxes on the right edge,
					shifted left by a gutter.
					Whether the overlay scrollbar is hidden or visible,
					the checkboxes remain uncovered,
					and can be interacted with.">
		</figure>
	</div>

	<div class=issue>
		Apple is reluctant to add this value,
		as authors may use it too broadly,
		inserting gutters with overlay scrollbars even when not justified by interactive elements,
		defeating the space-saving advantage of overlay scrollbars.

		An alternative solution has been suggested:
		as the focus is interactive elements,
		maybe we could have a property that applies to the elements
		that needs to avoid being under the scrollbar.
		When turned on, it would enlarge the right or left margin of the element as appropriate
		by just the right value
		to push it out from under an overlay scrollbar if that's where it would end up,
		but would leave the element unchanged otherwise.

		Possibly, an addition toggle would cause the element
		to enlarge both its inline-end and inline-start margins or neither,
		rather than just one.
		This could typically be useful for block-level descendants of the scroller
		with visible borders or background:
		adding space on one side to avoid collisions with the overlay scrollbar
		would make them look off-center when the scrollbar disappears.
		Increasing the margin on both sides avoids that.

		Yet another possibility is to have a choice between growing the margin to protect the element,
		or growing the padding to protect the element's content.

		The syntax could be something like <code>scrollbar-avoid: none | [self | content] && both-edges?</code>.

		An interesting consideration is that this may alleviate the need for ''scrollbar-gutter: match-parent'',
		as it seems that situations that would have been addressed by ''scrollbar-gutter: stable'' or ''scrollbar-gutter: always'' on the parent
		and ''scrollbar-gutter: match-parent'' on the select children
		could instead be addressed by leaving the parent as ''scrollbar-gutter: auto''
		and using <code>scrollbar-avoid: self</code> or <code>scrollbar-avoid: content</code> on the relevant children.
	</div>

	<dt><dfn>match-parent</dfn>
	<dd>
	On a [=block-level=] box whose parent has a [=scrollbar gutter=] (or gutters on both edges),
	this causes the box to have [=scrollbar gutter=]
	on the same side(s) and of the same width as its parent’s gutter(s).
	Moreover,
	that gutter is made to overlap that of the parent box.

	<figure>
		<img
			srcset="images/match-parent.png 2x"
			alt="The gutter of a ''scrollbar-gutter: match-parent'' box overlaps with that of its parent.">
	</figure>

	If the box with ''scrollbar-gutter: match-parent'' has a non-zero border or margin
	on the side where the gutter is expected,
	then the size of that box's gutter is <code>parent.gutter - child.border - child.margin</code>,
	and the gutter+border+margin is what collapses with the parent's gutter.

	If the box with ''scrollbar-gutter/ match-parent'' is itself a [=scroll container=],
	depending on the type of scrollbars,
	on its 'overflow' property,
	and on the other values of the 'scrollbar-gutter' property,
	it may need additional gutter for its own scrollbars.
	This comes in addition to the amount of gutter added for the sake of the ''scrollbar-gutter/match-parent'' value
	and does not collapse with the parent's gutter.

	<div class=example>
		<figure>
			<figcaption>A scroller with an child whose background intrudes into the gutter, thanks to ''scrollbar-gutter/match-parent''</figcaption>
			<img srcset="images/match-parent-ex1.png 4x">
		</figure>
		<figure>
			<figcaption>A ''scrollbar-gutter/match-parent'' box inside a scroll container with classic scrollbars, ''overflow: auto'', and ''scrollbar-gutter: stable''</figcaption>
			<img srcset="images/match-parent-classic.png 2x" alt="The background of the match-parent element is visible in the gutter when the scrollbar isn't there.">
		</figure>
		<figure>
			<figcaption>A scrollable box with ''scrollbar-gutter/match-parent'' inside another scroll container</figcaption>
			<img srcset="images/match-parent-nested.png 2x" alt="The element has a double gutter, one for its own scrollbar, one to match its parent's.">
		</figure>
		<figure>
			<figcaption>A scrollable box with ''scrollbar-gutter/match-parent'' inside another scroll container, with bidi</figcaption>
			<img srcset="images/match-parent-bidi.png 2x" alt="The element has a two gutters, one for its own scrollbar, one to match its parent's, on opposite sides.">
		</figure>
		<figure>
			<figcaption>A scrollable box with ''scrollbar-gutter:match-parent stable'' inside another scroll container, with bidi</figcaption>
			<img srcset="images/match-parent-stable.png 2x" alt="The element has a two gutters, one for its own scrollbar (not shown, as it's not overflowing), one to match its parent's, on opposite sides.">
		</figure>
	</div>
</dl>

<div class=note>
Note: The following table summarizes the interaction of 'overflow' and 'scrollbar-gutter'
for different types of scrollbars,
showing in which case space is reserved for the <a>scrollbar gutter</a>.

<table class="data complex">
	<caption>
		Should space be reserved for the [=scrollbar gutter=]?</caption>
	<thead>
	<tr>
		<th rowspan=2>'overflow'
		<th rowspan=2>'scrollbar-gutter'
		<th colspan=2>Classic scrollbars
		<th rowspan=2>Overlay scrollbars <small>(whether overflowing or not)</small>
	<tr>
		<th>Overflowing
		<th>Not overflowing
	</thead>
	<tr>
		<th rowspan=3>''overflow/scroll''
		<th>''scrollbar-gutter/auto''
		<td>yes
		<td>yes
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>yes
		<td>yes
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>yes
		<td>yes
		<td>yes
	<tr>
		<th rowspan=3>''overflow/auto''
		<th>''scrollbar-gutter/auto''
		<td>yes
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>yes
		<td>yes
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>yes
		<td>yes
		<td>yes
	<tr>
		<th rowspan=3>''overflow/hidden''
		<th>''scrollbar-gutter/auto''
		<td>
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>yes
		<td>yes
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>yes
		<td>yes
		<td>yes
	<tr>
		<th rowspan=3>''overflow/visible'', ''overflow/clip''
		<th>''scrollbar-gutter/auto''
		<td>
		<td>
		<td>
	<tr>
		<th>''scrollbar-gutter/stable''
		<td>if ''force''
		<td>if ''force''
		<td>
	<tr>
		<th>''scrollbar-gutter/always''
		<td>if ''force''
		<td>if ''force''
		<td>if ''force''
</table>
</div>

</div>

<h2 id=privclass=nonum>
Appendix C: Privacy Considerations</h2>

This specification introduces no new privacy considerations.

<h2 id=sec class=nonum>
Appendix D: Security Considerations</h2>

This specification introduces no new security considerations.


<h2 id="changes" class="no-num">
Changes</h2>

<h3 id="recent-changes">
Recent Changes</h3>

	Significant changes since the <a href="https://www.w3.org/TR/2017/WD-css-overflow-4-20170613/">June 2017 Working Draft</a> include:
	<ul>
		<li>Moved in the definition of 'text-overflow' from [[CSS-UI-4]].
		<li>Moved the core definition of 'scrollbar-gutter' to [[CSS-OVERFLOW-3]]
			(it will be copied back here once this specification is undiffed)
			and shift exploratory 'scrollbar-gutter' extension ideas into an appendix.
		<li>Defined extension of 'overflow' and 'overflow-clip-margin' to apply to [=replaced elements=].
			How exactly this works is still <a href="https://github.com/w3c/csswg-drafts/issues/7144">still under discussion</a>.
			(<a href="https://github.com/w3c/csswg-drafts/issues/7144">Issue 7144</a>)
		<li>Defined [=longhands=] for 'overflow-clip-margin'.
			(<a href="https://github.com/w3c/csswg-drafts/issues/7245">Issue 7245</a>)
		<li>Change the 'line-clamp' shorthand syntax to allow omitting the 'max-lines' value
			(<a href="https://github.com/w3c/csswg-drafts/issues/9368">Issue 9368</a>)
		<li>Dropped the tentative <code>force</code> value for the 'scrollbar-gutter' property.
			(<a href="https://github.com/w3c/csswg-drafts/issues/9815">Issue 9815</a>)
	</ul>

<h3 id="changes-l3">
Changes Since Level 3</h3>

	ISSUE: TBD

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	<p>
		Thanks especially to the feedback from
		Rossen Atanassov,
		Bert Bos,
		Tantek Çelik,
		John Daggett,
		fantasai,
		Daniel Glazman,
		Vincent Hardy,
		H&aring;kon Wium Lie,
		Peter Linss,
		Robert O'Callahan,
		Florian Rivoal,
		Alan Stearns,
		Steve Zilles,
		and all the rest of the
		<a href="http://lists.w3.org/Archives/Public/www-style/">www-style</a> community.
